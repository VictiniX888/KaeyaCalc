{"version":3,"sources":["../webpack/bootstrap","WorkerHack.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","data/Data.ts","artifact/ArtifactSet.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","option/Option.ts","option/artifactSetOptions/ArtifactSetOption.ts","artifact/artifactSet/ArchaicPetra.ts","artifact/artifactSet/Berserker.ts","artifact/artifactSet/BlizzardStrayer.ts","artifact/artifactSet/BloodstainedChivalry.ts","artifact/artifactSet/BraveHeart.ts","artifact/artifactSet/CrimsonWitch.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","option/OptionUtils.ts","option/index.ts","option/Mixin.ts","talent/types.ts","artifact/artifactSet/EmblemOfSeveredFate.ts","artifact/artifactSet/Gambler.ts","artifact/artifactSet/GladiatorsFinale.ts","artifact/artifactSet/HeartOfDepth.ts","artifact/artifactSet/Instructor.ts","artifact/artifactSet/Lavawalker.ts","artifact/artifactSet/MaidenBeloved.ts","artifact/artifactSet/MartialArtist.ts","artifact/artifactSet/NoblesseOblige.ts","artifact/artifactSet/PaleFlame.ts","artifact/artifactSet/ResolutionOfSojourner.ts","artifact/artifactSet/RetracingBolide.ts","artifact/artifactSet/Shimenawa.ts","artifact/artifactSet/Tenacity.ts","artifact/artifactSet/Thundersoother.ts","artifact/artifactSet/TinyMiracle.ts","artifact/artifactSet/ViridescentVenerer.ts","artifact/artifactSet/WanderersTroupe.ts","artifact/ArtifactSetUtil.ts","character/Character.ts","stat/Stat.ts","artifact/types.ts","modifier/Reaction.ts","artifact/Artifact.ts","stat/Resistance.ts","modifier/CritType.ts","talent/TalentUtil.ts","character/albedo/AlbedoTalent.ts","character/albedo/Albedo.ts","option/characterOptions/CharacterOption.ts","character/aloy/AloyOption.ts","character/aloy/AloyPassive.ts","character/aloy/AloyTalent.ts","character/aloy/Aloy.ts","character/amber/AmberTalent.ts","character/amber/Amber.ts","character/ayaka/AyakaOption.ts","character/ayaka/AyakaTalent.ts","character/ayaka/Ayaka.ts","character/barbara/BarbaraTalent.ts","character/barbara/Barbara.ts","character/beidou/BeidouPassive.ts","character/beidou/BeidouTalent.ts","character/beidou/Beidou.ts","character/bennett/BennettTalent.ts","character/bennett/BennettTeamPassive.ts","character/bennett/Bennett.ts","character/chongyun/ChongyunOption.ts","character/chongyun/ChongyunTalent.ts","character/chongyun/Chongyun.ts","character/diluc/DilucTalent.ts","character/diluc/DilucOption.ts","character/diluc/Diluc.ts","character/diona/DionaTalent.ts","character/diona/Diona.ts","character/eula/EulaTalent.ts","character/eula/Eula.ts","character/fischl/FischlTalent.ts","character/fischl/Fischl.ts","character/ganyu/GanyuTalent.ts","character/ganyu/Ganyu.ts","character/hutao/HutaoPassive.ts","character/hutao/HutaoTalent.ts","character/hutao/HutaoOption.ts","character/hutao/Hutao.ts","character/jean/JeanTalent.ts","character/jean/Jean.ts","character/kaeya/KaeyaTalent.ts","character/kaeya/Kaeya.ts","character/kazuha/KazuhaTalent.ts","option/characterOptions/ElementalAbsorptionOption.ts","character/kazuha/KazuhaOption.ts","character/kazuha/Kazuha.ts","character/keqing/KeqingTalent.ts","character/keqing/Keqing.ts","character/klee/KleeTalent.ts","character/klee/Klee.ts","character/kokomi/KokomiPassive.ts","character/kokomi/KokomiTalent.ts","character/kokomi/KokomiOption.ts","character/kokomi/Kokomi.ts","character/lisa/LisaTalent.ts","character/lisa/Lisa.ts","character/mona/MonaOption.ts","character/mona/MonaTalent.ts","character/mona/Mona.ts","character/ningguang/NingguangTalent.ts","character/ningguang/Ningguang.ts","character/noelle/NoelleTalent.ts","character/noelle/NoelleOption.ts","character/noelle/Noelle.ts","character/qiqi/QiqiTalent.ts","character/qiqi/Qiqi.ts","character/raiden/RaidenPassive.ts","character/raiden/RaidenTalent.ts","character/raiden/RaidenOption.ts","character/raiden/Raiden.ts","character/razor/RazorTalent.ts","character/razor/Razor.ts","character/rosaria/RosariaTalent.ts","character/rosaria/Rosaria.ts","character/sara/SaraTalent.ts","character/sara/Sara.ts","character/sayu/SayuTalent.ts","character/sayu/SayuOption.ts","character/sayu/Sayu.ts","character/sucrose/SucroseOption.ts","character/sucrose/SucroseTalent.ts","character/sucrose/Sucrose.ts","character/tartaglia/TartagliaTalent.ts","character/tartaglia/TartagliaPassive.ts","character/tartaglia/TartagliaTeamPassive.ts","character/tartaglia/Tartaglia.ts","character/thoma/ThomaTalent.ts","character/thoma/ThomaPassive.ts","character/thoma/ThomaConstellation.ts","constellation/Constellation.ts","character/thoma/ThomaTeamPassive.ts","character/thoma/Thoma.ts","character/venti/VentiTalent.ts","character/venti/VentiOption.ts","character/venti/Venti.ts","character/xiangling/XianglingTalent.ts","character/xiangling/Xiangling.ts","character/xiao/XiaoOption.ts","character/xiao/XiaoTalent.ts","character/xiao/Xiao.ts","character/xingqiu/XingqiuTalent.ts","character/xingqiu/Xingqiu.ts","character/xinyan/XinyanTalent.ts","character/xinyan/Xinyan.ts","character/yanfei/YanfeiOption.ts","character/yanfei/YanfeiTalent.ts","character/yanfei/Yanfei.ts","character/yoimiya/YoimiyaOption.ts","character/yoimiya/YoimiyaPassive.ts","character/yoimiya/YoimiyaTalent.ts","character/yoimiya/Yoimiya.ts","character/zhongli/ZhongliTalent.ts","character/zhongli/ZhongliTeamPassive.ts","character/CharacterUtil.ts","character/zhongli/Zhongli.ts","weapon/Weapon.ts","option/weaponOptions/WeaponOption.ts","weapon/watatsumi/WatatsumiWavewalker.ts","weapon/watatsumi/Akuoumaru.ts","weapon/dragonsbane/DragonsBane.ts","weapon/dragonsbane/DragonsBanePassive.ts","weapon/engulfinglightning/EngulfingLightning.ts","weapon/engulfinglightning/EngulfingLightningPassive.ts","weapon/everlastingmoonglow/EverlastingMoonglow.ts","weapon/everlastingmoonglow/EverlastingMoonglowPassive.ts","weapon/luxurioussealord/LuxuriousSeaLord.ts","weapon/luxurioussealord/LuxuriousSeaLordPassive.ts","weapon/watatsumi/MouunsMoon.ts","weapon/polarstar/PolarStar.ts","weapon/polarstar/PolarStarPassive.ts","weapon/solarpearl/SolarPearl.ts","weapon/solarpearl/SolarPearlPassive.ts","weapon/staffofhoma/StaffOfHoma.ts","weapon/staffofhoma/StaffOfHomaPassive.ts","weapon/thecatch/TheCatch.ts","weapon/thecatch/TheCatchPassive.ts","weapon/whiteblind/Whiteblind.ts","weapon/whiteblind/WhiteblindPassive.ts","weapon/WeaponUtil.ts","weapon/watatsumi/WavebreakersFin.ts","option/characterOptions/ReactionOption.ts","teambuff/artifact/ArtifactTeamBuff.ts","save/Save.ts","dps/DPSCalculator.ts","modifier/DamageModifer.ts","optimization/Optimization.ts","optimization/OptimizerWorker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$RefreshReg$","$RefreshSig$","_defineProperty","obj","configurable","writable","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","minLen","toString","slice","constructor","from","test","_slicedToArray","isArray","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","TypeError","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","propMapping","propMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","constellations","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","weaponPassiveData","weaponPassiveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getWeaponPassiveData","getWeaponPassiveParams","refinement","passive","passiveParams","getAscensionBonusAt","getTalentData","emptyTalentParams","fill","NaN","getTalentParams","type","talentStats","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","getWeaponPassiveAt","ArtifactSet","_id","bonusThresholds","setBonusData","_pieces","options","stats","setBonusSets","setBonuses","this","data","getSetBonusSetsAt","getSetBonusesAt","getStats","getOptions","prevPieces","getAllSetBonuses","setBonus","threshold","bonus","bonuses","statBonus","stat","flatMap","extraStats","isNaN","Option","oldOptionIds","newOptions","includes","concat","keptOptionIds","statMixin","mixin","modifierMixin","_setPrototypeOf","setPrototypeOf","__proto__","_inherits","subClass","superClass","_getPrototypeOf","getPrototypeOf","_typeof","_possibleConstructorReturn","self","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","e","result","Super","NewTarget","ArtifactSetOption","ArchaicPetra","archaicPetra4Pc","params4Pc","ArchaicPetra4PcOption","choices","Berserker","berserker4Pc","critRate","BlizzardStrayer","blizzardStrayer4Pc","BloodstainedChivalry","bloodstainedChivalry4Pc","chargedDmgBonus","BraveHeart","braveHeart4Pc","dmgBonus","CrimsonWitch","crimsonWitch4Pc","param","find","stacks","pyroDmgBonus","_toConsumableArray","iter","isBooleanOption","option","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","Priority","getStatMixins","character","characterOptions","weapon","weaponOptions","artifactSets","artifactSetOptions","teamCharacters","teamOptions","artifactBuffOptions","characterPassiveMixins","getPassiveStatMixins","characterConstellationMixins","getConstellationStatMixins","weaponPassiveMixins","artifactSetMixins","artifactSet","teamPassiveMixins","getTeamStatMixin","characterOptionMixins","weaponOptionMixins","artifactSetOptionMixins","teamOptionMixins","artifactBuffOptionMixins","unarrangedMixins","groupedMixins","Map","priority","Normal","array","set","Last","TalentType","Element","AttackType","ScalingType","EmblemOfSeveredFate","emblemOfSeveredFate4Pc","burstDmgBonus","energyRecharge","Gambler","gambler2Pc","GladiatorsFinale","gladiatorsFinale4Pc","HeartOfDepth","heartOfDepth4Pc","normalDmgBonus","Instructor","instructor4Pc","Instructor4PcOption","elementalMastery","Lavawalker","lavawalker4Pc","MaidenBeloved","maidenBeloved4Pc","healedBonus","MartialArtist","martialArtist2Pc","martialArtist4Pc","params2Pc","NoblesseOblige","noblesseOblige2Pc","noblesseOblige4Pc","NoblesseOblige4PcOption","atkBonus","PaleFlame","paleFlame4Pc","physicalDmgBonus","ResolutionOfSojourner","resolutionOfSojourner4Pc","RetracingBolide","retracingBolide4Pc","Shimenawa","shimenawa4Pc","plungeDmgBonus","Tenacity","tenacity4Pc","Tenacity4PcOption","shieldStrength","Thundersoother","thundersoother4Pc","TinyMiracle","tinyMiracle2Pc","element","ViridescentVenerer","viridescentVenerer4Pc","ViridescentVenerer4PcOption","Cryo","Electro","Hydro","Pyro","modifier","enemyResReduction","add","WanderersTroupe","wanderersTroupe4Pc","resolutionofsojourner","tinymiracle","martialartist","gambler","gladiatorsfinale","viridescentvenerer","wandererstroupe","crimsonwitchofflames","noblesseoblige","emblemofseveredfate","braveheart","berserker","instructor","blizzardstrayer","thundersoother","lavawalker","maidenbeloved","bloodstainedchivalry","archaicpetra","retracingbolide","heartofdepth","tenacityofthemillelith","paleflame","shimenawasreminiscence","getArtifactSetConstructor","initArtifactSet","ArtifactSetConstructor","Character","hasAscended","constellationLevel","baseStats","statCurveMapping","talentFns","_level","_hasAscended","_constellationLevel","innateStats","passiveOptions","constellationOptions","getTalentFns","getInnateStatsAt","getCharacterOptions","ascensionLevel","getAscensionLevel","getPassives","getPassiveOptions","getConstellations","getConstellationsOptions","getTeamOptions","prevAscensionLevel","prevConstellationLevel","charStatCurves","entries","curve","multiplier","getCharacterOptionConstuctors","getAllPassives","getAllConstellations","constellation","getTeamPassive","teamPassive","unroll","convertStatValue","isPercentage","getTotalStatsAt","artifactSetBonuses","artifacts","talentAttackLevel","talentSkillLevel","talentBurstLevel","statMixins","characterStats","getBaseStatsAt","combinedStats","artifactStats","artifact","totalStats","baseAtk","flatAtk","flatDef","baseDef","defBonus","flatHp","baseHp","hpBonus","critDmg","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","skillDmgBonus","chargedCritRate","burstCritRate","overloadDmgBonus","burningDmgBonus","vaporizeDmgBonus","meltDmgBonus","ArtifactType","InputStat","rawValue","convertStatToDisplayValue","Reaction","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","prop","setMainStatValue","getArtifactMainStatValue","setProp","setInputValue","setValue","subStat","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","Anemo","Geo","Physical","prevValue","CritType","calculateBaseDamage","scalingType","flatDmg","Attack","Defense","Hp","calculateAmplifyingReactionMultiplier","reaction","amplifyingStrength","triggerElement","Melt","Vaporize","calculateAmplifyingStrengthMultiplier","reactionBonus","calculateTotalDamage","attackType","normalAttackFlatDmg","Charged","chargedAttackFlatDmg","Skill","skillFlatDmg","baseDmg","getDamageBonus","crit","critType","Crit","Average","Burst","Math","min","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","calculateHp","flatBonus","normalAttackSingle","damage","infusionNormal","infusion","normalAttackMulti","hits","damages","chargedAttackSingle","chargedAttackMulti","aimShot","aimShotCharged","plungeAttack","infusionPlunge","Plunge","skillSingle","skillMulti","burstSingle","burstMulti","typelessAttack","None","healingValue","flatHealing","calculateHealing","hpValue","shieldHpValue","dmgAbsorption","dionaHoldSkill","calculateDmgAbsorption","atkBuffValue","albedoTalents","chargedDmg","plungeDmg","lowPlungeDmg","highPlungeDmg","skillDmg","transientBlossomDmg","burstDmg","fatalBlossomDmg","Albedo","CharacterOption","children","aloyOptions","_talentAttackLevel","_talentBurstLevel","skillParams","a1Data","a4Data","a1Params","a4Params","aloyPassives","aloyTalents","aimShotDmg","chargedAimShotDmg","freezeBombDmg","chillwaterBombletDmg","Aloy","amberTalents","explosionDmg","baronBunnyHp","dmgPerWave","totalDmg","talentValue","Amber","ayakaOptions","ayakaTalents","cuttingDmg","bloomDmg","Ayaka","barbaraTalents","hpRegenContinuous","hpRegenOnHit","dropletDmg","hpRegen","Barbara","beidouPassives","beidouTalents","chargedSpinDmg","chargedFinalDmg","shieldHp","dmgBonusOnHitTaken","lightningDmg","Beidou","bennettTalents","pressDmg","chargeLevel1Dmg","chargeLevel2Dmg","hpRegenContinuousPerSecond","BennettOptionAtkBuff","bennettTeamPassive","atkBuff","Bennett","chongyunOptions","chongyunTalents","Chongyun","dilucTalents","slashingDmg","dot","dilucOptions","_talentSkillLevel","passiveData","Diluc","dionaTalents","icyPawDmgPerPaw","shieldHpPress","shieldHpHold","continuousFieldDmg","hpRegenContinuousTime","Diona","eulaTalents","holdDmg","icewhirlBrandDmg","lightfallSwordBaseDmg","lightfallSwordStackDmg","Eula","fischlTalents","ozDmg","summoningDmg","fallingThunderDmg","Fischl","ganyuTalents","aimShotChargeLevel1","frostflakeArrowDmg","frostflakeArrowBloomDmg","iceLotusHp","iceShardDmg","Ganyu","hutaoPassives","hutaoTalents","bloodBlossomDmg","burstDmgLowHp","hpRegenLowHp","hutaoOptions","flatAtkBonus","Hutao","jeanTalents","fieldEnterExitDmg","fieldActivationHealing","Jean","kaeyaTalents","Kaeya","kazuhaTalents","dotElementalAbsorption","elementalAbsorption","ElementalAbsoprtionOption","kazuhaOptions","Kazuha","keqingTalents","lightningStilettoDmg","thunderclapSlashDmg","burstInitDmg","consecutiveSlashDmg","lastAttackDmg","Keqing","kleeTalents","jumpyDumptyDmg","mineDmg","sparksNSplashDmg","Klee","kokomiPassives","kokomiHealingBonusDmg","kokomiTalents","getKokomiNormalAttackModifier","getKokomiChargedAttackModifier","rippleDmg","getKokomiSkillModifier","kokomiBurst","newModifier","normalAttackBonusDmg","chargedAttackBonusDmg","skillBonusDmg","kokomiOptions","Kokomi","lisaTalents","holdDmgStack0","holdDmgStack1","holdDmgStack2","holdDmgStack3","Lisa","monaOptions","burstParams","monaTalents","Mona","ningguangTalents","normalAtkDmg","starJadeDmg","jadeScreenHp","dmgPerGem","Ningguang","noelleTalents","healing","firstSwingDmg","noelleOptions","totalDef","Noelle","qiqiTalents","heraldOfFrostDmg","Qiqi","raidenPassives","raidenTalents","coordinatedAtkDmg","musouNoHitotachiDmg","getInitialResolveBonus","getAttackResolveBonus","resolveStacks","raidenOptions","Raiden","razorTalents","Razor","rosariaTalents","iceLanceDot","Rosaria","saraTalents","tenguJuuraiAmbushDmg","tenguJuuraiTitanbreakerDmg","tenguJuuraiStormclusterDmg","Sara","sayuTalents","fuufuuWindwheelDmg","fuufuuWhirlwindKickPressDmg","fuufuuWhirlwindKickHoldDmg","fuufuuWindwheelElementalDmg","fuufuuWhirlwindKickElementalDmg","activationDmg","activationHealing","mujimujiDarumaDmg","mujimujiDarumaHealing","sayuOptions","Sayu","sucroseOptions","sucroseTalents","Sucrose","tartagliaTalents","riptideFlashDmg","riptideBurstDmg","stanceChangeDmg","riptideSlashDmg","burstDmgMelee","burstDmgRanged","riptideBlastDmg","tartagliaAscension0","tartagliaPassives","tartagliaTeamPassive","Tartaglia","thomaTalents","shieldHpMax","fieryCollapseDmg","getThomaFieryCollapseModifier","thomaHpBonusDmg","thomaPassives","c6Params","ThomaOptionConstellation6","thomaConstellations","ConstellationBurst","thomaTeamPassive","Thoma","ventiTalents","ventiOptions","Venti","xianglingTalents","guobaDmg","swing1HitDmg","swing2HitDmg","swing3HitDmg","pyronadoDmg","Xiangling","xiaoOptions","xiaoTalents","Xiao","xingqiuTalents","swordRainDmg","Xingqiu","xinyanTalents","swingDmg","shieldHpLevel1","shieldHpLevel2","shieldHpLevel3","pyroDot","Xinyan","yanfeiOptions","yanfeiTalents","chargedDmgSeal0","chargedDmgSeal1","chargedDmgSeal2","chargedDmgSeal3","chargedDmgSeal4","Yanfei","yoimiyaOptions","yoimiyaSkill","yoimiyaPassives","yoimiyaTalents","getYoimiyaNormalAttackMultiplier","kindlingArrowDmg","aurousBlazeExplosionDmg","Yoimiya","zhongliTalents","stoneSteeleDmg","resonanceDmg","zhongliTeamPassive","values","characters","albedo","aloy","amber","ayaka","barbara","beidou","bennett","chongyun","diluc","diona","eula","fischl","ganyu","hutao","jean","kaeya","kazuha","keqing","klee","kokomi","lisa","mona","ningguang","noelle","qiqi","raiden","razor","rosaria","sara","sayu","sucrose","tartaglia","thoma","venti","xiangling","xiao","xingqiu","xinyan","yanfei","yoimiya","zhongli","getCharacterConstructor","initCharacter","CharacterConstructor","Weapon","rank","passiveDataSet","_weaponLevel","_refinement","getPassive","getStatsAt","weaponLevel","weaponStats","weaponStatCurves","shouldKeepValue","newOption","statBonuses","WeaponOption","watatsumiWavewalkerPassive","Akuoumaru","DragonsBane","dragonsBanePassive","EngulfingLightning","engulfingLightningPassive","EverlastingMoonglow","everlastingMoonglowPassive","LuxuriousSeaLord","luxuriousSeaLordPassive","MouunsMoon","PolarStar","polarStarPassive","SolarPearl","solarPearlPassive","StaffOfHoma","totalHp","staffOfHomaPassive","TheCatch","theCatchPassive","Whiteblind","whiteblindPassive","weapons","dragonsbane","engulfinglightning","staffofhoma","thecatch","wavebreakersfin","everlastingmoonglow","solarpearl","luxurioussealord","whiteblind","akuoumaru","polarstar","mouunsmoon","getWeaponConstructor","ReactionOption","artifactTeamBuffs","createArtifactSave","unpackSave","save","characterHasAscended","characterConstellationLevel","initWeapon","weaponHasAscended","weaponRefinement","artifactSave","artifactType","unpackArtifactSave","artifactSetId","artifactSetPieces","teamCharacterIds","characterOption","weaponOption","artifactSetOption","teamOption","OptionConstructor","artifactOption","allOptions","rotationTime","rotation","attackSave","talentType","talentId","calculateTalentValue","initializeAllOptions","characterOptionsNew","weaponOptionsNew","artifactSetOptionsNew","teamOptionsNew","artifactBuffOptionsNew","modifierMixins","getPassiveModifierMixins","getConstellationModifierMixins","getModifierMixins","getTeamModifierMixin","getDamageModifier","talentFn","substats","optimizeSubstats","possibleStats","maxRolls","erThreshold","calcParams","maxDmg","optimalSubstatRolls","optimalArtifacts","baseArtifacts","generateBaseArtifacts","baseStatMixins","baseEr","baseErRolls","ceil","erMainStatCount","generateRollCombinationsKqm","combination","erDistribution","rolls","inputStat","sIndex","setSubStatValue","addRollsToArtifacts","dmg","subStatRolls","mainStats","sameMainStatCount","currentMaxRolls","combinations","current","backCombinations","prevArtifacts","iArtifact","jArtifact","setSubStatProp","optimize","appState"],"mappings":"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","file":"894d93a0701d4c252f5e.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/kaeya-calc/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","// Stolen from Genshin Optimizer\n// No one knows why this works\n$RefreshReg$ = () => {};\n$RefreshSig$ = () => () => {};\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import type * as Data from './types';\nimport type { TalentType } from '../talent/types';\n\nimport characterDataRaw from './characterdata.json';\nimport characterAscensionBonusDataRaw from './characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from './characterstatcurvedata.json';\nimport weaponDataRaw from './weapondata.json';\nimport weaponAscensionBonusDataRaw from './weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from './weaponstatcurvedata.json';\nimport weaponPassiveDataRaw from './weaponpassivedata.json';\nimport talentDataRaw from './talentdata.json';\nimport artifactSetDataRaw from './artifactsetdata.json';\nimport artifactSetBonusDataRaw from './artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from './artifactmainstatdata.json';\n\nimport propMappingRaw from './propmapping.json';\nimport talentDescMappingRaw from './talentdescmapping.json';\nimport optionMappingRaw from './optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\nconst weaponPassiveData = weaponPassiveDataRaw as Record<\n  string,\n  Data.WeaponPassiveSetData\n>;\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n\n      constellations: talentDataSetRaw.constellations,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getWeaponPassiveData(id: string) {\n  return getData(id, weaponPassiveData);\n}\n\nexport function getWeaponPassiveParams(id: string, refinement: number) {\n  return getWeaponPassiveData(id).passive[refinement]?.passiveParams ?? [];\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentParams(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\nexport function getWeaponPassiveAt(\n  refinement: number,\n  passives: Data.WeaponPassiveSetData\n): Data.WeaponPassiveData | undefined {\n  return passives.passive[refinement];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import { getArtifactSetData, getArtifactSetBonusData } from '../data/Data';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../data/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces: number = 0) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  // Override in derived classes to implement special set bonuses\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [];\n  }\n\n  // Returns all special set bonuses that are active for given pieces\n  getSetBonusesAt(pieces: number): ArtifactSetBonus[] {\n    return this.getAllSetBonuses().filter(\n      (setBonus) => pieces >= setBonus.pieces\n    );\n  }\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n    });\n\n    // Special bonus stats, has to be handled individually\n    let extraStats = this.setBonuses.flatMap(\n      (setBonus) => setBonus.extraStats ?? []\n    );\n\n    extraStats.forEach((statBonus) => {\n      if (stats[statBonus.stat] !== undefined) {\n        stats[statBonus.stat] += statBonus.value;\n      } else {\n        stats[statBonus.stat] = statBonus.value;\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap(\n        (setBonus) => setBonus.options ?? []\n      );\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  statMixin: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  modifierMixin: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionPicker, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class ArchaicPetra extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [archaicPetra4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('archaicpetra', 4);\n\nexport class ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value !== '') {\n        stats[`${this.value}DmgBonus`] =\n          params4Pc[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n      }\n    },\n  };\n}\n\nconst archaicPetra4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ArchaicPetra4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Berserker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [berserker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('berserker', 4);\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst berserker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Berserker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BlizzardStrayer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [blizzardStrayer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('blizzardstrayer', 4);\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[1] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst blizzardStrayer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BlizzardStrayer4PcCryoOption, BlizzardStrayer4PcFrozenOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BloodstainedChivalry extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [bloodstainedChivalry4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n\nclass BloodstainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.chargedDmgBonus = params4Pc[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst bloodstainedChivalry4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BloodstainedChivalry4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BraveHeart extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [braveHeart4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('braveheart', 4);\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst braveHeart4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BraveHeart4PcOption],\n};\n","import {\n  getArtifactSetBonusData,\n  getArtifactSetBonusParams,\n} from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\n\nexport default class CrimsonWitch extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [crimsonWitch4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('crimsonwitchofflames', 4);\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n        const param = setBonusData[2].bonuses.find(\n          ({ stat }) => stat === 'pyroDmgBonus'\n        )?.value!!;\n\n        let stacks = this.value;\n        if (stacks > 3) stacks = 3;\n        stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst crimsonWitch4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [CrimsonWitch4PcOption],\n\n  extraStats: [\n    {\n      stat: 'overloadDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'burningDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'vaporizeDmgBonus',\n      value: params4Pc[1],\n    },\n    {\n      stat: 'meltDmgBonus',\n      value: params4Pc[2],\n    },\n  ],\n};\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).statMixin !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (option as unknown as IModifierApplicable).modifierMixin !== undefined;\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import Option from './Option';\n\nexport default Option;\nexport * from './OptionUtils';\n","import { isModifierApplicable, isStatsApplicable } from '.';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetOption from './artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from './characterOptions/CharacterOption';\nimport { IModifierApplicable, IStatsApplicable } from './Option';\nimport WeaponOption from './weaponOptions/WeaponOption';\n\nexport enum Priority {\n  Normal,\n  Last,\n}\n\ninterface Mixin {\n  priority?: Priority;\n}\n\nexport interface StatMixin extends Mixin {\n  apply: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number,\n    ascensionLevel: number\n  ) => void;\n}\n\n// Do not modify stats here, use StatMixin for that purpose\nexport interface ModifierMixin extends Mixin {\n  apply: (modifier: DamageModifier, stats: Stats) => void;\n}\n\nexport type GetStatMixinsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n};\n\nexport function getStatMixins({\n  character,\n  characterOptions,\n  weapon,\n  weaponOptions,\n  artifactSets,\n  artifactSetOptions,\n  teamCharacters,\n  teamOptions,\n  artifactBuffOptions,\n}: GetStatMixinsParams): StatMixin[] {\n  const characterPassiveMixins = character.getPassiveStatMixins();\n\n  const characterConstellationMixins = character.getConstellationStatMixins();\n\n  const weaponPassiveMixins = weapon.getPassiveStatMixins();\n\n  const artifactSetMixins = artifactSets.flatMap((artifactSet) =>\n    artifactSet.getStatMixins()\n  );\n\n  const teamPassiveMixins = teamCharacters\n    .map((character) => character.getTeamStatMixin())\n    .filter((mixin): mixin is StatMixin => mixin !== undefined);\n\n  const characterOptionMixins = characterOptions\n    .filter((option): option is CharacterOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const weaponOptionMixins = weaponOptions\n    .filter((option): option is WeaponOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const artifactSetOptionMixins = artifactSetOptions\n    .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const teamOptionMixins = teamOptions\n    .filter((option): option is CharacterOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const artifactBuffOptionMixins = artifactBuffOptions\n    .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const unarrangedMixins = [\n    ...characterPassiveMixins,\n    ...characterConstellationMixins,\n    ...weaponPassiveMixins,\n    ...artifactSetMixins,\n    ...teamPassiveMixins,\n    ...characterOptionMixins,\n    ...weaponOptionMixins,\n    ...artifactSetOptionMixins,\n    ...teamOptionMixins,\n    ...artifactBuffOptionMixins,\n  ];\n  const groupedMixins = new Map<Priority, StatMixin[]>();\n  unarrangedMixins.forEach((mixin) => {\n    const priority = mixin.priority ?? Priority.Normal;\n    const array = groupedMixins.get(priority);\n    if (!array) {\n      groupedMixins.set(priority, [mixin]);\n    } else {\n      array.push(mixin);\n    }\n  });\n\n  const statMixins = [\n    ...(groupedMixins.get(Priority.Normal) ?? []),\n    ...(groupedMixins.get(Priority.Last) ?? []),\n  ];\n\n  return statMixins;\n}\n\nexport type GetModifierMixinsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n};\n\nexport function getModifierMixins({\n  character,\n  characterOptions,\n  weapon,\n  weaponOptions,\n  artifactSets,\n  artifactSetOptions,\n  teamCharacters,\n  teamOptions,\n  artifactBuffOptions,\n}: GetModifierMixinsParams): ModifierMixin[] {\n  const characterPassiveMixins = character.getPassiveModifierMixins();\n\n  const characterConstellationMixins =\n    character.getConstellationModifierMixins();\n\n  const weaponPassiveMixins = weapon.getPassiveModifierMixins();\n\n  const artifactSetMixins = artifactSets.flatMap((artifactSet) =>\n    artifactSet.getModifierMixins()\n  );\n\n  const teamPassiveMixins = teamCharacters\n    .map((character) => character.getTeamModifierMixin())\n    .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n\n  const characterOptionMixins = characterOptions\n    .filter((option): option is CharacterOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const weaponOptionMixins = weaponOptions\n    .filter((option): option is WeaponOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const artifactSetOptionMixins = artifactSetOptions\n    .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const teamOptionMixins = teamOptions\n    .filter((option): option is CharacterOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const artifactBuffOptionMixins = artifactBuffOptions\n    .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const unarrangedMixins = [\n    ...characterPassiveMixins,\n    ...characterConstellationMixins,\n    ...weaponPassiveMixins,\n    ...artifactSetMixins,\n    ...teamPassiveMixins,\n    ...characterOptionMixins,\n    ...weaponOptionMixins,\n    ...artifactSetOptionMixins,\n    ...teamOptionMixins,\n    ...artifactBuffOptionMixins,\n  ];\n  const groupedMixins = new Map<Priority, ModifierMixin[]>();\n  unarrangedMixins.forEach((mixin) => {\n    const priority = mixin.priority ?? Priority.Normal;\n    const array = groupedMixins.get(priority);\n    if (!array) {\n      groupedMixins.set(priority, [mixin]);\n    } else {\n      array.push(mixin);\n    }\n  });\n\n  const modifierMixins = [\n    ...(groupedMixins.get(Priority.Normal) ?? []),\n    ...(groupedMixins.get(Priority.Last) ?? []),\n  ];\n\n  return modifierMixins;\n}\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport type TalentFn = (props: TalentProps) => TalentValue;\n\nexport type Talents = Record<string, Record<string, TalentFn>>;\n\nexport type TalentValueSet = Record<string, Record<string, TalentValue>>;\n\nexport interface TalentValue {\n  damage: number[];\n  element?: Element;\n}\n\nexport interface TalentProps {\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  None = 'none',\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class EmblemOfSeveredFate extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [emblemOfSeveredFate4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('emblemofseveredfate', 4);\n\nconst emblemOfSeveredFate4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  statMixin: {\n    priority: Priority.Last,\n    apply: (stats: Stats) => {\n      let burstDmgBonus = params4Pc[0] * stats.energyRecharge;\n      if (burstDmgBonus > params4Pc[1]) {\n        burstDmgBonus = params4Pc[1];\n      }\n\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n    },\n  },\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Gambler extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gambler2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('gambler', 2);\n\nconst gambler2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'skillDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class GladiatorsFinale extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gladiatorsFinale4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('gladiatorsfinale', 4);\n\nconst gladiatorsFinale4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for sword, polearm, claymore characters\n  // Did not make this an Option because this would likely not want to be disabled\n  // Calculation will be wrong if used on a catalyst, bow character\n  // Checking for that would require character weapon type to be implemented first\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class HeartOfDepth extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [heartOfDepth4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('heartofdepth', 4);\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst heartOfDepth4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [HeartOfDepth4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Instructor extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [instructor4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('instructor', 4);\n\nexport class Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.elementalMastery = params4Pc[1] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst instructor4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Instructor4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Lavawalker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [lavawalker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('lavawalker', 4);\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst lavawalker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Lavawalker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MaidenBeloved extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [maidenBeloved4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('maidenbeloved', 4);\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.healedBonus = params4Pc[0] + (stats.healedBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst maidenBeloved4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MaidenBeloved4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MartialArtist extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [martialArtist2Pc, martialArtist4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('martialartist', 2);\n\nconst martialArtist2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params2Pc[0],\n    },\n    {\n      stat: 'chargedDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('martialartist', 4);\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[2] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[2] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst martialArtist4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MartialArtist4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class NoblesseOblige extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [noblesseOblige2Pc, noblesseOblige4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('noblesseoblige', 2);\n\nconst noblesseOblige2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'burstDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('noblesseoblige', 4);\n\nexport class NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst noblesseOblige4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [NoblesseOblige4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class PaleFlame extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [paleFlame4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('paleflame', 4);\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value >= 1) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n\n      if (this.value >= 2) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.physicalDmgBonus = params4Pc[3] + (stats.physicalDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst paleFlame4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [PaleFlame4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class ResolutionOfSojourner extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [resolutionOfSojourner4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('resolutionofsojourner', 4);\n\nconst resolutionOfSojourner4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  extraStats: [\n    {\n      stat: 'chargedCritRate',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class RetracingBolide extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [retracingBolide4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('retracingbolide', 4);\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst retracingBolide4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [RetracingBolide4PcOption],\n};\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Shimenawa extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [shimenawa4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('shimenawasreminiscence', 4);\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const param = params4Pc[1];\n        stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst shimenawa4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Shimenawa4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Tenacity extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tenacity4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n\nexport class Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.shieldStrength = params4Pc[1] + (stats.shieldStrength ?? 0);\n      }\n    },\n  };\n}\n\nconst tenacity4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Tenacity4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Thundersoother extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [thundersoother4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('thundersoother', 4);\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst thundersoother4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Thundersoother4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class TinyMiracle extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tinyMiracle2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('tinymiracle', 2);\n\nconst tinyMiracle2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'].map(\n    (element) => {\n      return {\n        stat: `${element}Res`,\n        value: params2Pc[0],\n      };\n    }\n  ),\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionPicker, IModifierApplicable } from '../../option/Option';\n\nexport default class ViridescentVenerer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [viridescentVenerer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('viridescentvenerer', 4);\n\nexport class ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.enemyResReduction.add(this.value as Element, params4Pc[1]);\n      }\n    },\n  };\n}\n\nconst viridescentVenerer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ViridescentVenerer4PcOption],\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class WanderersTroupe extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [wanderersTroupe4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('wandererstroupe', 4);\n\nconst wanderersTroupe4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for catalyst, bow characters\n  // See Gladiator's Finale for more details\n  extraStats: [\n    {\n      stat: 'chargedDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { Stats } from '../data/types';\nimport ArtifactSet from './ArtifactSet';\nimport ArchaicPetra from './artifactSet/ArchaicPetra';\nimport Berserker from './artifactSet/Berserker';\nimport BlizzardStrayer from './artifactSet/BlizzardStrayer';\nimport BloodstainedChivalry from './artifactSet/BloodstainedChivalry';\nimport BraveHeart from './artifactSet/BraveHeart';\nimport CrimsonWitch from './artifactSet/CrimsonWitch';\nimport EmblemOfSeveredFate from './artifactSet/EmblemOfSeveredFate';\nimport Gambler from './artifactSet/Gambler';\nimport GladiatorsFinale from './artifactSet/GladiatorsFinale';\nimport HeartOfDepth from './artifactSet/HeartOfDepth';\nimport Instructor from './artifactSet/Instructor';\nimport Lavawalker from './artifactSet/Lavawalker';\nimport MaidenBeloved from './artifactSet/MaidenBeloved';\nimport MartialArtist from './artifactSet/MartialArtist';\nimport NoblesseOblige from './artifactSet/NoblesseOblige';\nimport PaleFlame from './artifactSet/PaleFlame';\nimport ResolutionOfSojourner from './artifactSet/ResolutionOfSojourner';\nimport RetracingBolide from './artifactSet/RetracingBolide';\nimport Shimenawa from './artifactSet/Shimenawa';\nimport Tenacity from './artifactSet/Tenacity';\nimport Thundersoother from './artifactSet/Thundersoother';\nimport TinyMiracle from './artifactSet/TinyMiracle';\nimport ViridescentVenerer from './artifactSet/ViridescentVenerer';\nimport WanderersTroupe from './artifactSet/WanderersTroupe';\n\nconst artifactSets: Record<string, typeof ArtifactSet> = {\n  resolutionofsojourner: ResolutionOfSojourner,\n  tinymiracle: TinyMiracle,\n  martialartist: MartialArtist,\n  gambler: Gambler,\n  gladiatorsfinale: GladiatorsFinale,\n  viridescentvenerer: ViridescentVenerer,\n  wandererstroupe: WanderersTroupe,\n  crimsonwitchofflames: CrimsonWitch,\n  noblesseoblige: NoblesseOblige,\n  emblemofseveredfate: EmblemOfSeveredFate,\n  braveheart: BraveHeart,\n  berserker: Berserker,\n  instructor: Instructor,\n  blizzardstrayer: BlizzardStrayer,\n  thundersoother: Thundersoother,\n  lavawalker: Lavawalker,\n  maidenbeloved: MaidenBeloved,\n  bloodstainedchivalry: BloodstainedChivalry,\n  archaicpetra: ArchaicPetra,\n  retracingbolide: RetracingBolide,\n  heartofdepth: HeartOfDepth,\n  tenacityofthemillelith: Tenacity,\n  paleflame: PaleFlame,\n  shimenawasreminiscence: Shimenawa,\n};\n\nfunction getArtifactSetConstructor(id: string): typeof ArtifactSet {\n  return artifactSets[id] ?? ArtifactSet;\n}\n\nexport function initArtifactSet(id: string = '', pieces?: number) {\n  const ArtifactSetConstructor = getArtifactSetConstructor(id);\n\n  return new ArtifactSetConstructor(id, pieces);\n}\n\nexport function getAllArtifactSetBonuses(artifactSets: ArtifactSet[]): Stats {\n  return artifactSets\n    .map((artifactSet) => artifactSet.stats)\n    .reduce((acc, stats) => {\n      Object.entries(stats).forEach(([stat, value]) => {\n        acc[stat] = value + (acc[stat] ?? 0);\n      });\n      return acc;\n    }, {} as Stats);\n}\n\n/* To be implemented\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\nRelic_ReactionWindEnhance,\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionFireEnhance,\n\n// Not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionElectricEnhance: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Requires info about team composition\nRelic_AbsorbTeamElemResist: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Probably can be implemented with a dropdown option for prev received elem dmg\nRelic_ElemDmgEnhanceElemResist: defaultSetBonus,\n*/\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n} from '../data/Data';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../data/types';\nimport type { Talents } from '../talent/types';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { CharacterPassive, TeamPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport Constellation from '../constellation/Constellation';\n\nexport default class Character {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    constellationLevel = 0\n  ) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n    this._constellationLevel = constellationLevel;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n    this.talentFns = this.getTalentFns();\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n    this.constellations = this.getConstellations(this.constellationLevel);\n    this.constellationOptions = this.getConstellationsOptions(\n      this.constellationLevel\n    );\n    this.teamOptions = this.getTeamOptions();\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n  talentFns: Talents = {};\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _constellationLevel: number = 0;\n  get constellationLevel(): number {\n    return this._constellationLevel;\n  }\n  set constellationLevel(value: number) {\n    const prevConstellationLevel = this.constellationLevel;\n    this._constellationLevel = value;\n\n    this.constellations = this.getConstellations(value);\n    this.constellationOptions = this.getConstellationsOptions(\n      value,\n      prevConstellationLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  constellations: Constellation[] = [];\n\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n  constellationOptions: CharacterOption[] = [];\n  teamOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Override in derived classes\n  getTalentFns(): Talents {\n    return {};\n  }\n\n  // Override in derived classes if character has base options\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return [];\n  }\n\n  getCharacterOptions(): CharacterOption[] {\n    return this.getCharacterOptionConstuctors().map((Option) => new Option());\n  }\n\n  // Override in derived classes\n  getAllPassives(): CharacterPassive[] {\n    return [];\n  }\n\n  // Returns passives that character should have based on their current ascension\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    return this.getAllPassives().filter(\n      (passive) => ascensionLevel >= passive.ascensionLevel\n    );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(\n    ascensionLevel: number,\n    prevAscensionLevel?: number\n  ): CharacterOption[] {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  // Override in derived classes\n  getAllConstellations(): Constellation[] {\n    return [];\n  }\n\n  getConstellations(constellationLevel: number): Constellation[] {\n    return this.getAllConstellations().filter(\n      (constellation) => constellationLevel >= constellation.constellationLevel\n    );\n  }\n\n  // getConstellations should be called before this if passives are updated\n  getConstellationsOptions(\n    constellationLevel: number,\n    prevConstellationLevel?: number\n  ): CharacterOption[] {\n    if (prevConstellationLevel === undefined || isNaN(prevConstellationLevel)) {\n      return this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n    }\n\n    if (constellationLevel > prevConstellationLevel) {\n      const newOptions = this.constellations\n        .filter(\n          ({ constellationLevel }) =>\n            constellationLevel > prevConstellationLevel\n        )\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n\n      return this.constellationOptions.concat(newOptions);\n    }\n\n    if (constellationLevel < prevConstellationLevel) {\n      const keptOptionIds = this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.constellationOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (constellationLevel === prevConstellationLevel)\n    return this.constellationOptions;\n  }\n\n  getConstellationStatMixins(): StatMixin[] {\n    return this.constellations\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getConstellationModifierMixins(): ModifierMixin[] {\n    return this.constellations\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n    const constellationOptions = this.constellationOptions;\n\n    return [...characterOptions, ...passiveOptions, ...constellationOptions];\n  }\n\n  // Override in derived classes to implement team buffs\n  getTeamPassive(): TeamPassive | undefined {\n    return undefined;\n  }\n\n  getTeamStatMixin(): StatMixin | undefined {\n    return this.getTeamPassive()?.statMixin;\n  }\n\n  getTeamModifierMixin(): ModifierMixin | undefined {\n    return this.getTeamPassive()?.modifierMixin;\n  }\n\n  getTeamOptions(): CharacterOption[] {\n    const teamPassive = this.getTeamPassive();\n\n    return (\n      teamPassive?.options?.flatMap((Option) => new Option().unroll()) ?? []\n    );\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from '../data/Data';\nimport { StatMixin } from '../option/Mixin';\nimport Weapon from '../weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputted value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\n// Returns a number representing the value to display (e.g. in stat inputs)\nexport function convertStatToDisplayValue(\n  value: number,\n  isPercentage: boolean\n) {\n  if (isPercentage) {\n    return value * 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin.apply(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n  if (combinedStats.burstCritRate !== undefined) {\n    totalStats.burstCritRate = combinedStats.burstCritRate;\n  }\n\n  if (combinedStats.overloadDmgBonus !== undefined) {\n    totalStats.overloadDmgBonus = combinedStats.overloadDmgBonus;\n  }\n  if (combinedStats.burningDmgBonus !== undefined) {\n    totalStats.burningDmgBonus = combinedStats.burningDmgBonus;\n  }\n  if (combinedStats.vaporizeDmgBonus !== undefined) {\n    totalStats.vaporizeDmgBonus = combinedStats.vaporizeDmgBonus;\n  }\n  if (combinedStats.meltDmgBonus !== undefined) {\n    totalStats.meltDmgBonus = combinedStats.meltDmgBonus;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatToDisplayValue, convertStatValue } from '../stat/Stat';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setInputValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n\n  setValue(value: number) {\n    this.value = value;\n    if (this.stat !== '') {\n      this.rawValue = convertStatToDisplayValue(\n        value,\n        propMapping[this.stat].isPercentage\n      );\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  pieces: number;\n  options?: typeof ArtifactSetOption[];\n  extraStats?: Stat[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n}\r\n\r\nexport default Reaction;\r\n","import { Stat, Stats } from '../data/types';\nimport { getArtifactMainStatValue } from '../data/Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatInputValue(i: number, value: number) {\n    this.subStats[i].setInputValue(value);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value + (stats[subStat.stat] ?? 0);\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import { Element } from '../talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import { Stats, TalentParams } from '../data/types';\nimport { AttackType, Element, ScalingType, TalentValue } from './types';\nimport Resistance from '../stat/Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport CritType from '../modifier/CritType';\n\n// Helper functions\n\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\n\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\n\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\n\nfunction calculateAmplifyingStrengthMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\n\nfunction calculateAmplifyingReactionMultiplier({\n  reaction,\n  stats,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  element: Element;\n}) {\n  const amplifyingStrength = calculateAmplifyingStrengthMultiplier(\n    reaction,\n    element\n  );\n\n  if (amplifyingStrength > 1) {\n    // Caulculate reactionbonus\n    let reactionBonus = 0;\n    switch (reaction) {\n      case Reaction.Vaporize:\n        reactionBonus = stats.vaporizeDmgBonus ?? 0;\n        break;\n      case Reaction.Melt:\n        reactionBonus = stats.meltDmgBonus ?? 0;\n        break;\n      default:\n        break;\n    }\n\n    // Calculate amplifying reaction multiplier\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingStrength * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\n\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let flatDmg = modifier.flatDmg;\n  if (attackType === AttackType.Normal) {\n    flatDmg += modifier.normalAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Charged) {\n    flatDmg += modifier.chargedAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Skill) {\n    flatDmg += modifier.skillFlatDmg ?? 0;\n  }\n\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === CritType.Crit) {\n    crit += stats.critDmg;\n  } else if (modifier.critType === CritType.Average) {\n    let critRate = stats.critRate;\n    if (attackType === AttackType.Charged) {\n      critRate += stats.chargedCritRate ?? 0;\n    } else if (attackType === AttackType.Burst) {\n      critRate += stats.burstCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateAmplifyingReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\n\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  const baseHealing = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n\n  // Incoming healing bonus is ignored because the healer's\n  // incoming healing bonus is not necessarily the same as the\n  // character being healed\n  return baseHealing * (1 + (stats.healingBonus ?? 0));\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n\n// Functions to calculate Talent Values\n\n// Used for all single-hit normal attacks\nexport function normalAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit normal attacks\nexport function normalAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: number[];\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for single-hit charged attacks\nexport function chargedAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for uncharged aim shots\nexport function aimShot({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const element = modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for charged aim shots\nexport function aimShotCharged({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier: multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all physical plunge attacks\nexport function plungeAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionPlunge ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Plunge,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all single-hit skill dmg\nexport function skillSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    scalingType,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit skills\nexport function skillMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for all single-hit burst dmg\nexport function burstSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    element,\n    multiplier,\n    scalingType,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit bursts\nexport function burstMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for damage that does not have an AttackType\nexport function typelessAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.None,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for healing skills/bursts\nexport function healingValue({\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const healing = calculateHealing({\n    stats,\n    multiplier,\n    flatHealing,\n    scalingType,\n  });\n\n  return {\n    damage: [healing],\n  };\n}\n\n// Used for all summons HP\nexport function hpValue({\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    damage: [hp],\n  };\n}\n\n// Used for all shields\nexport function shieldHpValue({\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    damage: [dmgAbsorption],\n  };\n}\n\n// Used for Bennett and Sara's ATK buffs\nexport function atkBuffValue({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const atkBonus = stats.baseAtk * multiplier;\n  return {\n    damage: [atkBonus],\n  };\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('albedo');\n\nconst albedoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  transientBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fatalBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoTalents: Talents = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport albedoTalents from './AlbedoTalent';\n\nexport default class Albedo extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('albedo', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return albedoTalents;\n  }\n}\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  children: CharacterOption[];\n\n  constructor(id: string = '', children: typeof CharacterOption[] = []) {\n    super(id);\n    this.children = children.map((Option) => new Option());\n  }\n\n  unroll(): CharacterOption[] {\n    return [this, ...this.children.flatMap((option) => option.unroll())];\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { Element, TalentType } from '../../talent/types';\r\nimport {\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n  IModifierApplicable,\r\n} from '../../option/Option';\r\n\r\nclass AloyOptionCoil\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('coil');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value > 0) {\r\n        const skillParams = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('aloy')\r\n        );\r\n\r\n        if (this.value >= 4) {\r\n          // Rushing Ice state\r\n          stats.normalDmgBonus = skillParams[7] + (stats.normalDmgBonus ?? 0);\r\n        } else {\r\n          stats.normalDmgBonus =\r\n            skillParams[this.value + 3] + (stats.normalDmgBonus ?? 0);\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value >= 4) {\r\n        modifier.infusionNormal = Element.Cryo;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyOptions = [AloyOptionCoil];\r\nexport default aloyOptions;\r\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport {\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [a1Data, a4Data] = getTalentData('aloy').passives;\r\nconst a1Params = a1Data.params;\r\nconst a4Params = a4Data.params;\r\n\r\nclass AloyOptionAscension1\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('aloyAscension1');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value) {\r\n        stats.atkBonus = a1Params[0] * 2 + (stats.atkBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension1: CharacterPassive = {\r\n  id: 'aloyAscension1',\r\n  ascensionLevel: 1,\r\n  options: [AloyOptionAscension1],\r\n};\r\n\r\nclass AloyOptionAscension4\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('aloyAscension4');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value > 0) {\r\n        let stacks = this.value;\r\n        if (stacks > 10) {\r\n          stacks = 10;\r\n        }\r\n\r\n        const cryoDmgBonus = a4Params[0] * stacks;\r\n        stats.cryoDmgBonus = cryoDmgBonus + (stats.cryoDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension4: CharacterPassive = {\r\n  id: 'aloyAscension4',\r\n  ascensionLevel: 4,\r\n  options: [AloyOptionAscension4],\r\n};\r\n\r\nconst aloyPassives = [aloyAscension1, aloyAscension4];\r\nexport default aloyPassives;\r\n","import {\r\n  Element,\r\n  TalentFn,\r\n  TalentProps,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\n\r\nconst talentData = getTalentData('aloy');\r\n\r\nconst aloyAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(0, 2),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloySkill: Record<string, TalentFn> = {\r\n  freezeBombDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chillwaterBombletDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyTalents: Talents = {\r\n  attack: aloyAttack,\r\n  skill: aloySkill,\r\n  burst: aloyBurst,\r\n};\r\n\r\nexport default aloyTalents;\r\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport aloyOptions from './AloyOption';\nimport aloyPassives from './AloyPassive';\nimport aloyTalents from './AloyTalent';\n\nexport default class Aloy extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('aloy', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return aloyTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return aloyOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return aloyPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('amber');\n\nconst amberAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst amberSkill: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  baronBunnyHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst amberBurst: Record<string, TalentFn> = {\n  dmgPerWave: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  totalDmg: ({ stats, modifier }: TalentProps) => {\n    const talentValue = burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    });\n    talentValue.damage[0] *= 18;\n    return talentValue;\n  },\n};\n\nconst amberTalents: Talents = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport amberTalents from './AmberTalent';\n\nexport default class Amber extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('amber', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return amberTalents;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ayaka');\n\nconst ayakaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[7]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaBurst: Record<string, TalentFn> = {\n  cuttingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  bloomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaTalents: Talents = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ayakaOptions from './AyakaOption';\nimport ayakaTalents from './AyakaTalent';\n\nexport default class Ayaka extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ayaka', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ayakaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ayakaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('barbara');\n\nconst barbaraAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraSkill: Record<string, TalentFn> = {\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  dropletDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraBurst: Record<string, TalentFn> = {\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraTalents: Talents = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport barbaraTalents from './BarbaraTalent';\n\nexport default class Barbara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('barbara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return barbaraTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('beidou').passives;\nconst a4Params = a4Data.params;\n\nclass BeidouOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('beidouAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = a4Params[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = a4Params[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst beidouAscension4: CharacterPassive = {\n  id: 'beidouAscension4',\n  ascensionLevel: 4,\n  options: [BeidouOptionAscension4],\n};\n\nconst beidouPassives = [beidouAscension4];\nexport default beidouPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  chargedAttackSingle,\n  shieldHpValue,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('beidou');\n\nconst beidouAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouSkill: Record<string, TalentFn> = {\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  baseDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  dmgBonusOnHitTaken: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouBurst: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightningDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouTalents: Talents = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalents;\n","import { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport beidouPassives from './BeidouPassive';\nimport beidouTalents from './BeidouTalent';\n\nexport default class Beidou extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('beidou', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return beidouTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return beidouPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  atkBuffValue,\n  burstSingle,\n  chargedAttackMulti,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillMulti,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('bennett');\n\nconst bennettAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargeLevel1Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n  chargeLevel2Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousPerSecond: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  atkBonus: ({ stats, modifier }: TalentProps) =>\n    atkBuffValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettTalents: Talents = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalents;\n","import {\n  IOptionBoolean,\n  IOptionNumber,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Stats } from '../../data/types';\nimport { getOptionValue } from '../../option/OptionUtils';\nimport { TeamPassive } from '../../passive/types';\n\nclass BennettOptionAtkBuff extends CharacterOption implements IOptionNumber {\n  value = 0;\n\n  constructor() {\n    super('bennettAtkBuff');\n  }\n}\n\nclass BennettOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('bennettBurst', [BennettOptionAtkBuff]);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const atkBuff = getOptionValue(this.children[0]) as number;\n        stats.flatAtk = atkBuff + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n}\n\nconst bennettTeamPassive: TeamPassive = {\n  id: 'bennettTeamPassive',\n  options: [BennettOptionBurst],\n};\nexport default bennettTeamPassive;\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport bennettTalents from './BennettTalent';\nimport bennettTeamPassive from './BennettTeamPassive';\n\nexport default class Bennett extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('bennett', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return bennettTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return bennettTeamPassive;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('chongyun');\n\nconst chongyunAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunTalents: Talents = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport chongyunOptions from './ChongyunOption';\nimport chongyunTalents from './ChongyunTalent';\n\nexport default class Chongyun extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('chongyun', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return chongyunTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return chongyunOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diluc');\n\nconst dilucAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucSkill: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucTalents: Talents = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalents;\n","import { Stats } from '../../data/types';\nimport { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      _talentBurstLevel: number,\n      ascensionLevel: number\n    ) => {\n      if (this.value && ascensionLevel >= 4) {\n        const params = getTalentData('diluc').passives.find(\n          (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n        )?.params;\n        const pyroDmgBonus = params?.[1] ?? NaN;\n\n        stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dilucTalents from './DilucTalent';\nimport dilucOptions from './DilucOption';\n\nexport default class Diluc extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diluc', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dilucTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return dilucOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  shieldHpValue,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diona');\n\nconst dionaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaSkill: Record<string, TalentFn> = {\n  icyPawDmgPerPaw: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpPress: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  shieldHpHold: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier: { ...modifier, dionaHoldSkill: true },\n    }),\n};\n\nconst dionaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  continuousFieldDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousTime: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaTalents: Talents = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dionaTalents from './DionaTalent';\n\nexport default class Diona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dionaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('eula');\n\nconst eulaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  icewhirlBrandDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordBaseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordStackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaTalents: Talents = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport eulaTalents from './EulaTalent';\n\nexport default class Eula extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('eula', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return eulaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('fischl');\n\nconst fischlAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlSkill: Record<string, TalentFn> = {\n  ozDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  summoningDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlBurst: Record<string, TalentFn> = {\n  fallingThunderDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlTalents: Talents = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport fischlTalents from './FischlTalent';\n\nexport default class Fischl extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('fischl', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return fischlTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  hpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ganyu');\n\nconst ganyuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  aimShotChargeLevel1: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowBloomDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  iceLotusHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuBurst: Record<string, TalentFn> = {\n  iceShardDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuTalents: Talents = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ganyuTalents from './GanyuTalent';\n\nexport default class Ganyu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ganyu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ganyuTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('hutao').passives;\nconst a4Params = a4Data.params;\n\nclass HuTaoOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('hutaoAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.pyroDmgBonus = a4Params[1] + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst hutaoAscension4: CharacterPassive = {\n  id: 'hutaoAscension4',\n  ascensionLevel: 4,\n  options: [HuTaoOptionAscension4],\n};\n\nconst hutaoPassives = [hutaoAscension4];\nexport default hutaoPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('hutao');\n\nconst hutaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoSkill: Record<string, TalentFn> = {\n  bloodBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgLowHp: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n\n  hpRegenLowHp: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoTalents: Talents = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      talentSkillLevel: number,\n      _talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let skillParams = getTalentParams(\n          TalentType.Skill,\n          talentSkillLevel,\n          getTalentData('hutao')\n        );\n\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n        let flatAtkBonus = totalHp * skillParams[1];\n        if (flatAtkBonus > stats.baseAtk * skillParams[6]) {\n          flatAtkBonus = stats.baseAtk * skillParams[6];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport hutaoPassives from './HutaoPassive';\nimport hutaoTalents from './HutaoTalent';\nimport hutaoOptions from './HutaoOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Hutao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('hutao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return hutaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return hutaoOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return hutaoPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('jean');\n\nconst jeanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieldEnterExitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  fieldActivationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanTalents: Talents = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport jeanTalents from './JeanTalent';\n\nexport default class Jean extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('jean', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return jeanTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kaeya');\n\nconst kaeyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaTalents: Talents = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kaeyaTalents from './KaeyaTalent';\n\nexport default class Kaeya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kaeya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kaeyaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kazuha');\n\nconst kazuhaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[2],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst kazuhaTalents: Talents = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.elementalAbsorption = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionPlunge = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kazuhaTalents from './KazuhaTalent';\nimport kazuhaOptions from './KazuhaOption';\n\nexport default class Kazuha extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kazuha', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kazuhaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kazuhaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('keqing');\n\nconst keqingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingSkill: Record<string, TalentFn> = {\n  lightningStilettoDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  thunderclapSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Electro,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  consecutiveSlashDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 8,\n      element: Element.Electro,\n      params: Array(8).fill(\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1]\n      ),\n      stats,\n      modifier,\n    }),\n\n  lastAttackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingTalents: Talents = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport keqingTalents from './KeqingTalent';\n\nexport default class Keqing extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('keqing', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return keqingTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('klee');\n\nconst kleeAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeSkill: Record<string, TalentFn> = {\n  jumpyDumptyDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  mineDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeBurst: Record<string, TalentFn> = {\n  sparksNSplashDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeTalents: Talents = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kleeTalents from './KleeTalent';\n\nexport default class Klee extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('klee', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kleeTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('kokomi').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst kokomiAscension0: CharacterPassive = {\r\n  id: 'kokomiAscension0',\r\n  ascensionLevel: 0,\r\n  options: [],\r\n  statMixin: {\r\n    apply: (stats: Stats) => {\r\n      stats.critRate = (stats.critRate ?? 0) - 1;\r\n      if (stats.critRate < 0) {\r\n        stats.critRate = 0;\r\n      }\r\n\r\n      stats.healingBonus = 0.25 + (stats.healingBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiAscension4: CharacterPassive = {\r\n  id: 'kokomiAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  modifierMixin: {\r\n    apply: (modifier: DamageModifier) => {\r\n      modifier.kokomiHealingBonusDmg = a4Params[0];\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiPassives = [kokomiAscension0, kokomiAscension4];\r\nexport default kokomiPassives;\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  burstSingle,\r\n  chargedAttackSingle,\r\n  healingValue,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  ScalingType,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('kokomi');\r\n\r\nconst kokomiAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier: getKokomiChargedAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiSkill: Record<string, TalentFn> = {\r\n  hpRegen: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  rippleDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiSkillModifier(stats, modifier),\r\n    }),\r\n};\r\n\r\nconst kokomiBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      scalingType: ScalingType.Hp,\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiTalents: Talents = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getKokomiNormalAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const normalAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[3] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.normalAttackFlatDmg =\r\n    normalAttackBonusDmg + (newModifier.normalAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiChargedAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const chargedAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[4] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.chargedAttackFlatDmg =\r\n    chargedAttackBonusDmg + (newModifier.chargedAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiSkillModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const skillBonusDmg =\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[8] * stats.flatHp;\r\n  newModifier.skillFlatDmg = skillBonusDmg + (newModifier.skillFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value) {\r\n        modifier.kokomiBurst = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kokomiPassives from './KokomiPassive';\nimport kokomiTalents from './KokomiTalent';\nimport kokomiOptions from './KokomiOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Kokomi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kokomi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kokomiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kokomiOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return kokomiPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('lisa');\n\nconst lisaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack0: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack1: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack2: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack3: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaTalents: Talents = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport lisaTalents from './LisaTalent';\n\nexport default class Lisa extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('lisa', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return lisaTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { TalentType } from '../../talent/types';\n\nclass MonaOptionOmen\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('omen');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('mona')\n        );\n\n        stats.dmgBonus = burstParams[9] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst monaOptions = [MonaOptionOmen];\nexport default monaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('mona');\n\nconst monaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaSkill: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaBurst: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaTalents: Talents = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport monaOptions from './MonaOption';\nimport monaTalents from './MonaTalent';\n\nexport default class Mona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('mona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return monaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return monaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ningguang');\n\nconst ningguangAttack: Record<string, TalentFn> = {\n  normalAtkDmg: ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  starJadeDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  jadeScreenHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangBurst: Record<string, TalentFn> = {\n  dmgPerGem: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangTalents: Talents = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ningguangTalents from './NingguangTalent';\n\nexport default class Ningguang extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ningguang', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ningguangTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  skillSingle,\n  shieldHpValue,\n  healingValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('noelle');\n\nconst noelleAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  firstSwingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleTalents: Talents = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('noelle')\n        );\n\n        const totalDef =\n          (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n          (stats.flatDef ?? 0);\n\n        stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Geo;\n      }\n    },\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport noelleTalents from './NoelleTalent';\nimport noelleOptions from './NoelleOption';\n\nexport default class Noelle extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('noelle', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return noelleTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return noelleOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  healingValue,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('qiqi');\n\nconst qiqiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  heraldOfFrostDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiTalents: Talents = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport qiqiTalents from './QiqiTalent';\n\nexport default class Qiqi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('qiqi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return qiqiTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport { Priority } from '../../option/Mixin';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('raiden').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst raidenAscension4: CharacterPassive = {\r\n  id: 'raidenAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  statMixin: {\r\n    priority: Priority.Last,\r\n    apply: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = a4Params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst raidenPassives = [raidenAscension4];\r\nexport default raidenPassives;\r\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  normalAttackSingle,\r\n  chargedAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  burstMulti,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('raiden');\r\n\r\nconst raidenAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(3, 5),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[10],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenSkill: Record<string, TalentFn> = {\r\n  skillDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  coordinatedAtkDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenBurst: Record<string, TalentFn> = {\r\n  musouNoHitotachiDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[0] + getInitialResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[4] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[5] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[6] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(7, 9)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[9] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(10, 12)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[13] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[14] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[15] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenTalents: Talents = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getInitialResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[1] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n\r\nfunction getAttackResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[2] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentParams, getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value) {\r\n        const params = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('raiden')\r\n        );\r\n\r\n        const burstDmgBonus = params[3] * 90;\r\n        stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value < 0) modifier.resolveStacks = 0;\r\n      else if (this.value > 60) modifier.resolveStacks = 60;\r\n      else modifier.resolveStacks = this.value;\r\n    },\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport raidenPassives from './RaidenPassive';\nimport raidenTalents from './RaidenTalent';\nimport raidenOptions from './RaidenOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Raiden extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('raiden', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return raidenTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return raidenOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return raidenPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('razor');\n\nconst razorAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorTalents: Talents = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport razorTalents from './RazorTalent';\n\nexport default class Razor extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('razor', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return razorTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('rosaria');\n\nconst rosariaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n  iceLanceDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaTalents: Talents = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport rosariaTalents from './RosariaTalent';\n\nexport default class Rosaria extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('rosaria', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return rosariaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  atkBuffValue,\r\n  burstSingle,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  TalentFn,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('sara');\r\n\r\nconst saraAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraSkill: Record<string, TalentFn> = {\r\n  tenguJuuraiAmbushDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  atkBonus: ({ stats, modifier }: TalentProps) =>\r\n    atkBuffValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraBurst: Record<string, TalentFn> = {\r\n  tenguJuuraiTitanbreakerDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  tenguJuuraiStormclusterDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraTalents: Talents = {\r\n  attack: saraAttack,\r\n  skill: saraSkill,\r\n  burst: saraBurst,\r\n};\r\n\r\nexport default saraTalents;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport saraTalents from './SaraTalent';\n\nexport default class Sara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return saraTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sayu');\n\nconst sayuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuSkill: Record<string, TalentFn> = {\n  fuufuuWindwheelDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickPressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickHoldDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWindwheelElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n\n  fuufuuWhirlwindKickElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[4],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sayuBurst: Record<string, TalentFn> = {\n  activationDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  activationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuTalents: Talents = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sayuTalents from './SayuTalent';\nimport sayuOptions from './SayuOption';\n\nexport default class Sayu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sayu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sayuTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sayuOptions;\n  }\n}\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sucrose');\n\nconst sucroseAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sucroseTalents: Talents = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sucroseOptions from './SucroseOption';\nimport sucroseTalents from './SucroseTalent';\n\nexport default class Sucrose extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sucrose', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sucroseTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sucroseOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  typelessAttack,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('tartaglia');\n\nconst tartagliaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n\n  riptideFlashDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  riptideBurstDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaSkill: Record<string, TalentFn> = {\n  stanceChangeDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(8, 10),\n      stats,\n      modifier,\n    }),\n\n  riptideSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaBurst: Record<string, TalentFn> = {\n  burstDmgMelee: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgRanged: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  riptideBlastDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaTalents: Talents = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nexport const tartagliaAscension0: CharacterPassive = {\n  id: 'tartagliaAscension0',\n  ascensionLevel: 0,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.talentAttackLevel += 1;\n    },\n  },\n};\n\nconst tartagliaPassives = [tartagliaAscension0];\nexport default tartagliaPassives;\n","import { TeamPassive } from '../../passive/types';\nimport { tartagliaAscension0 } from './TartagliaPassive';\n\nconst tartagliaTeamPassive: TeamPassive = tartagliaAscension0;\nexport default tartagliaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport tartagliaTalents from './TartagliaTalent';\nimport tartagliaPassives from './TartagliaPassive';\nimport tartagliaTeamPassive from './TartagliaTeamPassive';\n\nexport default class Tartaglia extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('tartaglia', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return tartagliaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return tartagliaPassives;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return tartagliaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('thoma');\n\nconst thomaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  shieldHpMax: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieryCollapseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier: getThomaFieryCollapseModifier(stats, modifier),\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatBonus: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaTalents: Talents = {\n  attack: thomaAttack,\n  skill: thomaSkill,\n  burst: thomaBurst,\n};\n\nexport default thomaTalents;\n\n// Helper functions\n\nfunction getThomaFieryCollapseModifier(\n  stats: Stats,\n  modifier: DamageModifier\n): DamageModifier {\n  if (!modifier.thomaHpBonusDmg) {\n    return modifier;\n  }\n\n  const flatDmg = modifier.thomaHpBonusDmg * stats.flatHp + modifier.flatDmg;\n\n  return { ...modifier, flatDmg };\n}\n","import { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('thoma').passives;\nconst a4Params = a4Data.params;\n\nconst thomaAscension4: CharacterPassive = {\n  id: 'thomaAscension4',\n  ascensionLevel: 4,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.thomaHpBonusDmg = a4Params[0];\n    },\n  },\n};\n\nconst thomaPassives = [thomaAscension4];\nexport default thomaPassives;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport Constellation, {\n  ConstellationBurst,\n  ConstellationSkill,\n} from '../../constellation/Constellation';\n\nconst [, , , , , { params: c6Params }] = getTalentData('thoma').constellations;\n\nexport function ThomaOptionConstellation6(id?: string) {\n  return class ThomaOptionConstellation6\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super(id ?? 'thomaConstellation6');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = c6Params[0] + (stats.normalDmgBonus ?? 0);\n          stats.chargedDmgBonus = c6Params[0] + (stats.chargedDmgBonus ?? 0);\n          stats.plungeDmgBonus = c6Params[0] + (stats.plungeDmgBonus ?? 0);\n        }\n      },\n    };\n  };\n}\n\nconst thomaConstellation3 = ConstellationSkill(3);\nconst thomaConstellation5 = ConstellationBurst(5);\n\nconst thomaConstellation6: Constellation = {\n  constellationLevel: 6,\n  options: [ThomaOptionConstellation6()],\n};\n\nconst thomaConstellations = [\n  thomaConstellation3,\n  thomaConstellation5,\n  thomaConstellation6,\n];\nexport default thomaConstellations;\n","import DamageModifier from '../modifier/DamageModifer';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { StatMixin, ModifierMixin } from '../option/Mixin';\n\nexport default interface Constellation {\n  constellationLevel: number;\n  options?: typeof CharacterOption[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n\nexport function ConstellationSkill(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentSkillLevel += 3;\n      },\n    },\n  };\n}\n\nexport function ConstellationBurst(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentBurstLevel += 3;\n      },\n    },\n  };\n}\n","import { TeamPassive } from '../../passive/types';\nimport { ThomaOptionConstellation6 } from './ThomaConstellation';\n\nconst thomaTeamPassive: TeamPassive = {\n  id: 'thomaTeamPassive',\n  options: [ThomaOptionConstellation6('thomaConstellation6Team')],\n};\n\nexport default thomaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport thomaTalents from './ThomaTalent';\nimport thomaPassives from './ThomaPassive';\nimport Constellation from '../../constellation/Constellation';\nimport thomaConstellations from './ThomaConstellation';\nimport thomaTeamPassive from './ThomaTeamPassive';\n\nexport default class Thoma extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('thoma', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return thomaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return thomaPassives;\n  }\n\n  getAllConstellations(): Constellation[] {\n    return thomaConstellations;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return thomaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('venti');\n\nconst ventiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst ventiTalents: Talents = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ventiTalents from './VentiTalent';\nimport ventiOptions from './VentiOption';\n\nexport default class Venti extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('venti', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ventiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ventiOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiangling');\n\nconst xianglingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingSkill: Record<string, TalentFn> = {\n  guobaDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingBurst: Record<string, TalentFn> = {\n  swing1HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  swing2HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  swing3HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  pyronadoDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingTalents: Talents = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xianglingTalents from './XianglingTalent';\n\nexport default class Xiangling extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiangling', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xianglingTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('xiao')\n        );\n\n        stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiao');\n\nconst xiaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoTalents: Talents = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n};\n\nexport default xiaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xiaoOptions from './XiaoOption';\nimport xiaoTalents from './XiaoTalent';\n\nexport default class Xiao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xiaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return xiaoOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, TalentFn, Talents, Element, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('xingqiu');\n\nconst xingqiuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(7, 9),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuBurst: Record<string, TalentFn> = {\n  swordRainDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuTalents: Talents = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xingqiuTalents from './XingqiuTalent';\n\nexport default class Xingqiu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xingqiu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xingqiuTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xinyan');\n\nconst xinyanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanSkill: Record<string, TalentFn> = {\n  swingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel1: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel2: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel3: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Physical,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  pyroDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanTalents: Talents = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xinyanTalents from './XinyanTalent';\n\nexport default class Xinyan extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xinyan', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xinyanTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('yanfei')\n        );\n        stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('yanfei');\n\nconst yanfeiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal0: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal1: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal2: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal3: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal4: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[15],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[16],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[17],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiTalents: Talents = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yanfeiOptions from './YanfeiOption';\nimport yanfeiTalents from './YanfeiTalent';\n\nexport default class Yanfei extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yanfei', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yanfeiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yanfeiOptions;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionNormal = Element.Pyro;\n        modifier.yoimiyaSkill = true;\n      }\n    },\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [a1Data] = getTalentData('yoimiya').passives;\nconst a1Params = a1Data.params;\n\nclass YoimiyaOptionAscension1\n  extends CharacterOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('yoimiyaAscension1');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      let pyroDmgBonus = this.value * a1Params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    },\n  };\n}\n\nconst yoimiyaAscension1: CharacterPassive = {\n  id: 'yoimiyaAscension1',\n  ascensionLevel: 1,\n  options: [YoimiyaOptionAscension1],\n};\n\nconst yoimiyaPassives = [yoimiyaAscension1];\nexport default yoimiyaPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('yoimiya');\n\nconst yoimiyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[0],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[3],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  kindlingArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  aurousBlazeExplosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaTalents: Talents = {\n  attack: yoimiyaAttack,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalents;\n\n// Helper functions\n\nfunction getYoimiyaNormalAttackMultiplier(\n  multiplier: number,\n  modifier: DamageModifier\n): number {\n  if (!modifier.yoimiyaSkill) {\n    return multiplier;\n  }\n\n  return (\n    multiplier *\n    getTalentParams(TalentType.Skill, modifier.talentSkillLevel, talentData)[3]\n  );\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yoimiyaOptions from './YoimiyaOption';\nimport yoimiyaPassives from './YoimiyaPassive';\nimport yoimiyaTalents from './YoimiyaTalent';\n\nexport default class Yoimiya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yoimiya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yoimiyaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yoimiyaOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return yoimiyaPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('zhongli');\n\nconst zhongliAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliSkill: Record<string, TalentFn> = {\n  stoneSteeleDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  resonanceDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliTalents: Talents = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalents;\n","import { IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { TeamPassive } from '../../passive/types';\n\nclass ZhongliOptionShield extends CharacterOption implements IOptionBoolean {\n  value = false;\n\n  constructor() {\n    super('zhongliShield');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        Object.values(Element).forEach((element) =>\n          modifier.enemyResReduction.set(element, 0.2)\n        );\n      }\n    },\n  };\n}\n\nconst zhongliTeamPassive: TeamPassive = {\n  id: 'zhongliTeamPassive',\n  options: [ZhongliOptionShield],\n};\nexport default zhongliTeamPassive;\n","import Albedo from './albedo/Albedo';\nimport Aloy from './aloy/Aloy';\nimport Amber from './amber/Amber';\nimport Ayaka from './ayaka/Ayaka';\nimport Barbara from './barbara/Barbara';\nimport Beidou from './beidou/Beidou';\nimport Bennett from './bennett/Bennett';\nimport Character from './Character';\nimport Chongyun from './chongyun/Chongyun';\nimport Diluc from './diluc/Diluc';\nimport Diona from './diona/Diona';\nimport Eula from './eula/Eula';\nimport Fischl from './fischl/Fischl';\nimport Ganyu from './ganyu/Ganyu';\nimport Hutao from './hutao/Hutao';\nimport Jean from './jean/Jean';\nimport Kaeya from './kaeya/Kaeya';\nimport Kazuha from './kazuha/Kazuha';\nimport Keqing from './keqing/Keqing';\nimport Klee from './klee/Klee';\nimport Kokomi from './kokomi/Kokomi';\nimport Lisa from './lisa/Lisa';\nimport Mona from './mona/Mona';\nimport Ningguang from './ningguang/Ningguang';\nimport Noelle from './noelle/Noelle';\nimport Qiqi from './qiqi/Qiqi';\nimport Raiden from './raiden/Raiden';\nimport Razor from './razor/Razor';\nimport Rosaria from './rosaria/Rosaria';\nimport Sara from './sara/Sara';\nimport Sayu from './sayu/Sayu';\nimport Sucrose from './sucrose/Sucrose';\nimport Tartaglia from './tartaglia/Tartaglia';\nimport Thoma from './thoma/Thoma';\nimport Venti from './venti/Venti';\nimport Xiangling from './xiangling/Xiangling';\nimport Xiao from './xiao/Xiao';\nimport Xingqiu from './xingqiu/Xingqiu';\nimport Xinyan from './xinyan/Xinyan';\nimport Yanfei from './yanfei/Yanfei';\nimport Yoimiya from './yoimiya/Yoimiya';\nimport Zhongli from './zhongli/Zhongli';\n\nconst characters: Record<string, typeof Character> = {\n  albedo: Albedo,\n  aloy: Aloy,\n  amber: Amber,\n  ayaka: Ayaka,\n  barbara: Barbara,\n  beidou: Beidou,\n  bennett: Bennett,\n  chongyun: Chongyun,\n  diluc: Diluc,\n  diona: Diona,\n  eula: Eula,\n  fischl: Fischl,\n  ganyu: Ganyu,\n  hutao: Hutao,\n  jean: Jean,\n  kaeya: Kaeya,\n  kazuha: Kazuha,\n  keqing: Keqing,\n  klee: Klee,\n  kokomi: Kokomi,\n  lisa: Lisa,\n  mona: Mona,\n  ningguang: Ningguang,\n  noelle: Noelle,\n  qiqi: Qiqi,\n  raiden: Raiden,\n  razor: Razor,\n  rosaria: Rosaria,\n  sara: Sara,\n  sayu: Sayu,\n  sucrose: Sucrose,\n  tartaglia: Tartaglia,\n  thoma: Thoma,\n  venti: Venti,\n  xiangling: Xiangling,\n  xiao: Xiao,\n  xingqiu: Xingqiu,\n  xinyan: Xinyan,\n  yanfei: Yanfei,\n  yoimiya: Yoimiya,\n  zhongli: Zhongli,\n};\n\nfunction getCharacterConstructor(id: string): typeof Character {\n  return characters[id] ?? Character;\n}\n\nexport function initCharacter(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  constellationLevel?: number\n): Character {\n  const CharacterConstructor = getCharacterConstructor(id);\n\n  return new CharacterConstructor(id, level, hasAscended, constellationLevel);\n}\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport zhongliTalents from './ZhongliTalent';\nimport zhongliTeamPassive from './ZhongliTeamPassive';\n\nexport default class Zhongli extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('zhongli', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return zhongliTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return zhongliTeamPassive;\n  }\n}\n","import {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  WeaponPassiveData,\n  WeaponPassiveSetData,\n} from '../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getWeaponPassiveAt,\n  getWeaponPassiveData,\n} from '../data/Data';\nimport { getOptionValue, setOptionValue } from '../option';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../passive/types';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    refinement: number = 1\n  ) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n    this._refinement = refinement;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.passiveDataSet = getWeaponPassiveData(value);\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(\n        this.refinement,\n        this.passiveDataSet\n      );\n    }\n    this.passive = this.getPassive(this.refinement);\n    this.passiveOptions = this.getPassiveOptions();\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  passiveDataSet?: WeaponPassiveSetData;\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  private _refinement: number = 1;\n  get refinement(): number {\n    return this._refinement;\n  }\n  set refinement(value: number) {\n    this._refinement = value;\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(value, this.passiveDataSet);\n      this.passive = this.getPassive(value);\n      this.passiveOptions = this.getPassiveOptions(true);\n    }\n  }\n\n  stats: Stats = {};\n  passiveData?: WeaponPassiveData;\n  passive?: WeaponPassive;\n  passiveOptions: WeaponOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n\n  // Override in derived classes to implement special passives\n  // Only returns the extra passive bonuses, excluding the direct stat bonuses\n  // To be called when passive should update (e.g. id or refinement change)\n  getPassive(_refinement: number): WeaponPassive | undefined {\n    return;\n  }\n\n  // getPassive should be called before this if passives are updated\n  getPassiveOptions(shouldKeepValue: boolean = false) {\n    let newOptions = (this.passive?.options ?? []).map(\n      (Option) => new Option()\n    );\n\n    if (shouldKeepValue) {\n      this.passiveOptions.forEach((option) => {\n        let newOption = newOptions.find(\n          (newOption) => newOption.id === option.id\n        );\n        if (newOption !== undefined) {\n          setOptionValue(newOption, getOptionValue(option));\n        }\n      });\n    }\n\n    return newOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    let statMixins = [];\n\n    if (this.passive?.statMixin !== undefined) {\n      statMixins.push(this.passive.statMixin);\n    }\n\n    if (this.passiveData?.statBonuses !== undefined) {\n      this.passiveData.statBonuses.forEach(({ stat, value }) => {\n        statMixins.push({\n          apply: (stats: Stats) => {\n            stats[stat] = value + (stats[stat] ?? 0);\n          },\n        });\n      });\n    }\n\n    return statMixins;\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    if (this.passive?.modifierMixin === undefined) {\n      return [];\n    }\n\n    return [this.passive.modifierMixin];\n  }\n}\n","import Option from '../Option';\n\nexport default class WeaponOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport const watatsumiWavewalkerPassive =\n  (id: string) =>\n  (refinement: number): WeaponPassive => {\n    const params = getWeaponPassiveParams(id, refinement);\n\n    class WatatsumiWavewalkerOption\n      extends WeaponOption\n      implements IOptionNumber, IStatsApplicable\n    {\n      value = 0;\n\n      constructor() {\n        super('watatsumiWavewalkerPassive');\n      }\n\n      statMixin = {\n        apply: (stats: Stats) => {\n          if (this.value > 0) {\n            let burstDmgBonus = this.value * (params[0] / 100);\n            if (burstDmgBonus > params[1]) {\n              burstDmgBonus = params[1];\n            }\n            stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n          }\n        },\n      };\n    }\n\n    return {\n      id,\n      options: [WatatsumiWavewalkerOption],\n    };\n  };\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class Akuoumaru extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('akuoumaru', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('akuoumaru')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { dragonsBanePassive } from './DragonsBanePassive';\n\nexport default class DragonsBane extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('dragonsbane', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return dragonsBanePassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function dragonsBanePassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('dragonsbane', refinement);\n\n  class DragonsBaneOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('dragonsBanePassive');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'dragonsBane',\n    options: [DragonsBaneOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { engulfingLightningPassive } from './EngulfingLightningPassive';\n\nexport default class EngulfingLightning extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('engulfinglightning', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return engulfingLightningPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function engulfingLightningPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('engulfinglightning', refinement);\n\n  class EngulfingLightningOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('engulfingLightningEnergyRecharge');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.energyRecharge = params[2] + (stats.energyRecharge ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'engulfingLightning',\n    options: [EngulfingLightningOption],\n\n    statMixin: {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        let atkBonus = (stats.energyRecharge - 1) * params[0];\n        if (atkBonus > params[1]) {\n          atkBonus = params[1];\n        }\n\n        stats.atkBonus = atkBonus + (stats.atkBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { everlastingMoonglowPassive } from './EverlastingMoonglowPassive';\n\nexport default class EverlastingMoonglow extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('everlastingmoonglow', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return everlastingMoonglowPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function everlastingMoonglowPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('everlastingmoonglow', refinement);\n\n  return {\n    id: 'everlastingMoonglow',\n    options: [],\n    modifierMixin: {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        modifier.normalAttackFlatDmg =\n          params[1] * (stats.flatHp ?? 0) + (modifier.normalAttackFlatDmg ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { luxuriousSeaLordPassive } from './LuxuriousSeaLordPassive';\n\nexport default class LuxuriousSeaLord extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('luxurioussealord', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return luxuriousSeaLordPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function luxuriousSeaLordPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('luxurioussealord', refinement);\n\n  return {\n    id: 'luxuriousSeaLord',\n    options: [],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class MouunsMoon extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('mouunsmoon', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('mouunsmoon')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { polarStarPassive } from './PolarStarPassive';\n\nexport default class PolarStar extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('polarstar', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return polarStarPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function polarStarPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('polarstar', refinement);\n\n  class PolarStarOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('polarStarStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        let stacks = this.value;\n\n        if (stacks > 0) {\n          if (stacks > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[stacks + 1] + (stats.atkBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'polarStar',\n    options: [PolarStarOption],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { solarPearlPassive } from './SolarPearlPassive';\n\nexport default class SolarPearl extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('solarpearl', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return solarPearlPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function solarPearlPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('solarpearl', refinement);\n\n  class SolarPearlOptionNormalAttack\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlNormalAttack');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n          stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  class SolarPearlOptionSkillBurst\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlSkillBurst');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'solarPearl',\n    options: [SolarPearlOptionNormalAttack, SolarPearlOptionSkillBurst],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { staffOfHomaPassive } from './StaffOfHomaPassive';\n\nexport default class StaffOfHoma extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('staffofhoma', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return staffOfHomaPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function staffOfHomaPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('staffofhoma', refinement);\n\n  class StaffOfHomaOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('staffOfHomaAtkBonus');\n    }\n\n    statMixin = {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n\n        let flatAtkBonus = totalHp * params[1];\n        if (this.value) {\n          flatAtkBonus += totalHp * params[2];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      },\n    };\n  }\n\n  return {\n    id: 'staffOfHoma',\n    options: [StaffOfHomaOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { theCatchPassive } from './TheCatchPassive';\n\nexport default class TheCatch extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('thecatch', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return theCatchPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function theCatchPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('thecatch', refinement);\n\n  return {\n    id: 'theCatch',\n    options: [],\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        stats.burstCritRate = params[1] + (stats.burstCritRate ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { whiteblindPassive } from './WhiteblindPassive';\n\nexport default class Whiteblind extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('whiteblind', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return whiteblindPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function whiteblindPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('whiteblind', refinement);\n\n  class WhiteblindOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('whiteblindStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value > 0) {\n          let stacks = this.value;\n          if (this.value > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[0] * stacks + (stats.atkBonus ?? 0);\n          stats.defBonus = params[0] * stacks + (stats.defBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'whiteblind',\n    options: [WhiteblindOption],\n  };\n}\n","import Weapon from './Weapon';\nimport Akuoumaru from './watatsumi/Akuoumaru';\nimport DragonsBane from './dragonsbane/DragonsBane';\nimport EngulfingLightning from './engulfinglightning/EngulfingLightning';\nimport EverlastingMoonglow from './everlastingmoonglow/EverlastingMoonglow';\nimport LuxuriousSeaLord from './luxurioussealord/LuxuriousSeaLord';\nimport MouunsMoon from './watatsumi/MouunsMoon';\nimport PolarStar from './polarstar/PolarStar';\nimport SolarPearl from './solarpearl/SolarPearl';\nimport StaffOfHoma from './staffofhoma/StaffOfHoma';\nimport TheCatch from './thecatch/TheCatch';\nimport Whiteblind from './whiteblind/Whiteblind';\nimport WavebreakersFin from './watatsumi/WavebreakersFin';\n\nconst weapons: Record<string, typeof Weapon> = {\n  // Polearm\n  dragonsbane: DragonsBane,\n  engulfinglightning: EngulfingLightning,\n  staffofhoma: StaffOfHoma,\n  thecatch: TheCatch,\n  wavebreakersfin: WavebreakersFin,\n\n  // Catalyst\n  everlastingmoonglow: EverlastingMoonglow,\n  solarpearl: SolarPearl,\n\n  // Claymore\n  luxurioussealord: LuxuriousSeaLord,\n  whiteblind: Whiteblind,\n  akuoumaru: Akuoumaru,\n\n  // Bow\n  polarstar: PolarStar,\n  mouunsmoon: MouunsMoon,\n};\n\nfunction getWeaponConstructor(id: string): typeof Weapon {\n  return weapons[id] ?? Weapon;\n}\n\nexport function initWeapon(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  refinement?: number\n): Weapon {\n  const WeaponConstructor = getWeaponConstructor(id);\n\n  return new WeaponConstructor(id, level, hasAscended, refinement);\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class WavebreakersFin extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('wavebreakersfin', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('wavebreakersfin')(refinement);\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport Reaction from '../../modifier/Reaction';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ReactionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = Object.values(Reaction);\n\n  constructor() {\n    super('reaction');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.reaction = this.value as Reaction;\n      } else {\n        modifier.reaction = Reaction.None;\n      }\n    },\n  };\n}\n\nexport default ReactionOption;\n","import { ArchaicPetra4PcOption } from '../../artifact/artifactSet/ArchaicPetra';\nimport { Instructor4PcOption } from '../../artifact/artifactSet/Instructor';\nimport { NoblesseOblige4PcOption } from '../../artifact/artifactSet/NoblesseOblige';\nimport { Tenacity4PcOption } from '../../artifact/artifactSet/Tenacity';\nimport { ViridescentVenerer4PcOption } from '../../artifact/artifactSet/ViridescentVenerer';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\n\nconst artifactTeamBuffs: Record<string, typeof ArtifactSetOption> = {\n  archaicPetra4Pc: ArchaicPetra4PcOption,\n  instructor4Pc: Instructor4PcOption,\n  noblesseOblige4Pc: NoblesseOblige4PcOption,\n  tenacity4Pc: Tenacity4PcOption,\n  viridescentVenerer4Pc: ViridescentVenerer4PcOption,\n};\n\nexport default artifactTeamBuffs;\n","import { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport { ArtifactType, InputStat } from '../artifact/types';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport { Attack } from '../component/DPSColumn';\nimport Option from '../option/Option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n  characterConstellationLevel?: number;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n  weaponRefinement?: number;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  teamCharacterIds?: string[];\n\n  characterOptions?: { id?: string; value?: unknown }[];\n  weaponOptions?: { id?: string; value?: unknown }[];\n  artifactSetOptions?: { id?: string; value?: unknown }[];\n  teamOptions?: { id?: string; value?: unknown }[];\n  artifactBuffOptions?: { id?: string; value?: unknown }[];\n\n  rotationTime?: number;\n  rotation?: AttackSave[];\n}\n\nexport type Saves = Record<string, Save>;\n\nexport interface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\ninterface AttackSave {\n  talentType?: string;\n  talentId?: string;\n  multiplier?: number;\n  options?: { id?: string; value?: unknown }[];\n}\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createArtifactSave(artifact: Artifact): ArtifactSave {\n  return {\n    type: artifact.type,\n    rarity: artifact.rarity,\n    level: artifact.level,\n    mainStat: artifact.mainStat.stat,\n    subStats: artifact.subStats.map((subStat) => createInputStatSave(subStat)),\n  };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n    characterConstellationLevel: appState.character.constellationLevel,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n    weaponRefinement: appState.weapon.refinement,\n\n    artifacts: appState.artifacts.map((artifact) =>\n      createArtifactSave(artifact)\n    ),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    teamCharacterIds: appState.teamCharacters.map((character) => character.id),\n\n    characterOptions: appState.characterOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    weaponOptions: appState.weaponOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactSetOptions: appState.artifactSetOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    teamOptions: appState.teamOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactBuffOptions: appState.artifactBuffOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n\n    rotationTime: appState.rotationTime,\n    rotation: appState.rotation.map((attack) => {\n      return {\n        talentType: attack.talentType,\n        talentId: attack.talentId,\n        multiplier: attack.multiplier,\n        options: attack.options.map((option) => {\n          return { id: option.id, value: getOptionValue(option) };\n        }),\n      };\n    }),\n  };\n\n  return save;\n}\n\nexport function unpackArtifactSave(save: ArtifactSave, i: number): Artifact {\n  const artifactType = save.type ?? Object.values(ArtifactType)[i];\n  let artifact = new Artifact(\n    artifactType,\n    save.rarity ?? 1,\n    save.level ?? 0,\n    save.mainStat ?? ''\n  );\n  artifact.subStats =\n    save.subStats?.map(\n      (subStat) =>\n        new InputStat(\n          subStat.stat ?? '',\n          subStat.value ?? NaN,\n          subStat.rawValue ?? NaN\n        )\n    ) ?? artifact.subStats;\n\n  return artifact;\n}\n\nexport function unpackSave(save: Save): AppState {\n  const character = initCharacter(\n    save.characterId,\n    save.characterLevel,\n    save.characterHasAscended,\n    save.characterConstellationLevel\n  );\n  const weapon = initWeapon(\n    save.weaponId,\n    save.weaponLevel,\n    save.weaponHasAscended,\n    save.weaponRefinement\n  );\n\n  const artifacts =\n    save.artifacts?.map((artifactSave, i) =>\n      unpackArtifactSave(artifactSave, i)\n    ) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map((artifactSet) =>\n    initArtifactSet(artifactSet.artifactSetId, artifactSet.artifactSetPieces)\n  ) ?? [initArtifactSet(), initArtifactSet(), initArtifactSet()];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const teamCharacters = save.teamCharacterIds?.map((id) =>\n    initCharacter(id)\n  ) ?? [initCharacter(), initCharacter(), initCharacter()];\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, option.value);\n    }\n  });\n\n  const weaponOptions = weapon.passiveOptions;\n  save.weaponOptions?.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, option.value);\n    }\n  });\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, option.value);\n    }\n  });\n\n  const teamOptions = teamCharacters.flatMap(\n    (character) => character.teamOptions\n  );\n  save.teamOptions?.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, option.value);\n    }\n  });\n\n  const artifactBuffOptions =\n    save.artifactBuffOptions?.flatMap((option) => {\n      const OptionConstructor = artifactTeamBuffs[option.id ?? ''];\n      if (OptionConstructor !== undefined) {\n        let artifactOption = new OptionConstructor();\n        setOptionValue(artifactOption, option.value);\n        return [artifactOption];\n      }\n\n      return [];\n    }) ?? [];\n\n  const allOptions = [\n    ...characterOptions,\n    ...weaponOptions,\n    ...artifactSetOptions,\n    ...teamOptions,\n    ...artifactBuffOptions,\n  ];\n\n  const rotationTime = save.rotationTime ?? 0;\n  const rotation: Attack[] =\n    save.rotation?.map((attackSave) => {\n      return {\n        talentType: attackSave.talentType ?? '',\n        talentId: attackSave.talentId ?? '',\n        multiplier: attackSave.multiplier ?? 1,\n        talentValue: { damage: [NaN] },\n        options:\n          attackSave.options\n            ?.map(({ id, value }) => {\n              const OptionConstructor = allOptions.find(\n                (option) => option.id === id\n              )?.constructor as { new (): Option };\n              let option;\n              if (OptionConstructor !== undefined) {\n                option = new OptionConstructor();\n                setOptionValue(option, value);\n              } else if (id === 'reaction') {\n                option = new ReactionOption();\n                setOptionValue(option, value);\n              }\n              return option;\n            })\n            ?.filter((option): option is Option => option !== undefined) ?? [],\n      };\n    }) ?? [];\n\n  return {\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    critType,\n    enemyLevel,\n    enemyRes,\n    reaction,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n    rotationTime,\n    rotation,\n  };\n}\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const appState = unpackSave(save);\n\n  setAppState(\n    appState,\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { Stats } from '../data/types';\nimport CritType from '../modifier/CritType';\nimport { getDamageModifier } from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport { getModifierMixins, getStatMixins } from '../option/Mixin';\nimport Option from '../option/Option';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Resistance from '../stat/Resistance';\nimport { getTotalStatsAt } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\nimport Weapon from '../weapon/Weapon';\n\nexport type CalculateTalentValueParams = {\n  talentType: string;\n  talentId: string;\n  options: Option[];\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n  artifactSets: ArtifactSet[];\n  artifactSetBonuses: Stats;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n  enemyLevel: number;\n  enemyRes: Resistance;\n  reaction: Reaction;\n  critType: CritType;\n  teamCharacters: Character[];\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n};\n\nexport function calculateTalentValue({\n  talentType,\n  talentId,\n  options,\n  character,\n  weapon,\n  artifacts,\n  artifactSets,\n  artifactSetBonuses,\n  talentAttackLevel,\n  talentSkillLevel,\n  talentBurstLevel,\n  enemyLevel,\n  enemyRes,\n  reaction,\n  critType,\n  teamCharacters,\n  characterOptions,\n  weaponOptions,\n  artifactSetOptions,\n  teamOptions,\n  artifactBuffOptions,\n}: CalculateTalentValueParams): TalentValue {\n  // Initialize a set of all options\n  const {\n    characterOptions: characterOptionsNew,\n    weaponOptions: weaponOptionsNew,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n  } = initializeAllOptions({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n  });\n\n  const allOptions = [\n    ...characterOptionsNew,\n    ...weaponOptionsNew,\n    ...artifactSetOptionsNew,\n    ...teamOptionsNew,\n    ...artifactBuffOptionsNew,\n  ];\n\n  // Override option values\n  options.forEach((option) => {\n    let newOption = allOptions.find((newOption) => newOption.id === option.id);\n    if (newOption !== undefined) {\n      setOptionValue(newOption, getOptionValue(option));\n    } else if (option.id === 'reaction') {\n      characterOptionsNew.push(option as ReactionOption);\n    }\n  });\n\n  // Calculate stats and modifier\n  const statMixins = getStatMixins({\n    character,\n    characterOptions: characterOptionsNew,\n    weapon,\n    weaponOptions: weaponOptionsNew,\n    artifactSets,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamCharacters,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n  });\n\n  const stats = getTotalStatsAt(\n    character,\n    weapon,\n    artifactSetBonuses,\n    artifacts,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    statMixins\n  );\n\n  const modifierMixins = getModifierMixins({\n    character,\n    characterOptions: characterOptionsNew,\n    weapon,\n    weaponOptions: weaponOptionsNew,\n    artifactSets,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamCharacters,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n  });\n\n  const modifier = getDamageModifier({\n    characterLevel: character.level,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n    stats,\n  });\n\n  // Calculate talent value\n  const talentFn = character.talentFns[talentType]?.[talentId];\n\n  const talentValue = talentFn?.({ stats, modifier }) ?? { damage: [NaN] };\n\n  return talentValue;\n}\n\ntype InitializeAllOptionsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n};\n\nexport function initializeAllOptions(params: InitializeAllOptionsParams) {\n  const characterOptions = [\n    ...params.character.getCharacterOptions(),\n    ...params.character.getPassiveOptions(\n      getAscensionLevel(params.character.level, params.character.hasAscended)\n    ),\n    ...params.character.getConstellationsOptions(\n      params.character.constellationLevel\n    ),\n  ];\n  params.characterOptions.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, getOptionValue(option));\n    }\n  });\n\n  const weaponOptions = params.weapon.getPassiveOptions();\n  params.weaponOptions.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, getOptionValue(option));\n    }\n  });\n\n  const artifactSetOptions = params.artifactSets.flatMap((artifactSet) =>\n    artifactSet.getOptions(artifactSet.pieces)\n  );\n  params.artifactSetOptions.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, getOptionValue(option));\n    }\n  });\n\n  const teamOptions = params.teamCharacters.flatMap((character) =>\n    character.getTeamOptions()\n  );\n  params.teamOptions.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, getOptionValue(option));\n    }\n  });\n\n  const artifactBuffOptions = params.artifactBuffOptions.flatMap((option) => {\n    const OptionConstructor = artifactTeamBuffs[option.id];\n    if (OptionConstructor !== undefined) {\n      let artifactOption = new OptionConstructor();\n      setOptionValue(artifactOption, getOptionValue(option));\n      return [artifactOption];\n    }\n\n    return [];\n  });\n\n  return {\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  };\n}\n","import { Stats } from '../data/types';\nimport { ModifierMixin } from '../option/Mixin';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport CritType from './CritType';\nimport Reaction from './Reaction';\n\nexport default interface DamageModifier\n  extends DamageModifierBase,\n    DamageModiferOptional {}\n\ninterface DamageModifierBase {\n  characterLevel: number;\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  enemyResReduction: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n}\n\ninterface DamageModiferOptional {\n  normalAttackFlatDmg?: number;\n  chargedAttackFlatDmg?: number;\n  skillFlatDmg?: number;\n\n  infusion?: Element;\n  infusionNormal?: Element;\n  infusionPlunge?: Element;\n\n  elementalAbsorption?: Element;\n\n  dionaHoldSkill?: boolean;\n\n  yoimiyaSkill?: boolean;\n\n  thomaHpBonusDmg?: number;\n\n  resolveStacks?: number;\n\n  kokomiBurst?: boolean;\n  kokomiHealingBonusDmg?: number;\n}\n\nexport type GetDamageModifierParams = {\n  characterLevel: number;\n  enemyLevel: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n  modifierMixins: ModifierMixin[];\n  stats: Stats;\n};\n\nexport function getDamageModifier({\n  characterLevel,\n  enemyLevel,\n  enemyRes,\n  critType,\n  reaction,\n  talentAttackLevel,\n  talentSkillLevel,\n  talentBurstLevel,\n  modifierMixins,\n  stats,\n}: GetDamageModifierParams): DamageModifier {\n  const modifier: DamageModifier = {\n    characterLevel,\n    enemyLevel,\n    enemyDefReduction: 0,\n    enemyRes,\n    enemyResReduction: new Resistance(),\n    critType: critType,\n    flatDmg: 0,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  };\n\n  // Apply modifier mixins\n  modifierMixins.forEach((mixin) => mixin.apply(modifier, stats));\n\n  return modifier;\n}\n","import Artifact from '../artifact/Artifact';\nimport { Attack } from '../component/DPSColumn';\nimport {\n  calculateTalentValue,\n  CalculateTalentValueParams,\n} from '../dps/DPSCalculator';\nimport { getStatMixins } from '../option/Mixin';\nimport { getTotalStatsAt } from '../stat/Stat';\n\nexport type RollDistribution = {\n  stat: string;\n  rolls: number;\n};\n\ntype SubstatOptimizerResult = {\n  subStatRolls: RollDistribution[];\n  artifacts: Artifact[];\n};\n\n// Average substat rolls, as per KQM guidelines\nexport const substats: Record<string, number> = {\n  hpBonus: 0.0496,\n  flatHp: 253.94,\n  atkBonus: 0.0496,\n  flatAtk: 16.54,\n  defBonus: 0.062,\n  flatDef: 19.68,\n  elementalMastery: 19.82,\n  energyRecharge: 0.0551,\n  critRate: 0.0331,\n  critDmg: 0.0662,\n};\n\n// Optimize substats according to KQM standardized guidelines\n// 20 preallocated fixed subs (2 of each substat)\n// maxRolls liquid subs (default/max = 20)\n// each sub type can have maximum 2 rolls per different main stat type\nexport function optimizeSubstats(\n  possibleStats: string[],\n  maxRolls: number,\n  erThreshold: number,\n  rotation: Attack[],\n  calcParams: Omit<\n    CalculateTalentValueParams,\n    'talentType' | 'talentId' | 'options'\n  >\n): SubstatOptimizerResult {\n  let maxDmg = 0;\n  let optimalSubstatRolls: RollDistribution[] = [];\n  let optimalArtifacts: Artifact[] = calcParams.artifacts;\n\n  // Roll ER to reach threshold\n  const baseArtifacts = generateBaseArtifacts(calcParams.artifacts);\n  const baseStatMixins = getStatMixins({ ...calcParams });\n  const baseTotalStats = getTotalStatsAt(\n    calcParams.character,\n    calcParams.weapon,\n    calcParams.artifactSetBonuses,\n    baseArtifacts,\n    calcParams.talentAttackLevel,\n    calcParams.talentSkillLevel,\n    calcParams.talentBurstLevel,\n    baseStatMixins\n  );\n  const baseEr = baseTotalStats.energyRecharge ?? 0;\n\n  let baseErRolls = Math.ceil((erThreshold - baseEr) / substats.energyRecharge);\n\n  const erMainStatCount = baseArtifacts\n    .map((artifact) => artifact.mainStat.stat)\n    .filter((mainStat) => mainStat === 'energyRecharge').length;\n\n  if (baseErRolls < 0) {\n    baseErRolls = 0;\n  } else if (baseErRolls > 2 * (5 - erMainStatCount)) {\n    baseErRolls = 2 * (5 - erMainStatCount);\n  }\n\n  // Generate all combinations\n  const combinations = generateRollCombinationsKqm(\n    possibleStats,\n    maxRolls - baseErRolls,\n    calcParams.artifacts.map((artifact) => artifact.mainStat.stat),\n    baseErRolls\n  );\n\n  combinations.forEach((combination) => {\n    // Add in ER threshold rolls\n    if (baseErRolls > 0) {\n      const erDistribution = combination.find(\n        ({ stat }) => stat === 'energyRecharge'\n      );\n      if (erDistribution === undefined) {\n        combination.push({ stat: 'energyRecharge', rolls: baseErRolls });\n      } else {\n        erDistribution.rolls += baseErRolls;\n      }\n    }\n\n    const artifacts = generateBaseArtifacts(calcParams.artifacts);\n\n    addRollsToArtifacts(combination, artifacts);\n\n    const damage = rotation.reduce((acc, attack) => {\n      const talentValue = calculateTalentValue({\n        ...attack,\n        ...calcParams,\n        artifacts,\n      });\n      const totalDmg = talentValue.damage.reduce(\n        (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n        0\n      );\n      const multiplier = !isNaN(attack.multiplier) ? attack.multiplier : 0;\n      return acc + totalDmg * multiplier;\n    }, 0);\n\n    // Update optimal rolls\n    if (damage > maxDmg) {\n      optimalSubstatRolls = combination;\n      optimalArtifacts = artifacts;\n      maxDmg = damage;\n    }\n  });\n\n  return {\n    subStatRolls: optimalSubstatRolls,\n    artifacts: optimalArtifacts,\n  };\n}\n\n// Recursive function to generate all substat combinations according to KQM 2*n rule\nfunction generateRollCombinationsKqm(\n  possibleStats: string[],\n  maxRolls: number,\n  mainStats: string[],\n  baseErRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const sameMainStatCount = mainStats.filter(\n    (mainStat) => possibleStats[0] === mainStat\n  ).length;\n  let currentMaxRolls = Math.min((5 - sameMainStatCount) * 2, maxRolls);\n  if (possibleStats[0] === 'energyRecharge') {\n    currentMaxRolls -= baseErRolls;\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = currentMaxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinationsKqm(\n      possibleStats.slice(1),\n      maxRolls - i,\n      mainStats,\n      baseErRolls\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n\n// Recursive function to generate all combinations of possibleStats.length numbers that sum to maxRolls\n// Generated combinations are not guaranteed to be valid substat combinations\n/*\nfunction generateRollCombinations(\n  possibleStats: string[],\n  maxRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = maxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinations(\n      possibleStats.slice(1),\n      maxRolls - i\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n*/\n\n// Generate artifacts with 2 of each substat\nfunction generateBaseArtifacts(prevArtifacts: Artifact[]): Artifact[] {\n  const artifacts = prevArtifacts.map((artifact) => {\n    return new Artifact(\n      artifact.type,\n      artifact.rarity,\n      artifact.level,\n      artifact.mainStat.stat\n    );\n  });\n\n  // Set artifact substats according to currentSubstatRolls\n  let iArtifact = 0;\n  let jArtifact = 0;\n  Object.entries(substats).forEach(([stat, value]) => {\n    artifacts[iArtifact].setSubStatProp(jArtifact, stat);\n    artifacts[iArtifact].setSubStatValue(jArtifact, value * 2);\n    if (++jArtifact >= 4) {\n      jArtifact = 0;\n      if (++iArtifact >= 5) {\n        // This really should not happen\n        iArtifact = 0;\n      }\n    }\n  });\n\n  return artifacts;\n}\n\n// Add liquid subs to fixed subs without replacing any fixed subs\nfunction addRollsToArtifacts(\n  combination: RollDistribution[],\n  artifacts: Artifact[]\n) {\n  const subStats = artifacts.flatMap((artifact) => artifact.subStats);\n  combination.forEach(({ stat, rolls }) => {\n    const subStat = subStats.find((inputStat) => inputStat.stat === stat);\n    if (subStat === undefined) {\n      let sIndex = 0;\n      artifacts\n        .find((artifact) =>\n          artifact.subStats.find((inputStat, i) => {\n            sIndex = i;\n            return isNaN(inputStat.value);\n          })\n        )\n        ?.setSubStatValue(sIndex, substats[stat] * rolls);\n    } else {\n      subStat.setValue(subStat.value + substats[stat] * rolls);\n    }\n  });\n}\n","// WorkerHack has to be imported first\nimport '../WorkerHack';\n\nimport { getAllArtifactSetBonuses } from '../artifact/ArtifactSetUtil';\nimport Save, {\n  ArtifactSave,\n  createArtifactSave,\n  unpackSave,\n} from '../save/Save';\nimport { optimizeSubstats, RollDistribution } from './Optimization';\n\ntype OptimizerWorkerData = {\n  possibleStats: string[];\n  maxRolls: number;\n  erThreshold: number;\n  save: Save;\n};\n\nexport type SubstatOptimizerResultSave = {\n  subStatRolls: RollDistribution[];\n  artifacts: ArtifactSave[];\n};\n\nexport const optimize = (\n  data: OptimizerWorkerData\n): SubstatOptimizerResultSave => {\n  const appState = unpackSave(data.save);\n  const artifactSetBonuses = getAllArtifactSetBonuses(appState.artifactSets);\n  const calcParams = { ...appState, artifactSetBonuses };\n  const result = optimizeSubstats(\n    data.possibleStats,\n    data.maxRolls,\n    data.erThreshold,\n    appState.rotation,\n    calcParams\n  );\n  return {\n    subStatRolls: result.subStatRolls,\n    artifacts: result.artifacts.map(createArtifactSave),\n  };\n};\n"],"sourceRoot":""}