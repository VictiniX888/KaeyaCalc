{"version":3,"sources":["../webpack/bootstrap","WorkerHack.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","data/Data.ts","artifact/ArtifactSet.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","option/Option.ts","option/artifactSetOptions/ArtifactSetOption.ts","artifact/artifactSet/ArchaicPetra.ts","artifact/artifactSet/Berserker.ts","artifact/artifactSet/BlizzardStrayer.ts","artifact/artifactSet/BloodstainedChivalry.ts","artifact/artifactSet/BraveHeart.ts","artifact/artifactSet/CrimsonWitch.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","option/OptionUtils.ts","option/index.ts","option/Mixin.ts","talent/types.ts","artifact/artifactSet/EmblemOfSeveredFate.ts","artifact/artifactSet/Gambler.ts","artifact/artifactSet/GladiatorsFinale.ts","artifact/artifactSet/HeartOfDepth.ts","artifact/artifactSet/HuskOfOpulentDreams.ts","artifact/artifactSet/Instructor.ts","artifact/artifactSet/Lavawalker.ts","artifact/artifactSet/MaidenBeloved.ts","artifact/artifactSet/MartialArtist.ts","artifact/artifactSet/NoblesseOblige.ts","artifact/artifactSet/PaleFlame.ts","artifact/artifactSet/ResolutionOfSojourner.ts","artifact/artifactSet/RetracingBolide.ts","artifact/artifactSet/Shimenawa.ts","artifact/artifactSet/Tenacity.ts","artifact/artifactSet/Thundersoother.ts","artifact/artifactSet/TinyMiracle.ts","artifact/artifactSet/ViridescentVenerer.ts","artifact/artifactSet/WanderersTroupe.ts","artifact/ArtifactSetUtil.ts","character/Character.ts","stat/Stat.ts","artifact/types.ts","artifact/Artifact.ts","constellation/Constellation.ts","option/characterOptions/CharacterOption.ts","character/albedo/AlbedoConstellation.ts","modifier/Reaction.ts","character/albedo/AlbedoPassive.ts","modifier/CritType.ts","talent/TalentUtil.ts","character/albedo/AlbedoTalent.ts","character/albedo/AlbedoTeamPassive.ts","character/albedo/Albedo.ts","character/aloy/AloyOption.ts","character/aloy/AloyPassive.ts","character/aloy/AloyTalent.ts","character/aloy/Aloy.ts","character/amber/AmberTalent.ts","character/amber/Amber.ts","character/ayaka/AyakaOption.ts","character/ayaka/AyakaTalent.ts","character/ayaka/Ayaka.ts","character/barbara/BarbaraTalent.ts","character/barbara/Barbara.ts","character/beidou/BeidouPassive.ts","character/beidou/BeidouTalent.ts","character/beidou/Beidou.ts","character/bennett/BennettTalent.ts","character/bennett/BennettTeamPassive.ts","character/bennett/Bennett.ts","character/chongyun/ChongyunOption.ts","character/chongyun/ChongyunTalent.ts","character/chongyun/Chongyun.ts","character/diluc/DilucTalent.ts","character/diluc/DilucOption.ts","character/diluc/Diluc.ts","character/diona/DionaTalent.ts","character/diona/Diona.ts","character/eula/EulaTalent.ts","character/eula/Eula.ts","character/fischl/FischlTalent.ts","character/fischl/Fischl.ts","character/ganyu/GanyuTalent.ts","character/ganyu/Ganyu.ts","character/hutao/HutaoPassive.ts","character/hutao/HutaoTalent.ts","character/hutao/HutaoOption.ts","character/hutao/Hutao.ts","character/jean/JeanTalent.ts","character/jean/Jean.ts","character/kaeya/KaeyaTalent.ts","character/kaeya/Kaeya.ts","character/kazuha/KazuhaTalent.ts","option/characterOptions/ElementalAbsorptionOption.ts","character/kazuha/KazuhaOption.ts","character/kazuha/Kazuha.ts","character/keqing/KeqingTalent.ts","character/keqing/Keqing.ts","character/klee/KleeTalent.ts","character/klee/Klee.ts","character/kokomi/KokomiPassive.ts","character/kokomi/KokomiTalent.ts","character/kokomi/KokomiOption.ts","character/kokomi/Kokomi.ts","character/lisa/LisaTalent.ts","character/lisa/Lisa.ts","character/mona/MonaOption.ts","character/mona/MonaTalent.ts","character/mona/Mona.ts","character/ningguang/NingguangTalent.ts","character/ningguang/Ningguang.ts","character/noelle/NoelleTalent.ts","character/noelle/NoelleOption.ts","character/noelle/Noelle.ts","character/qiqi/QiqiTalent.ts","character/qiqi/Qiqi.ts","character/raiden/RaidenPassive.ts","character/raiden/RaidenTalent.ts","character/raiden/RaidenOption.ts","character/raiden/Raiden.ts","character/razor/RazorTalent.ts","character/razor/Razor.ts","character/rosaria/RosariaTalent.ts","character/rosaria/Rosaria.ts","character/sara/SaraTalent.ts","character/sara/Sara.ts","character/sayu/SayuTalent.ts","character/sayu/SayuOption.ts","character/sayu/Sayu.ts","character/sucrose/SucroseOption.ts","character/sucrose/SucroseTalent.ts","character/sucrose/Sucrose.ts","character/tartaglia/TartagliaTalent.ts","character/tartaglia/TartagliaPassive.ts","character/tartaglia/TartagliaTeamPassive.ts","character/tartaglia/Tartaglia.ts","character/thoma/ThomaTalent.ts","character/thoma/ThomaPassive.ts","character/thoma/ThomaConstellation.ts","character/thoma/ThomaTeamPassive.ts","character/thoma/Thoma.ts","character/venti/VentiTalent.ts","character/venti/VentiOption.ts","character/venti/Venti.ts","character/xiangling/XianglingTalent.ts","character/xiangling/Xiangling.ts","character/xiao/XiaoOption.ts","character/xiao/XiaoTalent.ts","character/xiao/Xiao.ts","character/xingqiu/XingqiuTalent.ts","character/xingqiu/Xingqiu.ts","character/xinyan/XinyanTalent.ts","character/xinyan/Xinyan.ts","character/yanfei/YanfeiOption.ts","character/yanfei/YanfeiTalent.ts","character/yanfei/Yanfei.ts","character/yoimiya/YoimiyaOption.ts","character/yoimiya/YoimiyaPassive.ts","character/yoimiya/YoimiyaTalent.ts","character/yoimiya/Yoimiya.ts","character/zhongli/ZhongliTalent.ts","character/zhongli/ZhongliTeamPassive.ts","character/CharacterUtil.ts","character/zhongli/Zhongli.ts","stat/Resistance.ts","weapon/Weapon.ts","option/weaponOptions/WeaponOption.ts","weapon/cinnabarspindle/CinnarbarSpindle.ts","weapon/cinnabarspindle/CinnabarSpindlePassive.ts","weapon/dragonsbane/DragonsBane.ts","weapon/dragonsbane/DragonsBanePassive.ts","weapon/engulfinglightning/EngulfingLightning.ts","weapon/engulfinglightning/EngulfingLightningPassive.ts","weapon/everlastingmoonglow/EverlastingMoonglow.ts","weapon/everlastingmoonglow/EverlastingMoonglowPassive.ts","weapon/luxurioussealord/LuxuriousSeaLord.ts","weapon/luxurioussealord/LuxuriousSeaLordPassive.ts","weapon/polarstar/PolarStar.ts","weapon/polarstar/PolarStarPassive.ts","weapon/solarpearl/SolarPearl.ts","weapon/solarpearl/SolarPearlPassive.ts","weapon/staffofhoma/StaffOfHoma.ts","weapon/staffofhoma/StaffOfHomaPassive.ts","weapon/thecatch/TheCatch.ts","weapon/thecatch/TheCatchPassive.ts","weapon/watatsumi/WatatsumiWavewalker.ts","weapon/watatsumi/Akuoumaru.ts","weapon/watatsumi/MouunsMoon.ts","weapon/WeaponUtil.ts","weapon/watatsumi/WavebreakersFin.ts","weapon/whiteblind/Whiteblind.ts","weapon/whiteblind/WhiteblindPassive.ts","option/characterOptions/ReactionOption.ts","teambuff/artifact/ArtifactTeamBuff.ts","option/characterOptions/SwirlOption.ts","save/Save.ts","dps/DPSCalculator.ts","modifier/DamageModifer.ts","optimization/Optimization.ts","talent/ReactionTalent.ts","optimization/OptimizerWorker.ts","talent/Talent.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$RefreshReg$","$RefreshSig$","_defineProperty","obj","configurable","writable","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","minLen","toString","slice","constructor","from","test","_slicedToArray","isArray","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","TypeError","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","propMapping","propMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","constellations","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","weaponPassiveData","weaponPassiveDataRaw","reactionCurveData","processReactionCurveData","reactionCurveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getWeaponPassiveData","getWeaponPassiveParams","refinement","passive","passiveParams","getAscensionBonusAt","getTalentData","emptyTalentParams","fill","NaN","getTalentParams","type","talentStats","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","getWeaponPassiveAt","ArtifactSet","_id","bonusThresholds","setBonusData","_pieces","options","stats","setBonusSets","setBonuses","this","data","getSetBonusSetsAt","getSetBonusesAt","getStats","getOptions","prevPieces","getAllSetBonuses","setBonus","threshold","bonus","bonuses","statBonus","stat","flatMap","extraStats","isNaN","Option","oldOptionIds","newOptions","includes","concat","keptOptionIds","statMixin","mixin","modifierMixin","_setPrototypeOf","setPrototypeOf","__proto__","_inherits","subClass","superClass","_getPrototypeOf","getPrototypeOf","_typeof","_possibleConstructorReturn","self","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","e","result","Super","NewTarget","ArtifactSetOption","ArchaicPetra","archaicPetra4Pc","params4Pc","ArchaicPetra4PcOption","choices","Berserker","berserker4Pc","critRate","BlizzardStrayer","blizzardStrayer4Pc","BloodstainedChivalry","bloodstainedChivalry4Pc","chargedDmgBonus","BraveHeart","braveHeart4Pc","dmgBonus","CrimsonWitch","crimsonWitch4Pc","param","find","stacks","pyroDmgBonus","_toConsumableArray","iter","isBooleanOption","option","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","Priority","getStatMixins","character","characterOptions","weapon","weaponOptions","artifactSets","artifactSetOptions","teamCharacters","teamOptions","artifactBuffOptions","characterPassiveMixins","getPassiveStatMixins","characterConstellationMixins","getConstellationStatMixins","weaponPassiveMixins","artifactSetMixins","artifactSet","teamPassiveMixins","getTeamStatMixin","characterOptionMixins","weaponOptionMixins","artifactSetOptionMixins","teamOptionMixins","artifactBuffOptionMixins","unarrangedMixins","groupedMixins","Map","priority","Normal","array","set","Last","TalentType","Element","AttackType","ScalingType","EmblemOfSeveredFate","emblemOfSeveredFate4Pc","burstDmgBonus","energyRecharge","Gambler","gambler2Pc","GladiatorsFinale","gladiatorsFinale4Pc","HeartOfDepth","heartOfDepth4Pc","normalDmgBonus","HuskOfOpulentDreams","huskOfOpulentDreams4Pc","defBonus","geoDmgBonus","Instructor","instructor4Pc","Instructor4PcOption","elementalMastery","Lavawalker","lavawalker4Pc","MaidenBeloved","maidenBeloved4Pc","healedBonus","MartialArtist","martialArtist2Pc","martialArtist4Pc","params2Pc","NoblesseOblige","noblesseOblige2Pc","noblesseOblige4Pc","NoblesseOblige4PcOption","atkBonus","PaleFlame","paleFlame4Pc","physicalDmgBonus","ResolutionOfSojourner","resolutionOfSojourner4Pc","RetracingBolide","retracingBolide4Pc","Shimenawa","shimenawa4Pc","plungeDmgBonus","Tenacity","tenacity4Pc","Tenacity4PcOption","shieldStrength","Thundersoother","thundersoother4Pc","TinyMiracle","tinyMiracle2Pc","element","ViridescentVenerer","viridescentVenerer4Pc","ViridescentVenerer4PcOption","Cryo","Electro","Hydro","Pyro","modifier","enemyResReduction","add","WanderersTroupe","wanderersTroupe4Pc","resolutionofsojourner","tinymiracle","martialartist","gambler","gladiatorsfinale","viridescentvenerer","wandererstroupe","crimsonwitchofflames","noblesseoblige","emblemofseveredfate","braveheart","berserker","instructor","blizzardstrayer","thundersoother","lavawalker","maidenbeloved","bloodstainedchivalry","archaicpetra","retracingbolide","heartofdepth","tenacityofthemillelith","paleflame","shimenawasreminiscence","huskofopulentdreams","getArtifactSetConstructor","initArtifactSet","ArtifactSetConstructor","Character","hasAscended","constellationLevel","baseStats","statCurveMapping","talentFns","_level","_hasAscended","_constellationLevel","innateStats","passiveOptions","constellationOptions","getTalentFns","getInnateStatsAt","getCharacterOptions","ascensionLevel","getAscensionLevel","getPassives","getPassiveOptions","getConstellations","getConstellationsOptions","getTeamOptions","prevAscensionLevel","prevConstellationLevel","charStatCurves","entries","curve","multiplier","getCharacterOptionConstuctors","getAllPassives","getAllConstellations","constellation","getTeamPassive","teamPassive","unroll","convertStatValue","isPercentage","getTotalStatsAt","artifactSetBonuses","artifacts","talentAttackLevel","talentSkillLevel","talentBurstLevel","statMixins","characterStats","getBaseStatsAt","combinedStats","artifactStats","artifact","totalStats","baseAtk","flatAtk","flatDef","baseDef","flatHp","baseHp","hpBonus","critDmg","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","hydroDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","skillDmgBonus","chargedCritRate","burstCritRate","overloadDmgBonus","burningDmgBonus","vaporizeDmgBonus","meltDmgBonus","ArtifactType","InputStat","rawValue","convertStatToDisplayValue","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","prop","setMainStatValue","getArtifactMainStatValue","setProp","setInputValue","setValue","subStat","ConstellationSkill","ConstellationBurst","CharacterOption","children","c2Params","AlbedoOptionConstellation4","AlbedoOptionConstellation6","Reaction","albedoConstellations","burstFlatDmg","albedoPassives","albedoBlossomDmgBonus","CritType","calculateBaseDamage","scalingType","flatDmg","Attack","Defense","Hp","calculateResMultiplier","res","resReduction","totalRes","calculateAmplifyingReactionMultiplier","reaction","amplifyingStrength","triggerElement","Melt","Vaporize","calculateAmplifyingStrengthMultiplier","reactionBonus","calculateTotalDamage","attackType","normalAttackFlatDmg","Charged","chargedAttackFlatDmg","Skill","skillFlatDmg","Burst","baseDmg","getDamageBonus","crit","critType","Crit","Average","Math","min","characterLevel","enemyLevel","enemyDefReduction","enemyRes","calculateHp","flatBonus","normalAttackSingle","damage","infusionNormal","infusion","Physical","normalAttackMulti","hits","damages","chargedAttackSingle","chargedAttackMulti","aimShot","aimShotCharged","plungeAttack","infusionPlunge","Plunge","skillSingle","skillMulti","burstSingle","burstMulti","typelessAttack","None","healingValue","flatHealing","calculateHealing","hpValue","shieldHpValue","dmgAbsorption","Geo","dionaHoldSkill","calculateDmgAbsorption","atkBuffValue","albedoTalents","chargedDmg","plungeDmg","lowPlungeDmg","highPlungeDmg","skillDmg","transientBlossomDmg","getAlbedoTransientBlossomStats","burstDmg","fatalBlossomDmg","a4Params","albedoTeamPassive","Albedo","aloyOptions","_talentAttackLevel","_talentBurstLevel","skillParams","a1Data","a4Data","a1Params","aloyPassives","aloyTalents","aimShotDmg","chargedAimShotDmg","freezeBombDmg","chillwaterBombletDmg","Aloy","amberTalents","explosionDmg","baronBunnyHp","dmgPerWave","totalDmg","talentValue","Amber","ayakaOptions","ayakaTalents","cuttingDmg","bloomDmg","Ayaka","barbaraTalents","hpRegenContinuous","hpRegenOnHit","dropletDmg","hpRegen","Barbara","beidouPassives","beidouTalents","chargedSpinDmg","chargedFinalDmg","shieldHp","dmgBonusOnHitTaken","lightningDmg","Beidou","bennettTalents","pressDmg","chargeLevel1Dmg","chargeLevel2Dmg","hpRegenContinuousPerSecond","BennettOptionAtkBuff","bennettTeamPassive","atkBuff","Bennett","chongyunOptions","chongyunTalents","Chongyun","dilucTalents","slashingDmg","dot","dilucOptions","_talentSkillLevel","passiveData","Diluc","dionaTalents","icyPawDmgPerPaw","shieldHpPress","shieldHpHold","continuousFieldDmg","hpRegenContinuousTime","Diona","eulaTalents","holdDmg","icewhirlBrandDmg","lightfallSwordBaseDmg","lightfallSwordStackDmg","Eula","fischlTalents","ozDmg","summoningDmg","fallingThunderDmg","Fischl","ganyuTalents","aimShotChargeLevel1","frostflakeArrowDmg","frostflakeArrowBloomDmg","iceLotusHp","iceShardDmg","Ganyu","hutaoPassives","hutaoTalents","bloodBlossomDmg","burstDmgLowHp","hpRegenLowHp","hutaoOptions","flatAtkBonus","Hutao","jeanTalents","Anemo","fieldEnterExitDmg","fieldActivationHealing","Jean","kaeyaTalents","Kaeya","kazuhaTalents","dotElementalAbsorption","elementalAbsorption","ElementalAbsoprtionOption","kazuhaOptions","Kazuha","keqingTalents","lightningStilettoDmg","thunderclapSlashDmg","burstInitDmg","consecutiveSlashDmg","lastAttackDmg","Keqing","kleeTalents","jumpyDumptyDmg","mineDmg","sparksNSplashDmg","Klee","kokomiPassives","kokomiHealingBonusDmg","kokomiTalents","getKokomiNormalAttackModifier","getKokomiChargedAttackModifier","rippleDmg","getKokomiSkillModifier","kokomiBurst","newModifier","normalAttackBonusDmg","chargedAttackBonusDmg","skillBonusDmg","kokomiOptions","Kokomi","lisaTalents","holdDmgStack0","holdDmgStack1","holdDmgStack2","holdDmgStack3","Lisa","monaOptions","burstParams","monaTalents","Mona","ningguangTalents","normalAtkDmg","starJadeDmg","jadeScreenHp","dmgPerGem","Ningguang","noelleTalents","healing","firstSwingDmg","noelleOptions","totalDef","Noelle","qiqiTalents","heraldOfFrostDmg","Qiqi","raidenPassives","raidenTalents","coordinatedAtkDmg","musouNoHitotachiDmg","getInitialResolveBonus","getAttackResolveBonus","resolveStacks","raidenOptions","Raiden","razorTalents","Razor","rosariaTalents","iceLanceDot","Rosaria","saraTalents","tenguJuuraiAmbushDmg","tenguJuuraiTitanbreakerDmg","tenguJuuraiStormclusterDmg","Sara","sayuTalents","fuufuuWindwheelDmg","fuufuuWhirlwindKickPressDmg","fuufuuWhirlwindKickHoldDmg","fuufuuWindwheelElementalDmg","fuufuuWhirlwindKickElementalDmg","activationDmg","activationHealing","mujimujiDarumaDmg","mujimujiDarumaHealing","sayuOptions","Sayu","sucroseOptions","sucroseTalents","Sucrose","tartagliaTalents","riptideFlashDmg","riptideBurstDmg","stanceChangeDmg","riptideSlashDmg","burstDmgMelee","burstDmgRanged","riptideBlastDmg","tartagliaAscension0","tartagliaPassives","tartagliaTeamPassive","Tartaglia","thomaTalents","shieldHpMax","fieryCollapseDmg","getThomaFieryCollapseModifier","thomaHpBonusDmg","thomaPassives","c6Params","ThomaOptionConstellation6","thomaConstellations","thomaTeamPassive","Thoma","ventiTalents","ventiOptions","Venti","xianglingTalents","guobaDmg","swing1HitDmg","swing2HitDmg","swing3HitDmg","pyronadoDmg","Xiangling","xiaoOptions","xiaoTalents","Xiao","xingqiuTalents","swordRainDmg","Xingqiu","xinyanTalents","swingDmg","shieldHpLevel1","shieldHpLevel2","shieldHpLevel3","pyroDot","Xinyan","yanfeiOptions","yanfeiTalents","chargedDmgSeal0","chargedDmgSeal1","chargedDmgSeal2","chargedDmgSeal3","chargedDmgSeal4","Yanfei","yoimiyaOptions","yoimiyaSkill","yoimiyaPassives","yoimiyaTalents","getYoimiyaNormalAttackMultiplier","kindlingArrowDmg","aurousBlazeExplosionDmg","Yoimiya","zhongliTalents","stoneSteeleDmg","resonanceDmg","zhongliTeamPassive","values","characters","albedo","aloy","amber","ayaka","barbara","beidou","bennett","chongyun","diluc","diona","eula","fischl","ganyu","hutao","jean","kaeya","kazuha","keqing","klee","kokomi","lisa","mona","ningguang","noelle","qiqi","raiden","razor","rosaria","sara","sayu","sucrose","tartaglia","thoma","venti","xiangling","xiao","xingqiu","xinyan","yanfei","yoimiya","zhongli","getCharacterConstructor","initCharacter","CharacterConstructor","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","prevValue","Weapon","rank","passiveDataSet","_weaponLevel","_refinement","getPassive","getStatsAt","weaponLevel","weaponStats","weaponStatCurves","shouldKeepValue","newOption","statBonuses","WeaponOption","CinnabarSpindle","cinnabarSpindlePassive","DragonsBane","dragonsBanePassive","EngulfingLightning","engulfingLightningPassive","EverlastingMoonglow","everlastingMoonglowPassive","LuxuriousSeaLord","luxuriousSeaLordPassive","PolarStar","polarStarPassive","SolarPearl","solarPearlPassive","StaffOfHoma","totalHp","staffOfHomaPassive","TheCatch","theCatchPassive","watatsumiWavewalkerPassive","Akuoumaru","MouunsMoon","weapons","cinnabarspindle","dragonsbane","engulfinglightning","staffofhoma","thecatch","wavebreakersfin","everlastingmoonglow","solarpearl","luxurioussealord","whiteblind","whiteblindPassive","akuoumaru","polarstar","mouunsmoon","getWeaponConstructor","ReactionOption","artifactTeamBuffs","SwirlOption","swirlElement","createArtifactSave","unpackOptionSave","save","unpackAttackOptionSave","allOptions","OptionConstructor","unpackAttackSave","talentType","talentId","unpackSave","characterHasAscended","characterConstellationLevel","initWeapon","weaponHasAscended","weaponRefinement","artifactSave","artifactType","unpackArtifactSave","artifactSetId","artifactSetPieces","teamCharacterIds","artifactOption","swirlOption","rotationTime","rotation","ohcRotation","heals","unpackOHCAttackSave","calculateTalentValue","characterOption","weaponOption","artifactSetOption","teamOption","initializeAllOptions","characterOptionsNew","weaponOptionsNew","artifactSetOptionsNew","teamOptionsNew","artifactBuffOptionsNew","swirlOptionNew","modifierMixins","getPassiveModifierMixins","getConstellationModifierMixins","getModifierMixins","getTeamModifierMixin","swirlOptionMixin","getDamageModifier","talentFn","substats","optimizeSubstats","possibleStats","maxRolls","erThreshold","calcParams","maxDmg","optimalSubstatRolls","optimalArtifacts","baseArtifacts","generateBaseArtifacts","baseStatMixins","baseEr","baseErRolls","ceil","erMainStatCount","generateRollCombinationsKqm","combination","erDistribution","rolls","inputStat","sIndex","setSubStatValue","addRollsToArtifacts","dmg","subStatRolls","mainStats","sameMainStatCount","currentMaxRolls","combinations","current","backCombinations","prevArtifacts","iArtifact","jArtifact","setSubStatProp","reactionTalents","superconduct","reactionTalent","superconductDmgBonus","swirl","swirlDmgBonus","electrocharged","electrochargedDmgBonus","shatter","shatterDmgBonus","overload","levelMultiplier","getReactionCurveAt","getReactionLevelMultiplier","enemyResMultiplier","calculateReactionDamage","optimize","appState"],"mappings":"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","file":"6bafeaadde6cd01fcceb.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/kaeya-calc/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","// Stolen from Genshin Optimizer\n// No one knows why this works\n$RefreshReg$ = () => {};\n$RefreshSig$ = () => () => {};\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import type * as Data from './types';\nimport type { TalentType } from '../talent/types';\n\nimport characterDataRaw from './characterdata.json';\nimport characterAscensionBonusDataRaw from './characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from './characterstatcurvedata.json';\nimport weaponDataRaw from './weapondata.json';\nimport weaponAscensionBonusDataRaw from './weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from './weaponstatcurvedata.json';\nimport weaponPassiveDataRaw from './weaponpassivedata.json';\nimport talentDataRaw from './talentdata.json';\nimport artifactSetDataRaw from './artifactsetdata.json';\nimport artifactSetBonusDataRaw from './artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from './artifactmainstatdata.json';\nimport reactionCurveDataRaw from './reactioncurvedata.json';\n\nimport propMappingRaw from './propmapping.json';\nimport talentDescMappingRaw from './talentdescmapping.json';\nimport optionMappingRaw from './optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\nconst weaponPassiveData = weaponPassiveDataRaw as Record<\n  string,\n  Data.WeaponPassiveSetData\n>;\nconst reactionCurveData = processReactionCurveData(reactionCurveDataRaw);\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n\n      constellations: talentDataSetRaw.constellations,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\nfunction processReactionCurveData(rawData: Data.ReactionCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData;\n    return acc;\n  }, {} as Record<number, Data.ReactionCurveData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getWeaponPassiveData(id: string) {\n  return getData(id, weaponPassiveData);\n}\n\nexport function getWeaponPassiveParams(id: string, refinement: number) {\n  return getWeaponPassiveData(id).passive[refinement]?.passiveParams ?? [];\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentParams(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\nexport function getWeaponPassiveAt(\n  refinement: number,\n  passives: Data.WeaponPassiveSetData\n): Data.WeaponPassiveData | undefined {\n  return passives.passive[refinement];\n}\n\nexport function getReactionCurveAt(\n  level: number\n): Data.ReactionCurveData | undefined {\n  return reactionCurveData[level];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import { getArtifactSetData, getArtifactSetBonusData } from '../data/Data';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../data/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces: number = 0) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  // Override in derived classes to implement special set bonuses\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [];\n  }\n\n  // Returns all special set bonuses that are active for given pieces\n  getSetBonusesAt(pieces: number): ArtifactSetBonus[] {\n    return this.getAllSetBonuses().filter(\n      (setBonus) => pieces >= setBonus.pieces\n    );\n  }\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n    });\n\n    // Special bonus stats, has to be handled individually\n    let extraStats = this.setBonuses.flatMap(\n      (setBonus) => setBonus.extraStats ?? []\n    );\n\n    extraStats.forEach((statBonus) => {\n      if (stats[statBonus.stat] !== undefined) {\n        stats[statBonus.stat] += statBonus.value;\n      } else {\n        stats[statBonus.stat] = statBonus.value;\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap(\n        (setBonus) => setBonus.options ?? []\n      );\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  statMixin: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  modifierMixin: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionPicker, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class ArchaicPetra extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [archaicPetra4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('archaicpetra', 4);\n\nexport class ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value !== '') {\n        stats[`${this.value}DmgBonus`] =\n          params4Pc[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n      }\n    },\n  };\n}\n\nconst archaicPetra4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ArchaicPetra4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Berserker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [berserker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('berserker', 4);\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst berserker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Berserker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BlizzardStrayer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [blizzardStrayer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('blizzardstrayer', 4);\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[1] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst blizzardStrayer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BlizzardStrayer4PcCryoOption, BlizzardStrayer4PcFrozenOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BloodstainedChivalry extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [bloodstainedChivalry4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n\nclass BloodstainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.chargedDmgBonus = params4Pc[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst bloodstainedChivalry4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BloodstainedChivalry4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BraveHeart extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [braveHeart4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('braveheart', 4);\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst braveHeart4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BraveHeart4PcOption],\n};\n","import {\n  getArtifactSetBonusData,\n  getArtifactSetBonusParams,\n} from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\n\nexport default class CrimsonWitch extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [crimsonWitch4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('crimsonwitchofflames', 4);\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n        const param = setBonusData[2].bonuses.find(\n          ({ stat }) => stat === 'pyroDmgBonus'\n        )?.value!!;\n\n        let stacks = this.value;\n        if (stacks > 3) stacks = 3;\n        stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst crimsonWitch4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [CrimsonWitch4PcOption],\n\n  extraStats: [\n    {\n      stat: 'overloadDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'burningDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'vaporizeDmgBonus',\n      value: params4Pc[1],\n    },\n    {\n      stat: 'meltDmgBonus',\n      value: params4Pc[2],\n    },\n  ],\n};\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).statMixin !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (option as unknown as IModifierApplicable).modifierMixin !== undefined;\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import Option from './Option';\n\nexport default Option;\nexport * from './OptionUtils';\n","import { isModifierApplicable, isStatsApplicable } from '.';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetOption from './artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from './characterOptions/CharacterOption';\nimport SwirlOption from './characterOptions/SwirlOption';\nimport { IModifierApplicable, IStatsApplicable } from './Option';\nimport WeaponOption from './weaponOptions/WeaponOption';\n\nexport enum Priority {\n  Normal,\n  Last,\n}\n\ninterface Mixin {\n  priority?: Priority;\n}\n\nexport interface StatMixin extends Mixin {\n  apply: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number,\n    ascensionLevel: number\n  ) => void;\n}\n\n// Do not modify stats here, use StatMixin for that purpose\nexport interface ModifierMixin extends Mixin {\n  apply: (modifier: DamageModifier, stats: Stats) => void;\n}\n\nexport type GetStatMixinsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n};\n\nexport function getStatMixins({\n  character,\n  characterOptions,\n  weapon,\n  weaponOptions,\n  artifactSets,\n  artifactSetOptions,\n  teamCharacters,\n  teamOptions,\n  artifactBuffOptions,\n}: GetStatMixinsParams): StatMixin[] {\n  const characterPassiveMixins = character.getPassiveStatMixins();\n\n  const characterConstellationMixins = character.getConstellationStatMixins();\n\n  const weaponPassiveMixins = weapon.getPassiveStatMixins();\n\n  const artifactSetMixins = artifactSets.flatMap((artifactSet) =>\n    artifactSet.getStatMixins()\n  );\n\n  const teamPassiveMixins = teamCharacters\n    .map((character) => character.getTeamStatMixin())\n    .filter((mixin): mixin is StatMixin => mixin !== undefined);\n\n  const characterOptionMixins = characterOptions\n    .filter((option): option is CharacterOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const weaponOptionMixins = weaponOptions\n    .filter((option): option is WeaponOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const artifactSetOptionMixins = artifactSetOptions\n    .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const teamOptionMixins = teamOptions\n    .filter((option): option is CharacterOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const artifactBuffOptionMixins = artifactBuffOptions\n    .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const unarrangedMixins = [\n    ...characterPassiveMixins,\n    ...characterConstellationMixins,\n    ...weaponPassiveMixins,\n    ...artifactSetMixins,\n    ...teamPassiveMixins,\n    ...characterOptionMixins,\n    ...weaponOptionMixins,\n    ...artifactSetOptionMixins,\n    ...teamOptionMixins,\n    ...artifactBuffOptionMixins,\n  ];\n  const groupedMixins = new Map<Priority, StatMixin[]>();\n  unarrangedMixins.forEach((mixin) => {\n    const priority = mixin.priority ?? Priority.Normal;\n    const array = groupedMixins.get(priority);\n    if (!array) {\n      groupedMixins.set(priority, [mixin]);\n    } else {\n      array.push(mixin);\n    }\n  });\n\n  const statMixins = [\n    ...(groupedMixins.get(Priority.Normal) ?? []),\n    ...(groupedMixins.get(Priority.Last) ?? []),\n  ];\n\n  return statMixins;\n}\n\nexport type GetModifierMixinsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n  swirlOption: SwirlOption;\n};\n\nexport function getModifierMixins({\n  character,\n  characterOptions,\n  weapon,\n  weaponOptions,\n  artifactSets,\n  artifactSetOptions,\n  teamCharacters,\n  teamOptions,\n  artifactBuffOptions,\n  swirlOption,\n}: GetModifierMixinsParams): ModifierMixin[] {\n  const characterPassiveMixins = character.getPassiveModifierMixins();\n\n  const characterConstellationMixins =\n    character.getConstellationModifierMixins();\n\n  const weaponPassiveMixins = weapon.getPassiveModifierMixins();\n\n  const artifactSetMixins = artifactSets.flatMap((artifactSet) =>\n    artifactSet.getModifierMixins()\n  );\n\n  const teamPassiveMixins = teamCharacters\n    .map((character) => character.getTeamModifierMixin())\n    .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n\n  const characterOptionMixins = characterOptions\n    .filter((option): option is CharacterOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const weaponOptionMixins = weaponOptions\n    .filter((option): option is WeaponOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const artifactSetOptionMixins = artifactSetOptions\n    .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const teamOptionMixins = teamOptions\n    .filter((option): option is CharacterOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const artifactBuffOptionMixins = artifactBuffOptions\n    .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  // Set swirled element. Only modifier mixin\n  const swirlOptionMixin = swirlOption.modifierMixin;\n\n  const unarrangedMixins = [\n    ...characterPassiveMixins,\n    ...characterConstellationMixins,\n    ...weaponPassiveMixins,\n    ...artifactSetMixins,\n    ...teamPassiveMixins,\n    ...characterOptionMixins,\n    ...weaponOptionMixins,\n    ...artifactSetOptionMixins,\n    ...teamOptionMixins,\n    ...artifactBuffOptionMixins,\n    swirlOptionMixin,\n  ];\n  const groupedMixins = new Map<Priority, ModifierMixin[]>();\n  unarrangedMixins.forEach((mixin) => {\n    const priority = mixin.priority ?? Priority.Normal;\n    const array = groupedMixins.get(priority);\n    if (!array) {\n      groupedMixins.set(priority, [mixin]);\n    } else {\n      array.push(mixin);\n    }\n  });\n\n  const modifierMixins = [\n    ...(groupedMixins.get(Priority.Normal) ?? []),\n    ...(groupedMixins.get(Priority.Last) ?? []),\n  ];\n\n  return modifierMixins;\n}\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport type TalentFn = (props: TalentProps) => TalentValue;\n\nexport type Talents = Record<string, Record<string, TalentFn>>;\n\nexport type TalentValueSet = Record<string, Record<string, TalentValue>>;\n\nexport interface TalentValue {\n  damage: number[];\n  element?: Element;\n}\n\nexport interface TalentProps {\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  None = 'none',\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class EmblemOfSeveredFate extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [emblemOfSeveredFate4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('emblemofseveredfate', 4);\n\nconst emblemOfSeveredFate4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  statMixin: {\n    priority: Priority.Last,\n    apply: (stats: Stats) => {\n      let burstDmgBonus = params4Pc[0] * stats.energyRecharge;\n      if (burstDmgBonus > params4Pc[1]) {\n        burstDmgBonus = params4Pc[1];\n      }\n\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n    },\n  },\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Gambler extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gambler2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('gambler', 2);\n\nconst gambler2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'skillDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class GladiatorsFinale extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gladiatorsFinale4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('gladiatorsfinale', 4);\n\nconst gladiatorsFinale4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for sword, polearm, claymore characters\n  // Did not make this an Option because this would likely not want to be disabled\n  // Calculation will be wrong if used on a catalyst, bow character\n  // Checking for that would require character weapon type to be implemented first\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class HeartOfDepth extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [heartOfDepth4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('heartofdepth', 4);\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst heartOfDepth4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [HeartOfDepth4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class HuskOfOpulentDreams extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [huskOfOpulentDreams4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('huskofopulentdreams', 4);\n\nclass HuskOfOpulentDreams4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('huskOfOpulentDreams4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        let stacks = this.value;\n        if (stacks > 4) {\n          stacks = 4;\n        }\n\n        stats.defBonus = params4Pc[2] * stacks + (stats.defBonus ?? 0);\n        stats.geoDmgBonus = params4Pc[3] * stacks + (stats.geoDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst huskOfOpulentDreams4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [HuskOfOpulentDreams4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Instructor extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [instructor4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('instructor', 4);\n\nexport class Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.elementalMastery = params4Pc[1] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst instructor4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Instructor4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Lavawalker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [lavawalker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('lavawalker', 4);\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst lavawalker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Lavawalker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MaidenBeloved extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [maidenBeloved4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('maidenbeloved', 4);\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.healedBonus = params4Pc[0] + (stats.healedBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst maidenBeloved4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MaidenBeloved4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MartialArtist extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [martialArtist2Pc, martialArtist4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('martialartist', 2);\n\nconst martialArtist2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params2Pc[0],\n    },\n    {\n      stat: 'chargedDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('martialartist', 4);\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[2] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[2] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst martialArtist4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MartialArtist4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class NoblesseOblige extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [noblesseOblige2Pc, noblesseOblige4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('noblesseoblige', 2);\n\nconst noblesseOblige2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'burstDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('noblesseoblige', 4);\n\nexport class NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst noblesseOblige4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [NoblesseOblige4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class PaleFlame extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [paleFlame4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('paleflame', 4);\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value >= 1) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n\n      if (this.value >= 2) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.physicalDmgBonus = params4Pc[3] + (stats.physicalDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst paleFlame4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [PaleFlame4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class ResolutionOfSojourner extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [resolutionOfSojourner4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('resolutionofsojourner', 4);\n\nconst resolutionOfSojourner4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  extraStats: [\n    {\n      stat: 'chargedCritRate',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class RetracingBolide extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [retracingBolide4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('retracingbolide', 4);\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst retracingBolide4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [RetracingBolide4PcOption],\n};\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Shimenawa extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [shimenawa4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('shimenawasreminiscence', 4);\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const param = params4Pc[1];\n        stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst shimenawa4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Shimenawa4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Tenacity extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tenacity4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n\nexport class Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.shieldStrength = params4Pc[1] + (stats.shieldStrength ?? 0);\n      }\n    },\n  };\n}\n\nconst tenacity4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Tenacity4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Thundersoother extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [thundersoother4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('thundersoother', 4);\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst thundersoother4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Thundersoother4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class TinyMiracle extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tinyMiracle2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('tinymiracle', 2);\n\nconst tinyMiracle2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'].map(\n    (element) => {\n      return {\n        stat: `${element}Res`,\n        value: params2Pc[0],\n      };\n    }\n  ),\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionPicker, IModifierApplicable } from '../../option/Option';\n\nexport default class ViridescentVenerer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [viridescentVenerer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('viridescentvenerer', 4);\n\nexport class ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.enemyResReduction.add(this.value as Element, params4Pc[1]);\n      }\n    },\n  };\n}\n\nconst viridescentVenerer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ViridescentVenerer4PcOption],\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class WanderersTroupe extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [wanderersTroupe4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('wandererstroupe', 4);\n\nconst wanderersTroupe4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for catalyst, bow characters\n  // See Gladiator's Finale for more details\n  extraStats: [\n    {\n      stat: 'chargedDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { Stats } from '../data/types';\nimport ArtifactSet from './ArtifactSet';\nimport ArchaicPetra from './artifactSet/ArchaicPetra';\nimport Berserker from './artifactSet/Berserker';\nimport BlizzardStrayer from './artifactSet/BlizzardStrayer';\nimport BloodstainedChivalry from './artifactSet/BloodstainedChivalry';\nimport BraveHeart from './artifactSet/BraveHeart';\nimport CrimsonWitch from './artifactSet/CrimsonWitch';\nimport EmblemOfSeveredFate from './artifactSet/EmblemOfSeveredFate';\nimport Gambler from './artifactSet/Gambler';\nimport GladiatorsFinale from './artifactSet/GladiatorsFinale';\nimport HeartOfDepth from './artifactSet/HeartOfDepth';\nimport HuskOfOpulentDreams from './artifactSet/HuskOfOpulentDreams';\nimport Instructor from './artifactSet/Instructor';\nimport Lavawalker from './artifactSet/Lavawalker';\nimport MaidenBeloved from './artifactSet/MaidenBeloved';\nimport MartialArtist from './artifactSet/MartialArtist';\nimport NoblesseOblige from './artifactSet/NoblesseOblige';\nimport PaleFlame from './artifactSet/PaleFlame';\nimport ResolutionOfSojourner from './artifactSet/ResolutionOfSojourner';\nimport RetracingBolide from './artifactSet/RetracingBolide';\nimport Shimenawa from './artifactSet/Shimenawa';\nimport Tenacity from './artifactSet/Tenacity';\nimport Thundersoother from './artifactSet/Thundersoother';\nimport TinyMiracle from './artifactSet/TinyMiracle';\nimport ViridescentVenerer from './artifactSet/ViridescentVenerer';\nimport WanderersTroupe from './artifactSet/WanderersTroupe';\n\nconst artifactSets: Record<string, typeof ArtifactSet> = {\n  resolutionofsojourner: ResolutionOfSojourner,\n  tinymiracle: TinyMiracle,\n  martialartist: MartialArtist,\n  gambler: Gambler,\n  gladiatorsfinale: GladiatorsFinale,\n  viridescentvenerer: ViridescentVenerer,\n  wandererstroupe: WanderersTroupe,\n  crimsonwitchofflames: CrimsonWitch,\n  noblesseoblige: NoblesseOblige,\n  emblemofseveredfate: EmblemOfSeveredFate,\n  braveheart: BraveHeart,\n  berserker: Berserker,\n  instructor: Instructor,\n  blizzardstrayer: BlizzardStrayer,\n  thundersoother: Thundersoother,\n  lavawalker: Lavawalker,\n  maidenbeloved: MaidenBeloved,\n  bloodstainedchivalry: BloodstainedChivalry,\n  archaicpetra: ArchaicPetra,\n  retracingbolide: RetracingBolide,\n  heartofdepth: HeartOfDepth,\n  tenacityofthemillelith: Tenacity,\n  paleflame: PaleFlame,\n  shimenawasreminiscence: Shimenawa,\n  huskofopulentdreams: HuskOfOpulentDreams,\n};\n\nfunction getArtifactSetConstructor(id: string): typeof ArtifactSet {\n  return artifactSets[id] ?? ArtifactSet;\n}\n\nexport function initArtifactSet(id: string = '', pieces?: number) {\n  const ArtifactSetConstructor = getArtifactSetConstructor(id);\n\n  return new ArtifactSetConstructor(id, pieces);\n}\n\nexport function getAllArtifactSetBonuses(artifactSets: ArtifactSet[]): Stats {\n  return artifactSets\n    .map((artifactSet) => artifactSet.stats)\n    .reduce((acc, stats) => {\n      Object.entries(stats).forEach(([stat, value]) => {\n        acc[stat] = value + (acc[stat] ?? 0);\n      });\n      return acc;\n    }, {} as Stats);\n}\n\n/* To be implemented\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\nRelic_ReactionWindEnhance,\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionFireEnhance,\n\n// Not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionElectricEnhance: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Requires info about team composition\nRelic_AbsorbTeamElemResist: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Probably can be implemented with a dropdown option for prev received elem dmg\nRelic_ElemDmgEnhanceElemResist: defaultSetBonus,\n*/\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n} from '../data/Data';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../data/types';\nimport type { Talents } from '../talent/types';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { CharacterPassive, TeamPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport Constellation from '../constellation/Constellation';\n\nexport default class Character {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    constellationLevel = 0\n  ) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n    this._constellationLevel = constellationLevel;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n    this.talentFns = this.getTalentFns();\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n    this.constellations = this.getConstellations(this.constellationLevel);\n    this.constellationOptions = this.getConstellationsOptions(\n      this.constellationLevel\n    );\n    this.teamOptions = this.getTeamOptions();\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n  talentFns: Talents = {};\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _constellationLevel: number = 0;\n  get constellationLevel(): number {\n    return this._constellationLevel;\n  }\n  set constellationLevel(value: number) {\n    const prevConstellationLevel = this.constellationLevel;\n    this._constellationLevel = value;\n\n    this.constellations = this.getConstellations(value);\n    this.constellationOptions = this.getConstellationsOptions(\n      value,\n      prevConstellationLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  constellations: Constellation[] = [];\n\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n  constellationOptions: CharacterOption[] = [];\n  teamOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Override in derived classes\n  getTalentFns(): Talents {\n    return {};\n  }\n\n  // Override in derived classes if character has base options\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return [];\n  }\n\n  getCharacterOptions(): CharacterOption[] {\n    return this.getCharacterOptionConstuctors().map((Option) => new Option());\n  }\n\n  // Override in derived classes\n  getAllPassives(): CharacterPassive[] {\n    return [];\n  }\n\n  // Returns passives that character should have based on their current ascension\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    return this.getAllPassives().filter(\n      (passive) => ascensionLevel >= passive.ascensionLevel\n    );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(\n    ascensionLevel: number,\n    prevAscensionLevel?: number\n  ): CharacterOption[] {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  // Override in derived classes\n  getAllConstellations(): Constellation[] {\n    return [];\n  }\n\n  getConstellations(constellationLevel: number): Constellation[] {\n    return this.getAllConstellations().filter(\n      (constellation) => constellationLevel >= constellation.constellationLevel\n    );\n  }\n\n  // getConstellations should be called before this if passives are updated\n  getConstellationsOptions(\n    constellationLevel: number,\n    prevConstellationLevel?: number\n  ): CharacterOption[] {\n    if (prevConstellationLevel === undefined || isNaN(prevConstellationLevel)) {\n      return this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n    }\n\n    if (constellationLevel > prevConstellationLevel) {\n      const newOptions = this.constellations\n        .filter(\n          ({ constellationLevel }) =>\n            constellationLevel > prevConstellationLevel\n        )\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n\n      return this.constellationOptions.concat(newOptions);\n    }\n\n    if (constellationLevel < prevConstellationLevel) {\n      const keptOptionIds = this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.constellationOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (constellationLevel === prevConstellationLevel)\n    return this.constellationOptions;\n  }\n\n  getConstellationStatMixins(): StatMixin[] {\n    return this.constellations\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getConstellationModifierMixins(): ModifierMixin[] {\n    return this.constellations\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n    const constellationOptions = this.constellationOptions;\n\n    return [...characterOptions, ...passiveOptions, ...constellationOptions];\n  }\n\n  // Override in derived classes to implement team buffs\n  getTeamPassive(): TeamPassive | undefined {\n    return undefined;\n  }\n\n  getTeamStatMixin(): StatMixin | undefined {\n    return this.getTeamPassive()?.statMixin;\n  }\n\n  getTeamModifierMixin(): ModifierMixin | undefined {\n    return this.getTeamPassive()?.modifierMixin;\n  }\n\n  getTeamOptions(): CharacterOption[] {\n    const teamPassive = this.getTeamPassive();\n\n    return (\n      teamPassive?.options?.flatMap((Option) => new Option().unroll()) ?? []\n    );\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from '../data/Data';\nimport { StatMixin } from '../option/Mixin';\nimport Weapon from '../weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputted value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\n// Returns a number representing the value to display (e.g. in stat inputs)\nexport function convertStatToDisplayValue(\n  value: number,\n  isPercentage: boolean\n) {\n  if (isPercentage) {\n    return value * 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin.apply(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n  if (combinedStats.burstCritRate !== undefined) {\n    totalStats.burstCritRate = combinedStats.burstCritRate;\n  }\n\n  if (combinedStats.overloadDmgBonus !== undefined) {\n    totalStats.overloadDmgBonus = combinedStats.overloadDmgBonus;\n  }\n  if (combinedStats.burningDmgBonus !== undefined) {\n    totalStats.burningDmgBonus = combinedStats.burningDmgBonus;\n  }\n  if (combinedStats.vaporizeDmgBonus !== undefined) {\n    totalStats.vaporizeDmgBonus = combinedStats.vaporizeDmgBonus;\n  }\n  if (combinedStats.meltDmgBonus !== undefined) {\n    totalStats.meltDmgBonus = combinedStats.meltDmgBonus;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatToDisplayValue, convertStatValue } from '../stat/Stat';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setInputValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n\n  setValue(value: number) {\n    this.value = value;\n    if (this.stat !== '') {\n      this.rawValue = convertStatToDisplayValue(\n        value,\n        propMapping[this.stat].isPercentage\n      );\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  pieces: number;\n  options?: typeof ArtifactSetOption[];\n  extraStats?: Stat[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stat, Stats } from '../data/types';\nimport { getArtifactMainStatValue } from '../data/Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatInputValue(i: number, value: number) {\n    this.subStats[i].setInputValue(value);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value + (stats[subStat.stat] ?? 0);\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import DamageModifier from '../modifier/DamageModifer';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { StatMixin, ModifierMixin } from '../option/Mixin';\n\nexport default interface Constellation {\n  constellationLevel: number;\n  options?: typeof CharacterOption[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n\nexport function ConstellationSkill(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentSkillLevel += 3;\n      },\n    },\n  };\n}\n\nexport function ConstellationBurst(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentBurstLevel += 3;\n      },\n    },\n  };\n}\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  children: CharacterOption[];\n\n  constructor(id: string = '', children: typeof CharacterOption[] = []) {\n    super(id);\n    this.children = children.map((Option) => new Option());\n  }\n\n  unroll(): CharacterOption[] {\n    return [this, ...this.children.flatMap((option) => option.unroll())];\n  }\n}\n","import Constellation, {\n  ConstellationBurst,\n  ConstellationSkill,\n} from '../../constellation/Constellation';\nimport { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IStatsApplicable,\n} from '../../option/Option';\n\nconst [, { params: c2Params }] = getTalentData('albedo').constellations;\n\nclass AlbedoOptionConstellation2\n  extends CharacterOption\n  implements IOptionNumber, IModifierApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('albedoConstellation2');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier, stats: Stats) => {\n      if (this.value > 0) {\n        let stacks = this.value;\n        if (stacks > 4) {\n          stacks = 4;\n        }\n\n        modifier.burstFlatDmg =\n          c2Params[0] * stats.flatDef * stacks + (modifier.burstFlatDmg ?? 0);\n      }\n    },\n  };\n}\n\nconst albedoConstellation2: Constellation = {\n  constellationLevel: 2,\n  options: [AlbedoOptionConstellation2],\n};\n\nconst albedoConstellation3 = ConstellationSkill(3);\n\nexport function AlbedoOptionConstellation4(id?: string) {\n  return class AlbedoOptionConstellation4\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super(id ?? 'albedoConstellation4');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.plungeDmgBonus = 0.3 + (stats.plungeDmgBonus ?? 0);\n        }\n      },\n    };\n  };\n}\n\nconst albedoConstellation4: Constellation = {\n  constellationLevel: 4,\n  options: [AlbedoOptionConstellation4()],\n};\n\nconst albedoConstellation5 = ConstellationBurst(5);\n\nexport function AlbedoOptionConstellation6(id?: string) {\n  return class AlbedoOptionConstellation6\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super(id ?? 'albedoConstellation6');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = 0.17 + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  };\n}\n\nconst albedoConstellation6: Constellation = {\n  constellationLevel: 6,\n  options: [AlbedoOptionConstellation6()],\n};\n\nconst albedoConstellations = [\n  albedoConstellation2,\n  albedoConstellation3,\n  albedoConstellation4,\n  albedoConstellation5,\n  albedoConstellation6,\n];\nexport default albedoConstellations;\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n  Shatter = 'Shatter',\r\n}\r\n\r\nexport default Reaction;\r\n","import DamageModifier from '../../modifier/DamageModifer';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nclass AlbedoOptionAscension1\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('albedoAscension1');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.albedoBlossomDmgBonus = 0.25;\n      }\n    },\n  };\n}\n\nconst albedoAscension1: CharacterPassive = {\n  id: 'albedoAscension1',\n  ascensionLevel: 1,\n  options: [AlbedoOptionAscension1],\n};\n\nconst albedoPassives = [albedoAscension1];\nexport default albedoPassives;\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import { Stats, TalentParams } from '../data/types';\nimport { AttackType, Element, ScalingType, TalentValue } from './types';\nimport Resistance from '../stat/Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport CritType from '../modifier/CritType';\n\n// Helper functions\n\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\n\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\n\nexport function calculateResMultiplier({\n  element,\n  res,\n  resReduction,\n}: {\n  element: Element;\n  res: Resistance;\n  resReduction: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\n\nfunction calculateAmplifyingStrengthMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\n\nfunction calculateAmplifyingReactionMultiplier({\n  reaction,\n  stats,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  element: Element;\n}) {\n  const amplifyingStrength = calculateAmplifyingStrengthMultiplier(\n    reaction,\n    element\n  );\n\n  if (amplifyingStrength > 1) {\n    // Calculate reactionbonus\n    let reactionBonus = 0;\n    switch (reaction) {\n      case Reaction.Vaporize:\n        reactionBonus = stats.vaporizeDmgBonus ?? 0;\n        break;\n      case Reaction.Melt:\n        reactionBonus = stats.meltDmgBonus ?? 0;\n        break;\n      default:\n        break;\n    }\n\n    // Calculate amplifying reaction multiplier\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingStrength * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\n\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let flatDmg = modifier.flatDmg;\n  if (attackType === AttackType.Normal) {\n    flatDmg += modifier.normalAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Charged) {\n    flatDmg += modifier.chargedAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Skill) {\n    flatDmg += modifier.skillFlatDmg ?? 0;\n  } else if (attackType === AttackType.Burst) {\n    flatDmg += modifier.burstFlatDmg ?? 0;\n  }\n\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === CritType.Crit) {\n    crit += stats.critDmg;\n  } else if (modifier.critType === CritType.Average) {\n    let critRate = stats.critRate;\n    if (attackType === AttackType.Charged) {\n      critRate += stats.chargedCritRate ?? 0;\n    } else if (attackType === AttackType.Burst) {\n      critRate += stats.burstCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateAmplifyingReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\n\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  const baseHealing = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n\n  // Incoming healing bonus is ignored because the healer's\n  // incoming healing bonus is not necessarily the same as the\n  // character being healed\n  return baseHealing * (1 + (stats.healingBonus ?? 0));\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n\n// Functions to calculate Talent Values\n\n// Used for all single-hit normal attacks\nexport function normalAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit normal attacks\nexport function normalAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: number[];\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for single-hit charged attacks\nexport function chargedAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for uncharged aim shots\nexport function aimShot({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const element = modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for charged aim shots\nexport function aimShotCharged({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier: multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all physical plunge attacks\nexport function plungeAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionPlunge ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Plunge,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all single-hit skill dmg\nexport function skillSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    scalingType,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit skills\nexport function skillMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for all single-hit burst dmg\nexport function burstSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    element,\n    multiplier,\n    scalingType,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit bursts\nexport function burstMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for damage that does not have an AttackType\nexport function typelessAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.None,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for healing skills/bursts\nexport function healingValue({\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const healing = calculateHealing({\n    stats,\n    multiplier,\n    flatHealing,\n    scalingType,\n  });\n\n  return {\n    damage: [healing],\n  };\n}\n\n// Used for all summons HP\nexport function hpValue({\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    damage: [hp],\n  };\n}\n\n// Used for all shields\nexport function shieldHpValue({\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    damage: [dmgAbsorption],\n  };\n}\n\n// Used for Bennett and Sara's ATK buffs\nexport function atkBuffValue({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const atkBonus = stats.baseAtk * multiplier;\n  return {\n    damage: [atkBonus],\n  };\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('albedo');\n\nconst albedoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  transientBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Defense,\n      stats: getAlbedoTransientBlossomStats(stats, modifier),\n      modifier,\n    }),\n};\n\nconst albedoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fatalBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoTalents: Talents = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalents;\n\n// Helper functions\n\nfunction getAlbedoTransientBlossomStats(\n  stats: Stats,\n  modifier: DamageModifier\n): Stats {\n  if (!modifier.albedoBlossomDmgBonus) {\n    return stats;\n  }\n\n  return {\n    ...stats,\n    dmgBonus: modifier.albedoBlossomDmgBonus + (stats.dmgBonus ?? 0),\n  };\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { TeamPassive } from '../../passive/types';\nimport {\n  AlbedoOptionConstellation4,\n  AlbedoOptionConstellation6,\n} from './AlbedoConstellation';\n\nconst [, { params: a4Params }] = getTalentData('albedo').passives;\n\nclass AlbedoOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('albedoAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.elementalMastery = a4Params[0] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst albedoTeamPassive: TeamPassive = {\n  id: 'albedoTeamPassive',\n  options: [\n    AlbedoOptionAscension4,\n    AlbedoOptionConstellation4('albedoConstellation4Team'),\n    AlbedoOptionConstellation6('albedoConstellation6Team'),\n  ],\n};\nexport default albedoTeamPassive;\n","import Constellation from '../../constellation/Constellation';\nimport { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport albedoConstellations from './AlbedoConstellation';\nimport albedoPassives from './AlbedoPassive';\nimport albedoTalents from './AlbedoTalent';\nimport albedoTeamPassive from './AlbedoTeamPassive';\n\nexport default class Albedo extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('albedo', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return albedoTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return albedoPassives;\n  }\n\n  getAllConstellations(): Constellation[] {\n    return albedoConstellations;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return albedoTeamPassive;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { Element, TalentType } from '../../talent/types';\r\nimport {\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n  IModifierApplicable,\r\n} from '../../option/Option';\r\n\r\nclass AloyOptionCoil\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('coil');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value > 0) {\r\n        const skillParams = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('aloy')\r\n        );\r\n\r\n        if (this.value >= 4) {\r\n          // Rushing Ice state\r\n          stats.normalDmgBonus = skillParams[7] + (stats.normalDmgBonus ?? 0);\r\n        } else {\r\n          stats.normalDmgBonus =\r\n            skillParams[this.value + 3] + (stats.normalDmgBonus ?? 0);\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value >= 4) {\r\n        modifier.infusionNormal = Element.Cryo;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyOptions = [AloyOptionCoil];\r\nexport default aloyOptions;\r\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport {\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [a1Data, a4Data] = getTalentData('aloy').passives;\r\nconst a1Params = a1Data.params;\r\nconst a4Params = a4Data.params;\r\n\r\nclass AloyOptionAscension1\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('aloyAscension1');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value) {\r\n        stats.atkBonus = a1Params[0] * 2 + (stats.atkBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension1: CharacterPassive = {\r\n  id: 'aloyAscension1',\r\n  ascensionLevel: 1,\r\n  options: [AloyOptionAscension1],\r\n};\r\n\r\nclass AloyOptionAscension4\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('aloyAscension4');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value > 0) {\r\n        let stacks = this.value;\r\n        if (stacks > 10) {\r\n          stacks = 10;\r\n        }\r\n\r\n        const cryoDmgBonus = a4Params[0] * stacks;\r\n        stats.cryoDmgBonus = cryoDmgBonus + (stats.cryoDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension4: CharacterPassive = {\r\n  id: 'aloyAscension4',\r\n  ascensionLevel: 4,\r\n  options: [AloyOptionAscension4],\r\n};\r\n\r\nconst aloyPassives = [aloyAscension1, aloyAscension4];\r\nexport default aloyPassives;\r\n","import {\r\n  Element,\r\n  TalentFn,\r\n  TalentProps,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\n\r\nconst talentData = getTalentData('aloy');\r\n\r\nconst aloyAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(0, 2),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloySkill: Record<string, TalentFn> = {\r\n  freezeBombDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chillwaterBombletDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyTalents: Talents = {\r\n  attack: aloyAttack,\r\n  skill: aloySkill,\r\n  burst: aloyBurst,\r\n};\r\n\r\nexport default aloyTalents;\r\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport aloyOptions from './AloyOption';\nimport aloyPassives from './AloyPassive';\nimport aloyTalents from './AloyTalent';\n\nexport default class Aloy extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('aloy', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return aloyTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return aloyOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return aloyPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('amber');\n\nconst amberAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst amberSkill: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  baronBunnyHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst amberBurst: Record<string, TalentFn> = {\n  dmgPerWave: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  totalDmg: ({ stats, modifier }: TalentProps) => {\n    const talentValue = burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    });\n    talentValue.damage[0] *= 18;\n    return talentValue;\n  },\n};\n\nconst amberTalents: Talents = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport amberTalents from './AmberTalent';\n\nexport default class Amber extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('amber', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return amberTalents;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ayaka');\n\nconst ayakaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[7]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaBurst: Record<string, TalentFn> = {\n  cuttingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  bloomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaTalents: Talents = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ayakaOptions from './AyakaOption';\nimport ayakaTalents from './AyakaTalent';\n\nexport default class Ayaka extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ayaka', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ayakaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ayakaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('barbara');\n\nconst barbaraAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraSkill: Record<string, TalentFn> = {\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  dropletDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraBurst: Record<string, TalentFn> = {\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraTalents: Talents = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport barbaraTalents from './BarbaraTalent';\n\nexport default class Barbara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('barbara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return barbaraTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('beidou').passives;\nconst a4Params = a4Data.params;\n\nclass BeidouOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('beidouAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = a4Params[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = a4Params[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst beidouAscension4: CharacterPassive = {\n  id: 'beidouAscension4',\n  ascensionLevel: 4,\n  options: [BeidouOptionAscension4],\n};\n\nconst beidouPassives = [beidouAscension4];\nexport default beidouPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  chargedAttackSingle,\n  shieldHpValue,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('beidou');\n\nconst beidouAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouSkill: Record<string, TalentFn> = {\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  baseDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  dmgBonusOnHitTaken: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouBurst: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightningDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouTalents: Talents = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalents;\n","import { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport beidouPassives from './BeidouPassive';\nimport beidouTalents from './BeidouTalent';\n\nexport default class Beidou extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('beidou', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return beidouTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return beidouPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  atkBuffValue,\n  burstSingle,\n  chargedAttackMulti,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillMulti,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('bennett');\n\nconst bennettAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargeLevel1Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n  chargeLevel2Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousPerSecond: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  atkBonus: ({ stats, modifier }: TalentProps) =>\n    atkBuffValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettTalents: Talents = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalents;\n","import {\n  IOptionBoolean,\n  IOptionNumber,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Stats } from '../../data/types';\nimport { getOptionValue } from '../../option/OptionUtils';\nimport { TeamPassive } from '../../passive/types';\n\nclass BennettOptionAtkBuff extends CharacterOption implements IOptionNumber {\n  value = 0;\n\n  constructor() {\n    super('bennettAtkBuff');\n  }\n}\n\nclass BennettOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('bennettBurst', [BennettOptionAtkBuff]);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const atkBuff = getOptionValue(this.children[0]) as number;\n        stats.flatAtk = atkBuff + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n}\n\nconst bennettTeamPassive: TeamPassive = {\n  id: 'bennettTeamPassive',\n  options: [BennettOptionBurst],\n};\nexport default bennettTeamPassive;\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport bennettTalents from './BennettTalent';\nimport bennettTeamPassive from './BennettTeamPassive';\n\nexport default class Bennett extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('bennett', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return bennettTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return bennettTeamPassive;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('chongyun');\n\nconst chongyunAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunTalents: Talents = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport chongyunOptions from './ChongyunOption';\nimport chongyunTalents from './ChongyunTalent';\n\nexport default class Chongyun extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('chongyun', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return chongyunTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return chongyunOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diluc');\n\nconst dilucAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucSkill: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucTalents: Talents = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalents;\n","import { Stats } from '../../data/types';\nimport { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      _talentBurstLevel: number,\n      ascensionLevel: number\n    ) => {\n      if (this.value && ascensionLevel >= 4) {\n        const params = getTalentData('diluc').passives.find(\n          (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n        )?.params;\n        const pyroDmgBonus = params?.[1] ?? NaN;\n\n        stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dilucTalents from './DilucTalent';\nimport dilucOptions from './DilucOption';\n\nexport default class Diluc extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diluc', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dilucTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return dilucOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  shieldHpValue,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diona');\n\nconst dionaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaSkill: Record<string, TalentFn> = {\n  icyPawDmgPerPaw: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpPress: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  shieldHpHold: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier: { ...modifier, dionaHoldSkill: true },\n    }),\n};\n\nconst dionaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  continuousFieldDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousTime: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaTalents: Talents = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dionaTalents from './DionaTalent';\n\nexport default class Diona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dionaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('eula');\n\nconst eulaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  icewhirlBrandDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordBaseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordStackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaTalents: Talents = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport eulaTalents from './EulaTalent';\n\nexport default class Eula extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('eula', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return eulaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('fischl');\n\nconst fischlAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlSkill: Record<string, TalentFn> = {\n  ozDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  summoningDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlBurst: Record<string, TalentFn> = {\n  fallingThunderDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlTalents: Talents = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport fischlTalents from './FischlTalent';\n\nexport default class Fischl extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('fischl', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return fischlTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  hpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ganyu');\n\nconst ganyuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  aimShotChargeLevel1: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowBloomDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  iceLotusHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuBurst: Record<string, TalentFn> = {\n  iceShardDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuTalents: Talents = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ganyuTalents from './GanyuTalent';\n\nexport default class Ganyu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ganyu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ganyuTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('hutao').passives;\nconst a4Params = a4Data.params;\n\nclass HuTaoOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('hutaoAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.pyroDmgBonus = a4Params[1] + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst hutaoAscension4: CharacterPassive = {\n  id: 'hutaoAscension4',\n  ascensionLevel: 4,\n  options: [HuTaoOptionAscension4],\n};\n\nconst hutaoPassives = [hutaoAscension4];\nexport default hutaoPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('hutao');\n\nconst hutaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoSkill: Record<string, TalentFn> = {\n  bloodBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgLowHp: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n\n  hpRegenLowHp: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoTalents: Talents = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      talentSkillLevel: number,\n      _talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let skillParams = getTalentParams(\n          TalentType.Skill,\n          talentSkillLevel,\n          getTalentData('hutao')\n        );\n\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n        let flatAtkBonus = totalHp * skillParams[1];\n        if (flatAtkBonus > stats.baseAtk * skillParams[6]) {\n          flatAtkBonus = stats.baseAtk * skillParams[6];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport hutaoPassives from './HutaoPassive';\nimport hutaoTalents from './HutaoTalent';\nimport hutaoOptions from './HutaoOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Hutao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('hutao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return hutaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return hutaoOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return hutaoPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('jean');\n\nconst jeanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieldEnterExitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  fieldActivationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanTalents: Talents = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport jeanTalents from './JeanTalent';\n\nexport default class Jean extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('jean', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return jeanTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kaeya');\n\nconst kaeyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaTalents: Talents = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kaeyaTalents from './KaeyaTalent';\n\nexport default class Kaeya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kaeya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kaeyaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kazuha');\n\nconst kazuhaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[2],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst kazuhaTalents: Talents = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.elementalAbsorption = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionPlunge = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kazuhaTalents from './KazuhaTalent';\nimport kazuhaOptions from './KazuhaOption';\n\nexport default class Kazuha extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kazuha', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kazuhaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kazuhaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('keqing');\n\nconst keqingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingSkill: Record<string, TalentFn> = {\n  lightningStilettoDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  thunderclapSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Electro,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  consecutiveSlashDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 8,\n      element: Element.Electro,\n      params: Array(8).fill(\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1]\n      ),\n      stats,\n      modifier,\n    }),\n\n  lastAttackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingTalents: Talents = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport keqingTalents from './KeqingTalent';\n\nexport default class Keqing extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('keqing', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return keqingTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('klee');\n\nconst kleeAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeSkill: Record<string, TalentFn> = {\n  jumpyDumptyDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  mineDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeBurst: Record<string, TalentFn> = {\n  sparksNSplashDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeTalents: Talents = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kleeTalents from './KleeTalent';\n\nexport default class Klee extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('klee', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kleeTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('kokomi').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst kokomiAscension0: CharacterPassive = {\r\n  id: 'kokomiAscension0',\r\n  ascensionLevel: 0,\r\n  options: [],\r\n  statMixin: {\r\n    apply: (stats: Stats) => {\r\n      stats.critRate = (stats.critRate ?? 0) - 1;\r\n      if (stats.critRate < 0) {\r\n        stats.critRate = 0;\r\n      }\r\n\r\n      stats.healingBonus = 0.25 + (stats.healingBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiAscension4: CharacterPassive = {\r\n  id: 'kokomiAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  modifierMixin: {\r\n    apply: (modifier: DamageModifier) => {\r\n      modifier.kokomiHealingBonusDmg = a4Params[0];\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiPassives = [kokomiAscension0, kokomiAscension4];\r\nexport default kokomiPassives;\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  burstSingle,\r\n  chargedAttackSingle,\r\n  healingValue,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  ScalingType,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('kokomi');\r\n\r\nconst kokomiAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier: getKokomiChargedAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiSkill: Record<string, TalentFn> = {\r\n  hpRegen: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  rippleDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiSkillModifier(stats, modifier),\r\n    }),\r\n};\r\n\r\nconst kokomiBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      scalingType: ScalingType.Hp,\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiTalents: Talents = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getKokomiNormalAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const normalAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[3] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.normalAttackFlatDmg =\r\n    normalAttackBonusDmg + (newModifier.normalAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiChargedAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const chargedAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[4] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.chargedAttackFlatDmg =\r\n    chargedAttackBonusDmg + (newModifier.chargedAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiSkillModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const skillBonusDmg =\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[8] * stats.flatHp;\r\n  newModifier.skillFlatDmg = skillBonusDmg + (newModifier.skillFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value) {\r\n        modifier.kokomiBurst = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kokomiPassives from './KokomiPassive';\nimport kokomiTalents from './KokomiTalent';\nimport kokomiOptions from './KokomiOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Kokomi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kokomi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kokomiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kokomiOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return kokomiPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('lisa');\n\nconst lisaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack0: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack1: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack2: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack3: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaTalents: Talents = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport lisaTalents from './LisaTalent';\n\nexport default class Lisa extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('lisa', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return lisaTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { TalentType } from '../../talent/types';\n\nclass MonaOptionOmen\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('omen');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('mona')\n        );\n\n        stats.dmgBonus = burstParams[9] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst monaOptions = [MonaOptionOmen];\nexport default monaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('mona');\n\nconst monaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaSkill: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaBurst: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaTalents: Talents = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport monaOptions from './MonaOption';\nimport monaTalents from './MonaTalent';\n\nexport default class Mona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('mona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return monaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return monaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ningguang');\n\nconst ningguangAttack: Record<string, TalentFn> = {\n  normalAtkDmg: ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  starJadeDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  jadeScreenHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangBurst: Record<string, TalentFn> = {\n  dmgPerGem: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangTalents: Talents = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ningguangTalents from './NingguangTalent';\n\nexport default class Ningguang extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ningguang', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ningguangTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  skillSingle,\n  shieldHpValue,\n  healingValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('noelle');\n\nconst noelleAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  firstSwingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleTalents: Talents = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('noelle')\n        );\n\n        const totalDef =\n          (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n          (stats.flatDef ?? 0);\n\n        stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Geo;\n      }\n    },\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport noelleTalents from './NoelleTalent';\nimport noelleOptions from './NoelleOption';\n\nexport default class Noelle extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('noelle', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return noelleTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return noelleOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  healingValue,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('qiqi');\n\nconst qiqiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  heraldOfFrostDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiTalents: Talents = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport qiqiTalents from './QiqiTalent';\n\nexport default class Qiqi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('qiqi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return qiqiTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport { Priority } from '../../option/Mixin';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('raiden').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst raidenAscension4: CharacterPassive = {\r\n  id: 'raidenAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  statMixin: {\r\n    priority: Priority.Last,\r\n    apply: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = a4Params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst raidenPassives = [raidenAscension4];\r\nexport default raidenPassives;\r\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  normalAttackSingle,\r\n  chargedAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  burstMulti,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('raiden');\r\n\r\nconst raidenAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(3, 5),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[10],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenSkill: Record<string, TalentFn> = {\r\n  skillDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  coordinatedAtkDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenBurst: Record<string, TalentFn> = {\r\n  musouNoHitotachiDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[0] + getInitialResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[4] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[5] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[6] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(7, 9)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[9] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(10, 12)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[13] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[14] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[15] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenTalents: Talents = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getInitialResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[1] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n\r\nfunction getAttackResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[2] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentParams, getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value) {\r\n        const params = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('raiden')\r\n        );\r\n\r\n        const burstDmgBonus = params[3] * 90;\r\n        stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value < 0) modifier.resolveStacks = 0;\r\n      else if (this.value > 60) modifier.resolveStacks = 60;\r\n      else modifier.resolveStacks = this.value;\r\n    },\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport raidenPassives from './RaidenPassive';\nimport raidenTalents from './RaidenTalent';\nimport raidenOptions from './RaidenOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Raiden extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('raiden', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return raidenTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return raidenOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return raidenPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('razor');\n\nconst razorAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorTalents: Talents = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport razorTalents from './RazorTalent';\n\nexport default class Razor extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('razor', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return razorTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('rosaria');\n\nconst rosariaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n  iceLanceDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaTalents: Talents = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport rosariaTalents from './RosariaTalent';\n\nexport default class Rosaria extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('rosaria', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return rosariaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  atkBuffValue,\r\n  burstSingle,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  TalentFn,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('sara');\r\n\r\nconst saraAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraSkill: Record<string, TalentFn> = {\r\n  tenguJuuraiAmbushDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  atkBonus: ({ stats, modifier }: TalentProps) =>\r\n    atkBuffValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraBurst: Record<string, TalentFn> = {\r\n  tenguJuuraiTitanbreakerDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  tenguJuuraiStormclusterDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraTalents: Talents = {\r\n  attack: saraAttack,\r\n  skill: saraSkill,\r\n  burst: saraBurst,\r\n};\r\n\r\nexport default saraTalents;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport saraTalents from './SaraTalent';\n\nexport default class Sara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return saraTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sayu');\n\nconst sayuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuSkill: Record<string, TalentFn> = {\n  fuufuuWindwheelDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickPressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickHoldDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWindwheelElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n\n  fuufuuWhirlwindKickElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[4],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sayuBurst: Record<string, TalentFn> = {\n  activationDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  activationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuTalents: Talents = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sayuTalents from './SayuTalent';\nimport sayuOptions from './SayuOption';\n\nexport default class Sayu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sayu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sayuTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sayuOptions;\n  }\n}\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sucrose');\n\nconst sucroseAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sucroseTalents: Talents = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sucroseOptions from './SucroseOption';\nimport sucroseTalents from './SucroseTalent';\n\nexport default class Sucrose extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sucrose', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sucroseTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sucroseOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  typelessAttack,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('tartaglia');\n\nconst tartagliaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n\n  riptideFlashDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  riptideBurstDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaSkill: Record<string, TalentFn> = {\n  stanceChangeDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(8, 10),\n      stats,\n      modifier,\n    }),\n\n  riptideSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaBurst: Record<string, TalentFn> = {\n  burstDmgMelee: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgRanged: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  riptideBlastDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaTalents: Talents = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nexport const tartagliaAscension0: CharacterPassive = {\n  id: 'tartagliaAscension0',\n  ascensionLevel: 0,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.talentAttackLevel += 1;\n    },\n  },\n};\n\nconst tartagliaPassives = [tartagliaAscension0];\nexport default tartagliaPassives;\n","import { TeamPassive } from '../../passive/types';\nimport { tartagliaAscension0 } from './TartagliaPassive';\n\nconst tartagliaTeamPassive: TeamPassive = tartagliaAscension0;\nexport default tartagliaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport tartagliaTalents from './TartagliaTalent';\nimport tartagliaPassives from './TartagliaPassive';\nimport tartagliaTeamPassive from './TartagliaTeamPassive';\n\nexport default class Tartaglia extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('tartaglia', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return tartagliaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return tartagliaPassives;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return tartagliaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('thoma');\n\nconst thomaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  shieldHpMax: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieryCollapseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier: getThomaFieryCollapseModifier(stats, modifier),\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatBonus: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaTalents: Talents = {\n  attack: thomaAttack,\n  skill: thomaSkill,\n  burst: thomaBurst,\n};\n\nexport default thomaTalents;\n\n// Helper functions\n\nfunction getThomaFieryCollapseModifier(\n  stats: Stats,\n  modifier: DamageModifier\n): DamageModifier {\n  if (!modifier.thomaHpBonusDmg) {\n    return modifier;\n  }\n\n  const flatDmg = modifier.thomaHpBonusDmg * stats.flatHp + modifier.flatDmg;\n\n  return { ...modifier, flatDmg };\n}\n","import { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('thoma').passives;\nconst a4Params = a4Data.params;\n\nconst thomaAscension4: CharacterPassive = {\n  id: 'thomaAscension4',\n  ascensionLevel: 4,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.thomaHpBonusDmg = a4Params[0];\n    },\n  },\n};\n\nconst thomaPassives = [thomaAscension4];\nexport default thomaPassives;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport Constellation, {\n  ConstellationBurst,\n  ConstellationSkill,\n} from '../../constellation/Constellation';\n\nconst [, , , , , { params: c6Params }] = getTalentData('thoma').constellations;\n\nexport function ThomaOptionConstellation6(id?: string) {\n  return class ThomaOptionConstellation6\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super(id ?? 'thomaConstellation6');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = c6Params[0] + (stats.normalDmgBonus ?? 0);\n          stats.chargedDmgBonus = c6Params[0] + (stats.chargedDmgBonus ?? 0);\n          stats.plungeDmgBonus = c6Params[0] + (stats.plungeDmgBonus ?? 0);\n        }\n      },\n    };\n  };\n}\n\nconst thomaConstellation3 = ConstellationSkill(3);\nconst thomaConstellation5 = ConstellationBurst(5);\n\nconst thomaConstellation6: Constellation = {\n  constellationLevel: 6,\n  options: [ThomaOptionConstellation6()],\n};\n\nconst thomaConstellations = [\n  thomaConstellation3,\n  thomaConstellation5,\n  thomaConstellation6,\n];\nexport default thomaConstellations;\n","import { TeamPassive } from '../../passive/types';\nimport { ThomaOptionConstellation6 } from './ThomaConstellation';\n\nconst thomaTeamPassive: TeamPassive = {\n  id: 'thomaTeamPassive',\n  options: [ThomaOptionConstellation6('thomaConstellation6Team')],\n};\n\nexport default thomaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport thomaTalents from './ThomaTalent';\nimport thomaPassives from './ThomaPassive';\nimport Constellation from '../../constellation/Constellation';\nimport thomaConstellations from './ThomaConstellation';\nimport thomaTeamPassive from './ThomaTeamPassive';\n\nexport default class Thoma extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('thoma', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return thomaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return thomaPassives;\n  }\n\n  getAllConstellations(): Constellation[] {\n    return thomaConstellations;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return thomaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('venti');\n\nconst ventiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst ventiTalents: Talents = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ventiTalents from './VentiTalent';\nimport ventiOptions from './VentiOption';\n\nexport default class Venti extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('venti', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ventiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ventiOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiangling');\n\nconst xianglingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingSkill: Record<string, TalentFn> = {\n  guobaDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingBurst: Record<string, TalentFn> = {\n  swing1HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  swing2HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  swing3HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  pyronadoDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingTalents: Talents = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xianglingTalents from './XianglingTalent';\n\nexport default class Xiangling extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiangling', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xianglingTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('xiao')\n        );\n\n        stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiao');\n\nconst xiaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoTalents: Talents = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n};\n\nexport default xiaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xiaoOptions from './XiaoOption';\nimport xiaoTalents from './XiaoTalent';\n\nexport default class Xiao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xiaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return xiaoOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, TalentFn, Talents, Element, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('xingqiu');\n\nconst xingqiuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(7, 9),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuBurst: Record<string, TalentFn> = {\n  swordRainDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuTalents: Talents = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xingqiuTalents from './XingqiuTalent';\n\nexport default class Xingqiu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xingqiu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xingqiuTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xinyan');\n\nconst xinyanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanSkill: Record<string, TalentFn> = {\n  swingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel1: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel2: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel3: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Physical,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  pyroDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanTalents: Talents = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xinyanTalents from './XinyanTalent';\n\nexport default class Xinyan extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xinyan', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xinyanTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('yanfei')\n        );\n        stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('yanfei');\n\nconst yanfeiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal0: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal1: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal2: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal3: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal4: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[15],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[16],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[17],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiTalents: Talents = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yanfeiOptions from './YanfeiOption';\nimport yanfeiTalents from './YanfeiTalent';\n\nexport default class Yanfei extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yanfei', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yanfeiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yanfeiOptions;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionNormal = Element.Pyro;\n        modifier.yoimiyaSkill = true;\n      }\n    },\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [a1Data] = getTalentData('yoimiya').passives;\nconst a1Params = a1Data.params;\n\nclass YoimiyaOptionAscension1\n  extends CharacterOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('yoimiyaAscension1');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      let pyroDmgBonus = this.value * a1Params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    },\n  };\n}\n\nconst yoimiyaAscension1: CharacterPassive = {\n  id: 'yoimiyaAscension1',\n  ascensionLevel: 1,\n  options: [YoimiyaOptionAscension1],\n};\n\nconst yoimiyaPassives = [yoimiyaAscension1];\nexport default yoimiyaPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('yoimiya');\n\nconst yoimiyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[0],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[3],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  kindlingArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  aurousBlazeExplosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaTalents: Talents = {\n  attack: yoimiyaAttack,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalents;\n\n// Helper functions\n\nfunction getYoimiyaNormalAttackMultiplier(\n  multiplier: number,\n  modifier: DamageModifier\n): number {\n  if (!modifier.yoimiyaSkill) {\n    return multiplier;\n  }\n\n  return (\n    multiplier *\n    getTalentParams(TalentType.Skill, modifier.talentSkillLevel, talentData)[3]\n  );\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yoimiyaOptions from './YoimiyaOption';\nimport yoimiyaPassives from './YoimiyaPassive';\nimport yoimiyaTalents from './YoimiyaTalent';\n\nexport default class Yoimiya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yoimiya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yoimiyaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yoimiyaOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return yoimiyaPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('zhongli');\n\nconst zhongliAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliSkill: Record<string, TalentFn> = {\n  stoneSteeleDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  resonanceDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliTalents: Talents = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalents;\n","import { IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { TeamPassive } from '../../passive/types';\n\nclass ZhongliOptionShield extends CharacterOption implements IOptionBoolean {\n  value = false;\n\n  constructor() {\n    super('zhongliShield');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        Object.values(Element).forEach((element) =>\n          modifier.enemyResReduction.set(element, 0.2)\n        );\n      }\n    },\n  };\n}\n\nconst zhongliTeamPassive: TeamPassive = {\n  id: 'zhongliTeamPassive',\n  options: [ZhongliOptionShield],\n};\nexport default zhongliTeamPassive;\n","import Albedo from './albedo/Albedo';\nimport Aloy from './aloy/Aloy';\nimport Amber from './amber/Amber';\nimport Ayaka from './ayaka/Ayaka';\nimport Barbara from './barbara/Barbara';\nimport Beidou from './beidou/Beidou';\nimport Bennett from './bennett/Bennett';\nimport Character from './Character';\nimport Chongyun from './chongyun/Chongyun';\nimport Diluc from './diluc/Diluc';\nimport Diona from './diona/Diona';\nimport Eula from './eula/Eula';\nimport Fischl from './fischl/Fischl';\nimport Ganyu from './ganyu/Ganyu';\nimport Hutao from './hutao/Hutao';\nimport Jean from './jean/Jean';\nimport Kaeya from './kaeya/Kaeya';\nimport Kazuha from './kazuha/Kazuha';\nimport Keqing from './keqing/Keqing';\nimport Klee from './klee/Klee';\nimport Kokomi from './kokomi/Kokomi';\nimport Lisa from './lisa/Lisa';\nimport Mona from './mona/Mona';\nimport Ningguang from './ningguang/Ningguang';\nimport Noelle from './noelle/Noelle';\nimport Qiqi from './qiqi/Qiqi';\nimport Raiden from './raiden/Raiden';\nimport Razor from './razor/Razor';\nimport Rosaria from './rosaria/Rosaria';\nimport Sara from './sara/Sara';\nimport Sayu from './sayu/Sayu';\nimport Sucrose from './sucrose/Sucrose';\nimport Tartaglia from './tartaglia/Tartaglia';\nimport Thoma from './thoma/Thoma';\nimport Venti from './venti/Venti';\nimport Xiangling from './xiangling/Xiangling';\nimport Xiao from './xiao/Xiao';\nimport Xingqiu from './xingqiu/Xingqiu';\nimport Xinyan from './xinyan/Xinyan';\nimport Yanfei from './yanfei/Yanfei';\nimport Yoimiya from './yoimiya/Yoimiya';\nimport Zhongli from './zhongli/Zhongli';\n\nconst characters: Record<string, typeof Character> = {\n  albedo: Albedo,\n  aloy: Aloy,\n  amber: Amber,\n  ayaka: Ayaka,\n  barbara: Barbara,\n  beidou: Beidou,\n  bennett: Bennett,\n  chongyun: Chongyun,\n  diluc: Diluc,\n  diona: Diona,\n  eula: Eula,\n  fischl: Fischl,\n  ganyu: Ganyu,\n  hutao: Hutao,\n  jean: Jean,\n  kaeya: Kaeya,\n  kazuha: Kazuha,\n  keqing: Keqing,\n  klee: Klee,\n  kokomi: Kokomi,\n  lisa: Lisa,\n  mona: Mona,\n  ningguang: Ningguang,\n  noelle: Noelle,\n  qiqi: Qiqi,\n  raiden: Raiden,\n  razor: Razor,\n  rosaria: Rosaria,\n  sara: Sara,\n  sayu: Sayu,\n  sucrose: Sucrose,\n  tartaglia: Tartaglia,\n  thoma: Thoma,\n  venti: Venti,\n  xiangling: Xiangling,\n  xiao: Xiao,\n  xingqiu: Xingqiu,\n  xinyan: Xinyan,\n  yanfei: Yanfei,\n  yoimiya: Yoimiya,\n  zhongli: Zhongli,\n};\n\nfunction getCharacterConstructor(id: string): typeof Character {\n  return characters[id] ?? Character;\n}\n\nexport function initCharacter(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  constellationLevel?: number\n): Character {\n  const CharacterConstructor = getCharacterConstructor(id);\n\n  return new CharacterConstructor(id, level, hasAscended, constellationLevel);\n}\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport zhongliTalents from './ZhongliTalent';\nimport zhongliTeamPassive from './ZhongliTeamPassive';\n\nexport default class Zhongli extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('zhongli', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return zhongliTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return zhongliTeamPassive;\n  }\n}\n","import { Element } from '../talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","import {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  WeaponPassiveData,\n  WeaponPassiveSetData,\n} from '../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getWeaponPassiveAt,\n  getWeaponPassiveData,\n} from '../data/Data';\nimport { getOptionValue, setOptionValue } from '../option';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../passive/types';\nimport type { WeaponType } from './types';\nimport { Talents } from '../talent/types';\n\nexport default class Weapon {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    refinement: number = 1\n  ) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n    this._refinement = refinement;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.passiveDataSet = getWeaponPassiveData(value);\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(\n        this.refinement,\n        this.passiveDataSet\n      );\n    }\n    this.passive = this.getPassive(this.refinement);\n    this.passiveOptions = this.getPassiveOptions();\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n\n    this.talentFns = this.getTalentFns(this.refinement);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  passiveDataSet?: WeaponPassiveSetData;\n  talentFns: Talents = {};\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  private _refinement: number = 1;\n  get refinement(): number {\n    return this._refinement;\n  }\n  set refinement(value: number) {\n    this._refinement = value;\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(value, this.passiveDataSet);\n      this.passive = this.getPassive(value);\n      this.passiveOptions = this.getPassiveOptions(true);\n    }\n  }\n\n  stats: Stats = {};\n  passiveData?: WeaponPassiveData;\n  passive?: WeaponPassive;\n  passiveOptions: WeaponOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n\n  // Override in derived classes to implement special passives\n  // Only returns the extra passive bonuses, excluding the direct stat bonuses\n  // To be called when passive should update (e.g. id or refinement change)\n  getPassive(_refinement: number): WeaponPassive | undefined {\n    return;\n  }\n\n  // getPassive should be called before this if passives are updated\n  getPassiveOptions(shouldKeepValue: boolean = false) {\n    let newOptions = (this.passive?.options ?? []).map(\n      (Option) => new Option()\n    );\n\n    if (shouldKeepValue) {\n      this.passiveOptions.forEach((option) => {\n        let newOption = newOptions.find(\n          (newOption) => newOption.id === option.id\n        );\n        if (newOption !== undefined) {\n          setOptionValue(newOption, getOptionValue(option));\n        }\n      });\n    }\n\n    return newOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    let statMixins = [];\n\n    if (this.passive?.statMixin !== undefined) {\n      statMixins.push(this.passive.statMixin);\n    }\n\n    if (this.passiveData?.statBonuses !== undefined) {\n      this.passiveData.statBonuses.forEach(({ stat, value }) => {\n        statMixins.push({\n          apply: (stats: Stats) => {\n            stats[stat] = value + (stats[stat] ?? 0);\n          },\n        });\n      });\n    }\n\n    return statMixins;\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    if (this.passive?.modifierMixin === undefined) {\n      return [];\n    }\n\n    return [this.passive.modifierMixin];\n  }\n\n  // Override in derived classes if weapon does special damage instance\n  getTalentFns(_refinement: number): Talents {\n    return {};\n  }\n}\n","import Option from '../Option';\n\nexport default class WeaponOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { cinnabarSpindlePassive } from './CinnabarSpindlePassive';\n\nexport default class CinnabarSpindle extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('cinnabarspindle', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return cinnabarSpindlePassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function cinnabarSpindlePassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('cinnabarspindle', refinement);\n\n  class CinnabarSpindleOption\n    extends WeaponOption\n    implements IOptionBoolean, IModifierApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('cinnabarSpindlePassive');\n    }\n\n    modifierMixin = {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        if (this.value) {\n          modifier.skillFlatDmg =\n            stats.flatDef * params[0] + (modifier.skillFlatDmg ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'cinnabarspindle',\n    options: [CinnabarSpindleOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { dragonsBanePassive } from './DragonsBanePassive';\n\nexport default class DragonsBane extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('dragonsbane', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return dragonsBanePassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function dragonsBanePassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('dragonsbane', refinement);\n\n  class DragonsBaneOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('dragonsBanePassive');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'dragonsBane',\n    options: [DragonsBaneOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { engulfingLightningPassive } from './EngulfingLightningPassive';\n\nexport default class EngulfingLightning extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('engulfinglightning', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return engulfingLightningPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function engulfingLightningPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('engulfinglightning', refinement);\n\n  class EngulfingLightningOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('engulfingLightningEnergyRecharge');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.energyRecharge = params[2] + (stats.energyRecharge ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'engulfingLightning',\n    options: [EngulfingLightningOption],\n\n    statMixin: {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        let atkBonus = (stats.energyRecharge - 1) * params[0];\n        if (atkBonus > params[1]) {\n          atkBonus = params[1];\n        }\n\n        stats.atkBonus = atkBonus + (stats.atkBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { everlastingMoonglowPassive } from './EverlastingMoonglowPassive';\n\nexport default class EverlastingMoonglow extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('everlastingmoonglow', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return everlastingMoonglowPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function everlastingMoonglowPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('everlastingmoonglow', refinement);\n\n  return {\n    id: 'everlastingMoonglow',\n    options: [],\n    modifierMixin: {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        modifier.normalAttackFlatDmg =\n          params[1] * (stats.flatHp ?? 0) + (modifier.normalAttackFlatDmg ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { luxuriousSeaLordPassive } from './LuxuriousSeaLordPassive';\n\nexport default class LuxuriousSeaLord extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('luxurioussealord', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return luxuriousSeaLordPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function luxuriousSeaLordPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('luxurioussealord', refinement);\n\n  return {\n    id: 'luxuriousSeaLord',\n    options: [],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { polarStarPassive } from './PolarStarPassive';\n\nexport default class PolarStar extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('polarstar', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return polarStarPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function polarStarPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('polarstar', refinement);\n\n  class PolarStarOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('polarStarStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        let stacks = this.value;\n\n        if (stacks > 0) {\n          if (stacks > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[stacks + 1] + (stats.atkBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'polarStar',\n    options: [PolarStarOption],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { solarPearlPassive } from './SolarPearlPassive';\n\nexport default class SolarPearl extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('solarpearl', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return solarPearlPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function solarPearlPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('solarpearl', refinement);\n\n  class SolarPearlOptionNormalAttack\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlNormalAttack');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n          stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  class SolarPearlOptionSkillBurst\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlSkillBurst');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'solarPearl',\n    options: [SolarPearlOptionNormalAttack, SolarPearlOptionSkillBurst],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { staffOfHomaPassive } from './StaffOfHomaPassive';\n\nexport default class StaffOfHoma extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('staffofhoma', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return staffOfHomaPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function staffOfHomaPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('staffofhoma', refinement);\n\n  class StaffOfHomaOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('staffOfHomaAtkBonus');\n    }\n\n    statMixin = {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n\n        let flatAtkBonus = totalHp * params[1];\n        if (this.value) {\n          flatAtkBonus += totalHp * params[2];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      },\n    };\n  }\n\n  return {\n    id: 'staffOfHoma',\n    options: [StaffOfHomaOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { theCatchPassive } from './TheCatchPassive';\n\nexport default class TheCatch extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('thecatch', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return theCatchPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function theCatchPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('thecatch', refinement);\n\n  return {\n    id: 'theCatch',\n    options: [],\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        stats.burstCritRate = params[1] + (stats.burstCritRate ?? 0);\n      },\n    },\n  };\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport const watatsumiWavewalkerPassive =\n  (id: string) =>\n  (refinement: number): WeaponPassive => {\n    const params = getWeaponPassiveParams(id, refinement);\n\n    class WatatsumiWavewalkerOption\n      extends WeaponOption\n      implements IOptionNumber, IStatsApplicable\n    {\n      value = 0;\n\n      constructor() {\n        super('watatsumiWavewalkerPassive');\n      }\n\n      statMixin = {\n        apply: (stats: Stats) => {\n          if (this.value > 0) {\n            let burstDmgBonus = this.value * (params[0] / 100);\n            if (burstDmgBonus > params[1]) {\n              burstDmgBonus = params[1];\n            }\n            stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n          }\n        },\n      };\n    }\n\n    return {\n      id,\n      options: [WatatsumiWavewalkerOption],\n    };\n  };\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class Akuoumaru extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('akuoumaru', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('akuoumaru')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class MouunsMoon extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('mouunsmoon', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('mouunsmoon')(refinement);\n  }\n}\n","import CinnabarSpindle from './cinnabarspindle/CinnarbarSpindle';\nimport DragonsBane from './dragonsbane/DragonsBane';\nimport EngulfingLightning from './engulfinglightning/EngulfingLightning';\nimport EverlastingMoonglow from './everlastingmoonglow/EverlastingMoonglow';\nimport LuxuriousSeaLord from './luxurioussealord/LuxuriousSeaLord';\nimport PolarStar from './polarstar/PolarStar';\nimport SolarPearl from './solarpearl/SolarPearl';\nimport StaffOfHoma from './staffofhoma/StaffOfHoma';\nimport TheCatch from './thecatch/TheCatch';\nimport Akuoumaru from './watatsumi/Akuoumaru';\nimport MouunsMoon from './watatsumi/MouunsMoon';\nimport WavebreakersFin from './watatsumi/WavebreakersFin';\nimport Weapon from './Weapon';\nimport Whiteblind from './whiteblind/Whiteblind';\n\nconst weapons: Record<string, typeof Weapon> = {\n  // Sword\n  cinnabarspindle: CinnabarSpindle,\n\n  // Polearm\n  dragonsbane: DragonsBane,\n  engulfinglightning: EngulfingLightning,\n  staffofhoma: StaffOfHoma,\n  thecatch: TheCatch,\n  wavebreakersfin: WavebreakersFin,\n\n  // Catalyst\n  everlastingmoonglow: EverlastingMoonglow,\n  solarpearl: SolarPearl,\n\n  // Claymore\n  luxurioussealord: LuxuriousSeaLord,\n  whiteblind: Whiteblind,\n  akuoumaru: Akuoumaru,\n\n  // Bow\n  polarstar: PolarStar,\n  mouunsmoon: MouunsMoon,\n};\n\nfunction getWeaponConstructor(id: string): typeof Weapon {\n  return weapons[id] ?? Weapon;\n}\n\nexport function initWeapon(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  refinement?: number\n): Weapon {\n  const WeaponConstructor = getWeaponConstructor(id);\n\n  return new WeaponConstructor(id, level, hasAscended, refinement);\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class WavebreakersFin extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('wavebreakersfin', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('wavebreakersfin')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { whiteblindPassive } from './WhiteblindPassive';\n\nexport default class Whiteblind extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('whiteblind', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return whiteblindPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function whiteblindPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('whiteblind', refinement);\n\n  class WhiteblindOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('whiteblindStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value > 0) {\n          let stacks = this.value;\n          if (this.value > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[0] * stacks + (stats.atkBonus ?? 0);\n          stats.defBonus = params[0] * stacks + (stats.defBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'whiteblind',\n    options: [WhiteblindOption],\n  };\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport Reaction from '../../modifier/Reaction';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ReactionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = Object.values(Reaction);\n\n  constructor() {\n    super('reaction');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.reaction = this.value as Reaction;\n      } else {\n        modifier.reaction = Reaction.None;\n      }\n    },\n  };\n}\n\nexport default ReactionOption;\n","import { ArchaicPetra4PcOption } from '../../artifact/artifactSet/ArchaicPetra';\nimport { Instructor4PcOption } from '../../artifact/artifactSet/Instructor';\nimport { NoblesseOblige4PcOption } from '../../artifact/artifactSet/NoblesseOblige';\nimport { Tenacity4PcOption } from '../../artifact/artifactSet/Tenacity';\nimport { ViridescentVenerer4PcOption } from '../../artifact/artifactSet/ViridescentVenerer';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\n\nconst artifactTeamBuffs: Record<string, typeof ArtifactSetOption> = {\n  archaicPetra4Pc: ArchaicPetra4PcOption,\n  instructor4Pc: Instructor4PcOption,\n  noblesseOblige4Pc: NoblesseOblige4PcOption,\n  tenacity4Pc: Tenacity4PcOption,\n  viridescentVenerer4Pc: ViridescentVenerer4PcOption,\n};\n\nexport default artifactTeamBuffs;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { ModifierMixin } from '../Mixin';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass SwirlOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('swirlElement');\n  }\n\n  modifierMixin: ModifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.swirlElement = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default SwirlOption;\n","import { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport { ArtifactType, InputStat } from '../artifact/types';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport Option from '../option/Option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\nimport SwirlOption from '../option/characterOptions/SwirlOption';\nimport Attack from '../dps/Attack';\nimport OHCAttack from '../dps/OHCAttack';\n\n// Type definitions\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n  characterConstellationLevel?: number;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n  weaponRefinement?: number;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  teamCharacterIds?: string[];\n\n  characterOptions?: OptionSave[];\n  weaponOptions?: OptionSave[];\n  artifactSetOptions?: OptionSave[];\n  teamOptions?: OptionSave[];\n  artifactBuffOptions?: OptionSave[];\n\n  swirlElement?: string;\n\n  rotationTime?: number;\n  rotation?: AttackSave[];\n  ohcRotation?: OHCAttackSave[];\n}\n\nexport type Saves = Record<string, Save>;\n\nexport interface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\ninterface OptionSave {\n  id?: string;\n  value?: unknown;\n}\n\ninterface AttackSave {\n  talentType?: string;\n  talentId?: string;\n  multiplier?: number;\n  options?: OptionSave[];\n}\n\ninterface OHCAttackSave {\n  heals?: AttackSave[];\n  multiplier?: number;\n  options?: OptionSave[];\n}\n\n// Creating saves\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createArtifactSave(artifact: Artifact): ArtifactSave {\n  return {\n    type: artifact.type,\n    rarity: artifact.rarity,\n    level: artifact.level,\n    mainStat: artifact.mainStat.stat,\n    subStats: artifact.subStats.map((subStat) => createInputStatSave(subStat)),\n  };\n}\n\nfunction createOptionSave(option: Option): OptionSave {\n  return { id: option.id, value: getOptionValue(option) };\n}\n\nfunction createAttackSave(attack: Attack): AttackSave {\n  return {\n    talentType: attack.talentType,\n    talentId: attack.talentId,\n    multiplier: attack.multiplier,\n    options: attack.options.map(createOptionSave),\n  };\n}\n\nfunction createOHCAttackSave(attack: OHCAttack): OHCAttackSave {\n  return {\n    heals: attack.heals.map(createAttackSave),\n    multiplier: attack.multiplier,\n    options: attack.options.map(createOptionSave),\n  };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n    characterConstellationLevel: appState.character.constellationLevel,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n    weaponRefinement: appState.weapon.refinement,\n\n    artifacts: appState.artifacts.map((artifact) =>\n      createArtifactSave(artifact)\n    ),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    teamCharacterIds: appState.teamCharacters.map((character) => character.id),\n\n    characterOptions: appState.characterOptions.map(createOptionSave),\n    weaponOptions: appState.weaponOptions.map(createOptionSave),\n    artifactSetOptions: appState.artifactSetOptions.map(createOptionSave),\n    teamOptions: appState.teamOptions.map(createOptionSave),\n    artifactBuffOptions: appState.artifactBuffOptions.map(createOptionSave),\n\n    swirlElement: appState.swirlOption.value,\n\n    rotationTime: appState.rotationTime,\n    rotation: appState.rotation.map(createAttackSave),\n    ohcRotation: appState.ohcRotation.map(createOHCAttackSave),\n  };\n\n  return save;\n}\n\n// Unpacking saves\n\nexport function unpackArtifactSave(save: ArtifactSave, i: number): Artifact {\n  const artifactType = save.type ?? Object.values(ArtifactType)[i];\n  let artifact = new Artifact(\n    artifactType,\n    save.rarity ?? 1,\n    save.level ?? 0,\n    save.mainStat ?? ''\n  );\n  artifact.subStats =\n    save.subStats?.map(\n      (subStat) =>\n        new InputStat(\n          subStat.stat ?? '',\n          subStat.value ?? NaN,\n          subStat.rawValue ?? NaN\n        )\n    ) ?? artifact.subStats;\n\n  return artifact;\n}\n\nconst unpackOptionSave = (options: Option[]) => (save: OptionSave) => {\n  let option = options.find((option) => option.id === save.id);\n  if (option !== undefined) {\n    setOptionValue(option, save.value);\n  }\n};\n\nconst unpackAttackOptionSave =\n  (allOptions: Option[]) =>\n  ({ id, value }: OptionSave): Option | undefined => {\n    const OptionConstructor = allOptions.find((option) => option.id === id)\n      ?.constructor as { new (): Option };\n    let option;\n    if (OptionConstructor !== undefined) {\n      option = new OptionConstructor();\n      setOptionValue(option, value);\n    } else if (id === 'reaction') {\n      option = new ReactionOption();\n      setOptionValue(option, value);\n    }\n    return option;\n  };\n\nconst unpackAttackSave =\n  (allOptions: Option[]) =>\n  (save: AttackSave): Attack => {\n    return {\n      talentType: save.talentType ?? '',\n      talentId: save.talentId ?? '',\n      multiplier: save.multiplier ?? 1,\n      talentValue: { damage: [NaN] },\n      options:\n        save.options\n          ?.map(unpackAttackOptionSave(allOptions))\n          ?.filter((option): option is Option => option !== undefined) ?? [],\n    };\n  };\n\nconst unpackOHCAttackSave =\n  (allOptions: Option[]) =>\n  (save: OHCAttackSave): OHCAttack => {\n    return {\n      heals: save.heals?.map(unpackAttackSave(allOptions)) ?? [],\n      multiplier: save.multiplier ?? 1,\n      talentValue: { damage: [NaN] },\n      options:\n        save.options\n          ?.map(unpackAttackOptionSave(allOptions))\n          ?.filter((option): option is Option => option !== undefined) ?? [],\n    };\n  };\n\nexport function unpackSave(save: Save): AppState {\n  const character = initCharacter(\n    save.characterId,\n    save.characterLevel,\n    save.characterHasAscended,\n    save.characterConstellationLevel\n  );\n  const weapon = initWeapon(\n    save.weaponId,\n    save.weaponLevel,\n    save.weaponHasAscended,\n    save.weaponRefinement\n  );\n\n  const artifacts =\n    save.artifacts?.map((artifactSave, i) =>\n      unpackArtifactSave(artifactSave, i)\n    ) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map((artifactSet) =>\n    initArtifactSet(artifactSet.artifactSetId, artifactSet.artifactSetPieces)\n  ) ?? [initArtifactSet(), initArtifactSet(), initArtifactSet()];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const teamCharacters = save.teamCharacterIds?.map((id) =>\n    initCharacter(id)\n  ) ?? [initCharacter(), initCharacter(), initCharacter()];\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach(unpackOptionSave(characterOptions));\n\n  const weaponOptions = weapon.passiveOptions;\n  save.weaponOptions?.forEach(unpackOptionSave(weaponOptions));\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach(unpackOptionSave(artifactSetOptions));\n\n  const teamOptions = teamCharacters.flatMap(\n    (character) => character.teamOptions\n  );\n  save.teamOptions?.forEach(unpackOptionSave(teamOptions));\n\n  const artifactBuffOptions =\n    save.artifactBuffOptions?.flatMap((option) => {\n      const OptionConstructor = artifactTeamBuffs[option.id ?? ''];\n      if (OptionConstructor !== undefined) {\n        let artifactOption = new OptionConstructor();\n        setOptionValue(artifactOption, option.value);\n        return [artifactOption];\n      }\n\n      return [];\n    }) ?? [];\n\n  const swirlOption = new SwirlOption();\n  setOptionValue(swirlOption, save.swirlElement ?? '');\n\n  const allOptions = [\n    ...characterOptions,\n    ...weaponOptions,\n    ...artifactSetOptions,\n    ...teamOptions,\n    ...artifactBuffOptions,\n    swirlOption,\n  ];\n\n  const rotationTime = save.rotationTime ?? 0;\n  const rotation: Attack[] =\n    save.rotation?.map(unpackAttackSave(allOptions)) ?? [];\n  const ohcRotation: OHCAttack[] =\n    save.ohcRotation?.map(unpackOHCAttackSave(allOptions)) ?? [];\n\n  return {\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    critType,\n    enemyLevel,\n    enemyRes,\n    reaction,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n    swirlOption,\n    rotationTime,\n    rotation,\n    ohcRotation,\n  };\n}\n\n// Load save into appstate\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const appState = unpackSave(save);\n\n  setAppState(\n    appState,\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\n// Add/delete saves (used in GUI)\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { Stats } from '../data/types';\nimport CritType from '../modifier/CritType';\nimport { getDamageModifier } from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport SwirlOption from '../option/characterOptions/SwirlOption';\nimport { getModifierMixins, getStatMixins } from '../option/Mixin';\nimport Option from '../option/Option';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Resistance from '../stat/Resistance';\nimport { getTotalStatsAt } from '../stat/Stat';\nimport { Talents, TalentValue } from '../talent/types';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\nimport Weapon from '../weapon/Weapon';\n\nexport type CalculateTalentValueParams = {\n  talentType: string;\n  talentId: string;\n  options: Option[];\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n  artifactSets: ArtifactSet[];\n  artifactSetBonuses: Stats;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n  enemyLevel: number;\n  enemyRes: Resistance;\n  reaction: Reaction;\n  critType: CritType;\n  teamCharacters: Character[];\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n  swirlOption: SwirlOption;\n  talents: Talents;\n};\n\nexport function calculateTalentValue({\n  talentType,\n  talentId,\n  options,\n  character,\n  weapon,\n  artifacts,\n  artifactSets,\n  artifactSetBonuses,\n  talentAttackLevel,\n  talentSkillLevel,\n  talentBurstLevel,\n  enemyLevel,\n  enemyRes,\n  reaction,\n  critType,\n  teamCharacters,\n  characterOptions,\n  weaponOptions,\n  artifactSetOptions,\n  teamOptions,\n  artifactBuffOptions,\n  swirlOption,\n  talents,\n}: CalculateTalentValueParams): TalentValue {\n  // Initialize a set of all options\n  const {\n    characterOptions: characterOptionsNew,\n    weaponOptions: weaponOptionsNew,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n    swirlOption: swirlOptionNew,\n  } = initializeAllOptions({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n    swirlOption,\n  });\n\n  const allOptions = [\n    ...characterOptionsNew,\n    ...weaponOptionsNew,\n    ...artifactSetOptionsNew,\n    ...teamOptionsNew,\n    ...artifactBuffOptionsNew,\n    swirlOptionNew,\n  ];\n\n  // Override option values\n  options.forEach((option) => {\n    let newOption = allOptions.find((newOption) => newOption.id === option.id);\n    if (newOption !== undefined) {\n      setOptionValue(newOption, getOptionValue(option));\n    } else if (option.id === 'reaction') {\n      characterOptionsNew.push(option as ReactionOption);\n    }\n  });\n\n  // Calculate stats and modifier\n  const statMixins = getStatMixins({\n    character,\n    characterOptions: characterOptionsNew,\n    weapon,\n    weaponOptions: weaponOptionsNew,\n    artifactSets,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamCharacters,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n  });\n\n  const stats = getTotalStatsAt(\n    character,\n    weapon,\n    artifactSetBonuses,\n    artifacts,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    statMixins\n  );\n\n  const modifierMixins = getModifierMixins({\n    character,\n    characterOptions: characterOptionsNew,\n    weapon,\n    weaponOptions: weaponOptionsNew,\n    artifactSets,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamCharacters,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n    swirlOption: swirlOptionNew,\n  });\n\n  const modifier = getDamageModifier({\n    characterLevel: character.level,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n    stats,\n  });\n\n  // Calculate talent value\n  const talentFn = talents[talentType]?.[talentId];\n\n  const talentValue = talentFn?.({ stats, modifier }) ?? { damage: [NaN] };\n\n  return talentValue;\n}\n\ntype InitializeAllOptionsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n  swirlOption: SwirlOption;\n};\n\nexport function initializeAllOptions(params: InitializeAllOptionsParams) {\n  const characterOptions = [\n    ...params.character.getCharacterOptions(),\n    ...params.character.getPassiveOptions(\n      getAscensionLevel(params.character.level, params.character.hasAscended)\n    ),\n    ...params.character.getConstellationsOptions(\n      params.character.constellationLevel\n    ),\n  ];\n  params.characterOptions.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, getOptionValue(option));\n    }\n  });\n\n  const weaponOptions = params.weapon.getPassiveOptions();\n  params.weaponOptions.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, getOptionValue(option));\n    }\n  });\n\n  const artifactSetOptions = params.artifactSets.flatMap((artifactSet) =>\n    artifactSet.getOptions(artifactSet.pieces)\n  );\n  params.artifactSetOptions.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, getOptionValue(option));\n    }\n  });\n\n  const teamOptions = params.teamCharacters.flatMap((character) =>\n    character.getTeamOptions()\n  );\n  params.teamOptions.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, getOptionValue(option));\n    }\n  });\n\n  const artifactBuffOptions = params.artifactBuffOptions.flatMap((option) => {\n    const OptionConstructor = artifactTeamBuffs[option.id];\n    if (OptionConstructor !== undefined) {\n      let artifactOption = new OptionConstructor();\n      setOptionValue(artifactOption, getOptionValue(option));\n      return [artifactOption];\n    }\n\n    return [];\n  });\n\n  const swirlOption = new SwirlOption();\n  setOptionValue(swirlOption, getOptionValue(params.swirlOption));\n\n  return {\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n    swirlOption,\n  };\n}\n","import { Stats } from '../data/types';\nimport { ModifierMixin } from '../option/Mixin';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport CritType from './CritType';\nimport Reaction from './Reaction';\n\nexport default interface DamageModifier\n  extends DamageModifierBase,\n    DamageModiferOptional {}\n\ninterface DamageModifierBase {\n  characterLevel: number;\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  enemyResReduction: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n}\n\ninterface DamageModiferOptional {\n  swirlElement?: Element;\n\n  normalAttackFlatDmg?: number;\n  chargedAttackFlatDmg?: number;\n  skillFlatDmg?: number;\n  burstFlatDmg?: number;\n\n  infusion?: Element;\n  infusionNormal?: Element;\n  infusionPlunge?: Element;\n\n  elementalAbsorption?: Element;\n\n  dionaHoldSkill?: boolean;\n\n  albedoBlossomDmgBonus?: number;\n\n  yoimiyaSkill?: boolean;\n\n  thomaHpBonusDmg?: number;\n\n  resolveStacks?: number;\n\n  kokomiBurst?: boolean;\n  kokomiHealingBonusDmg?: number;\n}\n\nexport type GetDamageModifierParams = {\n  characterLevel: number;\n  enemyLevel: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n  modifierMixins: ModifierMixin[];\n  stats: Stats;\n};\n\nexport function getDamageModifier({\n  characterLevel,\n  enemyLevel,\n  enemyRes,\n  critType,\n  reaction,\n  talentAttackLevel,\n  talentSkillLevel,\n  talentBurstLevel,\n  modifierMixins,\n  stats,\n}: GetDamageModifierParams): DamageModifier {\n  const modifier: DamageModifier = {\n    characterLevel,\n    enemyLevel,\n    enemyDefReduction: 0,\n    enemyRes,\n    enemyResReduction: new Resistance(),\n    critType: critType,\n    flatDmg: 0,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  };\n\n  // Apply modifier mixins\n  modifierMixins.forEach((mixin) => mixin.apply(modifier, stats));\n\n  return modifier;\n}\n","import Artifact from '../artifact/Artifact';\nimport Attack from '../dps/Attack';\nimport {\n  calculateTalentValue,\n  CalculateTalentValueParams,\n} from '../dps/DPSCalculator';\nimport { getStatMixins } from '../option/Mixin';\nimport { getTotalStatsAt } from '../stat/Stat';\n\nexport type RollDistribution = {\n  stat: string;\n  rolls: number;\n};\n\ntype SubstatOptimizerResult = {\n  subStatRolls: RollDistribution[];\n  artifacts: Artifact[];\n};\n\n// Average substat rolls, as per KQM guidelines\nexport const substats: Record<string, number> = {\n  hpBonus: 0.0496,\n  flatHp: 253.94,\n  atkBonus: 0.0496,\n  flatAtk: 16.54,\n  defBonus: 0.062,\n  flatDef: 19.68,\n  elementalMastery: 19.82,\n  energyRecharge: 0.0551,\n  critRate: 0.0331,\n  critDmg: 0.0662,\n};\n\n// Optimize substats according to KQM standardized guidelines\n// 20 preallocated fixed subs (2 of each substat)\n// maxRolls liquid subs (default/max = 20)\n// each sub type can have maximum 2 rolls per different main stat type\nexport function optimizeSubstats(\n  possibleStats: string[],\n  maxRolls: number,\n  erThreshold: number,\n  rotation: Attack[],\n  calcParams: Omit<\n    CalculateTalentValueParams,\n    'talentType' | 'talentId' | 'options'\n  >\n): SubstatOptimizerResult {\n  let maxDmg = 0;\n  let optimalSubstatRolls: RollDistribution[] = [];\n  let optimalArtifacts: Artifact[] = calcParams.artifacts;\n\n  // Roll ER to reach threshold\n  const baseArtifacts = generateBaseArtifacts(calcParams.artifacts);\n  const baseStatMixins = getStatMixins({ ...calcParams });\n  const baseTotalStats = getTotalStatsAt(\n    calcParams.character,\n    calcParams.weapon,\n    calcParams.artifactSetBonuses,\n    baseArtifacts,\n    calcParams.talentAttackLevel,\n    calcParams.talentSkillLevel,\n    calcParams.talentBurstLevel,\n    baseStatMixins\n  );\n  const baseEr = baseTotalStats.energyRecharge ?? 0;\n\n  let baseErRolls = Math.ceil((erThreshold - baseEr) / substats.energyRecharge);\n\n  const erMainStatCount = baseArtifacts\n    .map((artifact) => artifact.mainStat.stat)\n    .filter((mainStat) => mainStat === 'energyRecharge').length;\n\n  if (baseErRolls < 0) {\n    baseErRolls = 0;\n  } else if (baseErRolls > 2 * (5 - erMainStatCount)) {\n    baseErRolls = 2 * (5 - erMainStatCount);\n  }\n\n  // Generate all combinations\n  const combinations = generateRollCombinationsKqm(\n    possibleStats,\n    maxRolls - baseErRolls,\n    calcParams.artifacts.map((artifact) => artifact.mainStat.stat),\n    baseErRolls\n  );\n\n  combinations.forEach((combination) => {\n    // Add in ER threshold rolls\n    if (baseErRolls > 0) {\n      const erDistribution = combination.find(\n        ({ stat }) => stat === 'energyRecharge'\n      );\n      if (erDistribution === undefined) {\n        combination.push({ stat: 'energyRecharge', rolls: baseErRolls });\n      } else {\n        erDistribution.rolls += baseErRolls;\n      }\n    }\n\n    const artifacts = generateBaseArtifacts(calcParams.artifacts);\n\n    addRollsToArtifacts(combination, artifacts);\n\n    const damage = rotation.reduce((acc, attack) => {\n      const talentValue = calculateTalentValue({\n        ...attack,\n        ...calcParams,\n        artifacts,\n      });\n      const totalDmg = talentValue.damage.reduce(\n        (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n        0\n      );\n      const multiplier = !isNaN(attack.multiplier) ? attack.multiplier : 0;\n      return acc + totalDmg * multiplier;\n    }, 0);\n\n    // Update optimal rolls\n    if (damage > maxDmg) {\n      optimalSubstatRolls = combination;\n      optimalArtifacts = artifacts;\n      maxDmg = damage;\n    }\n  });\n\n  return {\n    subStatRolls: optimalSubstatRolls,\n    artifacts: optimalArtifacts,\n  };\n}\n\n// Recursive function to generate all substat combinations according to KQM 2*n rule\nfunction generateRollCombinationsKqm(\n  possibleStats: string[],\n  maxRolls: number,\n  mainStats: string[],\n  baseErRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const sameMainStatCount = mainStats.filter(\n    (mainStat) => possibleStats[0] === mainStat\n  ).length;\n  let currentMaxRolls = Math.min((5 - sameMainStatCount) * 2, maxRolls);\n  if (possibleStats[0] === 'energyRecharge') {\n    currentMaxRolls -= baseErRolls;\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = currentMaxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinationsKqm(\n      possibleStats.slice(1),\n      maxRolls - i,\n      mainStats,\n      baseErRolls\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n\n// Recursive function to generate all combinations of possibleStats.length numbers that sum to maxRolls\n// Generated combinations are not guaranteed to be valid substat combinations\n/*\nfunction generateRollCombinations(\n  possibleStats: string[],\n  maxRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = maxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinations(\n      possibleStats.slice(1),\n      maxRolls - i\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n*/\n\n// Generate artifacts with 2 of each substat\nfunction generateBaseArtifacts(prevArtifacts: Artifact[]): Artifact[] {\n  const artifacts = prevArtifacts.map((artifact) => {\n    return new Artifact(\n      artifact.type,\n      artifact.rarity,\n      artifact.level,\n      artifact.mainStat.stat\n    );\n  });\n\n  // Set artifact substats according to currentSubstatRolls\n  let iArtifact = 0;\n  let jArtifact = 0;\n  Object.entries(substats).forEach(([stat, value]) => {\n    artifacts[iArtifact].setSubStatProp(jArtifact, stat);\n    artifacts[iArtifact].setSubStatValue(jArtifact, value * 2);\n    if (++jArtifact >= 4) {\n      jArtifact = 0;\n      if (++iArtifact >= 5) {\n        // This really should not happen\n        iArtifact = 0;\n      }\n    }\n  });\n\n  return artifacts;\n}\n\n// Add liquid subs to fixed subs without replacing any fixed subs\nfunction addRollsToArtifacts(\n  combination: RollDistribution[],\n  artifacts: Artifact[]\n) {\n  const subStats = artifacts.flatMap((artifact) => artifact.subStats);\n  combination.forEach(({ stat, rolls }) => {\n    const subStat = subStats.find((inputStat) => inputStat.stat === stat);\n    if (subStat === undefined) {\n      let sIndex = 0;\n      artifacts\n        .find((artifact) =>\n          artifact.subStats.find((inputStat, i) => {\n            sIndex = i;\n            return isNaN(inputStat.value);\n          })\n        )\n        ?.setSubStatValue(sIndex, substats[stat] * rolls);\n    } else {\n      subStat.setValue(subStat.value + substats[stat] * rolls);\n    }\n  });\n}\n","import { getReactionCurveAt } from '../data/Data';\nimport { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { calculateResMultiplier } from './TalentUtil';\nimport { Element, TalentFn, TalentProps, TalentValue } from './types';\n\nconst reactionTalents: Record<string, TalentFn> = {\n  superconduct: ({ stats, modifier }: TalentProps) =>\n    reactionTalent({\n      multiplier: 1,\n      reactionBonus: stats.superconductDmgBonus,\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  swirl: ({ stats, modifier }: TalentProps) =>\n    modifier.swirlElement\n      ? reactionTalent({\n          multiplier: 1.2,\n          reactionBonus: stats.swirlDmgBonus,\n          element: modifier.swirlElement,\n          stats,\n          modifier,\n        })\n      : { damage: [NaN] },\n\n  electrocharged: ({ stats, modifier }: TalentProps) =>\n    reactionTalent({\n      multiplier: 2.4,\n      reactionBonus: stats.electrochargedDmgBonus,\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  shatter: ({ stats, modifier }: TalentProps) =>\n    reactionTalent({\n      multiplier: 3,\n      reactionBonus: stats.shatterDmgBonus,\n      element: Element.Physical,\n      stats,\n      modifier,\n    }),\n\n  overload: ({ stats, modifier }: TalentProps) =>\n    reactionTalent({\n      multiplier: 4,\n      reactionBonus: stats.overloadDmgBonus,\n      element: Element.Pyro,\n      stats,\n      modifier,\n    }),\n};\n\nexport default reactionTalents;\n\n// Helper functions\n\nfunction reactionTalent({\n  multiplier,\n  reactionBonus,\n  element,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  reactionBonus?: number;\n  element: Element;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateReactionDamage({\n    multiplier,\n    reactionBonus,\n    element,\n    stats,\n    modifier,\n  });\n\n  return { damage: [damage], element };\n}\n\nfunction calculateReactionDamage({\n  multiplier,\n  reactionBonus,\n  element,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  reactionBonus?: number;\n  element: Element;\n  stats: Stats;\n  modifier: DamageModifier;\n}): number {\n  const levelMultiplier = getReactionLevelMultiplier(modifier.characterLevel);\n  const enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const elementalMastery = stats.elementalMastery ?? 0;\n  const baseMultiplier =\n    1 +\n    (16 * elementalMastery) / (2000 + elementalMastery) +\n    (reactionBonus ?? 0);\n\n  return multiplier * baseMultiplier * levelMultiplier * enemyResMultiplier;\n}\n\nfunction getReactionLevelMultiplier(level: number): number {\n  const reactionCurveData = getReactionCurveAt(level);\n  return reactionCurveData?.multiplier ?? NaN;\n}\n","// WorkerHack has to be imported first\nimport '../WorkerHack';\n\nimport { getAllArtifactSetBonuses } from '../artifact/ArtifactSetUtil';\nimport Save, {\n  ArtifactSave,\n  createArtifactSave,\n  unpackSave,\n} from '../save/Save';\nimport { optimizeSubstats, RollDistribution } from './Optimization';\nimport { getAllTalentFns } from '../talent/Talent';\n\ntype OptimizerWorkerData = {\n  possibleStats: string[];\n  maxRolls: number;\n  erThreshold: number;\n  save: Save;\n};\n\nexport type SubstatOptimizerResultSave = {\n  subStatRolls: RollDistribution[];\n  artifacts: ArtifactSave[];\n};\n\nexport const optimize = (\n  data: OptimizerWorkerData\n): SubstatOptimizerResultSave => {\n  const appState = unpackSave(data.save);\n  const artifactSetBonuses = getAllArtifactSetBonuses(appState.artifactSets);\n  const talents = getAllTalentFns(appState.character, appState.weapon);\n  const calcParams = { ...appState, artifactSetBonuses, talents };\n\n  const result = optimizeSubstats(\n    data.possibleStats,\n    data.maxRolls,\n    data.erThreshold,\n    appState.rotation,\n    calcParams\n  );\n\n  return {\n    subStatRolls: result.subStatRolls,\n    artifacts: result.artifacts.map(createArtifactSave),\n  };\n};\n","import Character from '../character/Character';\nimport Weapon from '../weapon/Weapon';\nimport reactionTalents from './ReactionTalent';\nimport { Talents } from './types';\n\nexport function getAllTalentFns(character: Character, weapon: Weapon): Talents {\n  return {\n    ...character.talentFns,\n    ...weapon.talentFns,\n\n    reaction: reactionTalents,\n  };\n}\n"],"sourceRoot":""}