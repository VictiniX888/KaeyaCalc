{"version":3,"sources":["js/Data.ts","js/talent/types.ts","js/Resistance.ts","js/talent/DefaultTalent.ts","js/talent/Talent.ts","js/modifier/Reaction.ts","js/talent/AyakaTalent.ts","js/talent/JeanTalent.ts","js/talent/LisaTalent.ts","js/talent/BarbaraTalent.ts","js/talent/KaeyaTalent.ts","js/talent/DilucTalent.ts","js/talent/RazorTalent.ts","js/talent/AmberTalent.ts","js/talent/VentiTalent.ts","js/talent/XianglingTalent.ts","js/talent/BeidouTalent.ts","js/talent/XingqiuTalent.ts","js/talent/XiaoTalent.ts","js/talent/NingguangTalent.ts","js/talent/KleeTalent.ts","js/talent/ZhongliTalent.ts","js/talent/FischlTalent.ts","js/talent/BennettTalent.ts","js/talent/TartagliaTalent.ts","js/talent/NoelleTalent.ts","js/talent/QiqiTalent.ts","js/talent/ChongyunTalent.ts","js/talent/GanyuTalent.ts","js/talent/AlbedoTalent.ts","js/talent/DionaTalent.ts","js/talent/MonaTalent.ts","js/talent/KeqingTalent.ts","js/talent/SucroseTalent.ts","js/talent/XinyanTalent.ts","js/talent/RosariaTalent.ts","js/talent/HutaoTalent.ts","js/talent/KazuhaTalent.ts","js/talent/YanfeiTalent.ts","js/talent/YoimiyaTalent.ts","js/talent/EulaTalent.ts","js/talent/TalentUtil.ts","js/talent/RaidenTalent.ts","js/talent/SayuTalent.ts","js/talent/KokomiTalent.ts","js/talent/SaraTalent.ts","js/talent/AloyTalent.ts","js/modifier/CritType.ts","js/option/Option.ts","js/option/artifactSetOptions/ArtifactSetOption.ts","js/option/artifactSetOptions/ArchaicPetraOption.ts","js/option/artifactSetOptions/BerserkerOption.ts","js/option/artifactSetOptions/BlizzardStrayerOption.ts","js/option/artifactSetOptions/BloodstainedChivalryOption.ts","js/option/artifactSetOptions/BraveHeartOption.ts","js/option/artifactSetOptions/CrimsonWitchOption.ts","js/option/artifactSetOptions/HeartOfDepthOption.ts","js/option/artifactSetOptions/InstructorOption.ts","js/option/artifactSetOptions/LavawalkerOption.ts","js/option/artifactSetOptions/MaidenBelovedOption.ts","js/option/artifactSetOptions/MartialArtistOption.ts","js/option/artifactSetOptions/NoblesseObligeOption.ts","js/option/artifactSetOptions/PaleFlameOption.ts","js/option/artifactSetOptions/RetracingBolideOption.ts","js/option/artifactSetOptions/ShimenawaOption.ts","js/option/artifactSetOptions/TenacityOption.ts","js/option/artifactSetOptions/ThundersootherOption.ts","js/option/artifactSetOptions/ViridescentVenererOption.ts","js/option/characterOptions/CharacterOption.ts","js/option/characterOptions/AloyOption.ts","js/option/characterOptions/AyakaOption.ts","js/option/characterOptions/ChongyunOption.ts","js/option/characterOptions/DilucOption.ts","js/option/characterOptions/HuTaoOption.ts","js/option/characterOptions/ElementalAbsorptionOption.ts","js/option/characterOptions/KazuhaOption.ts","js/option/characterOptions/KokomiOption.ts","js/option/characterOptions/NoelleOption.ts","js/option/characterOptions/RaidenOption.ts","js/option/characterOptions/SayuOption.ts","js/option/characterOptions/SucroseOption.ts","js/option/characterOptions/index.ts","js/option/characterOptions/VentiOption.ts","js/option/characterOptions/XiaoOption.ts","js/option/characterOptions/YanfeiOption.ts","js/option/characterOptions/YoimiyaOption.ts","js/option/OptionUtils.ts","js/passive/characterPassives/CharacterPassive.ts","js/passive/characterPassives/YoimiyaPassive.ts","js/passive/characterPassives/RaidenPassive.ts","js/passive/characterPassives/KokomiPassive.ts","js/passive/characterPassives/AloyPassive.ts","js/character/Character.ts","js/Stat.ts","js/artifact/types.ts","js/artifact/Artifact.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/IntInput.tsx","component/Picker.tsx","component/ArtifactBlock.tsx","js/optimization/Optimization.ts","component/Checkbox.tsx","component/OptimizerBlock.tsx","component/ArtifactColumn.tsx","component/ArtifactSetPicker.tsx","component/InputBlock.tsx","component/OptionInput.tsx","component/ArtifactSetInputBlock.tsx","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","js/artifact/ArtifactSetBonus.ts","js/artifact/ArtifactSet.ts","js/option/weaponOptions/WeaponOption.ts","js/passive/weaponPassives/WeaponPassive.ts","js/passive/weaponPassives/TheCatchPassive.ts","js/passive/weaponPassives/SolarPearlPassive.ts","js/weapon/Weapon.ts","component/SaveBlock.tsx","save/Save.ts","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","weaponPassiveData","weaponPassiveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getTalentData","TalentType","Element","AttackType","ScalingType","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","getWeaponPassiveAt","refinement","passive","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","this","Map","set","Anemo","Cryo","Electro","Geo","Hydro","Pyro","Physical","element","get","value","isNaN","prevValue","defaultTalentFn","Reaction","defaultTalent","ayaka","stats","modifier","attackLightMulti","normalHits","chargedHits","infusion","slice","concat","skillDefault","burstBase","description","multiplier","jean","attackLightDefault","healingSkillBase","scalingType","Attack","lisa","talentDmg","push","skillBase","i","burstDefault","barbara","kaeya","diluc","attackHeavyDefault","talentDamage","razor","attackParams","talentAttackLevel","amber","attackBowDefault","chargedElement","hpBase","flatBonus","damage","venti","talentValues","elementalAbsorption","xiangling","beidou","shieldBase","xingqiu","skillMultiBase","hits","xiao","ningguang","normalAtkDmg","calculateTotalDamage","attackType","Normal","chargedAttackDefault","starJadeDmg","Charged","plungeAttackDefault","klee","zhongli","fischl","bennett","baseAtkBuff","tartaglia","riptideFlashDmg","riptideBurstDmg","normalAttackMulti","chargedAttackMulti","noelle","skillDamage","Defense","Skill","qiqi","chongyun","ganyu","normalAttackDefault","aimedShotDmg","chargedDmg","albedo","transientBlossomDmg","diona","holdModifier","dionaHoldSkill","mona","modifiedStats","dmgBonus","keqing","hit4Dmg","hit5Dmg","consecutiveSlashDmg","Burst","sucrose","xinyan","rosaria","burstMultiBase","hutao","hit6Dmg","forEach","kazuha","hit3Dmg","hit5DmgSingle","infusionPlunge","yanfei","yoimiya","normalAttackParams","yoimiyaSkill","skillParams","talentSkillLevel","param","chargedAimedShotDmg","kindlingArrowDmg","eula","length","chargedAttackHeavy","attackHeavyMulti","lightfallSwordParams","lightfallSwordTalent","raiden","initialResolveBonus","resolveStacks","attackResolveBonus","sayu","elementalParams","kokomi","kokomiBurst","burstParams","talentBurstLevel","normalAttackDmg","normalBonusDmg","kokomiHealingBonusDmg","healingBonus","Hp","talentValue","chargedAttackDmg","chargedBonusDmg","rippleDmg","bonusDmg","burstDmg","sara","aloy","hit1Dmg","dmg","aimShotDefault","CritType","calculateBaseDamage","flatDmg","flatAtk","flatDef","flatHp","calculateReactionMultiplier","reaction","reactionBonus","amplifyingMultiplier","triggerElement","Melt","Vaporize","calculateAmplifyingMultiplier","elementalMastery","baseDmg","getDamageBonus","crit","critType","Crit","critDmg","Average","critRate","chargedCritRate","burstCritRate","Math","min","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","enemyResReduction","calculateHp","hitCount","damages","hit","Plunge","flatHealing","calculateHealing","dmgAbsorption","shieldStrength","calculateDmgAbsorption","baseAtk","Option","ArtifactSetOption","threshold","archaicPetraOptions","choices","applyOnStats","berserkerOptions","blizzardStrayerOptions","bloodstainedChivalryOptions","chargedDmgBonus","braveHeartOptions","crimsonWitchOptions","bonuses","find","stat","stacks","pyroDmgBonus","heartOfDepthOptions","normalDmgBonus","instructorOptions","lavawalkerOptions","maidenBelovedOptions","healedBonus","martialArtistOptions","noblesseObligeOptions","atkBonus","paleFlameOptions","physicalDmgBonus","retracingBolideOptions","shimenawaOptions","plungeDmgBonus","tenacityOptions","thundersootherOptions","viridescentVenererOptions","applyOnModifier","add","CharacterOption","aloyOptions","_talentAttackLevel","_talentBurstLevel","ayakaOptions","chongyunOptions","dilucOptions","_talentSkillLevel","ascensionLevel","passiveData","hutaoOptions","totalHp","baseHp","hpBonus","ElementalAbsoprtionOption","kazuhaOptions","kokomiOptions","noelleOptions","totalDef","baseDef","defBonus","raidenOptions","burstDmgBonus","sayuOptions","sucroseOptions","characterOptions","defaultOptions","isBooleanOption","option","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","includes","characterPassives","Yoimiya_PermanentSkill_1","options","Shougun_PermanentSkill_2","statMixin","energyRecharge","electroDmgBonus","Kokomi_ProudSkill_SwimStamina_Reduction","_params","Kokomi_PermanentSkill_2","modifierMixin","Aloy_PermanentSkill_1","Aloy_PermanentSkill_2","cryoDmgBonus","defaultPassiveFn","Character","hasAscended","_id","name","baseStats","statCurveMapping","_level","_hasAscended","innateStats","passiveOptions","data","getInnateStatsAt","getCharacterOptions","getAscensionLevel","getPassives","getPassiveOptions","prevAscensionLevel","Object","keys","obj","charStatCurves","entries","curve","bonus","talentLevel","totalStats","getTalentFn","damageFn","filter","flatMap","passiveId","getCharacterPassiveFn","oldOptionIds","newOptions","keptOptionIds","mixin","getStatDisplayValue","prop","isPercentage","toFixed","round","toString","getDamageDisplayValue","values","str","every","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","statMixins","characterStats","weaponStats","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","anemoDmgBonus","geoDmgBonus","hydroDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","skillDmgBonus","capitalize","toUpperCase","ArtifactType","InputStat","rawValue","convertStatToDisplayValue","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","setMainStatValue","getArtifactMainStatValue","setProp","setInputValue","setValue","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","Form","Label","htmlFor","srOnly","label","Control","size","className","React","Component","FloatInput","parseFloat","InputRow","Row","children","IntInput","Picker","selectedValue","target","handleChange","onChange","as","Item","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactRarity","setArtifactLevel","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatInputValue","statObj","substats","optimizeSubstats","possibleStats","maxRolls","erThreshold","optimizeTalentType","optimizeTalentId","appState","damageModifier","maxDmg","optimalSubstatRolls","optimalArtifacts","baseArtifacts","generateBaseArtifacts","baseEr","baseErRolls","ceil","erMainStatCount","generateRollCombinationsKqm","combination","erDistribution","rolls","inputStat","sIndex","setSubStatValue","addRollsToArtifacts","getTalentDamageAt","subStatRolls","mainStats","sameMainStatCount","currentMaxRolls","combinations","current","backCombinations","prevArtifacts","iArtifact","jArtifact","Checkbox","checked","Check","Input","OptimizerBlock","substatRolls","selectedSubstats","targetTalentId","setMaxRolls","setSelectedSubstats","selected","substat","setErThreshold","setTargetTalentType","targetTalentType","setTargetTalentId","onOptimizeClick","result","updateTotalStats","setAppState","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","Button","variant","onClick","ArtifactColumn","Col","md","xs","ArtifactSetPicker","setArtifactSetId","index","artifactSetId","sort","name1","name2","localeCompare","InputBlock","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","choice","ArtifactSetInputBlock","artifactSets","artifactSetOptions","artifactSet","updateArtifactSetBonuses","setArtifactSetPieces","CharacterPicker","setCharacterId","CharacterInputBlock","getOptions","setCharacterLevel","setIsCharacterAscended","isAscended","ModifierInputBlock","setEnemyLevel","updateTalentValues","setEnemyRes","setCritType","setReaction","ToggleButtonGroup","ToggleButton","None","defaultSetBonus","Relic_ExtraAtkCritUp","extraStatsFn","Relic_AllElemResistUp","Relic_AtkAndExtraAtkUp","Relic_SkillDamageUp","Relic_MeleeAttackUp","Relci_RangerAttackUp","Relic_ElementalBurstUp","Relic_ElementalBurstUpByChargeEfficiency","Relic_GiantKiller","Relic_LowHPGainExtraCritRate","Relic_SkillEnhanceNormalAtkAndExtraAtk","Relic_ReactionGainExtraElemMasteryForTeam","Relic_CriticUpAgainstIceAndFrozen","Relic_DamageUpAgainstElectric","Relic_DamageUpAgainstFireAndBurning","Relic_SkillEnhanceCured","Relic_TeamAtkupAfterElementalBurst","Relic_KillEnhanceExtraAtk","Relic_ElementDmgUpAfterCrystalShield","Relic_ShieldEnhanceAtk","Relic_WaterSkillEnhanceNormalAtkAndExtraAtk","Relic_ShieldCostUpWhenElementalArtHit","Relic_AttackUpWhenNormalAtkAndExtraAtkHit","Relic_NormalDamageUpIfCostEnergy","Relic_ReactionWindEnhance","Relic_ReactionFireEnhance","Relic_ReactionElectricEnhance","Relic_AbsorbTeamElemResist","Relic_ElemDmgEnhanceElemResist","Relic_KillingRefreshSkill","Relic_UltGainEnergyForTeam","Relic_RestoreEnergyGainExtraEnergyForTeam","Relic_ChestHealSelf","Relic_CoinHealSelf","Relic_UltHealSelf","Relic_FireResistance","Relic_WaterResistance","Relic_ElectricResistance","Relic_IceResistance","ArtifactSet","bonusThresholds","setBonusData","_pieces","setBonusSets","setBonuses","getSetBonusSetsAt","getSetBonuses","prevPieces","setBonus","statBonus","extraBonus","extraBonusSet","extraBonuses","setBonusType","WeaponOption","weaponPassives","Weapon_Pole_Mori","Weapon_Catalyst_NormalAttackAndSkillAttack","getWeaponPassiveFn","Weapon","rank","passiveDataSet","_weaponLevel","_refinement","getWeaponPassiveData","getPassive","getStatsAt","weaponLevel","weaponStatCurves","passiveParams","shouldKeepValue","newOption","statBonuses","SaveBlock","onSaveClick","saveInputName","save","characterHasAscended","weaponHasAscended","weaponRefinement","artifactSetPieces","weaponOptions","saves","window","localStorage","setItem","JSON","stringify","addSave","onSaveInputChange","onLoadClick","selectedSave","refreshApp","savedArtifact","artifactType","characterOption","weaponOption","artifactSetOption","loadSave","onLoadInputChange","onDeleteClick","showDeleteWarning","onModalConfirm","deleteSave","onModalHide","getItem","parse","placeholder","Modal","show","onHide","Footer","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","setIsWeaponAscended","setWeaponRefinement","InputColumn","ArtifactSetStatBlock","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","TalentColumn","App","modifierMixins","callback","newArtifactSets","getStatMixins","newChar","getModifierMixins","damageModifer","getDamageModifier","characterPassiveMixins","getPassiveModifierMixins","weaponPassiveMixins","artifactSetMixins","characterOptionMixins","weaponOptionMixins","artifactSetOptionMixins","getPassiveStatMixins","Container","fluid","Navbar","sticky","bg","Nav","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21aa8d6e.chunk.js","sourcesContent":["import type * as Data from '../data/types';\nimport type { TalentType } from './talent/types';\n\nimport characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\nimport weaponPassiveDataRaw from '../data/weaponpassivedata.json';\nimport talentDataRaw from '../data/talentdata.json';\nimport artifactSetDataRaw from '../data/artifactsetdata.json';\nimport artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from '../data/artifactmainstatdata.json';\n\nimport propMappingRaw from '../data/propmapping.json';\nimport talentDescMappingRaw from '../data/talentdescmapping.json';\nimport optionMappingRaw from '../data/optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\nconst weaponPassiveData = weaponPassiveDataRaw as Record<\n  string,\n  Data.WeaponPassiveSetData\n>;\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getWeaponPassiveData(id: string) {\n  return getData(id, weaponPassiveData);\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\nexport function getWeaponPassiveAt(\n  refinement: number,\n  passives: Data.WeaponPassiveSetData\n): Data.WeaponPassiveData | undefined {\n  return passives.passive[refinement];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport interface TalentValue {\n  description: string;\n  damage: number[];\n}\n\nexport interface TalentValueSet {\n  attack: TalentValue[];\n  skill: TalentValue[];\n  burst: TalentValue[];\n}\n\nexport interface TalentProps {\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { Element } from './talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","import Talent from './Talent';\nimport { TalentValue } from './types';\n\nconst defaultTalent: Talent = {\n  attack: defaultTalentFn,\n  skill: defaultTalentFn,\n  burst: defaultTalentFn,\n};\n\nexport default defaultTalent;\n\n// Placeholder function\nexport function defaultTalentFn(): TalentValue[] {\n  return [];\n}\n","import { TalentProps, TalentValue } from './types';\n\nimport defaultTalent from './DefaultTalent';\nimport lisaTalent from './LisaTalent';\nimport barbaraTalent from './BarbaraTalent';\nimport kaeyaTalent from './KaeyaTalent';\nimport dilucTalent from './DilucTalent';\nimport razorTalent from './RazorTalent';\nimport amberTalent from './AmberTalent';\nimport ventiTalent from './VentiTalent';\nimport xianglingTalent from './XianglingTalent';\nimport beidouTalent from './BeidouTalent';\nimport xingqiuTalent from './XingqiuTalent';\nimport xiaoTalent from './XiaoTalent';\nimport ningguangTalent from './NingguangTalent';\nimport kleeTalent from './KleeTalent';\nimport zhongliTalent from './ZhongliTalent';\nimport fischlTalent from './FischlTalent';\nimport bennettTalent from './BennettTalent';\nimport tartagliaTalent from './TartagliaTalent';\nimport noelleTalent from './NoelleTalent';\nimport qiqiTalent from './QiqiTalent';\nimport chongyunTalent from './ChongyunTalent';\nimport ganyuTalent from './GanyuTalent';\nimport albedoTalent from './AlbedoTalent';\nimport dionaTalent from './DionaTalent';\nimport monaTalent from './MonaTalent';\nimport keqingTalent from './KeqingTalent';\nimport sucroseTalent from './SucroseTalent';\nimport xinyanTalent from './XinyanTalent';\nimport rosariaTalent from './RosariaTalent';\nimport hutaoTalent from './HutaoTalent';\nimport yanfeiTalent from './YanfeiTalent';\nimport eulaTalent from './EulaTalent';\nimport jeanTalent from './JeanTalent';\nimport ayakaTalent from './AyakaTalent';\nimport yoimiyaTalent from './YoimiyaTalent';\nimport sayuTalent from './SayuTalent';\nimport kazuhaTalent from './KazuhaTalent';\nimport raidenTalent from './RaidenTalent';\nimport kokomiTalent from './KokomiTalent';\nimport saraTalent from './SaraTalent';\nimport aloyTalent from './AloyTalent';\n\nexport default interface Talent {\n  attack: (props: TalentProps) => TalentValue[];\n  skill: (props: TalentProps) => TalentValue[];\n  burst: (props: TalentProps) => TalentValue[];\n}\n\nexport const talents: Record<string, Talent> = {\n  defaultTalent,\n  ayaka: ayakaTalent,\n  jean: jeanTalent,\n  lisa: lisaTalent,\n  barbara: barbaraTalent,\n  kaeya: kaeyaTalent,\n  diluc: dilucTalent,\n  razor: razorTalent,\n  amber: amberTalent,\n  venti: ventiTalent,\n  xiangling: xianglingTalent,\n  beidou: beidouTalent,\n  xingqiu: xingqiuTalent,\n  xiao: xiaoTalent,\n  ningguang: ningguangTalent,\n  klee: kleeTalent,\n  zhongli: zhongliTalent,\n  fischl: fischlTalent,\n  bennett: bennettTalent,\n  tartaglia: tartagliaTalent,\n  noelle: noelleTalent,\n  qiqi: qiqiTalent,\n  chongyun: chongyunTalent,\n  ganyu: ganyuTalent,\n  albedo: albedoTalent,\n  diona: dionaTalent,\n  mona: monaTalent,\n  keqing: keqingTalent,\n  sucrose: sucroseTalent,\n  xinyan: xinyanTalent,\n  rosaria: rosariaTalent,\n  hutao: hutaoTalent,\n  kazuha: kazuhaTalent,\n  yanfei: yanfeiTalent,\n  yoimiya: yoimiyaTalent,\n  eula: eulaTalent,\n  raiden: raidenTalent,\n  sayu: sayuTalent,\n  kokomi: kokomiTalent,\n  sara: saraTalent,\n  aloy: aloyTalent,\n};\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n}\r\n\r\nexport default Reaction;\r\n","import Talent from './Talent';\nimport { attackLightMulti, burstBase, skillDefault } from './TalentUtil';\nimport { Element, TalentProps } from './types';\n\nconst ayakaTalent: Talent = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalent;\n\nfunction ayakaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 3, 1],\n    chargedHits: 3,\n    element: modifier.infusion ?? Element.Physical,\n    params: params\n      .slice(0, 4)\n      .concat([params[6], params[7], params[7]])\n      .concat(params.slice(7, 12)),\n    stats,\n    modifier,\n  });\n}\n\nfunction ayakaSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction ayakaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'cuttingDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'bloomDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightDefault,\n  burstBase,\n  healingSkillBase,\n  skillDefault,\n} from './TalentUtil';\nimport { Element, ScalingType, TalentProps } from './types';\n\nconst jeanTalent: Talent = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalent;\n\nfunction jeanAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({ normalHits: 5, params, stats, modifier });\n}\n\nfunction jeanSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({ element: Element.Anemo, params, stats, modifier });\n}\n\nfunction jeanBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'fieldEnterExitDmg',\n      element: Element.Anemo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'fieldActivationHealing',\n      scalingType: ScalingType.Attack,\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      scalingType: ScalingType.Attack,\n      params: params.slice(4, 6),\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst lisaTalent: Talent = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalent;\n\nfunction lisaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction lisaSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  talentDmg.push(\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Electro,\n      multiplier: params[5],\n      stats,\n      modifier,\n    })\n  );\n\n  for (let i = 0; i <= 3; i++) {\n    talentDmg.push(\n      skillBase({\n        description: `holdDmgStack${i}`,\n        element: Element.Electro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDmg;\n}\n\nfunction lisaBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackLightDefault, healingSkillBase, skillBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst barbaraTalent: Talent = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalent;\n\nfunction barbaraAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Hydro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction barbaraSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      params: params.slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenOnHit',\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'dropletDmg',\n      element: Element.Hydro,\n      multiplier: params[4],\n      stats,\n      modifier,\n    }),\n  ];\n\n  return talentDmg;\n}\n\nfunction barbaraBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    healingSkillBase({\n      description: 'hpRegen',\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillDefault, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst kaeyaTalent: Talent = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalent;\n\nfunction kaeyaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kaeyaSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kaeyaBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackHeavyDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst dilucTalent: Talent = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalent;\n\nfunction dilucAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction dilucSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      skillBase({\n        description: `${i + 1}HitDmg`,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDamage;\n}\n\nfunction dilucBurst({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['slashingDmg', 'dot', 'explosionDmg'];\n  let talentDamage = descriptions.map((description, i) => {\n    return burstBase({\n      description,\n      element: Element.Pyro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  return talentDamage;\n}\n","import { getTalentStatsAt, getTalentData } from '../Data';\nimport Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  skillBase,\n  burstDefault,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, TalentType, Element } from './types';\n\nconst razorTalent: Talent = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalent;\n\nfunction razorAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 4,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction razorSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['pressDmg', 'holdDmg'];\n  return descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n}\n\nfunction razorBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = burstDefault({\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n\n  let attackParams = getTalentStatsAt(\n    TalentType.Attack,\n    modifier.talentAttackLevel,\n    getTalentData('razor')\n  );\n\n  for (let i = 0; i < 4; i++) {\n    talentDamage.push(\n      burstBase({\n        description: `${i + 1}HitDmgSoulCompanion`,\n        element: Element.Electro,\n        multiplier: params[1] * attackParams[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, hpBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst amberTalent: Talent = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalent;\n\nfunction amberAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction amberSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Electro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    hpBase({\n      description: 'baronBunnyHp',\n      multiplier: params[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction amberBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'dmgPerWave',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push({\n    description: 'totalDmg',\n    damage: [talentDamage[0].damage[0] * 18],\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst ventiTalent: Talent = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalent;\n\nfunction ventiAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 6,\n    chargedElement: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction ventiSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'holdDmg',\n      element: Element.Anemo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction ventiBurst({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n  talentValues.push(\n    burstBase({\n      description: 'dot',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[1],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentValues;\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xianglingTalent: Talent = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalent;\n\nfunction xianglingAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 4, 1],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xianglingSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'guobaDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction xianglingBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      burstBase({\n        description: `swing${i + 1}HitDmg`,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentDamage.push(\n    burstBase({\n      description: 'pyronadoDmg',\n      element: Element.Pyro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  shieldBase,\n  skillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst beidouTalent: Talent = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalent;\n\nfunction beidouAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 5,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction beidouSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[0],\n      flatBonus: params[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'baseDmg',\n      element: Element.Electro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'dmgBonusOnHitTaken',\n      element: Element.Electro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction beidouBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'skillDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    burstBase({\n      description: 'lightningDmg',\n      element: Element.Electro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillMultiBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xingqiuTalent: Talent = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalent;\n\nfunction xingqiuAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 1, 2],\n    chargedHits: 2,\n    params: params\n      .slice(0, 3)\n      .concat(params.slice(4, 6))\n      .concat(params.slice(7)),\n    stats,\n    modifier,\n  });\n}\n\nfunction xingqiuSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillMultiBase({\n      description: 'skillDmg',\n      hits: 2,\n      element: Element.Hydro,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction xingqiuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'swordRainDmg',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import { defaultTalentFn } from './DefaultTalent';\nimport Talent from './Talent';\nimport { attackLightMulti, skillDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xiaoTalent: Talent = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n  burst: xiaoBurst,\n};\n\nexport default xiaoTalent;\n\nfunction xiaoAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  return attackLightMulti({\n    normalHits: [2, 1, 1, 2, 1, 1],\n    element,\n    params: params.slice(1, 5).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction xiaoSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xiaoBurst({ params, stats, modifier }: TalentProps) {\n  return defaultTalentFn();\n}\n","import Talent from './Talent';\nimport {\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillBase,\n  hpBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst ningguangTalent: Talent = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalent;\n\nfunction ningguangAttack({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  // Ningguang's normal attack has no combo\n  let normalAtkDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element: Element.Geo,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'normalAtkDmg',\n    damage: [normalAtkDmg],\n  });\n\n  talentDmg.push(\n    ...chargedAttackDefault({\n      element: Element.Geo,\n      params: params.slice(1, 2),\n      stats,\n      modifier,\n    })\n  );\n\n  // Ningguang's charged attack dmg per star jade\n  let starJadeDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[2],\n    element: Element.Geo,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'starJadeDmg',\n    damage: [starJadeDmg],\n  });\n\n  talentDmg.push(\n    ...plungeAttackDefault({\n      element: Element.Geo,\n      params: params.slice(4),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDmg;\n}\n\nfunction ningguangSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    hpBase({\n      description: 'jadeScreenHp',\n      multiplier: params[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction ningguangBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'dmgPerGem',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst kleeTalent: Talent = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalent;\n\nfunction kleeAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 3,\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kleeSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'jumpyDumptyDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'mineDmg',\n      element: Element.Pyro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction kleeBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'sparksNSplashDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  shieldBase,\n  burstDefault,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst zhongliTalent: Talent = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalent;\n\nfunction zhongliAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 4, 1],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction zhongliSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['stoneSteeleDmg', 'resonanceDmg'];\n\n  let talentDamage = descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Geo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDamage.push(\n    skillBase({\n      description: 'holdDmg',\n      element: Element.Geo,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[5],\n      flatBonus: params[4],\n      element: Element.Geo,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction zhongliBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Geo,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst fischlTalent: Talent = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalent;\n\nfunction fischlAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction fischlSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['ozDmg', 'summoningDmg'];\n  return descriptions.map((description, i) =>\n    skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n}\n\nfunction fischlBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'fallingThunderDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  skillMultiBase,\n  burstBase,\n  healingSkillBase,\n  baseAtkBuff,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst bennettTalent: Talent = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalent;\n\nfunction bennettAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction bennettSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillMultiBase({\n      description: 'chargeLevel1Dmg',\n      hits: 2,\n      element: Element.Pyro,\n      params: params.slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n    skillMultiBase({\n      description: 'chargeLevel2Dmg',\n      hits: 2,\n      element: Element.Pyro,\n      params: params.slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Pyro,\n      multiplier: params[5],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction bennettBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuousPerSecond',\n      params: params.slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n    baseAtkBuff({\n      multiplier: params[3],\n      stats,\n      modifier,\n    }),\n  ];\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  attackBowDefault,\n  calculateTotalDamage,\n  skillBase,\n  normalAttackMulti,\n  chargedAttackMulti,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst tartagliaTalent: Talent = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalent;\n\nfunction tartagliaAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = attackBowDefault({\n    normalHits: 6,\n    chargedElement: Element.Hydro,\n    params: params.slice(0, 8).concat(params.slice(10)),\n    stats,\n    modifier,\n  });\n\n  let riptideFlashDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[8],\n    element: Element.Hydro,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'riptideFlashDmg',\n    damage: [riptideFlashDmg],\n  });\n\n  let riptideBurstDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[9],\n    element: Element.Hydro,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'riptideBurstDmg',\n    damage: [riptideBurstDmg],\n  });\n\n  return talentDamage;\n}\n\nfunction tartagliaSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'stanceChangeDmg',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    ...normalAttackMulti({\n      hits: [1, 1, 1, 1, 1, 2],\n      element: Element.Hydro,\n      params: params.slice(1, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: params.slice(8, 10),\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'riptideSlashDmg',\n      element: Element.Hydro,\n      multiplier: params[10],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction tartagliaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmgMelee',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'burstDmgRanged',\n      element: Element.Hydro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'riptideBlastDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  calculateTotalDamage,\n  shieldBase,\n  healingSkillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, AttackType, Element } from './types';\n\nconst noelleTalent: Talent = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalent;\n\nfunction noelleAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction noelleSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  let skillDamage = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Geo,\n    scalingType: ScalingType.Defense,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'skillDmg',\n    damage: [skillDamage],\n  });\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[0],\n      flatBonus: params[6],\n      element: Element.Geo,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    healingSkillBase({\n      description: 'healing',\n      params: [params[1], params[7]],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction noelleBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstInitDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'firstSwingDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  healingSkillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, Element } from './types';\n\nconst qiqiTalent: Talent = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalent;\n\nfunction qiqiAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 2, 1],\n    chargedHits: 2,\n    params: params.slice(0, 6).concat(params[5]).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction qiqiSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Cryo,\n      multiplier: params[7],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'heraldOfFrostDmg',\n      element: Element.Cryo,\n      multiplier: params[4],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenOnHit',\n      scalingType: ScalingType.Attack,\n      params: params.slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      scalingType: ScalingType.Attack,\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction qiqiBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Cryo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'healing',\n      scalingType: ScalingType.Attack,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackHeavyDefault, skillDefault, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst chongyunTalent: Talent = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalent;\n\nfunction chongyunAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction chongyunSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params: params,\n    stats,\n    modifier,\n  });\n}\n\nfunction chongyunBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Cryo,\n    params: params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  plungeAttackDefault,\n  skillBase,\n  hpBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst ganyuTalent: Talent = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalent;\n\nfunction ganyuAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 6,\n      element: Element.Physical,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  let aimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[6],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'aimShotDmg',\n    damage: [aimedShotDmg],\n  });\n\n  let chargedDescriptions = [\n    'aimShotChargeLevel1',\n    'frostflakeArrowDmg',\n    'frostflakeArrowBloomDmg',\n  ];\n  let chargedDmg = chargedDescriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i + 7],\n      element: Element.Cryo,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n\n    return {\n      description,\n      damage: [damage],\n    };\n  });\n  talentDamage.push(...chargedDmg);\n\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(10),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction ganyuSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    hpBase({\n      description: 'iceLotusHp',\n      multiplier: params[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction ganyuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'iceShardDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  calculateTotalDamage,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, AttackType, Element } from './types';\n\nconst albedoTalent: Talent = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalent;\n\nfunction albedoAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction albedoSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  talentDmg.push(\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  let transientBlossomDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: Element.Geo,\n    scalingType: ScalingType.Defense,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'transientBlossomDmg',\n    damage: [transientBlossomDmg],\n  });\n\n  return talentDmg;\n}\n\nfunction albedoBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'fatalBlossomDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackBowDefault,\n  skillBase,\n  shieldBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst dionaTalent: Talent = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalent;\n\nfunction dionaAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Cryo,\n    params: params.slice(0, 5).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction dionaSkill({ params, stats, modifier }: TalentProps) {\n  let holdModifier = {\n    ...modifier,\n    dionaHoldSkill: true,\n  };\n\n  return [\n    skillBase({\n      description: 'icyPawDmgPerPaw',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    shieldBase({\n      description: 'shieldHpPress',\n      multiplier: params[1],\n      flatBonus: params[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n    shieldBase({\n      description: 'shieldHpHold',\n      multiplier: params[1],\n      flatBonus: params[2],\n      element: Element.Cryo,\n      stats,\n      modifier: holdModifier,\n    }),\n  ];\n}\n\nfunction dionaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'continuousFieldDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuousTime',\n      params: params.slice(2),\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst monaTalent: Talent = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalent;\n\nfunction monaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Hydro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction monaSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'dot',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction monaBurst({ params, stats, modifier }: TalentProps) {\n  let modifiedStats = { ...stats };\n  if (modifiedStats.dmgBonus !== undefined) {\n    modifiedStats.dmgBonus += params[9];\n  } else {\n    modifiedStats.dmgBonus = params[9];\n  }\n\n  return [\n    burstBase({\n      description: 'explosionDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats: modifiedStats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  calculateTotalDamage,\n  chargedAttackMulti,\n  plungeAttackDefault,\n  skillBase,\n  skillMultiBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst keqingTalent: Talent = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalent;\n\nfunction keqingAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  for (let i = 0; i < 3; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentDamage.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit4Dmg = [];\n  for (let i = 3; i < 5; i++) {\n    hit4Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '4HitDmg',\n    damage: hit4Dmg,\n  });\n\n  let hit5Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[5],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentDamage.push({\n    description: `5HitDmg`,\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Physical,\n      params: params.slice(6, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction keqingSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['lightningStilettoDmg', 'slashingDmg'];\n  let talentDamage = descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDamage.push(\n    skillMultiBase({\n      description: 'thunderclapSlashDmg',\n      hits: 2,\n      element: Element.Electro,\n      params: [params[2], params[2]],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction keqingBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'burstInitDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  let consecutiveSlashDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: Element.Electro,\n    attackType: AttackType.Burst,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'consecutiveSlashDmg',\n    damage: Array(8).fill(consecutiveSlashDmg),\n  });\n\n  talentDamage.push(\n    burstBase({\n      description: 'lastAttackDmg',\n      element: Element.Electro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillDefault, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst sucroseTalent: Talent = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalent;\n\nfunction sucroseAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction sucroseSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction sucroseBurst({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n  talentValues.push(\n    burstBase({\n      description: 'dot',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[1],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentValues;\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  skillBase,\n  shieldBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, Element } from './types';\n\nconst xinyanTalent: Talent = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalent;\n\nfunction xinyanAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 4,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xinyanSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'swingDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  // Shields\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      shieldBase({\n        description: `shieldHpLevel${i + 1}`,\n        multiplier: params[2 * i + 1],\n        flatBonus: params[2 * i + 2],\n        element: Element.Pyro,\n        scalingType: ScalingType.Defense,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentDamage.push(\n    skillBase({\n      description: 'dot',\n      element: Element.Pyro,\n      multiplier: params[7],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction xinyanBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Physical,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'pyroDot',\n      element: Element.Pyro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  normalAttackMulti,\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillMultiBase,\n  burstMultiBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst rosariaTalent: Talent = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalent;\n\nfunction rosariaAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackMulti({\n      hits: [1, 1, 2, 1],\n      element: Element.Physical,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let hit5Dmg = [];\n  for (let i = 4; i < 6; i++) {\n    hit5Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '5HitDmg',\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackDefault({\n      element: Element.Physical,\n      params: params.slice(6, 7),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(8, 11),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction rosariaSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillMultiBase({\n      description: 'skillDmg',\n      hits: 2,\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction rosariaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstMultiBase({\n      description: 'burstDmg',\n      hits: 2,\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'iceLanceDot',\n      element: Element.Cryo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, TalentValue, Element } from './types';\n\nconst hutaoTalent: Talent = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalent;\n\nfunction hutaoAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 4,\n      element,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let hit5Dmg = [];\n  for (let i = 4; i < 6; i++) {\n    hit5Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '5HitDmg',\n    damage: hit5Dmg,\n  });\n\n  let hit6Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[6],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentDamage.push({\n    description: '6HitDmg',\n    damage: hit6Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackDefault({\n      element,\n      params: params.slice(7, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction hutaoSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'bloodBlossomDmg',\n      element: Element.Pyro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction hutaoBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage: TalentValue[] = [];\n\n  let dmgDescriptions = ['burstDmg', 'burstDmgLowHp'];\n  dmgDescriptions.forEach((description, i) => {\n    talentDamage.push(\n      burstBase({\n        description,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  });\n\n  let regenDescriptions = ['hpRegen', 'hpRegenLowHp'];\n  regenDescriptions.forEach((description, i) => {\n    talentDamage.push(\n      healingSkillBase({\n        description,\n        params: [params[i + 2], 0],\n        stats,\n        modifier,\n      })\n    );\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  chargedAttackMulti,\n  plungeAttackDefault,\n  skillBase,\n} from './TalentUtil';\nimport { AttackType, Element, TalentProps, TalentValue } from './types';\n\nconst kazuhaTalent: Talent = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalent;\n\nfunction kazuhaAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues: TalentValue[] = [];\n\n  // Normal attack\n  for (let i = 0; i < 2; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit3Dmg = [];\n  for (let i = 2; i < 4; i++) {\n    hit3Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentValues.push({\n    description: '3HitDmg',\n    damage: hit3Dmg,\n  });\n\n  let hit4Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[4],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentValues.push({\n    description: `4HitDmg`,\n    damage: hit4Dmg,\n  });\n\n  let hit5Dmg = [];\n  const hit5DmgSingle = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  for (let i = 0; i < 3; i++) {\n    hit5Dmg.push(hit5DmgSingle);\n  }\n  talentValues.push({\n    description: `5HitDmg`,\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentValues.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Physical,\n      params: params.slice(6, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: modifier.infusionPlunge ?? Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction kazuhaSkill({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['pressDmg', 'holdDmg'];\n  return descriptions.map((description, i) =>\n    skillBase({\n      description,\n      element: Element.Anemo,\n      multiplier: params[i * 2],\n      stats,\n      modifier,\n    })\n  );\n}\n\nfunction kazuhaBurst({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['slashingDmg', 'dot'];\n  let talentValues = descriptions.map((description, i) =>\n    burstBase({\n      description,\n      element: Element.Anemo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[2],\n        stats,\n        modifier,\n      })\n    );\n  }\n  return talentValues;\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  plungeAttackDefault,\n  skillDefault,\n  burstDefault,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst yanfeiTalent: Talent = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalent;\n\nfunction yanfeiAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 3,\n      element: Element.Pyro,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  for (let i = 0; i < 5; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i + 3],\n      element: Element.Pyro,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    talentDamage.push({\n      description: `chargedDmgSeal${i}`,\n      damage: [damage],\n    });\n  }\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Pyro,\n      params: params.slice(15, 18),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction yanfeiSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction yanfeiBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import { getTalentData, getTalentStatsAt } from '../Data';\nimport { defaultTalentFn } from './DefaultTalent';\nimport Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  normalAttackMulti,\n  plungeAttackDefault,\n} from './TalentUtil';\nimport { AttackType, Element, TalentProps, TalentType } from './types';\n\nconst yoimiyaTalent: Talent = {\n  attack: yoimiyaAttack,\n  skill: yoimiyaSkill,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalent;\n\nfunction yoimiyaAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n\n  // Normal attack\n  let normalAttackParams = params.slice(0, 5);\n  if (modifier.yoimiyaSkill) {\n    const skillParams = getTalentStatsAt(\n      TalentType.Skill,\n      modifier.talentSkillLevel,\n      getTalentData('yoimiya')\n    );\n    normalAttackParams = normalAttackParams.map(\n      (param) => param * skillParams[3]\n    );\n  }\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: [2, 1, 1, 2, 1],\n      element: modifier.infusion ?? Element.Physical,\n      params: normalAttackParams,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  let aimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentValues.push({\n    description: 'aimShotDmg',\n    damage: [aimedShotDmg],\n  });\n\n  let chargedAimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[6],\n    element: Element.Pyro,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'chargedAimShotDmg',\n    damage: [chargedAimedShotDmg],\n  });\n\n  let kindlingArrowDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[7],\n    element: Element.Pyro,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'kindlingArrowDmg',\n    damage: [kindlingArrowDmg],\n  });\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(8, 11),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction yoimiyaSkill({ params, stats, modifier }: TalentProps) {\n  return defaultTalentFn();\n}\n\nfunction yoimiyaBurst({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['burstDmg', 'aurousBlazeExplosionDmg'];\n\n  return descriptions.map((description, i) =>\n    burstBase({\n      description,\n      element: Element.Pyro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyMulti,\n  skillBase,\n  burstDefault,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst eulaTalent: Talent = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalent;\n\nfunction eulaAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyMulti({\n    normalHits: [1, 1, 2, 1, 2],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction eulaSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['pressDmg', 'holdDmg', 'icewhirlBrandDmg'];\n  return descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Cryo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n}\n\nfunction eulaBurst({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n  talentDmg.push(\n    ...burstDefault({\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let descriptions = ['lightfallSwordBaseDmg', 'lightfallSwordStackDmg'];\n  let lightfallSwordParams = params.slice(1, 3);\n  let lightfallSwordTalent = descriptions.map((description, i) => {\n    return burstBase({\n      description,\n      element: Element.Physical,\n      multiplier: lightfallSwordParams[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDmg.push(...lightfallSwordTalent);\n\n  return talentDmg;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport {\n  AttackType,\n  Element,\n  ScalingType,\n  TalentType,\n  TalentValue,\n} from './types';\nimport Resistance from '../Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { talents } from './Talent';\nimport Reaction from '../modifier/Reaction';\nimport CritType from '../modifier/CritType';\n\n// Function to get specified talent\nexport function getTalentFn(characterId: string, type: TalentType) {\n  return talents[characterId]?.[type] ?? talents.defaultTalent[type];\n}\n\n// Functions to calculate Talent Values\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\nfunction calculateAmplifyingMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\nfunction calculateReactionMultiplier({\n  reaction,\n  stats,\n  reactionBonus,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  reactionBonus: number;\n  element: Element;\n}) {\n  const amplifyingMultiplier = calculateAmplifyingMultiplier(reaction, element);\n  if (amplifyingMultiplier > 1) {\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingMultiplier * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: modifier.flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === CritType.Crit) {\n    crit += stats.critDmg;\n  } else if (modifier.critType === CritType.Average) {\n    let critRate = stats.critRate;\n    if (attackType === AttackType.Charged) {\n      critRate += stats.chargedCritRate ?? 0;\n    } else if (attackType === AttackType.Burst) {\n      critRate += stats.burstCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    reactionBonus: 0,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  const baseHealing = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n\n  // Incoming healing bonus is ignored because the healer's\n  // incoming healing bonus is not necessarily the same as the\n  // character being healed\n  return baseHealing * (1 + (stats.healingBonus ?? 0));\n}\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n// Used for all default normal attacks\nexport function normalAttackDefault({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues: TalentValue[] = [];\n  for (let i = 0; i < hits; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  return talentValues;\n}\n// Used for all normal attacks with multiple damage instances in 1 hit e.g. polearms\nexport function normalAttackMulti({\n  hits = [],\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits?: number[];\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = hits.map((hitCount, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n\n    let damages = [];\n    for (let hit = 0; hit < hitCount; hit++) {\n      damages.push(damage);\n    }\n\n    return {\n      description: `${i + 1}HitDmg`,\n      damage: damages,\n    } as TalentValue;\n  });\n\n  return talentValues;\n}\n// Used for all 1-hit charged attacks\nexport function chargedAttackDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return [\n    {\n      description: 'chargedDmg',\n      damage: [damage],\n    },\n  ] as TalentValue[];\n}\n// Used for multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n  for (let i = 0; i < hits; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return [\n    {\n      description: `chargedDmg`,\n      damage: damages,\n    },\n  ] as TalentValue[];\n}\n// Used for all default claymore charged attacks\nexport function chargedAttackHeavy({\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let descriptions = ['chargedSpinDmg', 'chargedFinalDmg'];\n  return descriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n\n    return {\n      description: description,\n      damage: [damage],\n    } as TalentValue;\n  });\n}\n// Used for all default plunge attacks\nexport function plungeAttackDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n  return descriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Plunge,\n      modifier,\n    });\n\n    return {\n      description: description,\n      damage: [damage],\n    } as TalentValue;\n  });\n}\n// Used for all default sword/polearm/catalyst attacks\nexport function attackLightDefault({\n  normalHits,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackDefault({\n      element,\n      params: params.slice(normalHits, normalHits + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits + 1 + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all default sword/polearm attacks with multi damage instances\nexport function attackLightMulti({\n  normalHits = [],\n  chargedHits = 1,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits?: number[];\n  chargedHits?: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits.length),\n      stats,\n      modifier,\n    })\n  );\n\n  if (chargedHits === 1) {\n    talentValues.push(\n      ...chargedAttackDefault({\n        element,\n        params: params.slice(normalHits.length, normalHits.length + 1),\n        stats,\n        modifier,\n      })\n    );\n  } else {\n    talentValues.push(\n      ...chargedAttackMulti({\n        hits: chargedHits,\n        element,\n        params: params.slice(\n          normalHits.length,\n          normalHits.length + chargedHits\n        ),\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits.length + chargedHits + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all default claymore attacks\nexport function attackHeavyDefault({\n  normalHits,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackHeavy({\n      element,\n      params: params.slice(normalHits, normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits + 2 + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all claymore attacks with multi damage instances\nexport function attackHeavyMulti({\n  normalHits = [],\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits?: number[];\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits.length),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackHeavy({\n      params: params.slice(normalHits.length, normalHits.length + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits.length + 2 + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all debault bow aim shots (include charged shots)\nexport function aimShotDefault({\n  chargedElement,\n  params,\n  stats,\n  modifier,\n}: {\n  chargedElement: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues: TalentValue[] = [];\n\n  let damage = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentValues.push({\n    description: 'aimShotDmg',\n    damage: [damage],\n  });\n\n  damage = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: chargedElement,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'chargedAimShotDmg',\n    damage: [damage],\n  });\n\n  return talentValues;\n}\n// Used for all default bow attacks\nexport function attackBowDefault({\n  normalHits,\n  chargedElement,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  chargedElement: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element: Element.Physical,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...aimShotDefault({\n      chargedElement,\n      params: params.slice(normalHits, normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Base function for all damage skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function skillBase({\n  description,\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  description: string;\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    element,\n    multiplier,\n    attackType: AttackType.Skill,\n    stats,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Used for all default skill that only does 1-hit elemental dmg\nexport function skillDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n// Base function for damage skills with multiple damage instances\nexport function skillMultiBase({\n  description,\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    description,\n    damage: damages,\n  } as TalentValue;\n}\n// Base function for all damage bursts. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function burstBase({\n  description,\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  description: string;\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    element,\n    multiplier,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Used for all default burst that only does 1-hit elemental dmg\nexport function burstDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n// Base function for bursts with multiple damage instances\nexport function burstMultiBase({\n  description,\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    description,\n    damage: damages,\n  } as TalentValue;\n}\n// Base function for all healing skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function healingSkillBase({\n  description,\n  scalingType = ScalingType.Hp,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  scalingType?: ScalingType;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateHealing({\n    stats,\n    multiplier: params[0],\n    flatHealing: params[1],\n    scalingType,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Base function for all shields/summon HP\nexport function hpBase({\n  description,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  description: string;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    description,\n    damage: [hp],\n  } as TalentValue;\n}\nexport function shieldBase({\n  description,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  description: string;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [dmgAbsorption],\n  } as TalentValue;\n}\n\nexport function baseAtkBuff({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  let atkBonus = stats.baseAtk * multiplier;\n  return {\n    description: 'atkBonus',\n    damage: [atkBonus],\n  };\n}\n","import Talent from './Talent';\r\nimport {\r\n  attackLightMulti,\r\n  burstBase,\r\n  burstMultiBase,\r\n  skillBase,\r\n} from './TalentUtil';\r\nimport { Element, TalentProps, TalentValue } from './types';\r\n\r\nconst raidenTalent: Talent = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalent;\r\n\r\nfunction raidenAttack({ params, stats, modifier }: TalentProps) {\r\n  return attackLightMulti({\r\n    normalHits: [1, 1, 1, 2, 1],\r\n    params: params.slice(0, 4).concat(params.slice(5)),\r\n    stats,\r\n    modifier,\r\n  });\r\n}\r\n\r\nfunction raidenSkill({ params, stats, modifier }: TalentProps) {\r\n  return [\r\n    skillBase({\r\n      description: 'skillDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n    skillBase({\r\n      description: 'coordinatedAtkDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n  ];\r\n}\r\n\r\nfunction raidenBurst({ params, stats, modifier }: TalentProps) {\r\n  let talentValues: TalentValue[] = [];\r\n\r\n  // Musou no Hitotachi\r\n  const initialResolveBonus = params[1] * (modifier.resolveStacks ?? 0);\r\n  talentValues.push(\r\n    burstBase({\r\n      description: 'musouNoHitotachiDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[0] + initialResolveBonus,\r\n      stats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  /* Musou Isshin*/\r\n  const attackResolveBonus = params[2] * (modifier.resolveStacks ?? 0);\r\n  // 1-3 hit\r\n  for (let i = 0; i < 3; i++) {\r\n    talentValues.push(\r\n      burstBase({\r\n        description: `${i + 1}HitDmg`,\r\n        element: Element.Electro,\r\n        multiplier: params[i + 4] + attackResolveBonus,\r\n        stats,\r\n        modifier,\r\n      })\r\n    );\r\n  }\r\n\r\n  // 4 hit\r\n  talentValues.push(\r\n    burstMultiBase({\r\n      description: '4HitDmg',\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: params.slice(7, 9).map((param) => param + attackResolveBonus),\r\n      stats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  // 5 hit\r\n  talentValues.push(\r\n    burstBase({\r\n      description: '5HitDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[9] + attackResolveBonus,\r\n      stats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  // Charged attack\r\n  talentValues.push(\r\n    burstMultiBase({\r\n      description: 'chargedDmg',\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: params.slice(10, 12).map((param) => param + attackResolveBonus),\r\n      stats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  // Plunge\r\n  let plungeDescriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\r\n  plungeDescriptions.forEach((description, i) => {\r\n    talentValues.push(\r\n      burstBase({\r\n        description,\r\n        element: Element.Electro,\r\n        multiplier: params[13 + i] + attackResolveBonus,\r\n        stats,\r\n        modifier,\r\n      })\r\n    );\r\n  });\r\n\r\n  return talentValues;\r\n}\r\n","import Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  chargedAttackHeavy,\n  healingSkillBase,\n  plungeAttackDefault,\n  skillBase,\n} from './TalentUtil';\nimport {\n  AttackType,\n  Element,\n  ScalingType,\n  TalentProps,\n  TalentValue,\n} from './types';\n\nconst sayuTalent: Talent = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalent;\n\nfunction sayuAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues: TalentValue[] = [];\n\n  // Normal attack\n  for (let i = 0; i < 2; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit3Dmg = [];\n  for (let i = 2; i < 4; i++) {\n    hit3Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentValues.push({\n    description: '3HitDmg',\n    damage: hit3Dmg,\n  });\n\n  let hit4Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[4],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentValues.push({\n    description: `4HitDmg`,\n    damage: hit4Dmg,\n  });\n\n  // Charged attack\n  talentValues.push(\n    ...chargedAttackHeavy({ params: params.slice(5, 7), stats, modifier })\n  );\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction sayuSkill({ params, stats, modifier }: TalentProps) {\n  const talentValues: TalentValue[] = [];\n\n  const skillDescriptions = [\n    'fuufuuWindwheelDmg',\n    'fuufuuWhirlwindKickPressDmg',\n    'fuufuuWhirlwindKickHoldDmg',\n  ];\n  const skillParams = [params[0], params[2], params[3]];\n\n  skillDescriptions.forEach((description, i) =>\n    talentValues.push(\n      skillBase({\n        description,\n        element: Element.Anemo,\n        multiplier: skillParams[i],\n        stats,\n        modifier,\n      })\n    )\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    const elementalAbsorption = modifier.elementalAbsorption;\n    const elementalDescriptions = [\n      'fuufuuWindwheelElementalDmg',\n      'fuufuuWhirlwindKickElementalDmg',\n    ];\n    const elementalParams = [params[1], params[4]];\n\n    elementalDescriptions.forEach((description, i) =>\n      talentValues.push(\n        skillBase({\n          description,\n          element: elementalAbsorption,\n          multiplier: elementalParams[i],\n          stats,\n          modifier,\n        })\n      )\n    );\n  }\n\n  return talentValues;\n}\n\nfunction sayuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'activationDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'activationHealing',\n      scalingType: ScalingType.Attack,\n      params: [params[2], params[1]],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'mujimujiDarumaDmg',\n      element: Element.Anemo,\n      multiplier: params[3],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'mujimujiDarumaHealing',\n      scalingType: ScalingType.Attack,\n      params: [params[5], params[4]],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import { getTalentData, getTalentStatsAt } from '../Data';\r\nimport Talent from './Talent';\r\nimport {\r\n  attackLightDefault,\r\n  calculateTotalDamage,\r\n  chargedAttackDefault,\r\n  healingSkillBase,\r\n  normalAttackDefault,\r\n  plungeAttackDefault,\r\n  skillBase,\r\n} from './TalentUtil';\r\nimport {\r\n  AttackType,\r\n  Element,\r\n  ScalingType,\r\n  TalentProps,\r\n  TalentType,\r\n  TalentValue,\r\n} from './types';\r\n\r\nconst kokomiTalent: Talent = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalent;\r\n\r\nfunction kokomiAttack({ params, stats, modifier }: TalentProps) {\r\n  if (modifier.kokomiBurst) {\r\n    let talentValues = [];\r\n\r\n    const burstParams = getTalentStatsAt(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      getTalentData('kokomi')\r\n    );\r\n\r\n    // Normal attacks\r\n    let normalAttackDmg = normalAttackDefault({\r\n      hits: 3,\r\n      element: Element.Hydro,\r\n      params,\r\n      stats,\r\n      modifier,\r\n    });\r\n    const normalBonusDmg = calculateTotalDamage({\r\n      stats,\r\n      multiplier:\r\n        burstParams[3] +\r\n        (modifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0),\r\n      element: Element.Hydro,\r\n      scalingType: ScalingType.Hp,\r\n      attackType: AttackType.Normal,\r\n      modifier,\r\n    });\r\n    normalAttackDmg.forEach(\r\n      (talentValue) => (talentValue.damage[0] += normalBonusDmg)\r\n    );\r\n\r\n    talentValues.push(...normalAttackDmg);\r\n\r\n    // Charged attacks\r\n    let chargedAttackDmg = chargedAttackDefault({\r\n      element: Element.Hydro,\r\n      params: params.slice(3, 4),\r\n      stats,\r\n      modifier,\r\n    });\r\n    const chargedBonusDmg = calculateTotalDamage({\r\n      stats,\r\n      multiplier:\r\n        burstParams[4] +\r\n        (modifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0),\r\n      element: Element.Hydro,\r\n      scalingType: ScalingType.Hp,\r\n      attackType: AttackType.Charged,\r\n      modifier,\r\n    });\r\n    chargedAttackDmg.forEach(\r\n      (talentValue) => (talentValue.damage[0] += chargedBonusDmg)\r\n    );\r\n\r\n    talentValues.push(...chargedAttackDmg);\r\n\r\n    // Plunge attacks\r\n    talentValues.push(\r\n      ...plungeAttackDefault({\r\n        element: Element.Hydro,\r\n        params: params.slice(5, 8),\r\n        stats,\r\n        modifier,\r\n      })\r\n    );\r\n\r\n    return talentValues;\r\n  } else {\r\n    return attackLightDefault({\r\n      normalHits: 3,\r\n      element: Element.Hydro,\r\n      params,\r\n      stats,\r\n      modifier,\r\n    });\r\n  }\r\n}\r\n\r\nfunction kokomiSkill({ params, stats, modifier }: TalentProps) {\r\n  let talentValues = [];\r\n\r\n  talentValues.push(\r\n    healingSkillBase({\r\n      description: 'hpRegen',\r\n      params,\r\n      stats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  if (modifier.kokomiBurst) {\r\n    const burstParams = getTalentStatsAt(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      getTalentData('kokomi')\r\n    );\r\n\r\n    let rippleDmg = skillBase({\r\n      description: 'rippleDmg',\r\n      element: Element.Hydro,\r\n      multiplier: params[2],\r\n      stats,\r\n      modifier,\r\n    });\r\n    const bonusDmg = calculateTotalDamage({\r\n      stats,\r\n      multiplier: burstParams[8],\r\n      element: Element.Hydro,\r\n      scalingType: ScalingType.Hp,\r\n      attackType: AttackType.Skill,\r\n      modifier,\r\n    });\r\n    rippleDmg.damage[0] += bonusDmg;\r\n\r\n    talentValues.push(rippleDmg);\r\n  } else {\r\n    talentValues.push(\r\n      skillBase({\r\n        description: 'rippleDmg',\r\n        element: Element.Hydro,\r\n        multiplier: params[2],\r\n        stats,\r\n        modifier,\r\n      })\r\n    );\r\n  }\r\n\r\n  return talentValues;\r\n}\r\n\r\nfunction kokomiBurst({ params, stats, modifier }: TalentProps) {\r\n  let talentValues: TalentValue[] = [];\r\n\r\n  let burstDmg = calculateTotalDamage({\r\n    element: Element.Hydro,\r\n    multiplier: params[0],\r\n    attackType: AttackType.Burst,\r\n    scalingType: ScalingType.Hp,\r\n    stats,\r\n    modifier,\r\n  });\r\n  talentValues.push({\r\n    description: 'burstDmg',\r\n    damage: [burstDmg],\r\n  });\r\n\r\n  talentValues.push(\r\n    healingSkillBase({\r\n      description: 'hpRegenOnHit',\r\n      params: params.slice(1, 3),\r\n      stats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  return talentValues;\r\n}\r\n","import Talent from './Talent';\r\nimport {\r\n  attackBowDefault,\r\n  baseAtkBuff,\r\n  burstBase,\r\n  skillBase,\r\n} from './TalentUtil';\r\nimport { Element, TalentProps } from './types';\r\n\r\nconst saraTalent: Talent = {\r\n  attack: saraAttack,\r\n  skill: saraSkill,\r\n  burst: saraBurst,\r\n};\r\n\r\nexport default saraTalent;\r\n\r\nfunction saraAttack({ params, stats, modifier }: TalentProps) {\r\n  return attackBowDefault({\r\n    normalHits: 5,\r\n    chargedElement: Element.Electro,\r\n    params,\r\n    stats,\r\n    modifier,\r\n  });\r\n}\r\n\r\nfunction saraSkill({ params, stats, modifier }: TalentProps) {\r\n  return [\r\n    skillBase({\r\n      description: 'tenguJuuraiAmbushDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n    baseAtkBuff({\r\n      multiplier: params[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n  ];\r\n}\r\n\r\nfunction saraBurst({ params, stats, modifier }: TalentProps) {\r\n  return [\r\n    burstBase({\r\n      description: 'tenguJuuraiTitanbreakerDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n    burstBase({\r\n      description: 'tenguJuuraiStormclusterDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n  ];\r\n}\r\n","import Talent from './Talent';\r\nimport {\r\n  aimShotDefault,\r\n  burstDefault,\r\n  calculateTotalDamage,\r\n  plungeAttackDefault,\r\n  skillBase,\r\n} from './TalentUtil';\r\nimport { AttackType, Element, TalentProps, TalentValue } from './types';\r\n\r\nconst aloyTalent: Talent = {\r\n  attack: aloyAttack,\r\n  skill: aloySkill,\r\n  burst: aloyBurst,\r\n};\r\n\r\nexport default aloyTalent;\r\n\r\nfunction aloyAttack({ params, stats, modifier }: TalentProps) {\r\n  let talentValues: TalentValue[] = [];\r\n\r\n  // 1-hit\r\n  const hit1Dmg = params.slice(0, 2).map((multiplier) =>\r\n    calculateTotalDamage({\r\n      stats,\r\n      multiplier,\r\n      element: modifier.infusion ?? Element.Physical,\r\n      attackType: AttackType.Normal,\r\n      modifier,\r\n    })\r\n  );\r\n  talentValues.push({ description: '1HitDmg', damage: hit1Dmg });\r\n\r\n  // 2-4 hit\r\n  for (let i = 2; i <= 4; i++) {\r\n    const dmg = calculateTotalDamage({\r\n      stats,\r\n      multiplier: params[i],\r\n      element: modifier.infusion ?? Element.Physical,\r\n      attackType: AttackType.Normal,\r\n      modifier,\r\n    });\r\n    talentValues.push({ description: `${i}HitDmg`, damage: [dmg] });\r\n  }\r\n\r\n  // Charged attack\r\n  talentValues.push(\r\n    ...aimShotDefault({\r\n      chargedElement: Element.Cryo,\r\n      params: params.slice(5, 7),\r\n      stats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  // Plunge attack\r\n  talentValues.push(\r\n    ...plungeAttackDefault({\r\n      element: Element.Physical,\r\n      params: params.slice(7, 10),\r\n      stats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  return talentValues;\r\n}\r\n\r\nfunction aloySkill({ params, stats, modifier }: TalentProps) {\r\n  return [\r\n    skillBase({\r\n      description: 'freezeBombDmg',\r\n      element: Element.Cryo,\r\n      multiplier: params[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n    skillBase({\r\n      description: 'chillwaterBombletDmg',\r\n      element: Element.Cryo,\r\n      multiplier: params[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n  ];\r\n}\r\n\r\nfunction aloyBurst({ params, stats, modifier }: TalentProps) {\r\n  return burstDefault({\r\n    element: Element.Cryo,\r\n    params,\r\n    stats,\r\n    modifier,\r\n  });\r\n}\r\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  applyOnStats: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  applyOnModifier: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionPicker, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value !== '') {\n      const params = getArtifactSetBonusParams('archaicpetra', 4);\n      stats[`${this.value}DmgBonus`] =\n        params[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n    }\n  };\n}\n\nconst archaicPetraOptions = [ArchaicPetra4PcOption];\nexport default archaicPetraOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('berserker', 4);\n      stats.critRate = params[0] + (stats.critRate ?? 0);\n    }\n  };\n}\n\nconst berserkerOptions = [Berserker4PcOption];\nexport default berserkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n      stats.critRate = params[0] + (stats.critRate ?? 0);\n    }\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n      stats.critRate = params[1] + (stats.critRate ?? 0);\n    }\n  };\n}\n\nconst blizzardStrayerOptions = [\n  BlizzardStrayer4PcCryoOption,\n  BlizzardStrayer4PcFrozenOption,\n];\nexport default blizzardStrayerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BloodStainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n      stats.chargedDmgBonus = params[1] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst bloodstainedChivalryOptions = [BloodStainedChivalry4PcOption];\nexport default bloodstainedChivalryOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('braveheart', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  };\n}\n\nconst braveHeartOptions = [BraveHeart4PcOption];\nexport default braveHeartOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusData } from '../../Data';\nimport { IOptionNumber, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value > 0) {\n      const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n      const param = setBonusData[2].bonuses.find(\n        ({ stat }) => stat === 'pyroDmgBonus'\n      )?.value!!;\n\n      let stacks = this.value;\n      if (stacks > 3) stacks = 3;\n      stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n    }\n  };\n}\n\nconst crimsonWitchOptions = [CrimsonWitch4PcOption];\nexport default crimsonWitchOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('heartofdepth', 4);\n      stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst heartOfDepthOptions = [HeartOfDepth4PcOption];\nexport default heartOfDepthOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('instructor', 4);\n      stats.elementalMastery = params[1] + (stats.elementalMastery ?? 0);\n    }\n  };\n}\n\nconst instructorOptions = [Instructor4PcOption];\nexport default instructorOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('lavawalker', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  };\n}\n\nconst lavawalkerOptions = [Lavawalker4PcOption];\nexport default lavawalkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('maidenbeloved', 4);\n      stats.healedBonus = params[0] + (stats.healedBonus ?? 0);\n    }\n  };\n}\n\nconst maidenBelovedOptions = [MaidenBeloved4PcOption];\nexport default maidenBelovedOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('martialartist', 4);\n      stats.normalDmgBonus = params[2] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[2] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst martialArtistOptions = [MartialArtist4PcOption];\nexport default martialArtistOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('noblesseoblige', 4);\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n    }\n  };\n}\n\nconst noblesseObligeOptions = [NoblesseOblige4PcOption];\nexport default noblesseObligeOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionNumber, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    const params = getArtifactSetBonusParams('paleflame', 4);\n\n    if (this.value >= 1) {\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n    }\n\n    if (this.value >= 2) {\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      stats.physicalDmgBonus = params[3] + (stats.physicalDmgBonus ?? 0);\n    }\n  };\n}\n\nconst paleFlameOptions = [PaleFlame4PcOption];\nexport default paleFlameOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('retracingbolide', 4);\n      stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst retracingBolideOptions = [RetracingBolide4PcOption];\nexport default retracingBolideOptions;\n","import { Stats } from '../../../data/types';\nimport { getArtifactSetBonusData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport ArtifactSetOption from './ArtifactSetOption';\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const setBonusData = getArtifactSetBonusData('shimenawasreminiscence');\n      const param = setBonusData[4].bonusExtra.params[1];\n      stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n      stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n    }\n  };\n}\n\nconst shimenawaOptions = [Shimenawa4PcOption];\nexport default shimenawaOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      stats.shieldStrength = params[1] + (stats.shieldStrength ?? 0);\n    }\n  };\n}\n\nconst tenacityOptions = [Tenacity4PcOption];\nexport default tenacityOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('thundersoother', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  };\n}\n\nconst thundersootherOptions = [Thundersoother4PcOption];\nexport default thundersootherOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\n\nclass ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value !== '') {\n      const params = getArtifactSetBonusParams('viridescentvenerer', 4);\n      modifier.enemyResReduction.add(this.value as Element, params[1]);\n    }\n  };\n}\n\nconst viridescentVenererOptions = [ViridescentVenerer4PcOption];\nexport default viridescentVenererOptions;\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import CharacterOption from './CharacterOption';\r\nimport { Stats } from '../../../data/types';\r\nimport { getTalentData, getTalentStatsAt } from '../../Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { Element, TalentType } from '../../talent/types';\r\nimport {\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n  IModifierApplicable,\r\n} from '../Option';\r\n\r\nclass AloyOptionCoil\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('coil');\r\n  }\r\n\r\n  applyOnStats = (\r\n    stats: Stats,\r\n    _talentAttackLevel: number,\r\n    talentSkillLevel: number,\r\n    _talentBurstLevel: number\r\n  ) => {\r\n    if (this.value > 0) {\r\n      const skillParams = getTalentStatsAt(\r\n        TalentType.Skill,\r\n        talentSkillLevel,\r\n        getTalentData('aloy')\r\n      );\r\n\r\n      if (this.value >= 4) {\r\n        // Rushing Ice state\r\n        stats.normalDmgBonus = skillParams[7] + (stats.normalDmgBonus ?? 0);\r\n      } else {\r\n        stats.normalDmgBonus =\r\n          skillParams[this.value + 3] + (stats.normalDmgBonus ?? 0);\r\n      }\r\n    }\r\n  };\r\n\r\n  applyOnModifier = (modifier: DamageModifier) => {\r\n    if (this.value >= 4) {\r\n      modifier.infusion = Element.Cryo;\r\n    }\r\n  };\r\n}\r\n\r\nconst aloyOptions = [AloyOptionCoil];\r\nexport default aloyOptions;\r\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Cryo;\n    }\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Cryo;\n    }\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { Stats } from '../../../data/types';\nimport { getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n    }\n  };\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    _talentBurstLevel: number,\n    ascensionLevel: number\n  ) => {\n    if (this.value && ascensionLevel >= 4) {\n      const params = getTalentData('diluc').passives.find(\n        (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n      )?.params;\n      const pyroDmgBonus = params?.[1] ?? NaN;\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    }\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    talentSkillLevel: number,\n    _talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      let skillParams = getTalentStatsAt(\n        TalentType.Skill,\n        talentSkillLevel,\n        getTalentData('hutao')\n      );\n\n      const totalHp =\n        (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) + (stats.flatHp ?? 0);\n      stats.flatAtk = (stats.flatAtk ?? 0) + totalHp * skillParams[1];\n    }\n  };\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n    }\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value !== '') {\n      modifier.elementalAbsorption = this.value as Element;\n    }\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\nimport ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusionPlunge = Element.Anemo;\n    }\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\r\nimport CharacterOption from './CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  applyOnModifier = (modifier: DamageModifier) => {\r\n    if (this.value) {\r\n      modifier.kokomiBurst = true;\r\n    }\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      let burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('noelle')\n      );\n\n      const totalDef =\n        (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n        (stats.flatDef ?? 0);\n\n      stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n    }\n  };\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Geo;\n    }\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import { Stats } from '../../../data/types';\r\nimport { getTalentStatsAt, getTalentData } from '../../Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../Option';\r\nimport CharacterOption from './CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  applyOnStats = (\r\n    stats: Stats,\r\n    _talentAttackLevel: number,\r\n    talentSkillLevel: number,\r\n    _talentBurstLevel: number\r\n  ) => {\r\n    if (this.value) {\r\n      const params = getTalentStatsAt(\r\n        TalentType.Skill,\r\n        talentSkillLevel,\r\n        getTalentData('raiden')\r\n      );\r\n\r\n      const burstDmgBonus = params[3] * 90;\r\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n    }\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  applyOnModifier = (modifier: DamageModifier) => {\r\n    if (this.value < 0) modifier.resolveStacks = 0;\r\n    else if (this.value > 60) modifier.resolveStacks = 60;\r\n    else modifier.resolveStacks = this.value;\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import aloyOptions from './AloyOption';\nimport ayakaOptions from './AyakaOption';\nimport CharacterOption from './CharacterOption';\nimport chongyunOptions from './ChongyunOption';\nimport dilucOptions from './DilucOption';\nimport hutaoOptions from './HuTaoOption';\nimport kazuhaOptions from './KazuhaOption';\nimport kokomiOptions from './KokomiOption';\nimport noelleOptions from './NoelleOption';\nimport raidenOptions from './RaidenOption';\nimport sayuOptions from './SayuOption';\nimport sucroseOptions from './SucroseOption';\nimport ventiOptions from './VentiOption';\nimport xiaoOptions from './XiaoOption';\nimport yanfeiOptions from './YanfeiOption';\nimport yoimiyaOptions from './YoimiyaOption';\n\nexport { default as CharacterOption } from './CharacterOption';\n\nexport const characterOptions: Record<string, typeof CharacterOption[]> = {\n  ayaka: ayakaOptions,\n  diluc: dilucOptions,\n  venti: ventiOptions,\n  xiao: xiaoOptions,\n  noelle: noelleOptions,\n  chongyun: chongyunOptions,\n  sucrose: sucroseOptions,\n  hutao: hutaoOptions,\n  kazuha: kazuhaOptions,\n  yanfei: yanfeiOptions,\n  yoimiya: yoimiyaOptions,\n  raiden: raidenOptions,\n  sayu: sayuOptions,\n  kokomi: kokomiOptions,\n  aloy: aloyOptions,\n};\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      let burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('xiao')\n      );\n\n      stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n      stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n    }\n  };\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Anemo;\n    }\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      const burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('yanfei')\n      );\n      stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n      modifier.yoimiyaSkill = true;\n    }\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { artifactSetOptions } from './artifactSetOptions';\nimport { characterOptions } from './characterOptions';\nimport Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nconst defaultOptions: typeof Option[] = [];\n\nexport function getCharacterOptions(id: string) {\n  return characterOptions[id] ?? defaultOptions;\n}\n\nexport function getArtifactSetOptions(id: string) {\n  return artifactSetOptions[id] ?? defaultOptions;\n}\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).applyOnStats !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (\n    (option as unknown as IModifierApplicable).applyOnModifier !== undefined\n  );\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import { CharacterPassive, CharacterPassiveFn } from '../types';\nimport { aloyAscension1, aloyAscension4 } from './AloyPassive';\nimport { kokomiAscension0, kokomiAscension4 } from './KokomiPassive';\nimport { raidenAscension4 } from './RaidenPassive';\nimport { yoimiyaAscension1 } from './YoimiyaPassive';\n\nconst characterPassives: Record<string, CharacterPassiveFn> = {\n  Yoimiya_PermanentSkill_1: yoimiyaAscension1,\n  Shougun_PermanentSkill_2: raidenAscension4,\n  // Workaround because Kokomi's A0 passive has no associated id\n  Kokomi_ProudSkill_SwimStamina_Reduction: kokomiAscension0,\n  Kokomi_PermanentSkill_2: kokomiAscension4,\n  Aloy_PermanentSkill_1: aloyAscension1,\n  Aloy_PermanentSkill_2: aloyAscension4,\n};\n\nfunction defaultPassiveFn(): CharacterPassive[] {\n  return [];\n}\n\nexport function getCharacterPassiveFn(passiveId: string) {\n  return characterPassives[passiveId] ?? defaultPassiveFn;\n}\n","import { Stats, TalentParams } from '../../../data/types';\nimport { CharacterOption } from '../../option/characterOptions';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../types';\n\nexport function yoimiyaAscension1(params: TalentParams): CharacterPassive {\n  class YoimiyaOptionAscension1\n    extends CharacterOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('yoimiyaAscension1');\n    }\n\n    applyOnStats = (stats: Stats) => {\n      let pyroDmgBonus = this.value * params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    };\n  }\n\n  return {\n    id: 'yoimiyaAscension1',\n    options: [YoimiyaOptionAscension1],\n  };\n}\n","import { Stats, TalentParams } from '../../../data/types';\r\nimport { CharacterPassive } from '../types';\r\n\r\nexport function raidenAscension4(params: TalentParams): CharacterPassive {\r\n  return {\r\n    id: 'raidenAscension4',\r\n    options: [],\r\n    statMixin: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  };\r\n}\r\n","import { Stats, TalentParams } from '../../../data/types';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { CharacterPassive } from '../types';\r\n\r\nexport function kokomiAscension0(_params: TalentParams): CharacterPassive {\r\n  return {\r\n    id: 'kokomiAscension0',\r\n    options: [],\r\n    statMixin: (stats: Stats) => {\r\n      stats.critRate = (stats.critRate ?? 0) - 1;\r\n      if (stats.critRate < 0) {\r\n        stats.critRate = 0;\r\n      }\r\n\r\n      stats.healingBonus = 0.25 + (stats.healingBonus ?? 0);\r\n    },\r\n  };\r\n}\r\n\r\nexport function kokomiAscension4(params: TalentParams): CharacterPassive {\r\n  return {\r\n    id: 'kokomiAscension4',\r\n    options: [],\r\n    modifierMixin: (modifier: DamageModifier) => {\r\n      modifier.kokomiHealingBonusDmg = params[0];\r\n    },\r\n  };\r\n}\r\n","import { Stats, TalentParams } from '../../../data/types';\r\nimport { CharacterOption } from '../../option/characterOptions';\r\nimport {\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport { CharacterPassive } from '../types';\r\n\r\nexport function aloyAscension1(params: TalentParams): CharacterPassive {\r\n  class AloyOptionAscension1\r\n    extends CharacterOption\r\n    implements IOptionBoolean, IStatsApplicable\r\n  {\r\n    value = false;\r\n\r\n    constructor() {\r\n      super('aloyAscension1');\r\n    }\r\n\r\n    applyOnStats = (stats: Stats) => {\r\n      if (this.value) {\r\n        stats.atkBonus = params[0] * 2 + (stats.atkBonus ?? 0);\r\n      }\r\n    };\r\n  }\r\n\r\n  return {\r\n    id: 'aloyAscension1',\r\n    options: [AloyOptionAscension1],\r\n  };\r\n}\r\n\r\nexport function aloyAscension4(params: TalentParams): CharacterPassive {\r\n  class AloyOptionAscension4\r\n    extends CharacterOption\r\n    implements IOptionNumber, IStatsApplicable\r\n  {\r\n    value = 0;\r\n\r\n    constructor() {\r\n      super('aloyAscension4');\r\n    }\r\n\r\n    applyOnStats = (stats: Stats) => {\r\n      if (this.value > 0) {\r\n        let stacks = this.value;\r\n        if (stacks > 10) {\r\n          stacks = 10;\r\n        }\r\n\r\n        const cryoDmgBonus = params[0] * stacks;\r\n        stats.cryoDmgBonus = cryoDmgBonus + (stats.cryoDmgBonus ?? 0);\r\n      }\r\n    };\r\n  }\r\n\r\n  return {\r\n    id: 'aloyAscension4',\r\n    options: [AloyOptionAscension4],\r\n  };\r\n}\r\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n  getTalentStatsAt,\n} from '../Data';\n\nimport { getTalentFn } from '../talent';\nimport { getCharacterOptions } from '../option';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../../data/types';\nimport type DamageModifier from '../modifier/DamageModifer';\nimport type { TalentType } from '../talent/types';\nimport { getCharacterPassiveFn } from '../passive/characterPassives/CharacterPassive';\nimport { CharacterOption } from '../option/characterOptions';\nimport { CharacterPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\n\nexport default class Character {\n  constructor(id: string, level: number, hasAscended: boolean) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Return an Object with description and damage properties\n  getTalentDamageAt({\n    type,\n    talentLevel,\n    totalStats,\n    modifier,\n  }: {\n    type: TalentType;\n    talentLevel: number;\n    totalStats: Stats;\n    modifier: DamageModifier;\n  }) {\n    if (this.talents === undefined) {\n      return [];\n    }\n\n    const params = getTalentStatsAt(type, talentLevel, this.talents);\n\n    let damageFn = getTalentFn(this.id, type);\n\n    let damage = damageFn({\n      params,\n      stats: totalStats,\n      modifier,\n    });\n\n    return damage;\n  }\n\n  getCharacterOptions() {\n    return getCharacterOptions(this.id).map((Option) => new Option());\n  }\n\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    if (this.talents === undefined) {\n      return [];\n    }\n\n    const passiveDatas = this.talents.passives;\n\n    return passiveDatas\n      .filter((passiveData) => ascensionLevel >= passiveData.ascensionLevel)\n      .flatMap((passiveData) =>\n        getCharacterPassiveFn(passiveData.id)(passiveData.params)\n      );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(ascensionLevel: number, prevAscensionLevel?: number) {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n\n    return characterOptions.concat(passiveOptions);\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from './artifact/Artifact';\nimport Character, { getAscensionLevel } from './character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from './Data';\nimport { StatMixin } from './option/Mixin';\nimport Weapon from './weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputted value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\n// Returns a number representing the value to display (e.g. in stat inputs)\nexport function convertStatToDisplayValue(\n  value: number,\n  isPercentage: boolean\n) {\n  if (isPercentage) {\n    return value * 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n  if (combinedStats.burstCritRate !== undefined) {\n    totalStats.burstCritRate = combinedStats.burstCritRate;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../../data/types';\nimport { propMapping } from '../Data';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatToDisplayValue, convertStatValue } from '../Stat';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setInputValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n\n  setValue(value: number) {\n    this.value = value;\n    if (this.stat !== '') {\n      this.rawValue = convertStatToDisplayValue(\n        value,\n        propMapping[this.stat].isPercentage\n      );\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  options: typeof ArtifactSetOption[];\n  extraStatsFn?: ArtifactSetBonusFunction;\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stat, Stats } from '../../data/types';\nimport { getArtifactMainStatValue } from '../Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatInputValue(i: number, value: number) {\n    this.subStats[i].setInputValue(value);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value + (stats[subStat.stat] ?? 0);\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          type='number'\n          size='sm'\n          value={displayString}\n          onInput={this.handleInput}\n          className={`number-input ${this.props.className ?? ''}`}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\nimport Row from 'react-bootstrap/esm/Row';\n\nclass InputRow extends React.Component {\n  render() {\n    return <Row className='input-row no-gutters'>{this.props.children}</Row>;\n  }\n}\n\nexport default InputRow;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          as='select'\n          size='sm'\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={`picker ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </Form.Control>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../js/artifact/Artifact';\nimport { propMapping } from '../js/Data';\nimport { capitalize, getStatDisplayValue } from '../js/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactRarity = (rarity: number) => {\n    this.props.artifact.rarity = rarity;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactLevel = (level: number) => {\n    this.props.artifact.level = level;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatInputValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-rarity`}\n            label='Rarity:'\n            defaultValue={1}\n            value={artifact.rarity}\n            onInput={this.setArtifactRarity}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-level`}\n            label='Level:'\n            defaultValue={0}\n            value={artifact.level}\n            onInput={this.setArtifactLevel}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label='Main Stat:'\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <p>\n            {getStatDisplayValue(\n              artifact.mainStat.stat,\n              artifact.mainStat.value\n            )}\n          </p>\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import { AppState } from '../../App';\nimport { Stats } from '../../data/types';\nimport Artifact from '../artifact/Artifact';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { StatMixin } from '../option/Mixin';\nimport { getTotalStatsAt } from '../Stat';\nimport { TalentType } from '../talent/types';\n\nexport type RollDistribution = {\n  stat: string;\n  rolls: number;\n};\n\ntype SubstatOptimzerResult = {\n  subStatRolls: RollDistribution[];\n  artifacts: Artifact[];\n};\n\n// Average substat rolls, as per KQM guidelines\nexport const substats: Record<string, number> = {\n  hpBonus: 0.0496,\n  flatHp: 253.94,\n  atkBonus: 0.0496,\n  flatAtk: 16.54,\n  defBonus: 0.062,\n  flatDef: 19.68,\n  elementalMastery: 19.82,\n  energyRecharge: 0.0551,\n  critRate: 0.0331,\n  critDmg: 0.0662,\n};\n\n// Optimize substats according to KQM standardized guidelines\n// 20 preallocated fixed subs (2 of each substat)\n// maxRolls liquid subs (default/max = 20)\n// each sub type can have maximum 2 rolls per different main stat type\nexport function optimizeSubstats(\n  possibleStats: string[],\n  maxRolls: number,\n  erThreshold: number,\n  optimizeTalentType: TalentType,\n  optimizeTalentId: string,\n  appState: AppState,\n  artifactSetBonuses: Stats,\n  damageModifier: DamageModifier,\n  statMixins: StatMixin[]\n): SubstatOptimzerResult {\n  let maxDmg = 0;\n  let optimalSubstatRolls: RollDistribution[] = [];\n  let optimalArtifacts: Artifact[] = appState.artifacts;\n\n  // Roll ER to reach threshold\n  const baseArtifacts = generateBaseArtifacts(appState.artifacts);\n  const baseTotalStats = getTotalStatsAt(\n    appState.character,\n    appState.weapon,\n    artifactSetBonuses,\n    baseArtifacts,\n    appState.talentAttackLevel,\n    appState.talentSkillLevel,\n    appState.talentBurstLevel,\n    statMixins\n  );\n  const baseEr = baseTotalStats.energyRecharge ?? 0;\n\n  let baseErRolls = Math.ceil((erThreshold - baseEr) / substats.energyRecharge);\n\n  const erMainStatCount = baseArtifacts\n    .map((artifact) => artifact.mainStat.stat)\n    .filter((mainStat) => mainStat === 'energyRecharge').length;\n\n  if (baseErRolls < 0) {\n    baseErRolls = 0;\n  } else if (baseErRolls > 2 * (5 - erMainStatCount)) {\n    baseErRolls = 2 * (5 - erMainStatCount);\n  }\n\n  // Generate all combinations\n  const combinations = generateRollCombinationsKqm(\n    possibleStats,\n    maxRolls - baseErRolls,\n    appState.artifacts.map((artifact) => artifact.mainStat.stat),\n    baseErRolls\n  );\n\n  combinations.forEach((combination) => {\n    // Add in ER threshold rolls\n    if (baseErRolls > 0) {\n      const erDistribution = combination.find(\n        ({ stat }) => stat === 'energyRecharge'\n      );\n      if (erDistribution === undefined) {\n        combination.push({ stat: 'energyRecharge', rolls: baseErRolls });\n      } else {\n        erDistribution.rolls += baseErRolls;\n      }\n    }\n\n    const artifacts = generateBaseArtifacts(appState.artifacts);\n\n    addRollsToArtifacts(combination, artifacts);\n\n    const totalStats = getTotalStatsAt(\n      appState.character,\n      appState.weapon,\n      artifactSetBonuses,\n      artifacts,\n      appState.talentAttackLevel,\n      appState.talentSkillLevel,\n      appState.talentBurstLevel,\n      statMixins\n    );\n\n    // Calculate talent damage\n    const talentValues = appState.character.getTalentDamageAt({\n      type: optimizeTalentType,\n      talentLevel: appState.talentAttackLevel,\n      totalStats: totalStats,\n      modifier: damageModifier,\n    });\n\n    const talentDmg =\n      talentValues.find(\n        (talentValue) => talentValue.description === optimizeTalentId\n      )?.damage?.[0] ?? 0;\n\n    // Update optimal rolls\n    if (talentDmg > maxDmg) {\n      optimalSubstatRolls = combination;\n      optimalArtifacts = artifacts;\n      maxDmg = talentDmg;\n    }\n  });\n\n  return {\n    subStatRolls: optimalSubstatRolls,\n    artifacts: optimalArtifacts,\n  };\n}\n\n// Recursive function to generate all substat combinations according to KQM 2*n rule\nfunction generateRollCombinationsKqm(\n  possibleStats: string[],\n  maxRolls: number,\n  mainStats: string[],\n  baseErRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const sameMainStatCount = mainStats.filter(\n    (mainStat) => possibleStats[0] === mainStat\n  ).length;\n  let currentMaxRolls = Math.min((5 - sameMainStatCount) * 2, maxRolls);\n  if (possibleStats[0] === 'energyRecharge') {\n    currentMaxRolls -= baseErRolls;\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = currentMaxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinationsKqm(\n      possibleStats.slice(1),\n      maxRolls - i,\n      mainStats,\n      baseErRolls\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n\n// Recursive function to generate all combinations of possibleStats.length numbers that sum to maxRolls\n// Generated combinations are not guaranteed to be valid substat combinations\n/*\nfunction generateRollCombinations(\n  possibleStats: string[],\n  maxRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = maxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinations(\n      possibleStats.slice(1),\n      maxRolls - i\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n*/\n\n// Generate artifacts with 2 of each substat\nfunction generateBaseArtifacts(prevArtifacts: Artifact[]): Artifact[] {\n  const artifacts = prevArtifacts.map((artifact) => {\n    return new Artifact(\n      artifact.type,\n      artifact.rarity,\n      artifact.level,\n      artifact.mainStat.stat\n    );\n  });\n\n  // Set artifact substats according to currentSubstatRolls\n  let iArtifact = 0;\n  let jArtifact = 0;\n  Object.entries(substats).forEach(([stat, value]) => {\n    artifacts[iArtifact].setSubStatProp(jArtifact, stat);\n    artifacts[iArtifact].setSubStatValue(jArtifact, value * 2);\n    if (++jArtifact >= 4) {\n      jArtifact = 0;\n      if (++iArtifact >= 5) {\n        // This really should not happen\n        iArtifact = 0;\n      }\n    }\n  });\n\n  return artifacts;\n}\n\n// Add liquid subs to fixed subs without replacing any fixed subs\nfunction addRollsToArtifacts(\n  combination: RollDistribution[],\n  artifacts: Artifact[]\n) {\n  const subStats = artifacts.flatMap((artifact) => artifact.subStats);\n  combination.forEach(({ stat, rolls }) => {\n    const subStat = subStats.find((inputStat) => inputStat.stat === stat);\n    if (subStat === undefined) {\n      let sIndex = 0;\n      artifacts\n        .find((artifact) =>\n          artifact.subStats.find((inputStat, i) => {\n            sIndex = i;\n            return isNaN(inputStat.value);\n          })\n        )\n        ?.setSubStatValue(sIndex, substats[stat] * rolls);\n    } else {\n      subStat.setValue(subStat.value + substats[stat] * rolls);\n    }\n  });\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <div>\n        <Form.Check\n          type='checkbox'\n          className={`checkbox ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          <Form.Check.Label>{this.props.label}</Form.Check.Label>\n          <Form.Check.Input\n            type='checkbox'\n            checked={value}\n            onChange={this.handleChange}\n          />\n        </Form.Check>\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Button from 'react-bootstrap/esm/Button';\nimport Card from 'react-bootstrap/esm/Card';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../js/artifact/Artifact';\nimport { propMapping, talentDescMapping } from '../js/Data';\nimport DamageModifier from '../js/modifier/DamageModifer';\nimport {\n  optimizeSubstats,\n  RollDistribution,\n  substats,\n} from '../js/optimization/Optimization';\nimport { StatMixin } from '../js/option/Mixin';\nimport { capitalize } from '../js/Stat';\nimport { TalentType, TalentValueSet } from '../js/talent/types';\nimport Checkbox from './Checkbox';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptimizerBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  damageModifier: DamageModifier;\n  statMixins: StatMixin[];\n  talentValues: TalentValueSet;\n};\n\ntype OptimizerBlockState = {\n  maxRolls: number;\n  selectedSubstats: string[];\n  erThreshold: number;\n  targetTalentType?: TalentType;\n  targetTalentId: string;\n  substatRolls: RollDistribution[];\n};\n\nclass OptimizerBlock extends React.Component<\n  OptimizerBlockProps,\n  OptimizerBlockState\n> {\n  state: OptimizerBlockState = {\n    substatRolls: [],\n    selectedSubstats: [],\n    erThreshold: 100,\n    targetTalentId: '',\n    maxRolls: 20,\n  };\n\n  setMaxRolls = (maxRolls: number) => {\n    this.setState({ maxRolls });\n  };\n\n  setSelectedSubstats = (stat: string) => (selected: boolean) => {\n    if (selected) {\n      if (!this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: [...this.state.selectedSubstats, stat],\n        });\n      }\n    } else {\n      if (this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: this.state.selectedSubstats.filter(\n            (substat) => substat !== stat\n          ),\n        });\n      }\n    }\n  };\n\n  setErThreshold = (value: number) => {\n    if (isNaN(value)) {\n      this.setState({ erThreshold: 0 });\n    } else {\n      this.setState({ erThreshold: value });\n    }\n  };\n\n  setTargetTalentType = (value: string) => {\n    if (value === '') {\n      this.setState({ targetTalentType: undefined });\n    } else {\n      this.setState({ targetTalentType: value as TalentType });\n    }\n  };\n\n  setTargetTalentId = (value: string) => {\n    this.setState({ targetTalentId: value });\n  };\n\n  onOptimizeClick = () => {\n    if (\n      this.state.targetTalentType !== undefined &&\n      this.state.targetTalentId !== ''\n    ) {\n      const result = optimizeSubstats(\n        this.state.selectedSubstats,\n        this.state.maxRolls,\n        this.state.erThreshold / 100,\n        this.state.targetTalentType,\n        this.state.targetTalentId,\n        this.props.appState,\n        this.props.artifactSetBonuses,\n        this.props.damageModifier,\n        this.props.statMixins\n      );\n\n      this.props.updateTotalStats({ artifacts: result.artifacts });\n      this.props.setAppState({ artifacts: result.artifacts });\n      this.setState({ substatRolls: result.subStatRolls });\n    }\n  };\n\n  render() {\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='0'\n            className='bg-transparent border-0'\n          >\n            <h3>Substat Optimizer</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n          <Accordion.Collapse eventKey='0'>\n            <Card.Body>\n              <div className='input-block'>\n                <p>Fixed Substats: 20</p>\n\n                <InputRow>\n                  <IntInput\n                    className='level-input'\n                    id={'optimizer-liquid-substats'}\n                    label='Liquid Substats:'\n                    defaultValue={20}\n                    value={this.state.maxRolls}\n                    onInput={this.setMaxRolls}\n                  />\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <p>Select substats to optimize:</p>\n                {Object.keys(substats).map((stat) => (\n                  <InputRow key={stat}>\n                    <Checkbox\n                      id={`optimizer-selected-substats-${stat}`}\n                      label={`${propMapping[stat].name}`}\n                      defaultValue={false}\n                      value={this.state.selectedSubstats.includes(stat)}\n                      onChange={this.setSelectedSubstats(stat)}\n                    />\n                  </InputRow>\n                ))}\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <FloatInput\n                    className='stat-input'\n                    id={'optimizer-er-threshold'}\n                    label='ER Threshold:'\n                    defaultValue={100}\n                    value={this.state.erThreshold}\n                    onInput={this.setErThreshold}\n                  />\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <Picker\n                    id={`optimizer-target-talent-type`}\n                    label='Target Talent Type:'\n                    defaultValue=''\n                    value={this.state.targetTalentType ?? ''}\n                    onChange={this.setTargetTalentType}\n                  >\n                    <Picker.Item value='' label='' />\n                    <Picker.Item\n                      value={TalentType.Attack}\n                      label={capitalize(TalentType.Attack)}\n                    />\n                    <Picker.Item\n                      value={TalentType.Skill}\n                      label={capitalize(TalentType.Skill)}\n                    />\n                    <Picker.Item\n                      value={TalentType.Burst}\n                      label={capitalize(TalentType.Burst)}\n                    />\n                  </Picker>\n                </InputRow>\n\n                <InputRow>\n                  <Picker\n                    id={`optimizer-target-talent-id`}\n                    label='Target Talent Name:'\n                    defaultValue=''\n                    value={this.state.targetTalentId ?? ''}\n                    onChange={this.setTargetTalentId}\n                  >\n                    <Picker.Item value='' label='' />\n                    {this.state.targetTalentType\n                      ? this.props.talentValues[\n                          this.state.targetTalentType\n                        ].map(({ description }) => (\n                          <Picker.Item\n                            key={description}\n                            value={description}\n                            label={talentDescMapping[description]}\n                          />\n                        ))\n                      : null}\n                  </Picker>\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <Button\n                    variant='secondary'\n                    size='sm'\n                    onClick={this.onOptimizeClick}\n                  >\n                    Optimize\n                  </Button>\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                {this.state.substatRolls.length > 0 && (\n                  <p>Liquid roll distribution:</p>\n                )}\n\n                {this.state.substatRolls.map(({ stat, rolls }) => (\n                  <p key={stat}>\n                    {propMapping[stat].name}: {rolls}\n                  </p>\n                ))}\n              </div>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default OptimizerBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../js/artifact/Artifact';\nimport DamageModifier from '../js/modifier/DamageModifer';\nimport { StatMixin } from '../js/option/Mixin';\nimport { TalentValueSet } from '../js/talent/types';\nimport ArtifactBlock from './ArtifactBlock';\nimport OptimizerBlock from './OptimizerBlock';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  damageModifier: DamageModifier;\n  statMixins: StatMixin[];\n  talentValues: TalentValueSet;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Col\n        id='artifact-column'\n        className='artifact-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='artifact-heading'>\n          <h2>Artifacts</h2>\n        </div>\n        <OptimizerBlock {...this.props} />\n        <div className='result-block'>\n          {appState.artifacts.map((artifact) => (\n            <ArtifactBlock\n              artifact={artifact}\n              updateArtifactState={this.updateArtifactState}\n              key={artifact.type}\n            />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import React from 'react';\r\nimport Row from 'react-bootstrap/esm/Row';\r\n\r\nclass InputBlock extends React.Component {\r\n  render() {\r\n    return <Row className='input-block no-gutters'>{this.props.children}</Row>;\r\n  }\r\n}\r\n\r\nexport default InputBlock;\r\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../js/option';\nimport {\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n} from '../js/option/Option';\nimport { capitalize, getOptionName } from '../js/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport { ArtifactSetOption } from '../js/option/artifactSetOptions';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].id = id;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </InputBlock>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../js/character/Character';\nimport { CharacterOption } from '../js/option/characterOptions';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const character = this.props.appState.character;\n    character.id = id;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../js/modifier/CritType';\nimport Reaction from '../js/modifier/Reaction';\nimport Resistance from '../js/Resistance';\nimport { capitalize } from '../js/Stat';\nimport { Element } from '../js/talent/types';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  setReaction = (reaction: string) => {\n    this.props.updateTalentValues({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n    this.props.setAppState({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType, reaction } = this.props.appState;\n    return (\n      <InputBlock>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n\n        <InputRow>\n          <Picker\n            id='reaction-picker'\n            label='Reaction:'\n            defaultValue={Reaction.None}\n            value={reaction}\n            onChange={this.setReaction}\n          >\n            {Object.values(Reaction).map((reaction) => (\n              <Picker.Item\n                key={reaction}\n                label={capitalize(reaction)}\n                value={reaction}\n              />\n            ))}\n          </Picker>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../Data';\nimport archaicPetraOptions from '../option/artifactSetOptions/ArchaicPetraOption';\nimport berserkerOptions from '../option/artifactSetOptions/BerserkerOption';\nimport blizzardStrayerOptions from '../option/artifactSetOptions/BlizzardStrayerOption';\nimport bloodstainedChivalryOptions from '../option/artifactSetOptions/BloodstainedChivalryOption';\nimport braveHeartOptions from '../option/artifactSetOptions/BraveHeartOption';\nimport crimsonWitchOptions from '../option/artifactSetOptions/CrimsonWitchOption';\nimport heartOfDepthOptions from '../option/artifactSetOptions/HeartOfDepthOption';\nimport instructorOptions from '../option/artifactSetOptions/InstructorOption';\nimport lavawalkerOptions from '../option/artifactSetOptions/LavawalkerOption';\nimport maidenBelovedOptions from '../option/artifactSetOptions/MaidenBelovedOption';\nimport martialArtistOptions from '../option/artifactSetOptions/MartialArtistOption';\nimport noblesseObligeOptions from '../option/artifactSetOptions/NoblesseObligeOption';\nimport paleFlameOptions from '../option/artifactSetOptions/PaleFlameOption';\nimport retracingBolideOptions from '../option/artifactSetOptions/RetracingBolideOption';\nimport shimenawaOptions from '../option/artifactSetOptions/ShimenawaOption';\nimport tenacityOptions from '../option/artifactSetOptions/TenacityOption';\nimport thundersootherOptions from '../option/artifactSetOptions/ThundersootherOption';\nimport viridescentVenererOptions from '../option/artifactSetOptions/ViridescentVenererOption';\nimport { ArtifactSetBonus } from './types';\n\n// Placeholder function\nconst defaultSetBonus: ArtifactSetBonus = { options: [] };\n\nconst Relic_ExtraAtkCritUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'chargedCritRate',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_AllElemResistUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    const elements = ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'];\n    return elements.map((element) => {\n      return {\n        stat: `${element}Res`,\n        value: params[0],\n      };\n    });\n  },\n};\n\nconst Relic_AtkAndExtraAtkUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'normalDmgBonus',\n        value: params[0],\n      },\n      {\n        stat: 'chargedDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_SkillDamageUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'skillDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_MeleeAttackUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    // Only for sword, polearm, claymore characters\n    // Did not make this an Option because this would likely not want to be disabled\n    // Calculation will be wrong if used on a catalyst, bow character\n    // Checking for that would require character weapon type to be implemented first\n    return [\n      {\n        stat: 'normalDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\n// Elemental Res shred implemented through Options\nconst Relic_ReactionWindEnhance: ArtifactSetBonus = {\n  options: viridescentVenererOptions,\n};\n\nconst Relci_RangerAttackUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    // Typo is present in the game data\n    // Only for catalyst, bow characters\n    // See Relic_MeleeAttackUp for more details\n    return [\n      {\n        stat: 'chargedDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\n// Pyro Dmg Bonus implemented through Options\nconst Relic_ReactionFireEnhance: ArtifactSetBonus = {\n  options: crimsonWitchOptions,\n};\n\nconst Relic_ElementalBurstUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'burstDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_ElementalBurstUpByChargeEfficiency: ArtifactSetBonus = {\n  options: [],\n\n  statMixin: (stats: Stats) => {\n    const params = getArtifactSetBonusParams('emblemofseveredfate', 4);\n    let burstDmgBonus = params[0] * stats.energyRecharge;\n    if (burstDmgBonus > params[1]) {\n      burstDmgBonus = params[1];\n    }\n\n    stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n  },\n};\n\nconst Relic_GiantKiller: ArtifactSetBonus = {\n  options: braveHeartOptions,\n};\n\nconst Relic_LowHPGainExtraCritRate: ArtifactSetBonus = {\n  options: berserkerOptions,\n};\n\nconst Relic_SkillEnhanceNormalAtkAndExtraAtk: ArtifactSetBonus = {\n  options: martialArtistOptions,\n};\n\nconst Relic_ReactionGainExtraElemMasteryForTeam: ArtifactSetBonus = {\n  options: instructorOptions,\n};\n\nconst Relic_CriticUpAgainstIceAndFrozen: ArtifactSetBonus = {\n  options: blizzardStrayerOptions,\n};\n\nconst Relic_DamageUpAgainstElectric: ArtifactSetBonus = {\n  options: thundersootherOptions,\n};\n\nconst Relic_DamageUpAgainstFireAndBurning: ArtifactSetBonus = {\n  options: lavawalkerOptions,\n};\n\nconst Relic_SkillEnhanceCured: ArtifactSetBonus = {\n  options: maidenBelovedOptions,\n};\n\nconst Relic_TeamAtkupAfterElementalBurst: ArtifactSetBonus = {\n  options: noblesseObligeOptions,\n};\n\nconst Relic_KillEnhanceExtraAtk: ArtifactSetBonus = {\n  options: bloodstainedChivalryOptions,\n};\n\nconst Relic_ElementDmgUpAfterCrystalShield: ArtifactSetBonus = {\n  options: archaicPetraOptions,\n};\n\nconst Relic_ShieldEnhanceAtk: ArtifactSetBonus = {\n  options: retracingBolideOptions,\n};\n\nconst Relic_WaterSkillEnhanceNormalAtkAndExtraAtk: ArtifactSetBonus = {\n  options: heartOfDepthOptions,\n};\n\nconst Relic_ShieldCostUpWhenElementalArtHit: ArtifactSetBonus = {\n  options: tenacityOptions,\n};\n\nconst Relic_AttackUpWhenNormalAtkAndExtraAtkHit: ArtifactSetBonus = {\n  options: paleFlameOptions,\n};\n\nconst Relic_NormalDamageUpIfCostEnergy: ArtifactSetBonus = {\n  options: shimenawaOptions,\n};\n\nexport const artifactSetBonuses: Record<string, ArtifactSetBonus> = {\n  defaultSetBonus,\n  Relic_ExtraAtkCritUp,\n  Relic_AllElemResistUp,\n  Relic_AtkAndExtraAtkUp,\n  Relic_SkillDamageUp,\n  Relic_MeleeAttackUp,\n  Relci_RangerAttackUp,\n  Relic_ElementalBurstUp,\n  Relic_ElementalBurstUpByChargeEfficiency,\n\n  // Options only\n  Relic_GiantKiller,\n  Relic_LowHPGainExtraCritRate,\n  Relic_SkillEnhanceNormalAtkAndExtraAtk,\n  Relic_ReactionGainExtraElemMasteryForTeam,\n  Relic_CriticUpAgainstIceAndFrozen,\n  Relic_DamageUpAgainstElectric,\n  Relic_DamageUpAgainstFireAndBurning,\n  Relic_SkillEnhanceCured,\n  Relic_TeamAtkupAfterElementalBurst,\n  Relic_KillEnhanceExtraAtk,\n  Relic_ElementDmgUpAfterCrystalShield,\n  Relic_ShieldEnhanceAtk,\n  Relic_WaterSkillEnhanceNormalAtkAndExtraAtk,\n  Relic_ShieldCostUpWhenElementalArtHit,\n  Relic_AttackUpWhenNormalAtkAndExtraAtkHit,\n  Relic_NormalDamageUpIfCostEnergy,\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n  Relic_ReactionWindEnhance,\n\n  // Reaction Dmg Up not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionFireEnhance,\n\n  // Not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionElectricEnhance: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Requires info about team composition\n  Relic_AbsorbTeamElemResist: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Probably can be implemented with a dropdown option for prev received elem dmg\n  Relic_ElemDmgEnhanceElemResist: defaultSetBonus,\n\n  // Not implemented. CD reduction effect.\n  Relic_KillingRefreshSkill: defaultSetBonus,\n\n  // Not implemented. Energy effect.\n  Relic_UltGainEnergyForTeam: defaultSetBonus,\n  Relic_RestoreEnergyGainExtraEnergyForTeam: defaultSetBonus,\n\n  // Not implemented. Healing effect when opening chests.\n  Relic_ChestHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when getting Mora.\n  Relic_CoinHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when burst.\n  Relic_UltHealSelf: defaultSetBonus,\n\n  // Not implemented. Element duration reduction.\n  Relic_FireResistance: defaultSetBonus,\n  Relic_WaterResistance: defaultSetBonus,\n  Relic_ElectricResistance: defaultSetBonus,\n  Relic_IceResistance: defaultSetBonus,\n};\n","import { getArtifactSetData, getArtifactSetBonusData } from '../Data';\nimport { artifactSetBonuses as extraBonuses } from './ArtifactSetBonus';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../../data/types';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces?: number) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.stats = this.getStats();\n    this.setBonuses = this.getSetBonuses();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.stats = this.getStats();\n    this.setBonuses = this.getSetBonuses();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n\n      // Special bonuses, has to be handled individually\n      let extraBonus = setBonus?.bonusExtra;\n      if (extraBonus !== undefined && extraBonus.type !== '') {\n        let extraBonusSet =\n          extraBonuses[extraBonus.type] ?? extraBonuses['defaultSetBonus'];\n\n        let params = extraBonus.params;\n\n        let extraStats = extraBonusSet.extraStatsFn?.(params) ?? [];\n\n        extraStats.forEach((statBonus) => {\n          if (stats[statBonus.stat] !== undefined) {\n            stats[statBonus.stat] += statBonus.value;\n          } else {\n            stats[statBonus.stat] = statBonus.value;\n          }\n        });\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap((setBonus) => setBonus.options);\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options)\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getSetBonuses(): ArtifactSetBonus[] {\n    const setBonusSets = this.setBonusSets;\n    return setBonusSets.map((setBonusSet) => {\n      const setBonusType = setBonusSet?.bonusExtra.type;\n      return extraBonuses[setBonusType] ?? extraBonuses['defaultSetBonus'];\n    });\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","import Option from '../Option';\n\nexport default class WeaponOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import { WeaponPassive, WeaponPassiveFn } from '../types';\nimport { solarPearlPassive } from './SolarPearlPassive';\nimport { theCatchPassive } from './TheCatchPassive';\n\nconst weaponPassives: Record<string, WeaponPassiveFn> = {\n  Weapon_Pole_Mori: theCatchPassive,\n  Weapon_Catalyst_NormalAttackAndSkillAttack: solarPearlPassive,\n};\n\nfunction defaultPassiveFn(): WeaponPassive[] {\n  return [];\n}\n\nexport function getWeaponPassiveFn(passiveId: string) {\n  return weaponPassives[passiveId] ?? defaultPassiveFn;\n}\n","import { Stats, TalentParams } from '../../../data/types';\nimport { WeaponPassive } from '../types';\n\nexport function theCatchPassive(params: TalentParams): WeaponPassive {\n  return {\n    id: 'theCatch',\n    options: [],\n    statMixin: (stats: Stats) => {\n      stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      stats.burstCritRate = params[1] + (stats.burstCritRate ?? 0);\n    },\n  };\n}\n","import { Stats, TalentParams } from '../../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../types';\n\nexport function solarPearlPassive(params: TalentParams): WeaponPassive {\n  class SolarPearlOptionNormalAttack\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlNormalAttack');\n    }\n\n    applyOnStats = (stats: Stats) => {\n      if (this.value) {\n        stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      }\n    };\n  }\n\n  class SolarPearlOptionSkillBurst\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlSkillBurst');\n    }\n\n    applyOnStats = (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      }\n    };\n  }\n\n  return {\n    id: 'solarPearl',\n    options: [SolarPearlOptionNormalAttack, SolarPearlOptionSkillBurst],\n  };\n}\n","import {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  WeaponPassiveData,\n  WeaponPassiveSetData,\n} from '../../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getWeaponPassiveAt,\n  getWeaponPassiveData,\n} from '../Data';\nimport { getOptionValue, setOptionValue } from '../option';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../passive/types';\nimport { getWeaponPassiveFn } from '../passive/weaponPassives/WeaponPassive';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(\n    id: string,\n    level: number,\n    hasAscended: boolean,\n    refinement: number\n  ) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n    this._refinement = refinement;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.passiveDataSet = getWeaponPassiveData(value);\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(\n        this.refinement,\n        this.passiveDataSet\n      );\n      this.passive = this.getPassive(this.passiveData);\n      this.passiveOptions = this.getPassiveOptions();\n    }\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  passiveDataSet?: WeaponPassiveSetData;\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  private _refinement: number = 1;\n  get refinement(): number {\n    return this._refinement;\n  }\n  set refinement(value: number) {\n    this._refinement = value;\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(value, this.passiveDataSet);\n      this.passive = this.getPassive(this.passiveData);\n      this.passiveOptions = this.getPassiveOptions(true);\n    }\n  }\n\n  stats: Stats = {};\n  passiveData?: WeaponPassiveData;\n  passive?: WeaponPassive;\n  passiveOptions: WeaponOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n\n  // Only returns the extra passive bonuses, excluding the direct stat bonuses\n  // To be called when passive should update (e.g. id or refinement change)\n  getPassive(passiveData?: WeaponPassiveData) {\n    if (passiveData === undefined) {\n      return getWeaponPassiveFn('')([]);\n    }\n\n    return getWeaponPassiveFn(passiveData.passiveId)(passiveData.passiveParams);\n  }\n\n  // getPassive should be called before this if passives are updated\n  getPassiveOptions(shouldKeepValue: boolean = false) {\n    let newOptions = (this.passive?.options ?? []).map(\n      (Option) => new Option()\n    );\n\n    if (shouldKeepValue) {\n      this.passiveOptions.forEach((option) => {\n        let newOption = newOptions.find(\n          (newOption) => newOption.id === option.id\n        );\n        if (newOption !== undefined) {\n          setOptionValue(newOption, getOptionValue(option));\n        }\n      });\n    }\n\n    return newOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    let statMixins = [];\n\n    if (this.passive?.statMixin !== undefined) {\n      statMixins.push(this.passive.statMixin);\n    }\n\n    if (this.passiveData?.statBonuses !== undefined) {\n      this.passiveData.statBonuses.forEach(({ stat, value }) => {\n        statMixins.push((stats: Stats) => {\n          stats[stat] = value + (stats[stat] ?? 0);\n        });\n      });\n    }\n\n    return statMixins;\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    if (this.passive?.modifierMixin === undefined) {\n      return [];\n    }\n\n    return [this.passive.modifierMixin];\n  }\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Col from 'react-bootstrap/esm/Col';\nimport Form from 'react-bootstrap/esm/Form';\nimport Modal from 'react-bootstrap/esm/Modal';\nimport { AppState } from '../App';\nimport {\n  createSave,\n  addSave,\n  getSave,\n  loadSave,\n  Saves,\n  deleteSave,\n} from '../save/Save';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype SaveBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  refreshApp: () => void;\n};\n\ntype SaveBlockState = {\n  saves: Saves;\n  saveInputName: string;\n  selectedSave: string;\n  showDeleteWarning: boolean;\n};\n\nclass SaveBlock extends React.Component<SaveBlockProps, SaveBlockState> {\n  state: SaveBlockState;\n\n  constructor(props: SaveBlockProps) {\n    super(props);\n\n    // Populate local storage if empty\n    if (window.localStorage.getItem('saves') === null) {\n      window.localStorage.setItem('saves', '{}');\n    }\n\n    // Initialize saves in memory\n    const saves = JSON.parse(window.localStorage.getItem('saves') ?? '{}');\n    // Initialize state\n    this.state = {\n      saves,\n      saveInputName: '',\n      selectedSave: '',\n      showDeleteWarning: false,\n    };\n  }\n\n  onSaveClick = () => {\n    if (this.state.saveInputName !== '') {\n      const save = createSave(this.state.saveInputName, this.props.appState);\n      const saves = this.state.saves;\n      addSave(save, saves);\n      this.setState({ saves });\n    }\n  };\n\n  onSaveInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveInputName: e.target.value });\n  };\n\n  onLoadClick = () => {\n    if (this.state.selectedSave !== '') {\n      const save = getSave(this.state.selectedSave, this.state.saves);\n      if (save !== undefined) {\n        loadSave(save, this.props.setAppState, this.props.refreshApp);\n      }\n    }\n  };\n\n  onLoadInputChange = (value: string) => {\n    this.setState({ selectedSave: value });\n  };\n\n  onDeleteClick = () => {\n    if (this.state.selectedSave !== '') {\n      this.setState({ showDeleteWarning: true });\n    }\n  };\n\n  onModalConfirm = () => {\n    const saves = this.state.saves;\n    deleteSave(this.state.selectedSave, saves);\n    this.setState({ saves });\n\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onModalHide = () => {\n    this.setState({ showDeleteWarning: false });\n  };\n\n  render() {\n    return (\n      <InputBlock>\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onSaveClick}>\n            Save\n          </Button>\n\n          <Col className='save-name-col'>\n            <Form.Control\n              type='text'\n              size='sm'\n              placeholder='Save label (cannot be empty)'\n              onChange={this.onSaveInputChange}\n            />\n          </Col>\n        </InputRow>\n\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onLoadClick}>\n            Load\n          </Button>\n\n          <Picker\n            id='save-picker'\n            label=''\n            defaultValue=''\n            value={this.state.selectedSave}\n            onChange={this.onLoadInputChange}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {Object.values(this.state.saves).map((save) => (\n              <Picker.Item\n                label={save.label}\n                value={save.label}\n                key={save.label}\n              />\n            ))}\n          </Picker>\n\n          <>\n            <Button variant='danger' size='sm' onClick={this.onDeleteClick}>\n              Delete\n            </Button>\n\n            <Modal\n              show={this.state.showDeleteWarning}\n              onHide={this.onModalHide}\n            >\n              <Modal.Body>\n                Are you sure you want to delete the save configuration? This\n                action is irreversible!\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={this.onModalHide}>\n                  Cancel\n                </Button>\n                <Button variant='danger' onClick={this.onModalConfirm}>\n                  Delete\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default SaveBlock;\n","import { AppState } from '../App';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport { ArtifactType, InputStat } from '../js/artifact/types';\nimport Character from '../js/character/Character';\nimport CritType from '../js/modifier/CritType';\nimport Reaction from '../js/modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../js/option';\nimport Resistance from '../js/Resistance';\nimport { Element } from '../js/talent/types';\nimport Weapon from '../js/weapon/Weapon';\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n  weaponRefinement?: number;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  characterOptions?: { id?: string; value?: unknown }[];\n  weaponOptions?: { id?: string; value?: unknown }[];\n  artifactSetOptions?: { id?: string; value?: unknown }[];\n}\n\nexport type Saves = Record<string, Save>;\n\ninterface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n    weaponRefinement: appState.weapon.refinement,\n\n    artifacts: appState.artifacts.map((artifact) => {\n      return {\n        type: artifact.type,\n        rarity: artifact.rarity,\n        level: artifact.level,\n        mainStat: artifact.mainStat.stat,\n        subStats: artifact.subStats.map((subStat) =>\n          createInputStatSave(subStat)\n        ),\n      };\n    }),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    characterOptions: appState.characterOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    weaponOptions: appState.weaponOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactSetOptions: appState.artifactSetOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n  };\n\n  return save;\n}\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const character = new Character(\n    save.characterId ?? '',\n    save.characterLevel ?? 1,\n    save.characterHasAscended ?? false\n  );\n  const weapon = new Weapon(\n    save.weaponId ?? '',\n    save.weaponLevel ?? 1,\n    save.weaponHasAscended ?? false,\n    save.weaponRefinement ?? 1\n  );\n\n  const artifacts =\n    save.artifacts?.map((savedArtifact, i) => {\n      const artifactType = savedArtifact.type ?? Object.values(ArtifactType)[i];\n      let artifact = new Artifact(\n        artifactType,\n        savedArtifact.rarity ?? 1,\n        savedArtifact.level ?? 0,\n        savedArtifact.mainStat ?? ''\n      );\n      artifact.subStats =\n        savedArtifact.subStats?.map(\n          (subStat) =>\n            new InputStat(\n              subStat.stat ?? '',\n              subStat.value ?? NaN,\n              subStat.rawValue ?? NaN\n            )\n        ) ?? artifact.subStats;\n\n      return artifact;\n    }) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map(\n    (artifactSet) =>\n      new ArtifactSet(\n        artifactSet.artifactSetId ?? '',\n        artifactSet.artifactSetPieces ?? 0\n      )\n  ) ?? [new ArtifactSet(''), new ArtifactSet(''), new ArtifactSet('')];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, option.value);\n    }\n  });\n\n  const weaponOptions = weapon.passiveOptions;\n  save.weaponOptions?.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, option.value);\n    }\n  });\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, option.value);\n    }\n  });\n\n  setAppState(\n    {\n      character,\n      weapon,\n      artifacts,\n      artifactSets,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      critType,\n      enemyLevel,\n      enemyRes,\n      reaction,\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n    },\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport WeaponOption from '../js/option/weaponOptions/WeaponOption';\nimport Weapon from '../js/weapon/Weapon';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    weapon,\n    weaponOptions,\n  }: {\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n  }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const weapon = this.props.appState.weapon;\n    weapon.id = id;\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponRefinement = (refinement: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.refinement = refinement;\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  updateOptions = () => {\n    const { weaponOptions } = this.props.appState;\n    this.props.updateTotalStats({ weaponOptions });\n    this.props.setAppState({ weaponOptions: [...weaponOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-refinement-input'\n            label='Refinement:'\n            defaultValue={1}\n            value={appState.weapon.refinement}\n            onInput={this.setWeaponRefinement}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.weaponOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport Character from '../js/character/Character';\nimport CritType from '../js/modifier/CritType';\nimport { ArtifactSetOption } from '../js/option/artifactSetOptions';\nimport { CharacterOption } from '../js/option/characterOptions';\nimport Resistance from '../js/Resistance';\nimport Weapon from '../js/weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport SaveBlock from './SaveBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  refreshApp: () => void;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n      refreshApp,\n    } = this.props;\n\n    return (\n      <Col\n        id='input-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <SaveBlock\n          appState={appState}\n          setAppState={setAppState}\n          refreshApp={refreshApp}\n        />\n\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../js/character/Character';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\nimport Weapon from '../js/weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Col\n        id='stat-column'\n        className='stat-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../js/Data';\nimport { capitalize, getDamageDisplayValue } from '../js/Stat';\nimport { TalentType, TalentValue } from '../js/talent/types';\n\ntype TalentBlockProps = {\n  type: TalentType;\n  talentValues: TalentValue[];\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(this.props.type)}</h3>\n        {this.props.talentValues.map(({ description, damage }) => (\n          <p key={description}>\n            {talentDescMapping[description]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport { TalentType, TalentValueSet } from '../js/talent/types';\nimport TalentBlock from './TalentBlock';\nimport Col from 'react-bootstrap/esm/Col';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const { attack, skill, burst } = this.props.talentValues;\n\n    return (\n      <Col\n        id='talent-column'\n        className='talent-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='result-block'>\n          <h2>Talents</h2>\n          <TalentBlock type={TalentType.Attack} talentValues={attack} />\n          <TalentBlock type={TalentType.Skill} talentValues={skill} />\n          <TalentBlock type={TalentType.Burst} talentValues={burst} />\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport Row from 'react-bootstrap/esm/Row';\nimport './App.css';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport { Stats } from './data/types';\nimport Artifact from './js/artifact/Artifact';\nimport ArtifactSet from './js/artifact/ArtifactSet';\nimport { ArtifactType } from './js/artifact/types';\nimport Character from './js/character/Character';\nimport CritType from './js/modifier/CritType';\nimport DamageModifier from './js/modifier/DamageModifer';\nimport Reaction from './js/modifier/Reaction';\nimport { isModifierApplicable, isStatsApplicable } from './js/option';\nimport { ArtifactSetOption } from './js/option/artifactSetOptions';\nimport { CharacterOption } from './js/option/characterOptions';\nimport { ModifierMixin, StatMixin } from './js/option/Mixin';\nimport { IModifierApplicable, IStatsApplicable } from './js/option/Option';\nimport WeaponOption from './js/option/weaponOptions/WeaponOption';\nimport Resistance from './js/Resistance';\nimport { getTotalStatsAt } from './js/Stat';\nimport { TalentType, TalentValueSet } from './js/talent/types';\nimport Weapon from './js/weapon/Weapon';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: new Character('', 1, false),\n    weapon: new Weapon('', 1, false, 1),\n    artifacts: Object.values(ArtifactType).map(\n      (type) => new Artifact(type, 1, 0, '')\n    ),\n\n    artifactSets: [\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n    ],\n\n    enemyLevel: 1,\n    enemyDefReduction: 0,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    flatDmg: 0,\n    reaction: Reaction.None,\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    characterOptions: [],\n    weaponOptions: [],\n    artifactSetOptions: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = { attack: [], skill: [], burst: [] };\n\n  modifierMixins: ModifierMixin[] = [];\n  statMixins: StatMixin[] = [];\n\n  // Gets all modifier mixins and updates cache (modifierMixins)\n  getModifierMixins({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined\n    ) {\n      return this.modifierMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveModifierMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveModifierMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getModifierMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.applyOnModifier);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.applyOnModifier);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.applyOnModifier);\n\n    this.modifierMixins = characterPassiveMixins\n      .concat(weaponPassiveMixins)\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(weaponOptionMixins)\n      .concat(artifactSetOptionMixins);\n\n    return this.modifierMixins;\n  }\n\n  // Gets all stat mixins and updates cache (statMixins)\n  getStatMixins({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined\n    ) {\n      return this.statMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveStatMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveStatMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getStatMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.applyOnStats);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.applyOnStats);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.applyOnStats);\n\n    this.statMixins = characterPassiveMixins\n      .concat(weaponPassiveMixins)\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(weaponOptionMixins)\n      .concat(artifactSetOptionMixins);\n\n    return this.statMixins;\n  }\n\n  getDamageModifier({\n    characterLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n  }: {\n    characterLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    modifierMixins?: ModifierMixin[];\n  } = {}): DamageModifier {\n    const modifier: DamageModifier = {\n      characterLevel: characterLevel ?? this.state.character.level,\n      enemyLevel: enemyLevel ?? this.state.enemyLevel,\n      enemyDefReduction: this.state.enemyDefReduction,\n      enemyRes: enemyRes ?? this.state.enemyRes,\n      enemyResReduction: new Resistance(),\n      critType: critType ?? this.state.critType,\n      flatDmg: this.state.flatDmg,\n      reaction: reaction ?? this.state.reaction,\n      talentAttackLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n    };\n\n    // Apply modifier mixins\n    (modifierMixins ?? this.modifierMixins).forEach((mixin) => mixin(modifier));\n\n    return modifier;\n  }\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = newArtifactSets\n      .map((artifactSet) => artifactSet.stats)\n      .reduce((acc, stats) => {\n        Object.entries(stats).forEach(([stat, value]) => {\n          acc[stat] = value + (acc[stat] ?? 0);\n        });\n        return acc;\n      }, {} as Stats);\n\n    this.updateTotalStats({\n      artifactSets,\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSets?: ArtifactSet[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const statMixins = this.getStatMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n    });\n\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel,\n      statMixins\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      characterOptions,\n      artifactSetOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    weapon,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifactSets?: ArtifactSet[];\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n\n    const modifierMixins = this.getModifierMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n    });\n\n    const damageModifer = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n    });\n\n    this.talentValues.attack = character.getTalentDamageAt({\n      type: TalentType.Attack,\n      talentLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n    this.talentValues.skill = character.getTalentDamageAt({\n      type: TalentType.Skill,\n      talentLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n    this.talentValues.burst = character.getTalentDamageAt({\n      type: TalentType.Burst,\n      talentLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n  };\n\n  refreshApp = () => {\n    this.getStatMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n    });\n    this.getModifierMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n    });\n\n    this.updateArtifactSetBonuses({});\n    this.setState({});\n  };\n\n  render() {\n    return (\n      <Container className='app px-0' fluid>\n        <Navbar sticky='top' bg='light' className='d-md-none'>\n          <Nav>\n            <Nav.Item>\n              <Nav.Link href='#input-column'>Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#artifact-column'>Artifacts</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#stat-column'>Stats</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#talent-column'>Talents</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar>\n\n        <Row className='mx-0'>\n          <InputColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n            updateTotalStats={this.updateTotalStats}\n            updateTalentValues={this.updateTalentValues}\n            refreshApp={this.refreshApp}\n          />\n          <ArtifactColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateTotalStats={this.updateTotalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n            damageModifier={this.getDamageModifier()}\n            statMixins={this.statMixins}\n            talentValues={this.talentValues}\n          />\n          <StatColumn\n            appState={this.state}\n            totalStats={this.totalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n          />\n          <TalentColumn talentValues={this.talentValues} />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}