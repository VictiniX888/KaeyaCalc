{"version":3,"sources":["js/Character.js","js/Weapon.js","js/Styles.js","App.js"],"names":["Character","id","characterMapping","characterData","characterLevelCurve","ascensionData","this","name","Name","baseHp","HpBase","baseAtk","AttackBase","baseDef","DefenseBase","ascensionId","AvatarPromoteId","weapon","weaponLevel","weaponHasAscended","characterLevel","characterHasAscended","weaponStats","undefined","getStatsAt","BaseHp","BaseAtk","BaseDef","innateStats","InnateHp","InnateAtk","InnateDef","WeaponHp","WeaponAtk","WeaponDef","level","hasAscended","isNaN","ascensionLevel","ascensionBonuses","PropGrowCurves","forEach","PropType","Type","GrowCurve","multiplier","find","Value","props","PromoteLevel","AddProps","Weapon","weaponMapping","weaponData","weaponLevelCurve","weaponAscensionData","weaponRefinementData","starRank","RankLevel","WeaponPromoteId","stats","WeaponProp","InitValue","styles","StyleSheet","create","container","display","flexDirection","alignItems","height","backgroundColor","inputColumn","padding","borderRightWidth","characterSelectRow","marginVertical","characterSelect","levelInputRow","levelInput","width","ascensionCheckRow","resultColumn","flexGrow","characterImage","resultText","App","renderCharacterList","sortedChars","Object","entries","sort","char1","char2","localeCompare","View","style","Text","selectedValue","state","characterId","onValueChange","value","_","setState","character","characterAscensionData","Item","label","map","renderWeaponList","weapons","weaponId","renderCharacterImage","imageUrl","Image","source","uri","renderCharacterStats","getStatsWithWeaponAt","isWeaponAscended","isCharacterAscended","Math","round","loadedDataElements","characterMappingRaw","reduce","obj","Id","weaponMappingRaw","fetch","then","res","json","data","Level","CurveInfos","TextInput","defaultValue","onChangeText","text","parseInt","Checkbox","Component"],"mappings":"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","file":"static/js/app.71580f16.chunk.js","sourcesContent":["import props from '../static/props.json';\r\n\r\nexport default class Character {\r\n    constructor(id, characterMapping, characterData, characterLevelCurve, ascensionData) {\r\n        this.id = id;\r\n        this.name = characterMapping[this.id].Name;\r\n        this.characterData = characterData[this.id];\r\n        this.characterLevelCurve = characterLevelCurve;\r\n        this.ascensionData = ascensionData;\r\n\r\n        this.baseHp = this.characterData.HpBase;\r\n        this.baseAtk = this.characterData.AttackBase;\r\n        this.baseDef = this.characterData.DefenseBase;\r\n\r\n        this.ascensionId = this.characterData.AvatarPromoteId;\r\n    }\r\n\r\n    getStatsWithWeaponAt(weapon, weaponLevel, weaponHasAscended, characterLevel, characterHasAscended) {\r\n        let weaponStats;\r\n        if (weapon !== undefined) {\r\n            weaponStats = weapon.getStatsAt(weaponLevel, weaponHasAscended);\r\n        } else {\r\n            weaponStats = {\r\n                BaseHp: null,\r\n                BaseAtk: null,\r\n                BaseDef: null,\r\n            };\r\n        }\r\n\r\n        let innateStats = this.getStatsAt(characterLevel, characterHasAscended);\r\n        \r\n        return {\r\n            InnateHp: innateStats.BaseHp,\r\n            InnateAtk: innateStats.BaseAtk,\r\n            InnateDef: innateStats.BaseDef,\r\n            WeaponHp: weaponStats.BaseHp,\r\n            WeaponAtk: weaponStats.BaseAtk,\r\n            WeaponDef: weaponStats.BaseDef,\r\n        };\r\n    }\r\n\r\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\r\n    getStatsAt(level, hasAscended) {\r\n        if (isNaN(level) || level < 1 || level > 90) {\r\n            // Return nulls if level is invalid\r\n            return {\r\n                BaseHp: null,\r\n                BaseAtk: null,\r\n                BaseDef: null,\r\n            }\r\n        } \r\n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\r\n        else if (level === this.level && hasAscended === this.hasAscended) {\r\n            // Don't recalculate stats if it has been calculated with the same parameters before\r\n            return this.innateStats;\r\n        } else {\r\n            this.level = level;\r\n            this.hasAscended = hasAscended;\r\n\r\n            // Initialize stats with character level 1 base stats\r\n            let innateStats = {\r\n                BaseHp: this.baseHp,\r\n                BaseAtk: this.baseAtk,\r\n                BaseDef: this.baseDef,\r\n            }\r\n\r\n            // Calculate stats from character level\r\n            this.characterData.PropGrowCurves.forEach(({Type:PropType, GrowCurve}) => {\r\n                let multiplier = this.characterLevelCurve[level].find(({Type}) => Type == GrowCurve).Value;\r\n                innateStats[props[PropType]] *= multiplier;\r\n            });\r\n\r\n            // Calculate stats from character ascension\r\n            let ascensionLevel;\r\n            if (level > 80 || (level == 80 && hasAscended)) {\r\n                ascensionLevel = 6;\r\n            } else if (level > 70 || (level == 70 && hasAscended)) {\r\n                ascensionLevel = 5;\r\n            } else if (level > 60 || (level == 60 && hasAscended)) {\r\n                ascensionLevel = 4;\r\n            } else if (level > 50 || (level == 50 && hasAscended)) {\r\n                ascensionLevel = 3;\r\n            } else if (level > 40 || (level == 40 && hasAscended)) {\r\n                ascensionLevel = 2;\r\n            } else if (level > 20 || (level == 20 && hasAscended)) {\r\n                ascensionLevel = 1;\r\n            } else {\r\n                ascensionLevel = 0;\r\n            }\r\n\r\n            let ascensionBonuses;\r\n            if (ascensionLevel > 0) {\r\n                ascensionBonuses = this.ascensionData.find(({AvatarPromoteId, PromoteLevel}) => AvatarPromoteId == this.ascensionId && PromoteLevel == ascensionLevel).AddProps;\r\n            }\r\n\r\n            if (ascensionBonuses !== undefined) {\r\n                ascensionBonuses.forEach(({PropType, Value}) => {\r\n                    if (Value !== undefined) {\r\n                        innateStats[props[PropType]] += Value;\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.innateStats = innateStats;\r\n\r\n            return innateStats;\r\n        }\r\n    }\r\n}","import props from '../static/props.json';\r\n\r\nexport default class Weapon {\r\n    constructor(id, weaponMapping, weaponData, weaponLevelCurve, weaponAscensionData, weaponRefinementData) {\r\n        this.id = id;\r\n        this.name = weaponMapping[this.id].Name;\r\n        this.weaponData = weaponData[this.id];\r\n        this.weaponLevelCurve = weaponLevelCurve;\r\n        this.weaponAscensionData = weaponAscensionData;\r\n        this.weaponRefinementData = weaponRefinementData;\r\n\r\n        this.starRank = this.weaponData.RankLevel;\r\n        this.ascensionId = this.weaponData.WeaponPromoteId;\r\n    }\r\n\r\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\r\n    getStatsAt(weaponLevel, hasAscended) {\r\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.starRank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\r\n            // Return nulls if weapon level is invalid\r\n            return {\r\n                BaseHp: null,\r\n                BaseAtk: null,\r\n                BaseDef: null,\r\n            }\r\n        }\r\n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\r\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\r\n            // Don't recalculate stats if it has been calculated with the same parameters before\r\n            return this.stats;\r\n        } else {\r\n            this.level = weaponLevel;\r\n            this.hasAscended = hasAscended;\r\n\r\n            let weaponStats = {\r\n                BaseHp: 0,\r\n                BaseAtk: 0,\r\n                BaseDef: 0,\r\n            };\r\n\r\n            // Calculate stats from weapon level\r\n            this.weaponData.WeaponProp.forEach(({PropType, InitValue, Type:GrowCurve}) => {\r\n                if (PropType !== undefined) {\r\n                    let multiplier = this.weaponLevelCurve[weaponLevel].find(({Type}) => Type == GrowCurve).Value;\r\n                    weaponStats[props[PropType]] += (InitValue * multiplier);\r\n                }\r\n            });\r\n\r\n            // Calculate stats from weapon ascension\r\n            let ascensionLevel;\r\n            // Only 3-star and above weapons can be ascended beyond level 70\r\n            if (this.starRank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\r\n                ascensionLevel = 6;\r\n            } else if (this.starRank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\r\n                ascensionLevel = 5;\r\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\r\n                ascensionLevel = 4;\r\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\r\n                ascensionLevel = 3;\r\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\r\n                ascensionLevel = 2;\r\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\r\n                ascensionLevel = 1;\r\n            } else {\r\n                ascensionLevel = 0;\r\n            }\r\n\r\n            let ascensionBonuses;\r\n            if (ascensionLevel > 0) {\r\n                ascensionBonuses = this.weaponAscensionData.find(({WeaponPromoteId, PromoteLevel}) => WeaponPromoteId == this.ascensionId && PromoteLevel == ascensionLevel).AddProps;\r\n            }\r\n            \r\n            if (ascensionBonuses !== undefined) {\r\n                ascensionBonuses.forEach(({PropType, Value}) => {\r\n                    if (Value !== undefined) {\r\n                        weaponStats[props[PropType]] += Value;\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.stats = weaponStats;\r\n\r\n            return weaponStats;\r\n        }\r\n    }\r\n}","import { StyleSheet } from 'react-native';\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'stretch',\r\n\r\n        height: '100%',\r\n\r\n        backgroundColor: '#fff',\r\n    },\r\n\r\n    inputColumn: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n\r\n        padding: '1%',\r\n\r\n        borderRightWidth: 1,\r\n\r\n        backgroundColor: '#ccc',\r\n    },\r\n\r\n    characterSelectRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n\r\n        marginVertical: '0.25em',\r\n    },\r\n\r\n    characterSelect: {\r\n\r\n    },\r\n\r\n    levelInputRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n\r\n        marginVertical: '0.25em',\r\n    },\r\n\r\n    levelInput: {\r\n        width: '2em',\r\n\r\n    },\r\n\r\n    ascensionCheckRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n\r\n        marginVertical: '0.25em',\r\n    },\r\n\r\n    resultColumn: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        flexGrow: 1,\r\n\r\n        padding: '1%',\r\n\r\n        backgroundColor: '#eee',\r\n    },\r\n\r\n    characterImage: {\r\n        marginVertical: '0.25em',\r\n    },\r\n\r\n    resultText: {\r\n        marginVertical: '0.25em',\r\n    }\r\n});\r\n\r\nexport default styles;","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { Image, Text, TextInput, View } from 'react-native';\n\nimport Character from './js/Character.js';\nimport Weapon from './js/Weapon.js';\n\nimport characterMappingRaw from './static/characterdata.json';\nimport weaponMappingRaw from './static/weapondata.json';\n\nimport styles from './js/Styles.js';\n\nexport default class App extends Component {\n  characterData;\n  characterLevelCurve;\n  characterAscensionData;\n  weaponData;\n  weaponLevelCurve;\n  weaponAscensionData;\n  weaponRefinementData;\n\n  constructor() {\n    super();\n\n    this.state = {\n      loadedDataElements: 0,\n      characterId: undefined,\n      character: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n      weaponId: undefined,\n      weapon: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n    }\n\n    this.characterMapping = characterMappingRaw.reduce((map, obj) => {\n      map[obj.Id] = obj;\n      return map;\n    }, {});\n\n    this.weaponMapping = weaponMappingRaw.reduce((map, obj) => {\n      map[obj.Id] = obj;\n      return map;\n    }, {});\n  }\n\n  // Called when component is mounted for the first time\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/AvatarExcelConfigData.json')\n      .then(res => res.json())\n      .then(data => data.reduce((map, obj) => {\n        map[obj.Id] = obj;\n        return map;\n      }, {}))\n      .then(obj => {\n        this.characterData = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      });\n    \n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/AvatarCurveExcelConfigData.json')\n      .then(res => res.json())\n      .then(data => data.reduce((map, obj) => {\n        map[obj.Level] = obj.CurveInfos;\n        return map;\n      }, {}))\n      .then(obj => {\n        this.characterLevelCurve = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      });\n\n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/AvatarPromoteExcelConfigData.json')\n      .then(res => res.json())\n      .then(obj => {\n        this.characterAscensionData = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      }); \n\n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/WeaponExcelConfigData.json')\n      .then(res => res.json())\n      .then(data => data.reduce((map, obj) => {\n        map[obj.Id] = obj;\n        return map;\n      }, {}))\n      .then(obj => {\n        this.weaponData = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      });\n    \n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/WeaponCurveExcelConfigData.json')\n      .then(res => res.json())\n      .then(data => data.reduce((map, obj) => {\n        map[obj.Level] = obj.CurveInfos;\n        return map;\n      }, {}))\n      .then(obj => {\n        this.weaponLevelCurve = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      });\n\n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/WeaponPromoteExcelConfigData.json')\n      .then(res => res.json())\n      .then(obj => {\n        this.weaponAscensionData = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      }); \n  }\n\n  renderCharacterList = () => {\n    let sortedChars = Object.entries(this.characterMapping).sort(([, char1], [, char2]) => char1.Name.localeCompare(char2.Name));\n    \n    return (\n      <View style={styles.characterSelectRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.setState({\n                characterId: value,\n                character: new Character(value, this.characterMapping, this.characterData, this.characterLevelCurve, this.characterAscensionData),\n              })\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {sortedChars.map(([id, character]) => <Picker.Item label={character.Name} value={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    let weapons = Object.entries(this.weaponMapping);\n\n    return (\n      <View style={styles.characterSelectRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.setState({\n                weaponId: value,\n                weapon: new Weapon(value, this.weaponMapping, this.weaponData, this.weaponLevelCurve, this.weaponAscensionData, this.weaponRefinementData),\n              })\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {weapons.map(([id, weapon]) => <Picker.Item label={weapon.Name} value={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.state.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  renderCharacterStats = () => {\n    let stats = this.state.character.getStatsWithWeaponAt(this.state.weapon, this.state.weaponLevel, this.state.isWeaponAscended, this.state.characterLevel, this.state.isCharacterAscended);\n    return (\n      <View>\n        {this.renderCharacterImage()}\n        <Text style={styles.resultText}>Selected character: {this.state.character ? this.state.character.name : ''}</Text>\n        <Text style={styles.resultText}>Character HP: {(stats.InnateHp != null) ? Math.round(stats.InnateHp) : '-'}</Text>\n        <Text style={styles.resultText}>Character ATK: {(stats.InnateAtk != null) ? Math.round(stats.InnateAtk) : '-'}</Text>\n        <Text style={styles.resultText}>Character DEF: {(stats.InnateDef != null) ? Math.round(stats.InnateDef) : '-'}</Text>\n\n        <br/>\n\n        {/* Render weapon stats */}\n        {\n          this.state.weapon ? (\n            <View>\n              <Text style={styles.resultText}>Selected weapon: {this.state.weapon ? this.state.weapon.name : ''}</Text>\n              <Text style={styles.resultText}>Weapon HP: {(stats.WeaponHp != null) ? Math.round(stats.WeaponHp) : '-'}</Text>\n              <Text style={styles.resultText}>Weapon ATK: {(stats.WeaponAtk != null) ? Math.round(stats.WeaponAtk) : '-'}</Text>\n              <Text style={styles.resultText}>Weapon DEF: {(stats.WeaponDef != null) ? Math.round(stats.WeaponDef) : '-'}</Text>\n            </View>\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  render() {\n    let hasLoaded = this.state.loadedDataElements == 6;\n    if (hasLoaded) {\n      return (\n        <View style={styles.container}>\n          <View style={styles.inputColumn}>\n            {this.renderCharacterList()}\n\n            <View style={styles.levelInputRow}>\n              <Text>Level: </Text>\n              <TextInput \n                style={styles.levelInput}\n                defaultValue={this.state.characterLevel} \n                onChangeText={text => {\n                  this.setState({characterLevel: parseInt(text)});\n                }}\n              />\n            </View>\n\n            <View style={styles.ascensionCheckRow}>\n              <Text>Ascended? </Text>\n              <Checkbox\n                onValueChange={value => this.setState({isCharacterAscended: value})}\n                value={this.state.isCharacterAscended}\n              />\n            </View>\n\n            <br/>\n\n            {this.renderWeaponList()}\n\n            <View style={styles.levelInputRow}>\n              <Text>Level: </Text>\n              <TextInput \n                style={styles.levelInput}\n                defaultValue={this.state.weaponLevel} \n                onChangeText={text => {\n                  this.setState({weaponLevel: parseInt(text)});\n                }}\n              />\n            </View>\n\n            <View style={styles.ascensionCheckRow}>\n              <Text>Ascended? </Text>\n              <Checkbox\n                onValueChange={value => this.setState({isWeaponAscended: value})}\n                value={this.state.isWeaponAscended}\n              />\n            </View>\n\n          </View>\n\n          <View style={styles.resultColumn}>\n            {this.state.character ? this.renderCharacterStats() : null}\n          </View>\n\n        </View>\n      )\n    } else {\n      return (\n        <View style={styles.container}>\n          <Text>Loading...</Text>\n        </View>\n      )\n    }\n  }\n}\n\n\n"],"sourceRoot":""}