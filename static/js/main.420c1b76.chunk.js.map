{"version":3,"sources":["data/Data.ts","character/Character.ts","stat/Stat.ts","artifact/types.ts","artifact/Artifact.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/IntInput.tsx","component/Picker.tsx","talent/types.ts","component/ArtifactBlock.tsx","optimization/Optimization.ts","option/Mixin.ts","component/Checkbox.tsx","component/OptimizerBlock.tsx","component/ArtifactColumn.tsx","artifact/ArtifactSet.ts","artifact/artifactSet/ResolutionOfSojourner.ts","artifact/artifactSet/TinyMiracle.ts","option/Option.ts","option/artifactSetOptions/ArtifactSetOption.ts","artifact/artifactSet/MartialArtist.ts","artifact/artifactSet/Gambler.ts","artifact/artifactSet/GladiatorsFinale.ts","artifact/artifactSet/ViridescentVenerer.ts","artifact/artifactSet/WanderersTroupe.ts","artifact/artifactSet/CrimsonWitch.ts","artifact/artifactSet/NoblesseOblige.ts","artifact/artifactSet/EmblemOfSeveredFate.ts","artifact/artifactSet/BraveHeart.ts","artifact/artifactSet/Berserker.ts","artifact/artifactSet/Instructor.ts","artifact/artifactSet/BlizzardStrayer.ts","artifact/artifactSet/Thundersoother.ts","artifact/artifactSet/Lavawalker.ts","artifact/artifactSet/MaidenBeloved.ts","artifact/artifactSet/BloodstainedChivalry.ts","artifact/artifactSet/ArchaicPetra.ts","artifact/artifactSet/RetracingBolide.ts","artifact/artifactSet/HeartOfDepth.ts","artifact/artifactSet/Tenacity.ts","artifact/artifactSet/PaleFlame.ts","artifact/artifactSet/Shimenawa.ts","artifact/ArtifactSetUtil.ts","component/ArtifactSetPicker.tsx","component/InputBlock.tsx","option/OptionUtils.ts","option/index.ts","modifier/Reaction.ts","component/OptionInput.tsx","component/ArtifactSetInputBlock.tsx","stat/Resistance.ts","modifier/CritType.ts","talent/TalentUtil.ts","character/albedo/AlbedoTalent.ts","character/albedo/Albedo.ts","option/characterOptions/CharacterOption.ts","character/aloy/AloyOption.ts","character/aloy/AloyPassive.ts","character/aloy/AloyTalent.ts","character/aloy/Aloy.ts","character/amber/AmberTalent.ts","character/amber/Amber.ts","character/ayaka/AyakaOption.ts","character/ayaka/AyakaTalent.ts","character/ayaka/Ayaka.ts","character/barbara/BarbaraTalent.ts","character/barbara/Barbara.ts","character/beidou/BeidouPassive.ts","character/beidou/BeidouTalent.ts","character/beidou/Beidou.ts","character/bennett/BennettTalent.ts","character/bennett/Bennett.ts","character/chongyun/ChongyunOption.ts","character/chongyun/ChongyunTalent.ts","character/chongyun/Chongyun.ts","character/diluc/DilucTalent.ts","character/diluc/DilucOption.ts","character/diluc/Diluc.ts","character/diona/DionaTalent.ts","character/diona/Diona.ts","character/eula/EulaTalent.ts","character/eula/Eula.ts","character/fischl/FischlTalent.ts","character/fischl/Fischl.ts","character/ganyu/GanyuTalent.ts","character/ganyu/Ganyu.ts","character/hutao/HutaoPassive.ts","character/hutao/HutaoTalent.ts","character/hutao/HutaoOption.ts","character/hutao/Hutao.ts","character/jean/JeanTalent.ts","character/jean/Jean.ts","character/kaeya/KaeyaTalent.ts","character/kaeya/Kaeya.ts","character/kazuha/KazuhaTalent.ts","option/characterOptions/ElementalAbsorptionOption.ts","character/kazuha/KazuhaOption.ts","character/kazuha/Kazuha.ts","character/keqing/KeqingTalent.ts","character/keqing/Keqing.ts","character/klee/KleeTalent.ts","character/klee/Klee.ts","character/kokomi/KokomiPassive.ts","character/kokomi/KokomiTalent.ts","character/kokomi/KokomiOption.ts","character/kokomi/Kokomi.ts","character/lisa/LisaTalent.ts","character/lisa/Lisa.ts","character/mona/MonaOption.ts","character/mona/MonaTalent.ts","character/mona/Mona.ts","character/ningguang/NingguangTalent.ts","character/ningguang/Ningguang.ts","character/noelle/NoelleTalent.ts","character/noelle/NoelleOption.ts","character/noelle/Noelle.ts","character/qiqi/QiqiTalent.ts","character/qiqi/Qiqi.ts","character/raiden/RaidenPassive.ts","character/raiden/RaidenTalent.ts","character/raiden/RaidenOption.ts","character/raiden/Raiden.ts","character/razor/RazorTalent.ts","character/razor/Razor.ts","character/rosaria/RosariaTalent.ts","character/rosaria/Rosaria.ts","character/sara/SaraTalent.ts","character/sara/Sara.ts","character/sayu/SayuTalent.ts","character/sayu/SayuOption.ts","character/sayu/Sayu.ts","character/sucrose/SucroseOption.ts","character/sucrose/SucroseTalent.ts","character/sucrose/Sucrose.ts","character/tartaglia/TartagliaTalent.ts","character/tartaglia/Tartaglia.ts","character/venti/VentiTalent.ts","character/venti/VentiOption.ts","character/venti/Venti.ts","character/xiangling/XianglingTalent.ts","character/xiangling/Xiangling.ts","character/xiao/XiaoOption.ts","character/xiao/XiaoTalent.ts","character/xiao/Xiao.ts","character/xingqiu/XingqiuTalent.ts","character/xingqiu/Xingqiu.ts","character/xinyan/XinyanTalent.ts","character/xinyan/Xinyan.ts","character/yanfei/YanfeiOption.ts","character/yanfei/YanfeiTalent.ts","character/yanfei/Yanfei.ts","character/yoimiya/YoimiyaOption.ts","character/yoimiya/YoimiyaPassive.ts","character/yoimiya/YoimiyaTalent.ts","character/yoimiya/Yoimiya.ts","character/zhongli/ZhongliTalent.ts","character/CharacterUtil.ts","character/zhongli/Zhongli.ts","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","weapon/Weapon.ts","option/weaponOptions/WeaponOption.ts","weapon/dragonsbane/DragonsBane.ts","weapon/dragonsbane/DragonsBanePassive.ts","weapon/engulfinglightning/EngulfingLightning.ts","weapon/engulfinglightning/EngulfingLightningPassive.ts","weapon/everlastingmoonglow/EverlastingMoonglow.ts","weapon/everlastingmoonglow/EverlastingMoonglowPassive.ts","weapon/luxurioussealord/LuxuriousSeaLord.ts","weapon/luxurioussealord/LuxuriousSeaLordPassive.ts","weapon/solarpearl/SolarPearl.ts","weapon/solarpearl/SolarPearlPassive.ts","weapon/WeaponUtil.ts","weapon/staffofhoma/StaffOfHoma.ts","weapon/staffofhoma/StaffOfHomaPassive.ts","weapon/thecatch/TheCatch.ts","weapon/thecatch/TheCatchPassive.ts","component/SaveBlock.tsx","save/Save.ts","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","weaponPassiveData","weaponPassiveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getWeaponPassiveData","getWeaponPassiveParams","refinement","passive","passiveParams","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","getWeaponPassiveAt","Character","hasAscended","_id","name","baseStats","statCurveMapping","talentFns","_level","_hasAscended","innateStats","characterOptions","passiveOptions","this","value","data","getTalentFns","getInnateStatsAt","getCharacterOptions","ascensionLevel","getAscensionLevel","getPassives","getPassiveOptions","prevAscensionLevel","isNaN","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","multiplier","bonus","getCharacterOptionConstuctors","Option","getAllPassives","filter","flatMap","options","oldOptionIds","newOptions","includes","concat","keptOptionIds","option","statMixin","mixin","modifierMixin","getStatDisplayValue","prop","isPercentage","toFixed","Math","round","toString","getDamageDisplayValue","values","str","length","every","slice","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","talentAttackLevel","talentSkillLevel","talentBurstLevel","statMixins","characterStats","weaponStats","stats","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","energyRecharge","apply","totalStats","baseAtk","flatAtk","atkBonus","flatDef","baseDef","defBonus","flatHp","baseHp","hpBonus","critRate","critDmg","elementalMastery","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","shieldStrength","dmgBonus","normalDmgBonus","chargedDmgBonus","plungeDmgBonus","skillDmgBonus","burstDmgBonus","chargedCritRate","burstCritRate","overloadDmgBonus","burningDmgBonus","vaporizeDmgBonus","meltDmgBonus","capitalize","toUpperCase","ArtifactType","InputStat","rawValue","convertStatToDisplayValue","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","setMainStatValue","getArtifactMainStatValue","i","setProp","setInputValue","setValue","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","Form","Label","htmlFor","srOnly","label","Control","size","className","React","Component","FloatInput","parseFloat","InputRow","Row","children","IntInput","Picker","selectedValue","target","handleChange","onChange","as","Item","TalentType","Element","AttackType","ScalingType","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactRarity","setArtifactLevel","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatInputValue","statObj","substats","optimizeSubstats","possibleStats","maxRolls","erThreshold","optimizeTalentType","optimizeTalentId","appState","damageModifier","maxDmg","optimalSubstatRolls","optimalArtifacts","baseArtifacts","generateBaseArtifacts","baseEr","baseErRolls","ceil","erMainStatCount","generateRollCombinationsKqm","combination","erDistribution","find","push","rolls","inputStat","sIndex","setSubStatValue","addRollsToArtifacts","talentDmg","modifier","damage","subStatRolls","mainStats","sameMainStatCount","currentMaxRolls","min","combinations","current","backCombinations","prevArtifacts","iArtifact","jArtifact","Priority","Checkbox","checked","Check","Input","OptimizerBlock","substatRolls","selectedSubstats","targetTalentId","setMaxRolls","setSelectedSubstats","selected","substat","setErThreshold","setTargetTalentType","targetTalentType","setTargetTalentId","onOptimizeClick","result","updateTotalStats","setAppState","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","Attack","Skill","Burst","talentValues","Button","variant","onClick","ArtifactColumn","Col","md","xs","ArtifactSet","bonusThresholds","setBonusData","_pieces","setBonusSets","setBonuses","getSetBonusSetsAt","getSetBonusesAt","getOptions","prevPieces","getAllSetBonuses","setBonus","threshold","bonuses","statBonus","extraStats","ResolutionOfSojourner","resolutionOfSojourner4Pc","TinyMiracle","tinyMiracle2Pc","params2Pc","element","ArtifactSetOption","MartialArtist","martialArtist2Pc","martialArtist4Pc","params4Pc","Gambler","gambler2Pc","GladiatorsFinale","gladiatorsFinale4Pc","ViridescentVenerer","viridescentVenerer4Pc","choices","Cryo","Electro","Hydro","Pyro","enemyResReduction","add","WanderersTroupe","wanderersTroupe4Pc","CrimsonWitch","crimsonWitch4Pc","param","stacks","NoblesseOblige","noblesseOblige2Pc","noblesseOblige4Pc","EmblemOfSeveredFate","emblemOfSeveredFate4Pc","priority","Last","BraveHeart","braveHeart4Pc","Berserker","berserker4Pc","Instructor","instructor4Pc","BlizzardStrayer","blizzardStrayer4Pc","Thundersoother","thundersoother4Pc","Lavawalker","lavawalker4Pc","MaidenBeloved","maidenBeloved4Pc","healedBonus","BloodstainedChivalry","bloodstainedChivalry4Pc","ArchaicPetra","archaicPetra4Pc","RetracingBolide","retracingBolide4Pc","HeartOfDepth","heartOfDepth4Pc","Tenacity","tenacity4Pc","PaleFlame","paleFlame4Pc","Shimenawa","shimenawa4Pc","artifactSets","resolutionofsojourner","tinymiracle","martialartist","gambler","gladiatorsfinale","viridescentvenerer","wandererstroupe","crimsonwitchofflames","noblesseoblige","emblemofseveredfate","braveheart","berserker","instructor","blizzardstrayer","thundersoother","lavawalker","maidenbeloved","bloodstainedchivalry","archaicpetra","retracingbolide","heartofdepth","tenacityofthemillelith","paleflame","shimenawasreminiscence","getArtifactSetConstructor","initArtifactSet","ArtifactSetConstructor","ArtifactSetPicker","setArtifactSetId","index","artifactSetId","sort","name1","name2","localeCompare","InputBlock","isBooleanOption","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","Reaction","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","choice","ArtifactSetInputBlock","artifactSetOptions","artifactSet","updateArtifactSetBonuses","setArtifactSetPieces","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","Map","set","Anemo","Geo","Physical","get","prevValue","CritType","calculateBaseDamage","scalingType","flatDmg","Defense","Hp","calculateAmplifyingReactionMultiplier","reaction","amplifyingStrength","triggerElement","Melt","Vaporize","calculateAmplifyingStrengthMultiplier","reactionBonus","calculateTotalDamage","attackType","Normal","normalAttackFlatDmg","Charged","chargedAttackFlatDmg","skillFlatDmg","baseDmg","getDamageBonus","crit","critType","Crit","Average","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","calculateHp","flatBonus","normalAttackSingle","infusionNormal","infusion","normalAttackMulti","hits","damages","chargedAttackSingle","chargedAttackMulti","aimShot","aimShotCharged","plungeAttack","infusionPlunge","Plunge","skillSingle","skillMulti","burstSingle","burstMulti","typelessAttack","None","healingValue","flatHealing","calculateHealing","hpValue","shieldHpValue","dmgAbsorption","dionaHoldSkill","calculateDmgAbsorption","atkBuffValue","attackParams","skillParams","burstParams","albedoAttack","chargedDmg","plungeDmg","lowPlungeDmg","highPlungeDmg","albedoSkill","skillDmg","transientBlossomDmg","albedoBurst","burstDmg","fatalBlossomDmg","albedoTalents","Albedo","CharacterOption","AloyOptionCoil","_talentAttackLevel","_talentBurstLevel","aloyOptions","a1Data","a4Data","a1Params","a4Params","AloyOptionAscension1","aloyAscension1","AloyOptionAscension4","aloyAscension4","aloyPassives","aloyAttack","aimShotDmg","chargedAimShotDmg","aloySkill","freezeBombDmg","chillwaterBombletDmg","aloyBurst","aloyTalents","Aloy","amberAttack","amberSkill","explosionDmg","baronBunnyHp","amberBurst","dmgPerWave","totalDmg","talentValue","amberTalents","Amber","AyakaOptionInfusion","ayakaOptions","ayakaTalents","cuttingDmg","bloomDmg","Ayaka","barbaraTalents","hpRegenContinuous","hpRegenOnHit","dropletDmg","hpRegen","Barbara","beidouPassives","beidouTalents","chargedSpinDmg","chargedFinalDmg","shieldHp","dmgBonusOnHitTaken","lightningDmg","Beidou","bennettTalents","pressDmg","chargeLevel1Dmg","chargeLevel2Dmg","hpRegenContinuousPerSecond","Bennett","chongyunOptions","chongyunTalents","Chongyun","dilucTalents","slashingDmg","dot","dilucOptions","_talentSkillLevel","passiveData","Diluc","dionaTalents","icyPawDmgPerPaw","shieldHpPress","shieldHpHold","continuousFieldDmg","hpRegenContinuousTime","Diona","eulaTalents","holdDmg","icewhirlBrandDmg","lightfallSwordBaseDmg","lightfallSwordStackDmg","Eula","fischlTalents","ozDmg","summoningDmg","fallingThunderDmg","Fischl","ganyuTalents","aimShotChargeLevel1","frostflakeArrowDmg","frostflakeArrowBloomDmg","iceLotusHp","iceShardDmg","Ganyu","hutaoPassives","hutaoTalents","bloodBlossomDmg","burstDmgLowHp","hpRegenLowHp","hutaoOptions","flatAtkBonus","Hutao","jeanTalents","fieldEnterExitDmg","fieldActivationHealing","Jean","kaeyaTalents","Kaeya","kazuhaTalents","dotElementalAbsorption","elementalAbsorption","ElementalAbsoprtionOption","kazuhaOptions","Kazuha","keqingTalents","lightningStilettoDmg","thunderclapSlashDmg","burstInitDmg","consecutiveSlashDmg","lastAttackDmg","Keqing","kleeTalents","jumpyDumptyDmg","mineDmg","sparksNSplashDmg","Klee","kokomiPassives","kokomiHealingBonusDmg","kokomiTalents","getKokomiNormalAttackModifier","getKokomiChargedAttackModifier","rippleDmg","getKokomiSkillModifier","kokomiBurst","newModifier","normalAttackBonusDmg","chargedAttackBonusDmg","skillBonusDmg","kokomiOptions","Kokomi","lisaTalents","holdDmgStack0","holdDmgStack1","holdDmgStack2","holdDmgStack3","Lisa","monaOptions","monaTalents","Mona","ningguangTalents","normalAtkDmg","starJadeDmg","jadeScreenHp","dmgPerGem","Ningguang","noelleTalents","healing","firstSwingDmg","noelleOptions","totalDef","Noelle","qiqiTalents","heraldOfFrostDmg","Qiqi","raidenPassives","raidenTalents","coordinatedAtkDmg","musouNoHitotachiDmg","getInitialResolveBonus","getAttackResolveBonus","resolveStacks","raidenOptions","Raiden","razorTalents","Razor","rosariaTalents","iceLanceDot","Rosaria","saraTalents","tenguJuuraiAmbushDmg","tenguJuuraiTitanbreakerDmg","tenguJuuraiStormclusterDmg","Sara","sayuTalents","fuufuuWindwheelDmg","fuufuuWhirlwindKickPressDmg","fuufuuWhirlwindKickHoldDmg","fuufuuWindwheelElementalDmg","fuufuuWhirlwindKickElementalDmg","activationDmg","activationHealing","mujimujiDarumaDmg","mujimujiDarumaHealing","sayuOptions","Sayu","sucroseOptions","sucroseTalents","Sucrose","tartagliaTalents","riptideFlashDmg","riptideBurstDmg","stanceChangeDmg","riptideSlashDmg","burstDmgMelee","burstDmgRanged","riptideBlastDmg","Tartaglia","ventiTalents","ventiOptions","Venti","xianglingTalents","guobaDmg","swing1HitDmg","swing2HitDmg","swing3HitDmg","pyronadoDmg","Xiangling","xiaoOptions","xiaoTalents","Xiao","xingqiuTalents","swordRainDmg","Xingqiu","xinyanTalents","swingDmg","shieldHpLevel1","shieldHpLevel2","shieldHpLevel3","pyroDot","Xinyan","yanfeiOptions","yanfeiTalents","chargedDmgSeal0","chargedDmgSeal1","chargedDmgSeal2","chargedDmgSeal3","chargedDmgSeal4","Yanfei","yoimiyaOptions","yoimiyaSkill","yoimiyaPassives","yoimiyaTalents","getYoimiyaNormalAttackMultiplier","kindlingArrowDmg","aurousBlazeExplosionDmg","Yoimiya","zhongliTalents","stoneSteeleDmg","resonanceDmg","characters","albedo","aloy","amber","ayaka","barbara","beidou","bennett","chongyun","diluc","diona","eula","fischl","ganyu","hutao","jean","kaeya","kazuha","keqing","klee","kokomi","lisa","mona","ningguang","noelle","qiqi","raiden","razor","rosaria","sara","sayu","sucrose","tartaglia","venti","xiangling","xiao","xingqiu","xinyan","yanfei","yoimiya","zhongli","getCharacterConstructor","initCharacter","CharacterConstructor","CharacterPicker","setCharacterId","CharacterInputBlock","setCharacterLevel","setIsCharacterAscended","isAscended","ModifierInputBlock","setEnemyLevel","updateTalentValues","setEnemyRes","setCritType","setReaction","ToggleButtonGroup","ToggleButton","Weapon","rank","passiveDataSet","_weaponLevel","_refinement","getPassive","getStatsAt","weaponLevel","weaponStatCurves","shouldKeepValue","newOption","statBonuses","WeaponOption","DragonsBane","dragonsBanePassive","EngulfingLightning","engulfingLightningPassive","EverlastingMoonglow","everlastingMoonglowPassive","LuxuriousSeaLord","luxuriousSeaLordPassive","SolarPearl","solarPearlPassive","weapons","dragonsbane","engulfinglightning","staffofhoma","totalHp","staffOfHomaPassive","thecatch","theCatchPassive","everlastingmoonglow","solarpearl","luxurioussealord","getWeaponConstructor","initWeapon","WeaponConstructor","SaveBlock","onSaveClick","saveInputName","save","characterHasAscended","weaponHasAscended","weaponRefinement","artifactSetPieces","weaponOptions","saves","window","localStorage","setItem","JSON","stringify","addSave","onSaveInputChange","onLoadClick","selectedSave","refreshApp","savedArtifact","artifactType","characterOption","weaponOption","artifactSetOption","loadSave","onLoadInputChange","onDeleteClick","showDeleteWarning","onModalConfirm","deleteSave","onModalHide","getItem","parse","placeholder","Modal","show","onHide","Footer","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","setIsWeaponAscended","setWeaponRefinement","InputColumn","ArtifactSetStatBlock","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","TalentColumn","App","modifierMixins","callback","newArtifactSets","getStatMixins","newChar","getModifierMixins","getDamageModifier","fns","fn","characterPassiveMixins","getPassiveModifierMixins","weaponPassiveMixins","artifactSetMixins","characterOptionMixins","weaponOptionMixins","artifactSetOptionMixins","unarrangedMixins","groupedMixins","array","getPassiveStatMixins","Container","fluid","Navbar","sticky","bg","Nav","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kj2qBA4DIA,EACAC,EACAC,E,6PA1CSC,EAAcC,EACdC,EAAoBC,EACpBC,EAAgBC,EAGvBC,EACJC,EAwCeC,QAAO,SAACC,EAAKC,GAE1B,OADAD,EAAIC,EAASC,IAAMD,EACZD,IACN,IAzCCG,EA4CN,SACEC,GAEA,OAAOA,EAAQL,QAAO,SAACC,EAAKC,GAI1B,OAHAD,EAAIC,EAASI,aAAeJ,EAASK,kBAAkBC,KACrD,SAACC,GAAD,OAAeA,EAAUC,oBAEpBT,IACN,IApD+BU,CAClCC,GAEIC,EAoDN,SAAuCR,GACrC,OAAOA,EAAQL,QAAO,SAACC,EAAKa,GAE1B,OADAb,EAAIa,EAAUC,OAASD,EAAUE,WAC1Bf,IACN,IAxD0BgB,CAC7BC,GAEIC,EAwDN,SAA2Bd,GACzB,OAAOA,EAAQL,QAAO,SAACC,EAAKkB,GAE1B,OADAlB,EAAIkB,EAAWhB,IAAMgB,EACdlB,IACN,IA5DcmB,CACjBC,GAEIC,EA4DN,SACEjB,GAEA,OAAOA,EAAQL,QAAO,SAACC,EAAKkB,GAI1B,OAHAlB,EAAIkB,EAAWI,UAAYJ,EAAWZ,kBAAkBC,KACtD,SAACC,GAAD,OAAeA,EAAUC,oBAEpBT,IACN,IApE4BuB,CAC/BC,GAEIC,EAoEN,SAAoCrB,GAClC,OAAOA,EAAQL,QAAO,SAACC,EAAKa,GAE1B,OADAb,EAAIa,EAAUC,OAASD,EAAUE,WAC1Bf,IACN,IAxEuB0B,CAC1BC,GAEIC,EAwEN,SAA2BxB,GACzB,OAAOA,EAAQL,QAAO,SAACC,EAAK6B,GAC1B,IAAMC,EAAmBD,EAAcE,QAEnCH,EAAiC,CACnCI,OAAQF,EAAiBE,OAAOjC,QAAO,SAACkC,EAAUpB,GAEhD,OADAoB,EAASpB,EAAUC,OAASD,EAAUqB,OAC/BD,IACN,IAEHE,MAAOL,EAAiBK,MAAMpC,QAAO,SAACkC,EAAUpB,GAE9C,OADAoB,EAASpB,EAAUC,OAASD,EAAUqB,OAC/BD,IACN,IAEHG,MAAON,EAAiBM,MAAMrC,QAAO,SAACkC,EAAUpB,GAE9C,OADAoB,EAASpB,EAAUC,OAASD,EAAUqB,OAC/BD,IACN,IAEHI,SAAUP,EAAiBO,UAI7B,OADArC,EAAI6B,EAAcxB,aAAeuB,EAC1B5B,IACN,IAjGcsC,CACjBT,GAEIU,EAiGN,SAAgCnC,GAC9B,OAAOA,EAAQL,QAAO,SAACC,EAAKwC,GAE1B,OADAxC,EAAIwC,EAAQtC,IAAMsC,EACXxC,IACN,IArGmByC,CACtBC,GAEIC,EAqGN,SAAqCvC,GACnC,OAAOA,EAAQL,QAAO,SAACC,EAAKwC,GAK1B,OAJAxC,EAAIwC,EAAQI,OAASJ,EAAQK,YAAY9C,QAAO,SAAC+C,EAAUtC,GAEzD,OADAsC,EAAStC,EAAUuC,gBAAkBvC,EAC9BsC,IACN,IACI9C,IACN,IA5GwBgD,CAC3BC,GAEIC,EACJC,EACIC,EAAoBC,EA2G1B,SAASC,EAAWpD,EAAYqD,GAC9B,OAAOA,EAAQrD,GAGjB,SAASsD,EACPtD,EACAqD,GAEA,OAAOA,EAAQrD,GAGjB,SAASuD,EACP3C,EACAC,GAEA,OAAOA,EAAWD,GAIb,SAAS4C,EAAiBxD,GAC/B,OAAOoD,EAAQpD,EAAIL,GAWd,SAAS8D,GAAczD,GAC5B,OAAOoD,EAAQpD,EAAIgB,GAWd,SAAS0C,GAAqB1D,GACnC,OAAOoD,EAAQpD,EAAIkD,GAGd,SAASS,GAAuB3D,EAAY4D,GAAqB,IAAD,IACrE,2BAAOF,GAAqB1D,GAAI6D,QAAQD,UAAxC,aAAO,EAA8CE,qBAArD,QAAsE,GAGjE,SAASC,GACdnD,EACAL,GAEA,OAAOA,EAAiBK,GAGnB,SAASoD,GAAchE,GAC5B,OAAO0B,EAAW1B,GAGpB,IAAMiE,GAA8BC,MAAM,IAAIC,KAAKC,KAE5C,SAASC,GACdC,EACA1D,EACAiB,GAEA,IAAM0C,EAAc1C,EAAQyC,GAAM1D,GAClC,YAAoB4D,IAAhBD,EACKA,EAEAN,GAIJ,SAASQ,GAAmBzE,GACjC,OAAOoD,EAAQpD,EAAIqC,GAGd,SAASqC,GAAwB1E,GACtC,OAAOoD,EAAQpD,EAAIyC,GAGd,SAASkC,GAA0B3E,EAAY4E,GAAiB,IAAD,MAC9D5C,EAAM,UAAG0C,GAAwB1E,UAA3B,iBAAG,EAA8B4E,UAAjC,iBAAG,EAAuCC,kBAA1C,aAAG,EAAmD7C,OAClE,cAAOA,QAAP,IAAOA,IAAUiC,GAWZ,SAASa,GACdlB,EACAzB,GAEA,OAAOA,EAAS0B,QAAQD,G,ICpPLmB,G,WACnB,WAAY/E,GAA8D,IAAlDY,EAAiD,uDAAjC,EAAGoE,EAA8B,iFAOjEC,IAAc,GAPmD,KAgCzEC,UAhCyE,OAiCzEC,eAjCyE,OAkCzEC,sBAlCyE,OAmCzE7E,sBAnCyE,OAoCzEsB,aApCyE,OAqCzEwD,UAAqB,GArCoD,KAuCjEC,OAAiB,EAvCgD,KAwDjEC,cAAwB,EAxDyC,KAyEzEC,YAAqB,GAzEoD,KA0EzErD,SAA+B,GA1E0C,KA2EzEsD,iBAAsC,GA3EmC,KA4EzEC,eAAoC,GA3ElCC,KAAKL,OAAS1E,EACd+E,KAAKJ,aAAeP,EAEpBW,KAAK3F,GAAKA,E,oCAIZ,WACE,OAAO2F,KAAKV,K,IAEd,SAAOW,GAELD,KAAKV,IAAMW,EAEX,IAAMC,EAAOzC,EAAQwC,GAErBD,KAAKT,KAAL,OAAYW,QAAZ,IAAYA,OAAZ,EAAYA,EAAMX,KAClBS,KAAKR,UAAL,OAAiBU,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMV,UACvBQ,KAAKP,iBAAL,OAAwBS,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAMhF,WAC9B8E,KAAKpF,iBDiJA+C,ECjJyCsC,EDiJf3F,GC/I/B0F,KAAK9D,QAAUmC,GAAc4B,GAC7BD,KAAKN,UAAYM,KAAKG,eAEtBH,KAAKH,YAAcG,KAAKI,iBAAiBJ,KAAK/E,MAAO+E,KAAKX,aAC1DW,KAAKF,iBAAmBE,KAAKK,sBAC7B,IAAMC,EAAiBC,GAAkBP,KAAK/E,MAAO+E,KAAKX,aAC1DW,KAAKxD,SAAWwD,KAAKQ,YAAYF,GACjCN,KAAKD,eAAiBC,KAAKS,kBAAkBH,K,iBAW/C,WACE,OAAON,KAAKL,Q,IAEd,SAAUM,GACR,IAAMS,EAAqBH,GAAkBP,KAAK/E,MAAO+E,KAAKX,aAC9DW,KAAKL,OAASM,EACd,IAAMK,EAAiBC,GAAkBP,KAAK/E,MAAO+E,KAAKX,aAE1DW,KAAKH,YAAcG,KAAKI,iBAAiBH,EAAOD,KAAKX,aACrDW,KAAKxD,SAAWwD,KAAKQ,YAAYF,GACjCN,KAAKD,eAAiBC,KAAKS,kBACzBH,EACAI,K,uBAKJ,WACE,OAAOV,KAAKJ,c,IAEd,SAAgBK,GACd,IAAMS,EAAqBH,GAAkBP,KAAK/E,MAAO+E,KAAKX,aAC9DW,KAAKJ,aAAeK,EACpB,IAAMK,EAAiBC,GAAkBP,KAAK/E,MAAO+E,KAAKX,aAE1DW,KAAKH,YAAcG,KAAKI,iBAAiBJ,KAAK/E,MAAOgF,GACrDD,KAAKxD,SAAWwD,KAAKQ,YAAYF,GACjCN,KAAKD,eAAiBC,KAAKS,kBACzBH,EACAI,K,uBASJ,WACE,MAAmB,KAAZV,KAAK3F,K,8BAId,SAAiBY,EAAeoE,GAC9B,QACqBR,IAAnBmB,KAAKR,gBACqBX,IAA1BmB,KAAKP,uBACqBZ,IAA1BmB,KAAKpF,iBAGL,MAAO,GAGT,GAAI+F,MAAM1F,IAAUA,EAAQ,GAAKA,EAAQ,GAavC,YAVyB4D,IAArBmB,KAAKH,YAEOe,OAAOC,KAAKb,KAAKH,aAAa3F,QAAO,SAAC4G,EAAKC,GAEvD,OADAD,EAAIC,GAAQtC,IACLqC,IACN,IAEW,GAQlB,IAAIjB,EAAW,eAAQG,KAAKR,WAExBwB,EDuDD,SAAiC/F,GACtC,OAAO2C,EAAe3C,EAAOF,GCxDN6C,CAAe3C,GAGpC2F,OAAOK,QAAQjB,KAAKP,kBAAkByB,SAAQ,YAAoB,IAAD,mBAAjBH,EAAiB,KAAXI,EAAW,KAC3DC,EAAaJ,EAAeG,GAChCtB,EAAYkB,IAASK,KAIvB,IAEIxG,EAAmBwD,GAFFmC,GAAkBtF,EAAOoE,GAI5CW,KAAKpF,kBAaP,YAVyBiE,IAArBjE,GACFgG,OAAOK,QAAQrG,GAAkBsG,SAAQ,YAAoB,IAAD,mBAAjBH,EAAiB,KAAXM,EAAW,KACtDN,KAAQlB,EACVA,EAAYkB,IAASM,EAErBxB,EAAYkB,GAAQM,KAKnBxB,I,0BAIT,WACE,MAAO,K,2CAIT,WACE,MAAO,K,iCAGT,WACE,OAAOG,KAAKsB,gCAAgC5G,KAAI,SAAC6G,GAAD,OAAY,IAAIA,O,4BAIlE,WACE,MAAO,K,yBAIT,SAAYjB,GACV,OAAON,KAAKwB,iBAAiBC,QAC3B,SAACvD,GAAD,OAAaoC,GAAkBpC,EAAQoC,oB,+BAK3C,SAAkBA,EAAwBI,GACxC,QAA2B7B,IAAvB6B,GAAoCC,MAAMD,GAC5C,OAAOV,KAAKxD,SACTkF,SAAQ,qBAAGC,WACXjH,KAAI,SAAC6G,GAAD,OAAY,IAAIA,KAGzB,GAAIjB,EAAiBI,EAAoB,CACvC,IAAMkB,EAAe5B,KAAKD,eAAerF,KAAI,qBAAGL,MAC1CwH,EAAa7B,KAAKxD,SACrBkF,SAAQ,qBAAGC,WACXjH,KAAI,SAAC6G,GAAD,OAAY,IAAIA,KACpBE,QAAO,gBAAGpH,EAAH,EAAGA,GAAH,OAAauH,EAAaE,SAASzH,MAE7C,OAAO2F,KAAKD,eAAegC,OAAOF,GAGpC,GAAIvB,EAAiBI,EAAoB,CACvC,IAAMsB,EAAgBhC,KAAKxD,SACxBkF,SAAQ,qBAAGC,WACXjH,KAAI,SAAC6G,GAAD,OAAY,IAAIA,KACpB7G,KAAI,SAACuH,GAAD,OAAYA,EAAO5H,MAE1B,OAAO2F,KAAKD,eAAe0B,QAAO,SAACQ,GAAD,OAChCD,EAAcF,SAASG,EAAO5H,OAKlC,OAAO2F,KAAKD,iB,wBAGd,WACE,IAAMD,EAAmBE,KAAKF,iBACxBC,EAAiBC,KAAKD,eAE5B,OAAOD,EAAiBiC,OAAOhC,K,kCAGjC,WACE,OAAOC,KAAKxD,SACT9B,KAAI,qBAAGwH,aACPT,QAAO,SAACU,GAAD,YAAyCtD,IAAVsD,O,sCAG3C,WACE,OAAOnC,KAAKxD,SACT9B,KAAI,qBAAG0H,iBACPX,QAAO,SAACU,GAAD,YAA6CtD,IAAVsD,S,KAK1C,SAAS5B,GAAkBtF,EAAeoE,GAkB/C,OAhBIpE,EAAQ,IAAiB,KAAVA,GAAgBoE,EAChB,EACRpE,EAAQ,IAAiB,KAAVA,GAAgBoE,EACvB,EACRpE,EAAQ,IAAiB,KAAVA,GAAgBoE,EACvB,EACRpE,EAAQ,IAAiB,KAAVA,GAAgBoE,EACvB,EACRpE,EAAQ,IAAiB,KAAVA,GAAgBoE,EACvB,EACRpE,EAAQ,IAAiB,KAAVA,GAAgBoE,EACvB,EAEA,ECzPd,SAASgD,GAAoBC,EAAcrC,GAAgB,IAAD,EACzDsC,EAAY,UAAG7I,EAAY4I,UAAf,aAAG,EAAmBC,aACxC,OAAa,MAATtC,GAAkBU,MAAMV,GAOnB,IANHsC,GACc,IAARtC,GAAauC,QAAQ,GAAK,IAE3BC,KAAKC,MAAMzC,GAAO0C,WAQxB,SAASC,GAAsBC,GACpC,IAAIC,EAAM,GAEV,OAAsB,IAAlBD,EAAOE,OACFD,EAGLnC,MAAMkC,EAAO,IACR,KAEPC,GAAOL,KAAKC,MAAMG,EAAO,IAGvBA,EAAOE,QAAU,GAAKF,EAAOG,OAAM,SAAC/C,GAAD,OAAWA,IAAU4C,EAAO,MAEjEC,GAAO,MAAQD,EAAOE,OAGtBF,EAAOI,MAAM,GAAG/B,SAAQ,SAACjB,GACvB,GAAIU,MAAMV,GACR,MAAO,IAEP6C,GAAO,MAAQL,KAAKC,MAAMzC,MAKzB6C,GAIF,SAASI,GAAc7I,GAC5B,OAAOP,EAAcO,GAIhB,SAAS8I,GAAiBlD,EAAesC,GAC9C,OAAIA,EACKtC,EAAQ,IAERA,EAoDJ,SAASmD,GACdC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACC,IAAD,8BACIpE,EAxCN,SAAwB6D,EAAsBC,GAC5C,IAAIO,EAOAC,EALFD,OADgBhF,IAAdwE,EACeA,EAAUxD,YAEV,GAKjBiE,OADajF,IAAXyE,EACYA,EAAOS,MAEP,GAIhB,IAAIvE,EAAS,eAAQsE,GASrB,OARAlD,OAAOK,QAAQ4C,GAAgB3C,SAAQ,YAAoB,IAAD,mBAAjBH,EAAiB,KAAXd,EAAW,UAChCpB,IAApBW,EAAUuB,GACZvB,EAAUuB,GAAQd,EAElBT,EAAUuB,IAASd,KAIhBT,EAeSwE,CAAeX,EAAWC,GACtCW,EAAa,eAAQzE,GAGrB0E,EAAuB,GAC3BV,EAAUtC,SAAQ,SAACiD,GACjBvD,OAAOK,QAAQkD,EAASC,YAAYlD,SAAQ,YAAoB,IAAD,mBAAjBH,EAAiB,KAAXd,EAAW,UACjCpB,IAAxBqF,EAAcnD,GAChBmD,EAAcnD,GAAQd,EAEtBiE,EAAcnD,IAASd,QAM7BW,OAAOK,QAAQiD,GAAehD,SAAQ,YAAoB,IAAD,mBAAjBH,EAAiB,KAAXd,EAAW,UAC3BpB,IAAxBoF,EAAclD,GAChBkD,EAAclD,GAAQd,EAEtBgE,EAAclD,IAASd,UAKApB,IAAvB0E,GACF3C,OAAOK,QAAQsC,GAAoBrC,SAAQ,YAAoB,IAAD,mBAAjBH,EAAiB,KAAXd,EAAW,UAChCpB,IAAxBoF,EAAclD,GAChBkD,EAAclD,GAAQd,EAEtBgE,EAAclD,IAASd,KAM7BgE,EAAcI,eAAiB,aAAKJ,EAAcI,sBAAnB,QAAqC,GAGpET,EAAW1C,SAAQ,SAACiB,GAAD,OACjBA,EAAMmC,MACJL,EACAR,EACAC,EACAC,EACApD,GAAkB8C,EAAUpI,MAAOoI,EAAUhE,iBAKjD,IAAIkF,EAAoB,GA2GxB,OAzGAA,EAAWC,QAAX,UAAqBP,EAAcO,eAAnC,QAA8C,EAE9CD,EAAWE,SACT,UAACR,EAAcO,eAAf,QAA0B,IAAM,aAAKP,EAAcS,gBAAnB,QAA+B,KAA/D,UACCT,EAAcQ,eADf,QAC0B,GAC5BF,EAAWI,SACT,UAACV,EAAcW,eAAf,QAA0B,IAAM,aAAKX,EAAcY,gBAAnB,QAA+B,KAA/D,UACCZ,EAAcU,eADf,QAC0B,GAC5BJ,EAAWO,QACT,UAACb,EAAcc,cAAf,QAAyB,IAAM,aAAKd,EAAce,eAAnB,QAA8B,KAA7D,UACCf,EAAca,cADf,QACyB,GAC3BP,EAAWU,SAAX,UAAsBhB,EAAcgB,gBAApC,QAAgD,EAChDV,EAAWW,QAAX,UAAqBjB,EAAciB,eAAnC,QAA8C,EAC9CX,EAAWY,iBAAX,UAA8BlB,EAAckB,wBAA5C,QAAgE,EAChEZ,EAAWF,eAAX,UAA4BJ,EAAcI,sBAA1C,QAA4D,OAExBxF,IAAhCoF,EAAcmB,gBAChBb,EAAWa,cAAgBnB,EAAcmB,oBAERvG,IAA/BoF,EAAcoB,eAChBd,EAAWc,aAAepB,EAAcoB,mBAEJxG,IAAlCoF,EAAcqB,kBAChBf,EAAWe,gBAAkBrB,EAAcqB,sBAEXzG,IAA9BoF,EAAcsB,cAChBhB,EAAWgB,YAActB,EAAcsB,kBAEL1G,IAAhCoF,EAAcuB,gBAChBjB,EAAWiB,cAAgBvB,EAAcuB,oBAER3G,IAA/BoF,EAAcwB,eAChBlB,EAAWkB,aAAexB,EAAcwB,mBAEH5G,IAAnCoF,EAAcyB,mBAChBnB,EAAWmB,iBAAmBzB,EAAcyB,uBAGf7G,IAA3BoF,EAAc0B,WAChBpB,EAAWoB,SAAW1B,EAAc0B,eAER9G,IAA1BoF,EAAc2B,UAChBrB,EAAWqB,QAAU3B,EAAc2B,cAEJ/G,IAA7BoF,EAAc4B,aAChBtB,EAAWsB,WAAa5B,EAAc4B,iBAEXhH,IAAzBoF,EAAc6B,SAChBvB,EAAWuB,OAAS7B,EAAc6B,aAELjH,IAA3BoF,EAAc8B,WAChBxB,EAAWwB,SAAW9B,EAAc8B,eAERlH,IAA1BoF,EAAc+B,UAChBzB,EAAWyB,QAAU/B,EAAc+B,cAEHnH,IAA9BoF,EAAcgC,cAChB1B,EAAW0B,YAAchC,EAAcgC,kBAGNpH,IAA/BoF,EAAciC,eAChB3B,EAAW2B,aAAejC,EAAciC,mBAGLrH,IAAjCoF,EAAckC,iBAChB5B,EAAW4B,eAAiBlC,EAAckC,qBAEbtH,IAA3BoF,EAAcmC,WAChB7B,EAAW6B,SAAWnC,EAAcmC,eAEDvH,IAAjCoF,EAAcoC,iBAChB9B,EAAW8B,eAAiBpC,EAAcoC,qBAENxH,IAAlCoF,EAAcqC,kBAChB/B,EAAW+B,gBAAkBrC,EAAcqC,sBAERzH,IAAjCoF,EAAcsC,iBAChBhC,EAAWgC,eAAiBtC,EAAcsC,qBAER1H,IAAhCoF,EAAcuC,gBAChBjC,EAAWiC,cAAgBvC,EAAcuC,oBAEP3H,IAAhCoF,EAAcwC,gBAChBlC,EAAWkC,cAAgBxC,EAAcwC,oBAEL5H,IAAlCoF,EAAcyC,kBAChBnC,EAAWmC,gBAAkBzC,EAAcyC,sBAET7H,IAAhCoF,EAAc0C,gBAChBpC,EAAWoC,cAAgB1C,EAAc0C,oBAGJ9H,IAAnCoF,EAAc2C,mBAChBrC,EAAWqC,iBAAmB3C,EAAc2C,uBAER/H,IAAlCoF,EAAc4C,kBAChBtC,EAAWsC,gBAAkB5C,EAAc4C,sBAENhI,IAAnCoF,EAAc6C,mBAChBvC,EAAWuC,iBAAmB7C,EAAc6C,uBAEXjI,IAA/BoF,EAAc8C,eAChBxC,EAAWwC,aAAe9C,EAAc8C,cAGnCxC,EAGF,SAASyC,GAAWlE,GACzB,OAAIA,EAAIC,OAAS,EACRD,EAAI,GAAGmE,cAAclF,OAAOe,EAAIG,MAAM,IAEtCH,EC1RJ,IAuCKoE,GAvCCC,GAAb,WAKE,aAA6E,IAAjEpG,EAAgE,uDAAjD,GAAId,EAA6C,uDAA7BxB,IAAK2I,EAAwB,uDAAL3I,IAAK,yBAJ5EsC,UAI4E,OAH5Ed,WAG4E,OAF5EmH,cAE4E,EAC1EpH,KAAKe,KAAOA,EACZf,KAAKC,MAAQA,EACbD,KAAKoH,SAAWA,EARpB,2CAWE,SAAQrG,GACNf,KAAKe,KAAOA,EACC,KAATA,IACFf,KAAKC,MAAQkD,GACXnD,KAAKoH,SACL1N,EAAYqH,GAAMwB,iBAhB1B,2BAqBE,SAActC,GACZD,KAAKoH,SAAWnH,EACE,KAAdD,KAAKe,OACPf,KAAKC,MAAQkD,GAAiBlD,EAAOvG,EAAYsG,KAAKe,MAAMwB,iBAxBlE,sBA4BE,SAAStC,GACPD,KAAKC,MAAQA,EACK,KAAdD,KAAKe,OACPf,KAAKoH,SD8BJ,SACLnH,EACAsC,GAEA,OAAIA,EACa,IAARtC,EAEAA,ECrCWoH,CACdpH,EACAvG,EAAYsG,KAAKe,MAAMwB,mBAjC/B,M,SAuCY2E,K,gBAAAA,E,kBAAAA,E,cAAAA,E,gBAAAA,E,mBAAAA,Q,SCzCSI,G,WA8BnB,WACE3I,EACA4I,EACAtM,EACAuM,GACC,yBAlCH7I,UAkCE,OAhCM8I,aAgCN,OAvBM9H,YAuBN,OAdF+H,SAAiB,CAAE3G,KAAM,GAAId,MAAOxB,KAclC,KAZFkJ,SAAwB,CACtB,IAAIR,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IASJnH,KAAKrB,KAAOA,EACZqB,KAAKyH,QAAUF,EACfvH,KAAKL,OAAS1E,EACd+E,KAAK0H,SAAS3G,KAAOyG,EAErBxH,KAAK4H,eAAeL,EAAQtM,EAAOuM,G,wCArCrC,WACE,OAAOxH,KAAKyH,S,IAEd,SAAWxH,GACTD,KAAKyH,QAAUxH,EACfD,KAAK4H,eAAe5H,KAAKuH,OAAQvH,KAAK/E,MAAO+E,KAAK0H,SAAS3G,Q,iBAI7D,WACE,OAAOf,KAAKL,Q,IAEd,SAAUM,GACRD,KAAKL,OAASM,EACdD,KAAK4H,eAAe5H,KAAKuH,OAAQvH,KAAK/E,MAAO+E,KAAK0H,SAAS3G,Q,4BA0B7D,SAAewG,EAAgBtM,EAAeqH,GAC5CtC,KAAK6H,iBJ0MF,SACLN,EACAtM,EACAqH,GACC,IAAD,MACA,2BAAOjF,EAAqBkK,UAA5B,iBAAO,EAA+BtM,UAAtC,aAAO,EAAwCqH,UAA/C,QAAwD7D,II/MhCqJ,CAAyBP,EAAQtM,EAAOqH,M,6BAGhE,SAAgBA,GACdtC,KAAK0H,SAAS3G,KAAOuB,EACrBtC,KAAK4H,eAAe5H,KAAKuH,OAAQvH,KAAK/E,MAAOqH,K,8BAG/C,SAAiBrC,GACfD,KAAK0H,SAASzH,MAAQA,I,4BAGxB,SAAe8H,EAAWzF,GACxBtC,KAAK2H,SAASI,GAAGC,QAAQ1F,K,kCAG3B,SAAqByF,EAAW9H,GAC9BD,KAAK2H,SAASI,GAAGE,cAAchI,K,6BAGjC,SAAgB8H,EAAW9H,GACzBD,KAAK2H,SAASI,GAAGG,SAASjI,K,sBAsC5B,WACE,IAAI8D,EAAe,GAkBnB,MAhB2B,KAAvB/D,KAAK0H,SAAS3G,OACXJ,MAAMX,KAAK0H,SAASzH,OAGvB8D,EAAM/D,KAAK0H,SAAS3G,MAAQtC,IAF5BsF,EAAM/D,KAAK0H,SAAS3G,MAAQf,KAAK0H,SAASzH,OAM9CD,KAAK2H,SAASzG,SAAQ,SAACiH,GAES,IAAD,EADR,KAAjBA,EAAQpH,OACLJ,MAAMwH,EAAQlI,SACjB8D,EAAMoE,EAAQpH,MAAQoH,EAAQlI,OAAR,UAAiB8D,EAAMoE,EAAQpH,aAA/B,QAAwC,QAK7DgD,M,KAIEqE,GAAgB,CAC3BC,OAAQ,CAAC,UAETC,QAAS,CAAC,WAEVC,MAAO,CACL,UACA,WACA,WACA,mBACA,kBAGFC,OAAQ,CACN,UACA,WACA,WACA,mBACA,gBACA,eACA,kBACA,cACA,gBACA,eACA,oBAGFC,QAAS,CACP,UACA,WACA,WACA,mBACA,WACA,UACA,iBAISC,GAAe,CAC1B,SACA,UACA,UACA,UACA,WACA,WACA,mBACA,iBACA,WACA,W,iBCxGaC,G,4MAvDbC,MAA0B,CACxB3I,MAAO,EAAK4I,MAAMC,c,EAGpBC,aAAe,uBAA2BlK,IAArB,EAAKgK,MAAM5I,O,EAEhC+I,aAAe,kCAAM,EAAKH,MAAMG,oBAAjB,U,EAEfC,gBAAkB,SAACC,GACjB,IAAMjJ,EAAQkJ,SAASD,EAAEE,cAAcnJ,OACvC,EAAKoJ,SAAS,CAAEpJ,W,EAGlBqJ,WAAa,SAACrJ,GACZ,OAAOsJ,OAAOtJ,I,EAGhBuJ,YAAc,SAACN,GACb,IAAMjJ,EAAQ,EAAKqJ,WAAWJ,EAAEE,cAAcnJ,OAE1C,EAAK8I,oBACoBlK,IAAvB,EAAKgK,MAAMY,SACb,EAAKZ,MAAMY,QAAQxJ,GAGrB,EAAKoJ,SAAS,CAAEpJ,UAAS,WAEnB,EAAK4I,MAAMY,SAAS,EAAKZ,MAAMY,QAAQxJ,O,4CAKjD,WAAU,IAAD,EAEDA,EAAQD,KAAK+I,eAAiB/I,KAAK6I,MAAM5I,MAASD,KAAK4I,MAAM3I,MAC7DyJ,EAAgB/I,MAAMV,GAAS,GAAKA,EAAM0C,WAEhD,OACE,uCACE,eAACgH,GAAA,EAAKC,MAAN,CAAYC,QAAS7J,KAAK6I,MAAMxO,GAAIyP,QAAS9J,KAAKgJ,eAAlD,SACGhJ,KAAK6I,MAAMkB,QAEd,eAACJ,GAAA,EAAKK,QAAN,CACErL,KAAK,SACLsL,KAAK,KACLhK,MAAOyJ,EACPD,QAASzJ,KAAKwJ,YACdU,UAAS,iCAAkBlK,KAAK6I,MAAMqB,iBAA7B,QAA0C,IACnD7P,GAAI2F,KAAK6I,MAAMxO,Y,GAnDC8P,IAAMC,WCTjBC,G,4MALJf,WAAa,SAACrJ,GACrB,OAAOqK,WAAWrK,I,YAFG0I,ICOV4B,G,4JALb,WACE,OAAO,eAACC,EAAA,EAAD,CAAKN,UAAU,uBAAf,SAAuClK,KAAK6I,MAAM4B,e,GAFtCN,IAAMC,WCKdM,G,4MALJpB,WAAa,SAACrJ,GACrB,OAAOkJ,SAASlJ,I,YAFG0I,ICoBjBgC,G,4MAGJ/B,MAAqB,CACnB3I,MAAO,EAAK4I,MAAMC,c,EAGpBC,aAAe,uBAA2BlK,IAArB,EAAKgK,MAAM5I,O,EAEhC+I,aAAe,kCAAM,EAAKH,MAAMG,oBAAjB,U,EAEfC,gBAAkB,SAACC,GACjB,IAAM0B,EAAgB1B,EAAE2B,OAAO5K,MAC/B,EAAKoJ,SAAS,CAAEpJ,MAAO2K,K,EAGzBE,aAAe,SAAC5B,GACd,IAAM0B,EAAgB1B,EAAE2B,OAAO5K,MAE3B,EAAK8I,oBACqBlK,IAAxB,EAAKgK,MAAMkC,UACb,EAAKlC,MAAMkC,SAASH,GAGtB,EAAKvB,SAAS,CAAEpJ,MAAO2K,IAAiB,WAElC,EAAK/B,MAAMkC,UAAU,EAAKlC,MAAMkC,SAASH,O,4CAKnD,WAAU,IAAD,EACDA,EAAgB5K,KAAK+I,eACvB/I,KAAK6I,MAAM5I,MACXD,KAAK4I,MAAM3I,MAEf,OACE,uCACE,eAAC0J,GAAA,EAAKC,MAAN,CAAYC,QAAS7J,KAAK6I,MAAMxO,GAAIyP,QAAS9J,KAAKgJ,eAAlD,SACGhJ,KAAK6I,MAAMkB,QAEd,eAACJ,GAAA,EAAKK,QAAN,CACEgB,GAAG,SACHf,KAAK,KACLhK,MAAO2K,EACPG,SAAU/K,KAAK8K,aACfZ,UAAS,2BAAYlK,KAAK6I,MAAMqB,iBAAvB,QAAoC,IAC7C7P,GAAI2F,KAAK6I,MAAMxO,GANjB,SAQG2F,KAAK6I,MAAM4B,kB,GAjDDN,IAAMC,WAArBO,GAuDGM,K,4JACL,WACE,OAAO,yBAAQhL,MAAOD,KAAK6I,MAAM5I,MAA1B,SAAkCD,KAAK6I,MAAMkB,Y,GAFvBI,IAAMC,WAO1BO,ICjEHO,GAMAC,GAUAC,GASAC,GDwCGV,MEoDAW,G,4MAzHbC,wBAA0B,SAACjJ,GACzB,EAAKuG,MAAM1E,SAASqH,gBAAgBlJ,GACpC,EAAKuG,MAAM4C,uB,EAGbC,kBAAoB,SAACnE,GACnB,EAAKsB,MAAM1E,SAASoD,OAASA,EAC7B,EAAKsB,MAAM4C,uB,EAGbE,iBAAmB,SAAC1Q,GAClB,EAAK4N,MAAM1E,SAASlJ,MAAQA,EAC5B,EAAK4N,MAAM4C,uB,EAGbG,uBAAyB,SAAC7D,GAAD,OAAe,SAACzF,GACvC,EAAKuG,MAAM1E,SAAS0H,eAAe9D,EAAGzF,GACtC,EAAKuG,MAAM4C,wB,EAGbK,wBAA0B,SAAC/D,GAAD,OAAe,SAAC9H,GACxC,EAAK4I,MAAM1E,SAAS4H,qBAAqBhE,EAAG9H,GAC5C,EAAK4I,MAAM4C,wB,4CAGb,WAAU,IAAD,OACCtH,EAAanE,KAAK6I,MAAlB1E,SAER,OACE,uBAAK+F,UAAU,YAAf,UACE,8BAAKlD,GAAW7C,EAASxF,QAEzB,eAAC,GAAD,UACE,eAAC,GAAD,CACEuL,UAAU,cACV7P,GAAE,mBAAc8J,EAASxF,KAAvB,WACFoL,MAAM,UACNjB,aAAc,EACd7I,MAAOkE,EAASoD,OAChBkC,QAASzJ,KAAK0L,sBAIlB,eAAC,GAAD,UACE,eAAC,GAAD,CACExB,UAAU,cACV7P,GAAE,mBAAc8J,EAASxF,KAAvB,UACFoL,MAAM,SACNjB,aAAc,EACd7I,MAAOkE,EAASlJ,MAChBwO,QAASzJ,KAAK2L,qBAIlB,gBAAC,GAAD,WACE,gBAAC,GAAD,CACEtR,GAAE,mBAAc8J,EAASxF,KAAvB,cACFoL,MAAM,aACNjB,aAAa,GACb7I,MAAOkE,EAASuD,SAAS3G,KACzBgK,SAAU/K,KAAKuL,wBALjB,UAOE,eAAC,GAAON,KAAR,CAAalB,MAAM,GAAG9J,MAAM,KAC3BmI,GAAcjE,EAASxF,MAAMjE,KAAI,SAAC4H,GAAD,OAChC,eAAC,GAAO2I,KAAR,CACElB,MAAOrQ,EAAY4I,GAAM/C,KACzBU,MAAOqC,GACFA,SAKX,mCAEA,6BACGD,GACC8B,EAASuD,SAAS3G,KAClBoD,EAASuD,SAASzH,YAKxB,0CACCkE,EAASwD,SAASjN,KAAI,SAACsR,EAASjE,GAAV,OACrB,gBAAC,GAAD,WACE,gBAAC,GAAD,CACE1N,GAAE,mBAAc8J,EAASxF,KAAvB,qBAAwCoJ,GAC1CgC,MAAM,GACNjB,aAAa,GACb7I,MAAO+L,EAAQjL,KACfgK,SAAU,EAAKa,uBAAuB7D,GACtCiB,cAAc,EANhB,UAQE,eAAC,GAAOiC,KAAR,CAAalB,MAAM,GAAG9J,MAAM,KAC3ByI,GAAahO,KAAI,SAAC4H,GAAD,OAChB,eAAC,GAAO2I,KAAR,CACElB,MAAOrQ,EAAY4I,GAAM/C,KACzBU,MAAOqC,GACFA,SAKX,mCAEA,eAAC,GAAD,CACEjI,GAAE,mBAAc8J,EAASxF,KAAvB,qBAAwCoJ,EAAxC,UACFgC,MAAM,GACNjB,aAAcrK,IACdwB,MAAO+L,EAAQ5E,SACfqC,QAAS,EAAKqC,wBAAwB/D,GACtCiB,cAAc,EACdkB,UAAU,iBA5BCnC,a,GArFGoC,IAAMC,W,2BCKrB6B,GAAmC,CAC9CjH,QAAS,MACTF,OAAQ,OACRJ,SAAU,MACVD,QAAS,MACTI,SAAU,KACVF,QAAS,MACTQ,iBAAkB,MAClBd,eAAgB,MAChBY,SAAU,MACVC,QAAS,OAOJ,SAASgH,GACdC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjJ,EACAkJ,EACA7I,GACwB,IAAD,EACnB8I,EAAS,EACTC,EAA0C,GAC1CC,EAA+BJ,EAAShJ,UAGtCqJ,EAAgBC,GAAsBN,EAAShJ,WAW/CuJ,EAAM,UAVW3J,GACrBoJ,EAASnJ,UACTmJ,EAASlJ,OACTC,EACAsJ,EACAL,EAAS/I,kBACT+I,EAAS9I,iBACT8I,EAAS7I,iBACTC,GAE4BS,sBAAlB,QAAoC,EAE5C2I,EAAcvK,KAAKwK,MAAMZ,EAAcU,GAAUd,GAAS5H,gBAExD6I,EAAkBL,EACrBnS,KAAI,SAACyJ,GAAD,OAAcA,EAASuD,SAAS3G,QACpCU,QAAO,SAACiG,GAAD,MAA2B,mBAAbA,KAA+B3E,OA2DvD,OAzDIiK,EAAc,EAChBA,EAAc,EACLA,EAAc,GAAK,EAAIE,KAChCF,EAAc,GAAK,EAAIE,IAIJC,GACnBhB,EACAC,EAAWY,EACXR,EAAShJ,UAAU9I,KAAI,SAACyJ,GAAD,OAAcA,EAASuD,SAAS3G,QACvDiM,GAGW9L,SAAQ,SAACkM,GAAiB,IAAD,YAEpC,GAAIJ,EAAc,EAAG,CACnB,IAAMK,EAAiBD,EAAYE,MACjC,kBAAuB,mBAAvB,EAAGvM,aAEkBlC,IAAnBwO,EACFD,EAAYG,KAAK,CAAExM,KAAM,iBAAkByM,MAAOR,IAElDK,EAAeG,OAASR,EAI5B,IAAMxJ,EAAYsJ,GAAsBN,EAAShJ,YA+IrD,SACE4J,EACA5J,GAEA,IAAMmE,EAAWnE,EAAU9B,SAAQ,SAACyC,GAAD,OAAcA,EAASwD,YAC1DyF,EAAYlM,SAAQ,YAAsB,IAAnBH,EAAkB,EAAlBA,KAAMyM,EAAY,EAAZA,MACrBrF,EAAUR,EAAS2F,MAAK,SAACG,GAAD,OAAeA,EAAU1M,OAASA,KAChE,QAAgBlC,IAAZsJ,EAAuB,CAAC,IAAD,EACrBuF,EAAS,EACb,UAAAlK,EACG8J,MAAK,SAACnJ,GAAD,OACJA,EAASwD,SAAS2F,MAAK,SAACG,EAAW1F,GAEjC,OADA2F,EAAS3F,EACFpH,MAAM8M,EAAUxN,oBAJ7B,SAOI0N,gBAAgBD,EAAQzB,GAASlL,GAAQyM,QAE7CrF,EAAQD,SAASC,EAAQlI,MAAQgM,GAASlL,GAAQyM,MA/JpDI,CAAoBR,EAAa5J,GAEjC,IAAMe,EAAanB,GACjBoJ,EAASnJ,UACTmJ,EAASlJ,OACTC,EACAC,EACAgJ,EAAS/I,kBACT+I,EAAS9I,iBACT8I,EAAS7I,iBACTC,GAIIiK,EAAS,oBACbrB,EAASnJ,UAAU3D,iBADN,iBACb,EAA+B4M,UADlB,iBACb,EAAqDC,UADxC,iBACb,SAAyE,CACvExI,MAAOQ,EACPuJ,SAAUrB,WAHC,iBACb,EAGIsB,cAJS,aACb,EAGa,UAJA,QAIM,EAGjBF,EAAYnB,IACdC,EAAsBS,EACtBR,EAAmBpJ,EACnBkJ,EAASmB,MAIN,CACLG,aAAcrB,EACdnJ,UAAWoJ,GAKf,SAASO,GACPhB,EACAC,EACA6B,EACAjB,GAEA,GAA6B,IAAzBb,EAAcpJ,QAA6B,IAAbqJ,EAChC,MAAO,GAGT,IAAM8B,EAAoBD,EAAUxM,QAClC,SAACiG,GAAD,OAAcyE,EAAc,KAAOzE,KACnC3E,OACEoL,EAAkB1L,KAAK2L,IAA8B,GAAzB,EAAIF,GAAwB9B,GACnC,mBAArBD,EAAc,KAChBgC,GAAmBnB,GAKrB,IAFA,IAAMqB,EAAqC,GAbrB,WAebtG,GACP,IAAMuG,EAA8B,CAAC,CAAEvN,KAAMoL,EAAc,GAAIqB,MAAOzF,IAEhEwG,EAAmBpB,GACvBhB,EAAclJ,MAAM,GACpBmJ,EAAWrE,EACXkG,EACAjB,GAG8B,IAA5BuB,EAAiBxL,OACnBsL,EAAad,KAAKe,GAElBD,EAAad,KAAb,MAAAc,EAAY,YACPE,EAAiB7T,KAAI,SAAC0S,GAAD,OAAiBkB,EAAQvM,OAAOqL,SAdrDrF,EAAIoG,EAAiBpG,GAAK,EAAGA,IAAM,EAAnCA,GAmBT,OAAOsG,EAsCT,SAASvB,GAAsB0B,GAC7B,IAAMhL,EAAYgL,EAAc9T,KAAI,SAACyJ,GACnC,OAAO,IAAImD,GACTnD,EAASxF,KACTwF,EAASoD,OACTpD,EAASlJ,MACTkJ,EAASuD,SAAS3G,SAKlB0N,EAAY,EACZC,EAAY,EAahB,OAZA9N,OAAOK,QAAQgL,IAAU/K,SAAQ,YAAoB,IAAD,mBAAjBH,EAAiB,KAAXd,EAAW,KAClDuD,EAAUiL,GAAW5C,eAAe6C,EAAW3N,GAC/CyC,EAAUiL,GAAWd,gBAAgBe,EAAmB,EAARzO,KAC1CyO,GAAa,IACjBA,EAAY,IACND,GAAa,IAEjBA,EAAY,OAKXjL,G,SF1NG0H,K,gBAAAA,E,cAAAA,E,eAAAA,Q,cAMAC,K,cAAAA,E,YAAAA,E,kBAAAA,E,UAAAA,E,cAAAA,E,YAAAA,E,qBAAAA,Q,cAUAC,K,YAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,cAAAA,E,eAAAA,Q,cASAC,K,gBAAAA,E,kBAAAA,E,SAAAA,Q,SGzCAsD,GCkEGC,G,4MAjDbhG,MAAuB,CACrB3I,MAAO,EAAK4I,MAAMC,c,EAGpBC,aAAe,uBAA2BlK,IAArB,EAAKgK,MAAM5I,O,EAEhC+I,aAAe,kCAAM,EAAKH,MAAMG,oBAAjB,U,EAEfC,gBAAkB,SAACC,GACjB,IAAMjJ,EAAQiJ,EAAE2B,OAAOgE,QACvB,EAAKxF,SAAS,CAAEpJ,W,EAGlB6K,aAAe,SAAC5B,GACd,IAAMjJ,EAAQiJ,EAAE2B,OAAOgE,QAEnB,EAAK9F,oBACqBlK,IAAxB,EAAKgK,MAAMkC,UACb,EAAKlC,MAAMkC,SAAS9K,GAGtB,EAAKoJ,SAAS,CAAEpJ,UAAS,WAEnB,EAAK4I,MAAMkC,UAAU,EAAKlC,MAAMkC,SAAS9K,O,4CAKnD,WAAU,IAAD,EACDA,EAAQD,KAAK+I,eAAiB/I,KAAK6I,MAAM5I,MAAQD,KAAK4I,MAAM3I,MAClE,OACE,+BACE,gBAAC0J,GAAA,EAAKmF,MAAN,CACEnQ,KAAK,WACLuL,UAAS,6BAAclK,KAAK6I,MAAMqB,iBAAzB,QAAsC,IAC/C7P,GAAI2F,KAAK6I,MAAMxO,GAHjB,UAKE,eAACsP,GAAA,EAAKmF,MAAMlF,MAAZ,UAAmB5J,KAAK6I,MAAMkB,QAC9B,eAACJ,GAAA,EAAKmF,MAAMC,MAAZ,CACEpQ,KAAK,WACLkQ,QAAS5O,EACT8K,SAAU/K,KAAK8K,wB,GA5CJX,IAAMC,WCkPd4E,G,4MAlNbpG,MAA6B,CAC3BqG,aAAc,GACdC,iBAAkB,GAClB7C,YAAa,IACb8C,eAAgB,GAChB/C,SAAU,I,EAGZgD,YAAc,SAAChD,GACb,EAAK/C,SAAS,CAAE+C,c,EAGlBiD,oBAAsB,SAACtO,GAAD,OAAkB,SAACuO,GACnCA,EACG,EAAK1G,MAAMsG,iBAAiBpN,SAASf,IACxC,EAAKsI,SAAS,CACZ6F,iBAAiB,GAAD,mBAAM,EAAKtG,MAAMsG,kBAAjB,CAAmCnO,MAInD,EAAK6H,MAAMsG,iBAAiBpN,SAASf,IACvC,EAAKsI,SAAS,CACZ6F,iBAAkB,EAAKtG,MAAMsG,iBAAiBzN,QAC5C,SAAC8N,GAAD,OAAaA,IAAYxO,S,EAOnCyO,eAAiB,SAACvP,GACZU,MAAMV,GACR,EAAKoJ,SAAS,CAAEgD,YAAa,IAE7B,EAAKhD,SAAS,CAAEgD,YAAapM,K,EAIjCwP,oBAAsB,SAACxP,GACP,KAAVA,EACF,EAAKoJ,SAAS,CAAEqG,sBAAkB7Q,IAElC,EAAKwK,SAAS,CAAEqG,iBAAkBzP,K,EAItC0P,kBAAoB,SAAC1P,GACnB,EAAKoJ,SAAS,CAAE8F,eAAgBlP,K,EAGlC2P,gBAAkB,WAChB,QACkC/Q,IAAhC,EAAK+J,MAAM8G,kBACmB,KAA9B,EAAK9G,MAAMuG,eACX,CACA,IAAMU,EAAS3D,GACb,EAAKtD,MAAMsG,iBACX,EAAKtG,MAAMwD,SACX,EAAKxD,MAAMyD,YAAc,IACzB,EAAKzD,MAAM8G,iBACX,EAAK9G,MAAMuG,eACX,EAAKtG,MAAM2D,SACX,EAAK3D,MAAMtF,mBACX,EAAKsF,MAAM4D,eACX,EAAK5D,MAAMjF,YAGb,EAAKiF,MAAMiH,iBAAiB,CAAEtM,UAAWqM,EAAOrM,YAChD,EAAKqF,MAAMkH,YAAY,CAAEvM,UAAWqM,EAAOrM,YAC3C,EAAK6F,SAAS,CAAE4F,aAAcY,EAAO7B,iB,4CAIzC,WAAU,IAAD,WACP,OACE,eAACgC,GAAA,EAAD,UACE,gBAACC,GAAA,EAAD,CAAM/F,UAAU,oFAAhB,UACE,gBAAC8F,GAAA,EAAUE,OAAX,CACElF,GAAIiF,KAAKE,OACTC,SAAS,IACTlG,UAAU,0BAHZ,UAKE,oDACA,6DAEF,eAAC8F,GAAA,EAAUK,SAAX,CAAoBD,SAAS,IAA7B,SACE,gBAACH,GAAA,EAAKK,KAAN,WACE,uBAAKpG,UAAU,cAAf,UACE,oDAEA,eAAC,GAAD,UACE,eAAC,GAAD,CACEA,UAAU,cACV7P,GAAI,4BACJ0P,MAAM,mBACNjB,aAAc,GACd7I,MAAOD,KAAK4I,MAAMwD,SAClB3C,QAASzJ,KAAKoP,mBAKpB,uBAAKlF,UAAU,cAAf,UACE,8DACCtJ,OAAOC,KAAKoL,IAAUvR,KAAI,SAACqG,GAAD,OACzB,eAAC,GAAD,UACE,eAAC,GAAD,CACE1G,GAAE,sCAAiC0G,GACnCgJ,MAAK,UAAKrQ,EAAYqH,GAAMxB,MAC5BuJ,cAAc,EACd7I,MAAO,EAAK2I,MAAMsG,iBAAiBpN,SAASf,GAC5CgK,SAAU,EAAKsE,oBAAoBtO,MANxBA,SAYnB,sBAAKmJ,UAAU,cAAf,SACE,eAAC,GAAD,UACE,eAAC,GAAD,CACEA,UAAU,aACV7P,GAAI,yBACJ0P,MAAM,gBACNjB,aAAc,IACd7I,MAAOD,KAAK4I,MAAMyD,YAClB5C,QAASzJ,KAAKwP,qBAKpB,uBAAKtF,UAAU,cAAf,UACE,eAAC,GAAD,UACE,gBAAC,GAAD,CACE7P,GAAE,+BACF0P,MAAM,sBACNjB,aAAa,GACb7I,MAAK,UAAED,KAAK4I,MAAM8G,wBAAb,QAAiC,GACtC3E,SAAU/K,KAAKyP,oBALjB,UAOE,eAAC,GAAOxE,KAAR,CAAahL,MAAM,GAAG8J,MAAM,KAC5B,eAAC,GAAOkB,KAAR,CACEhL,MAAOiL,GAAWqF,OAClBxG,MAAO/C,GAAWkE,GAAWqF,UAE/B,eAAC,GAAOtF,KAAR,CACEhL,MAAOiL,GAAWsF,MAClBzG,MAAO/C,GAAWkE,GAAWsF,SAE/B,eAAC,GAAOvF,KAAR,CACEhL,MAAOiL,GAAWuF,MAClB1G,MAAO/C,GAAWkE,GAAWuF,cAKnC,eAAC,GAAD,UACE,gBAAC,GAAD,CACEpW,GAAE,6BACF0P,MAAM,sBACNjB,aAAa,GACb7I,MAAK,UAAED,KAAK4I,MAAMuG,sBAAb,QAA+B,GACpCpE,SAAU/K,KAAK2P,kBALjB,UAOE,eAAC,GAAO1E,KAAR,CAAahL,MAAM,GAAG8J,MAAM,KAC3B/J,KAAK4I,MAAM8G,iBACR9O,OAAOC,KACLb,KAAK6I,MAAM6H,aAAa1Q,KAAK4I,MAAM8G,mBACnChV,KAAI,SAACL,GAAD,OACJ,eAAC,GAAO4Q,KAAR,CAEEhL,MAAO5F,EACP0P,MAAOnQ,EAAkBS,IAFpBA,MAKT,aAKV,sBAAK6P,UAAU,cAAf,SACE,eAAC,GAAD,UACE,eAACyG,GAAA,EAAD,CACEC,QAAQ,YACR3G,KAAK,KACL4G,QAAS7Q,KAAK4P,gBAHhB,0BAUJ,uBAAK1F,UAAU,cAAf,UACGlK,KAAK4I,MAAMqG,aAAalM,OAAS,GAChC,2DAGD/C,KAAK4I,MAAMqG,aAAavU,KAAI,gBAAGqG,EAAH,EAAGA,KAAMyM,EAAT,EAASA,MAAT,OAC3B,+BACG9T,EAAYqH,GAAMxB,KADrB,KAC6BiO,IADrBzM,uB,GAzMGoJ,IAAMC,WCcpB0G,G,4MAlCbrF,oBAAsB,WACpB,IAAMjI,EAAS,YAAO,EAAKqF,MAAM2D,SAAShJ,WAC1C,EAAKqF,MAAMiH,iBAAiB,CAAEtM,cAC9B,EAAKqF,MAAMkH,YAAY,CAAEvM,e,4CAG3B,WAAU,IAAD,OACDgJ,EAAWxM,KAAK6I,MAAM2D,SAE5B,OACE,gBAACuE,EAAA,EAAD,CACE1W,GAAG,kBACH6P,UAAU,sDACV8G,GAAG,OACHC,GAAI,GAJN,UAME,sBAAK/G,UAAU,mBAAf,SACE,8CAEF,eAAC,GAAD,eAAoBlK,KAAK6I,QACzB,sBAAKqB,UAAU,eAAf,SACGsC,EAAShJ,UAAU9I,KAAI,SAACyJ,GAAD,OACtB,eAAC,GAAD,CACEA,SAAUA,EACVsH,oBAAqB,EAAKA,qBACrBtH,EAASxF,kB,GA1BCwL,IAAMC,WCdd8G,G,WACnB,WAAY7W,GAAiC,IAArB4E,EAAoB,uDAAH,EAAG,yBAKpCK,IAAc,GALsB,KAyB5CC,UAzB4C,OA0B5C4R,qBA1B4C,OA2B5CC,kBA3B4C,OA6BpCC,QAAkB,EA7BkB,KA2C5C1P,QAA+B,GA3Ca,KA4C5CoC,MAAe,GA5C6B,KA6C5CuN,aAAsC,GA7CM,KA8C5CC,WAAiC,QA7ChB1S,IAAXI,IAAsBe,KAAKqR,QAAUpS,GACzCe,KAAK3F,GAAKA,E,oCAIZ,WACE,OAAO2F,KAAKV,K,IAEd,SAAOW,GAELD,KAAKV,IAAMW,EAEX,IAAMC,EAAOpB,GAAmBmB,GAChCD,KAAKT,KAAL,OAAYW,QAAZ,IAAYA,OAAZ,EAAYA,EAAMX,KAClBS,KAAKmR,gBAAL,OAAuBjR,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAMiR,gBAE7BnR,KAAKoR,aAAerS,GAAwBkB,GAE5CD,KAAKsR,aAAetR,KAAKwR,kBAAkBxR,KAAKf,QAChDe,KAAKuR,WAAavR,KAAKyR,gBAAgBzR,KAAKf,QAC5Ce,KAAK+D,MAAQ/D,KAAKoE,WAClBpE,KAAK2B,QAAU3B,KAAK0R,WAAW1R,KAAKf,U,kBAQtC,WACE,OAAOe,KAAKqR,S,IAEd,SAAWpR,GACT,IAAM0R,EAAa3R,KAAKf,OACxBe,KAAKqR,QAAUpR,EAEfD,KAAKsR,aAAetR,KAAKwR,kBAAkBxR,KAAKf,QAChDe,KAAKuR,WAAavR,KAAKyR,gBAAgBzR,KAAKf,QAC5Ce,KAAK+D,MAAQ/D,KAAKoE,WAClBpE,KAAK2B,QAAU3B,KAAK0R,WAAW1R,KAAKf,OAAQ0S,K,8BAS9C,WACE,MAAO,K,6BAIT,SAAgB1S,GACd,OAAOe,KAAK4R,mBAAmBnQ,QAC7B,SAACoQ,GAAD,OAAc5S,GAAU4S,EAAS5S,Y,+BAIrC,SAAkBA,GAAwC,IAAD,OACvD,YAA6BJ,IAAzBmB,KAAKmR,gBAAsC,GAExCnR,KAAKmR,gBACT1P,QAAO,SAACqQ,GAAD,OAAe7S,GAAU6S,KAChCpX,KAAI,SAACoX,GAAD,uBAAe,EAAKV,oBAApB,aAAe,EAAoBU,MACvCrQ,QAAO,SAACJ,GAAD,YAAmDxC,IAAVwC,O,sBAGrD,WACE,IAAI0C,EAAe,GAEfwN,EAAavR,KAAKsR,aAyBtB,OAxBU,OAAVC,QAAU,IAAVA,KAAYrQ,SAAQ,SAAC2Q,GAEX,OAARA,QAAQ,IAARA,KAAUE,QAAQ7Q,SAAQ,SAAC8Q,QACKnT,IAA1BkF,EAAMiO,EAAUjR,MAClBgD,EAAMiO,EAAUjR,OAASiR,EAAU/R,MAEnC8D,EAAMiO,EAAUjR,MAAQiR,EAAU/R,YAMvBD,KAAKuR,WAAW7P,SAC/B,SAACmQ,GAAD,uBAAcA,EAASI,kBAAvB,QAAqC,MAG5B/Q,SAAQ,SAAC8Q,QACYnT,IAA1BkF,EAAMiO,EAAUjR,MAClBgD,EAAMiO,EAAUjR,OAASiR,EAAU/R,MAEnC8D,EAAMiO,EAAUjR,MAAQiR,EAAU/R,SAI/B8D,I,wBAGT,SAAW9E,EAAgB0S,GACzB,QAAmB9S,IAAf8S,GAA4BhR,MAAMgR,GAIpC,OAHgB3R,KAAKuR,WAAW7P,SAC9B,SAACmQ,GAAD,uBAAcA,EAASlQ,eAAvB,QAAkC,MAErBjH,KAAI,SAAC6G,GAAD,OAAY,IAAIA,KAC9B,GAAItC,IAAW0S,EACpB,OAAO3R,KAAK2B,QACP,GAAI1C,EAAS0S,EAAY,CAC9B,IAAM/P,EAAe5B,KAAK2B,QAAQjH,KAAI,qBAAGL,MACnCwH,EAAa7B,KAAKuR,WACrB7P,SAAQ,SAACmQ,GAAD,uBAAcA,EAASlQ,eAAvB,QAAkC,MAC1CjH,KAAI,SAAC6G,GAAD,OAAY,IAAIA,KACpBE,QAAO,gBAAGpH,EAAH,EAAGA,GAAH,OAAauH,EAAaE,SAASzH,MAC7C,OAAO2F,KAAK2B,QAAQI,OAAOF,GAE3B,IAAMG,EAAgBhC,KAAKuR,WACxB7P,SAAQ,SAACmQ,GAAD,uBAAcA,EAASlQ,eAAvB,QAAkC,MAC1CjH,KAAI,SAAC6G,GAAD,OAAY,IAAIA,GAASlH,MAChC,OAAO2F,KAAK2B,QAAQF,QAAO,gBAAGpH,EAAH,EAAGA,GAAH,OAAY2H,EAAcF,SAASzH,Q,2BAIlE,WACE,OAAO2F,KAAKuR,WACT7W,KAAI,qBAAGwH,aACPT,QAAO,SAACU,GAAD,YAAyCtD,IAAVsD,O,+BAG3C,WACE,OAAOnC,KAAKuR,WACT7W,KAAI,qBAAG0H,iBACPX,QAAO,SAACU,GAAD,YAA6CtD,IAAVsD,S,KC3I5B+P,G,sKACnB,WACE,MAAO,CAACC,Q,GAFuCjB,IAQ7CiB,GAA6C,CACjDlT,OAAQ,EAERgT,WAAY,CACV,CACElR,KAAM,kBACNd,MARYjB,GAA0B,wBAAyB,GAQ9C,MCdFoT,G,sKACnB,WACE,MAAO,CAACC,Q,GAF6BnB,IAMnCoB,GAAYtT,GAA0B,cAAe,GAErDqT,GAAmC,CACvCpT,OAAQ,EAERgT,WAAY,CAAC,QAAS,OAAQ,UAAW,MAAO,QAAS,QAAQvX,KAC/D,SAAC6X,GACC,MAAO,CACLxR,KAAK,GAAD,OAAKwR,EAAL,OACJtS,MAAOqS,GAAU,QCjBJ/Q,GAGnB,WAAYlH,GAAa,yBAFzBA,QAEwB,EACtB2F,KAAK3F,GAAKA,GCJOmY,G,kDAGnB,aAAqD,IAAD,EAAxCnY,EAAwC,uDAA3B,GAAIyX,EAAuB,uDAAH,EAAG,4BAClD,cAAMzX,IAHRyX,eAEoD,EAElD,EAAKA,UAAYA,EAFiC,E,UAHPvQ,ICK1BkR,G,sKACnB,WACE,MAAO,CAACC,GAAkBC,Q,GAFazB,IAMrCoB,GAAYtT,GAA0B,gBAAiB,GAEvD0T,GAAqC,CACzCzT,OAAQ,EAERgT,WAAY,CACV,CACElR,KAAM,iBACNd,MAAOqS,GAAU,IAEnB,CACEvR,KAAM,kBACNd,MAAOqS,GAAU,MAKjBM,GAAY5T,GAA0B,gBAAiB,GAsBvD2T,GAAqC,CACzC1T,OAAQ,EAER0C,QAAS,C,kDAjBT,aAAe,IAAD,8BACZ,cAAM,mBAAoB,IAH5B1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,IAAZ,EAAK9D,QACP8D,EAAMsC,eAAiBuM,GAAU,IAAV,UAAgB7O,EAAMsC,sBAAtB,QAAwC,GAC/DtC,EAAMuC,gBAAkBsM,GAAU,IAAV,UAAgB7O,EAAMuC,uBAAtB,QAAyC,MARzD,E,UALNkM,MC7BWK,G,sKACnB,WACE,MAAO,CAACC,Q,GAFyB5B,IAQ/B4B,GAA+B,CACnC7T,OAAQ,EAERgT,WAAY,CACV,CACElR,KAAM,gBACNd,MARYjB,GAA0B,UAAW,GAQhC,MCdF+T,G,sKACnB,WACE,MAAO,CAACC,Q,GAFkC9B,IAQxC8B,GAAwC,CAC5C/T,OAAQ,EAMRgT,WAAY,CACV,CACElR,KAAM,iBACNd,MAZYjB,GAA0B,mBAAoB,GAYzC,MCdFiU,G,sKACnB,WACE,MAAO,CAACC,Q,GAFoChC,IAM1C0B,GAAY5T,GAA0B,qBAAsB,GAsB5DkU,GAA0C,CAC9CjU,OAAQ,EAER0C,QAAS,C,kDAhBT,aAAe,IAAD,8BACZ,cAAM,wBAAyB,IAJjC1B,MAAQ,GAGM,EAFdkT,QAAU,CAAChI,GAAQiI,KAAMjI,GAAQkI,QAASlI,GAAQmI,MAAOnI,GAAQoI,MAEnD,EAIdnR,cAAgB,CACdkC,MAAO,SAACwJ,GACa,KAAf,EAAK7N,OACP6N,EAAS0F,kBAAkBC,IAAI,EAAKxT,MAAkB2S,GAAU,MAPxD,E,UANNJ,MCbWkB,G,sKACnB,WACE,MAAO,CAACC,Q,GAFiCzC,IAQvCyC,GAAuC,CAC3C1U,OAAQ,EAIRgT,WAAY,CACV,CACElR,KAAM,kBACNd,MAVYjB,GAA0B,kBAAmB,GAUxC,MCVF4U,G,sKACnB,WACE,MAAO,CAACC,Q,GAF8B3C,IAMpC0B,GAAY5T,GAA0B,uBAAwB,GA4B9D6U,GAAoC,CACxC5U,OAAQ,EAER0C,QAAS,C,kDAvBT,aAAe,IAAD,8BACZ,cAAM,wBAAyB,IAHjC1B,MAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACN,GAAI,EAAK9D,MAAQ,EAAG,CAAC,IAAD,IAEZ6T,EAAK,UADU/U,GAAwB,wBAClB,GAAGgT,QAAQzE,MACpC,kBAAuB,iBAAvB,EAAGvM,eADM,aAAG,EAEXd,MAEC8T,EAAS,EAAK9T,MACd8T,EAAS,IAAGA,EAAS,GACzBhQ,EAAM0B,aAAesO,GAAUD,EAAQ,IAAlB,UAAwB/P,EAAM0B,oBAA9B,QAA8C,MAd3D,E,UALN+M,KA8BRP,WAAY,CACV,CACElR,KAAM,mBACNd,MAAO2S,GAAU,IAEnB,CACE7R,KAAM,kBACNd,MAAO2S,GAAU,IAEnB,CACE7R,KAAM,mBACNd,MAAO2S,GAAU,IAEnB,CACE7R,KAAM,eACNd,MAAO2S,GAAU,MCzDFoB,G,sKACnB,WACE,MAAO,CAACC,GAAmBC,Q,GAFahD,IAQtC+C,GAAsC,CAC1ChV,OAAQ,EAERgT,WAAY,CACV,CACElR,KAAM,gBACNd,MARYjB,GAA0B,iBAAkB,GAQvC,MAKjB4T,GAAY5T,GAA0B,iBAAkB,GAqBxDkV,GAAsC,CAC1CjV,OAAQ,EAER0C,QAAS,C,kDAhBT,aAAe,IAAD,8BACZ,cAAM,oBAAqB,IAH7B1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMW,SAAWkO,GAAU,IAAV,UAAgB7O,EAAMW,gBAAtB,QAAkC,MAP3C,E,UALN8N,O,Sf1BE7D,O,mBAAAA,I,gBAAAA,Q,SgBGSwF,G,sKACnB,WACE,MAAO,CAACC,Q,GAFqClD,IAM3C0B,GAAY5T,GAA0B,sBAAuB,GAE7DoV,GAA2C,CAC/CnV,OAAQ,EAERiD,UAAW,CACTmS,SAAU1F,GAAS2F,KACnBhQ,MAAO,SAACP,GAAkB,IAAD,EACnB0C,EAAgBmM,GAAU,GAAK7O,EAAMM,eACrCoC,EAAgBmM,GAAU,KAC5BnM,EAAgBmM,GAAU,IAG5B7O,EAAM0C,cAAgBA,GAAa,UAAI1C,EAAM0C,qBAAV,QAA2B,MClB/C8N,G,sKACnB,WACE,MAAO,CAACC,Q,GAF4BtD,IAMlC0B,GAAY5T,GAA0B,aAAc,GAqBpDwV,GAAkC,CACtCvV,OAAQ,EAER0C,QAAS,C,kDAhBT,aAAe,IAAD,8BACZ,cAAM,gBAAiB,IAHzB1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMqC,SAAWwM,GAAU,IAAV,UAAgB7O,EAAMqC,gBAAtB,QAAkC,MAP3C,E,UALNoM,MCTWiC,G,sKACnB,WACE,MAAO,CAACC,Q,GAF2BxD,IAMjC0B,GAAY5T,GAA0B,YAAa,GAqBnD0V,GAAiC,CACrCzV,OAAQ,EAER0C,QAAS,C,kDAhBT,aAAe,IAAD,8BACZ,cAAM,eAAgB,IAHxB1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMkB,SAAW2N,GAAU,IAAV,UAAgB7O,EAAMkB,gBAAtB,QAAkC,MAP3C,E,UALNuN,MCTWmC,G,sKACnB,WACE,MAAO,CAACC,Q,GAF4B1D,IAMlC0B,GAAY5T,GAA0B,aAAc,GAqBpD4V,GAAkC,CACtC3V,OAAQ,EAER0C,QAAS,C,kDAhBT,aAAe,IAAD,8BACZ,cAAM,gBAAiB,IAHzB1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMoB,iBAAmByN,GAAU,IAAV,UAAgB7O,EAAMoB,wBAAtB,QAA0C,MAP3D,E,UALNqN,MCTWqC,G,sKACnB,WACE,MAAO,CAACC,Q,GAFiC5D,IAMvC0B,GAAY5T,GAA0B,kBAAmB,GAwCzD8V,GAAuC,CAC3C7V,OAAQ,EAER0C,QAAS,C,kDAnCT,aAAe,IAAD,8BACZ,cAAM,yBAA0B,IAHlC1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMkB,SAAW2N,GAAU,IAAV,UAAgB7O,EAAMkB,gBAAtB,QAAkC,MAP3C,E,UALNuN,I,kDAwBR,aAAe,IAAD,8BACZ,cAAM,2BAA4B,IAHpCvS,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMkB,SAAW2N,GAAU,IAAV,UAAgB7O,EAAMkB,gBAAtB,QAAkC,MAP3C,E,UALNuN,MC5BWuC,G,sKACnB,WACE,MAAO,CAACC,Q,GAFgC9D,IAMtC0B,GAAY5T,GAA0B,iBAAkB,GAqBxDgW,GAAsC,CAC1C/V,OAAQ,EAER0C,QAAS,C,kDAhBT,aAAe,IAAD,8BACZ,cAAM,oBAAqB,IAH7B1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMqC,SAAWwM,GAAU,IAAV,UAAgB7O,EAAMqC,gBAAtB,QAAkC,MAP3C,E,UALNoM,MCTWyC,G,sKACnB,WACE,MAAO,CAACC,Q,GAF4BhE,IAMlC0B,GAAY5T,GAA0B,aAAc,GAqBpDkW,GAAkC,CACtCjW,OAAQ,EAER0C,QAAS,C,kDAhBT,aAAe,IAAD,8BACZ,cAAM,gBAAiB,IAHzB1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMqC,SAAWwM,GAAU,IAAV,UAAgB7O,EAAMqC,gBAAtB,QAAkC,MAP3C,E,UALNoM,MCTW2C,G,sKACnB,WACE,MAAO,CAACC,Q,GAF+BlE,IAMrC0B,GAAY5T,GAA0B,gBAAiB,GAqBvDoW,GAAqC,CACzCnW,OAAQ,EAER0C,QAAS,C,kDAhBT,aAAe,IAAD,8BACZ,cAAM,mBAAoB,IAH5B1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMsR,YAAczC,GAAU,IAAV,UAAgB7O,EAAMsR,mBAAtB,QAAqC,MAPjD,E,UALN7C,MCTW8C,G,sKACnB,WACE,MAAO,CAACC,Q,GAFsCrE,IAM5C0B,GAAY5T,GAA0B,uBAAwB,GAqB9DuW,GAA4C,CAChDtW,OAAQ,EAER0C,QAAS,C,kDAhBT,aAAe,IAAD,8BACZ,cAAM,0BAA2B,IAHnC1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMuC,gBAAkBsM,GAAU,IAAV,UAAgB7O,EAAMuC,uBAAtB,QAAyC,MAPzD,E,UALNkM,MCTWgD,G,sKACnB,WACE,MAAO,CAACC,Q,GAF8BvE,IAMpC0B,GAAY5T,GAA0B,eAAgB,GAuBtDyW,GAAoC,CACxCxW,OAAQ,EAER0C,QAAS,C,kDAjBT,aAAe,IAAD,8BACZ,cAAM,kBAAmB,IAJ3B1B,MAAQ,GAGM,EAFdkT,QAAU,CAAC,OAAQ,UAAW,QAAS,QAEzB,EAIdjR,UAAY,CACVoC,MAAO,SAACP,GACkB,IAAD,EAAJ,KAAf,EAAK9D,QACP8D,EAAM,GAAD,OAAI,EAAK9D,MAAT,aACH2S,GAAU,IAAV,UAAgB7O,EAAM,GAAD,OAAI,EAAK9D,MAAT,oBAArB,QAAkD,MAR5C,E,UANNuS,MCTWkD,G,sKACnB,WACE,MAAO,CAACC,Q,GAFiCzE,IAMvC0B,GAAY5T,GAA0B,kBAAmB,GAsBzD2W,GAAuC,CAC3C1W,OAAQ,EAER0C,QAAS,C,kDAjBT,aAAe,IAAD,8BACZ,cAAM,qBAAsB,IAH9B1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,IAAZ,EAAK9D,QACP8D,EAAMsC,eAAiBuM,GAAU,IAAV,UAAgB7O,EAAMsC,sBAAtB,QAAwC,GAC/DtC,EAAMuC,gBAAkBsM,GAAU,IAAV,UAAgB7O,EAAMuC,uBAAtB,QAAyC,MARzD,E,UALNkM,MCTWoD,G,sKACnB,WACE,MAAO,CAACC,Q,GAF8B3E,IAMpC0B,GAAY5T,GAA0B,eAAgB,GAsBtD6W,GAAoC,CACxC5W,OAAQ,EAER0C,QAAS,C,kDAjBT,aAAe,IAAD,8BACZ,cAAM,kBAAmB,IAH3B1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,IAAZ,EAAK9D,QACP8D,EAAMsC,eAAiBuM,GAAU,IAAV,UAAgB7O,EAAMsC,sBAAtB,QAAwC,GAC/DtC,EAAMuC,gBAAkBsM,GAAU,IAAV,UAAgB7O,EAAMuC,uBAAtB,QAAyC,MARzD,E,UALNkM,MCTWsD,G,sKACnB,WACE,MAAO,CAACC,Q,GAF0B7E,IAMhC0B,GAAY5T,GAA0B,yBAA0B,GAsBhE+W,GAAgC,CACpC9W,OAAQ,EAER0C,QAAS,C,kDAjBT,aAAe,IAAD,8BACZ,cAAM,cAAe,IAHvB1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,IAAZ,EAAK9D,QACP8D,EAAMW,SAAWkO,GAAU,IAAV,UAAgB7O,EAAMW,gBAAtB,QAAkC,GACnDX,EAAMoC,eAAiByM,GAAU,IAAV,UAAgB7O,EAAMoC,sBAAtB,QAAwC,MARvD,E,UALNqM,MCTWwD,G,sKACnB,WACE,MAAO,CAACC,Q,GAF2B/E,IAMjC0B,GAAY5T,GAA0B,YAAa,GA0BnDiX,GAAiC,CACrChX,OAAQ,EAER0C,QAAS,C,kDArBT,aAAe,IAAD,8BACZ,cAAM,eAAgB,IAHxB1B,MAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACgB,IAAD,EAIA,IAJjB,EAAK9D,OAAS,IAChB8D,EAAMW,SAAWkO,GAAU,IAAV,UAAgB7O,EAAMW,gBAAtB,QAAkC,IAGjD,EAAKzE,OAAS,IAChB8D,EAAMW,SAAWkO,GAAU,IAAV,UAAgB7O,EAAMW,gBAAtB,QAAkC,GACnDX,EAAM2B,iBAAmBkN,GAAU,IAAV,UAAgB7O,EAAM2B,wBAAtB,QAA0C,MAZ3D,E,UALN8M,MCTW0D,G,sKACnB,WACE,MAAO,CAACC,Q,GAF2BjF,IAMjC0B,GAAY5T,GAA0B,yBAA0B,GAwBhEmX,GAAiC,CACrClX,OAAQ,EAER0C,QAAS,C,kDAnBT,aAAe,IAAD,8BACZ,cAAM,eAAgB,IAHxB1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACN,GAAI,EAAK9D,MAAO,CAAC,IAAD,MACR6T,EAAQlB,GAAU,GACxB7O,EAAMsC,eAAiByN,GAAK,UAAI/P,EAAMsC,sBAAV,QAA4B,GACxDtC,EAAMuC,gBAAkBwN,GAAK,UAAI/P,EAAMuC,uBAAV,QAA6B,GAC1DvC,EAAMwC,eAAiBuN,GAAK,UAAI/P,EAAMwC,sBAAV,QAA4B,MAVhD,E,UALNiM,MCUJ4D,GAAmD,CACvDC,sBAAuBnE,GACvBoE,YAAalE,GACbmE,cAAe9D,GACf+D,QAAS3D,GACT4D,iBAAkB1D,GAClB2D,mBAAoBzD,GACpB0D,gBAAiBjD,GACjBkD,qBAAsBhD,GACtBiD,eAAgB7C,GAChB8C,oBAAqB3C,GACrB4C,WAAYxC,GACZyC,UAAWvC,GACXwC,WAAYtC,GACZuC,gBAAiBrC,GACjBsC,eAAgBpC,GAChBqC,WAAYnC,GACZoC,cAAelC,GACfmC,qBAAsBhC,GACtBiC,aAAc/B,GACdgC,gBAAiB9B,GACjB+B,aAAc7B,GACd8B,uBAAwB5B,GACxB6B,UAAW3B,GACX4B,uBAAwB1B,IAG1B,SAAS2B,GAA0Bxd,GAAiC,IAAD,EACjE,iBAAO+b,GAAa/b,UAApB,QAA2B6W,GAGtB,SAAS4G,KAAmD,IAAnCzd,EAAkC,uDAArB,GAAI4E,EAAiB,uCAC1D8Y,EAAyBF,GAA0Bxd,GAEzD,OAAO,IAAI0d,EAAuB1d,EAAI4E,G,ICrBzB+Y,G,4MA3BbjN,SAAW,SAAC9K,GACV,EAAK4I,MAAMoP,iBAAiBhY,I,4CAG9B,WACE,OACE,gBAAC,GAAD,CACE5F,GAAE,uBAAkB2F,KAAK6I,MAAMqP,OAC/BnO,MAAM,GACNjB,aAAa,GACb7I,MAAOD,KAAK6I,MAAMsP,cAClBpN,SAAU/K,KAAK+K,SACf/B,cAAc,EANhB,UAQE,eAAC,GAAOiC,KAAR,CAAalB,MAAM,GAAG9J,MAAM,W7C0QJpB,IAA1BpF,IACFA,EAAwBmH,OAAOK,QAAQvE,GACpC0b,MAAK,qCAAcC,GAAd,UAAQ9Y,MAAR,mBAAqC+Y,GAArC,UAA+B/Y,MAA/B,OACJ8Y,EAAME,cAAcD,MAErB5d,KAAI,mCAAEL,EAAF,iBAAaA,MAGfZ,G6CjRgCiB,KAAI,SAACyd,GAAD,OACnC,eAAC,GAAOlN,KAAR,CACElB,MAAO7J,GAAwBiY,GAAe5Y,KAC9CU,MAAOkY,GACFA,a,GApBehO,IAAMC,WCFvBoO,G,4JALb,WACE,OAAO,eAAChO,EAAA,EAAD,CAAKN,UAAU,yBAAf,SAAyClK,KAAK6I,MAAM4B,e,GAFtCN,IAAMC,WCKxB,SAASqO,GACdxW,GAEA,MAA8D,mBAA/CA,EAAqChC,MAG/C,SAASyY,GACdzW,GAEA,YAAwDpD,IAAhDoD,EAAoCkR,QAGvC,SAASwF,GACd1W,GAEA,MAA6D,kBAA9CA,EAAoChC,MAG9C,SAAS2Y,GACd3W,GAEA,YAA6DpD,IAArDoD,EAAuCC,UAG1C,SAAS2W,GACd5W,GAEA,YAAoEpD,IAA5DoD,EAA0CG,cAG7C,SAAS0W,GAAe7W,GAC7B,GACEwW,GAAgBxW,IAChByW,GAAezW,IACf0W,GAAe1W,GAEf,OAAOA,EAAOhC,MAIX,SAAS8Y,GAAe9W,EAAgBhC,IAE1CwY,GAAgBxW,IAA4B,mBAAVhC,GAClCyY,GAAezW,IACG,kBAAVhC,IACI,KAAVA,GAAgBgC,EAAOkR,QAAQrR,SAAS7B,KAC1C0Y,GAAe1W,IAA4B,kBAAVhC,KAElCgC,EAAOhC,MAAQA,GCtDJsB,ICFVyX,GCgFUC,G,4MA9DbC,oBAAsB,SAACjX,GAAD,OAA4B,SAAChC,GACjDgC,EAAOhC,MAAQA,EACf,EAAK4I,MAAMsQ,kB,EAGbC,mBAAqB,SAACnX,GAAD,OAA2B,SAAChC,GAC/CgC,EAAOhC,MAAQA,EACf,EAAK4I,MAAMsQ,kB,EAGbE,mBAAqB,SAACpX,GAAD,OAA2B,SAAChC,GAC/CgC,EAAOhC,MAAQA,EACf,EAAK4I,MAAMsQ,kB,4CAGb,WACE,IAAQlX,EAAWjC,KAAK6I,MAAhB5G,OAER,OAAIwW,GAAgBxW,GAEhB,eAAC,GAAD,CACE5H,GAAE,UAAK4H,EAAO5H,GAAZ,UACF0P,MAAO7G,GAAcjB,EAAO5H,IAC5ByO,aAAc7G,EAAOhC,MACrBA,MAAOgC,EAAOhC,MACd8K,SAAU/K,KAAKkZ,oBAAoBjX,KAG9ByW,GAAezW,GAEtB,gBAAC,GAAD,CACE5H,GAAE,UAAK4H,EAAO5H,GAAZ,UACF0P,MAAO7G,GAAcjB,EAAO5H,IAC5ByO,aAAc7G,EAAOhC,MACrBA,MAAOgC,EAAOhC,MACd8K,SAAU/K,KAAKoZ,mBAAmBnX,GALpC,UAOE,eAAC,GAAOgJ,KAAR,CAAalB,MAAM,GAAG9J,MAAM,KAC3BgC,EAAOkR,QAAQzY,KAAI,SAAC4e,GAAD,OAClB,eAAC,GAAOrO,KAAR,CACElB,MAAO/C,GAAWsS,GAClBrZ,MAAOqZ,GACFA,SAKJX,GAAe1W,GAEtB,eAAC,GAAD,CACE5H,GAAE,UAAK4H,EAAO5H,GAAZ,UACF0P,MAAO7G,GAAcjB,EAAO5H,IAC5ByO,aAAc7G,EAAOhC,MACrBA,MAAOgC,EAAOhC,MACdwJ,QAASzJ,KAAKqZ,mBAAmBpX,GACjCiI,UAAU,qBART,M,GAhDeC,IAAMC,WC0FjBmP,G,4MAhFbtB,iBAAmB,SAAClQ,GAAD,OAAe,SAAC1N,GACjC,IAAQ+b,EAAiB,EAAKvN,MAAM2D,SAA5B4J,aACRA,EAAarO,GAAK+P,GAAgBzd,EAAI+b,EAAarO,GAAG9I,QACtD,IAAMua,EAAqBpD,EAAa1U,SACtC,SAAC+X,GAAD,OAAiBA,EAAY9X,WAE/B,EAAKkH,MAAM6Q,yBAAyB,CAClCtD,eACAoD,uBAEF,EAAK3Q,MAAMkH,YAAY,CACrBqG,aAAa,YAAKA,GAClBoD,yB,EAIJG,qBAAuB,SAAC5R,GAAD,OAAe,SAAC9I,GACrC,IAAQmX,EAAiB,EAAKvN,MAAM2D,SAA5B4J,aACRA,EAAarO,GAAG9I,OAASA,EACzB,IAAMua,EAAqBpD,EAAa1U,SACtC,SAAC+X,GAAD,OAAiBA,EAAY9X,WAE/B,EAAKkH,MAAM6Q,yBAAyB,CAClCtD,eACAoD,uBAEF,EAAK3Q,MAAMkH,YAAY,CACrBqG,aAAa,YAAKA,GAClBoD,yB,EAIJL,cAAgB,WACd,IAAQK,EAAuB,EAAK3Q,MAAM2D,SAAlCgN,mBACR,EAAK3Q,MAAM6Q,yBAAyB,CAAEF,uBACtC,EAAK3Q,MAAMkH,YAAY,CAAEyJ,mBAAmB,YAAKA,M,4CAGnD,WAAU,IAAD,OACP,EAA6CxZ,KAAK6I,MAAM2D,SAAhD4J,EAAR,EAAQA,aAAcoD,EAAtB,EAAsBA,mBAEtB,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,UACE,iDAED,CAAC,EAAG,EAAG,GAAG9e,KAAI,SAACqN,GAAD,OACb,gBAAC,GAAD,WACE,eAAC,GAAD,CACEmQ,MAAOnQ,EACPoQ,cAAe/B,EAAarO,GAAG1N,GAC/B4d,iBAAkB,EAAKA,iBAAiBlQ,KAG1C,mCAEA,eAAC,GAAD,CACE1N,GAAE,uBAAkB0N,EAAlB,QACFgC,MAAM,GACNjB,aAAcrK,IACdwB,MAAOmW,EAAarO,GAAG9I,OACvBwK,QAAS,EAAKkQ,qBAAqB5R,GACnCiB,cAAc,EACdkB,UAAU,gBAGZ,sCAnBanC,MAuBhByR,EAAmB9e,KAAI,SAACuH,GAAD,OACtB,eAAC,GAAD,UACE,eAAC,GAAD,CAAaA,OAAQA,EAAQkX,cAAe,EAAKA,iBADpClX,EAAO5H,c,GAxEI8P,IAAMC,WCxBrBwP,G,WAGnB,aAQS,IAAD,yDAAJ,GAAI,IAPNC,aAOM,MAPE,EAOF,MANNC,YAMM,MANC,EAMD,MALNC,eAKM,MALI,EAKJ,MAJNC,WAIM,MAJA,EAIA,MAHNC,aAGM,MAHE,EAGF,MAFNC,YAEM,MAFC,EAED,MADNC,gBACM,MADK,EACL,2BAVAC,iBAUA,EACNpa,KAAKoa,YAAc,IAAIC,IACvBra,KAAKoa,YAAYE,IAAInP,GAAQoP,MAAOV,GACpC7Z,KAAKoa,YAAYE,IAAInP,GAAQiI,KAAM0G,GACnC9Z,KAAKoa,YAAYE,IAAInP,GAAQkI,QAAS0G,GACtC/Z,KAAKoa,YAAYE,IAAInP,GAAQqP,IAAKR,GAClCha,KAAKoa,YAAYE,IAAInP,GAAQmI,MAAO2G,GACpCja,KAAKoa,YAAYE,IAAInP,GAAQoI,KAAM2G,GACnCla,KAAKoa,YAAYE,IAAInP,GAAQsP,SAAUN,G,uCAGzC,SAAI5H,GAAmB,IAAD,EACpB,iBAAOvS,KAAKoa,YAAYM,IAAInI,UAA5B,QAAwC9T,M,iBAG1C,SAAI8T,EAAkBtS,GACpBD,KAAKoa,YAAYE,IAAI/H,EAAStS,K,iBAGhC,SAAIsS,EAAkBtS,GACpB,IAAKU,MAAMV,GAAQ,CAAC,IAAD,EACX0a,EAAS,UAAG3a,KAAKoa,YAAYM,IAAInI,UAAxB,QAAoC,EACnDvS,KAAKoa,YAAYE,IAAI/H,EAASoI,EAAY1a,Q,eHnC3C+Y,K,YAAAA,E,cAAAA,E,0BAAAA,E,YAAAA,E,oBAAAA,E,oBAAAA,E,4BAAAA,E,gCAAAA,E,iBAAAA,Q,KAYUA,IIZV4B,GJYU5B,O,SIZV4B,K,YAAAA,E,YAAAA,E,mBAAAA,Q,KAMUA,UCoBf,SAASC,GAAT,GAUI,IATF9W,EASC,EATDA,MACA3C,EAQC,EARDA,WACA0Z,EAOC,EAPDA,YAOC,IANDC,eAMC,MANS,EAMT,EACD,OAAID,IAAgBzP,GAAYkF,OACvBxM,EAAMU,QAAUrD,EAAa2Z,EAC3BD,IAAgBzP,GAAY2P,QAC9BjX,EAAMY,QAAUvD,EAAa2Z,EAC3BD,IAAgBzP,GAAY4P,GAC9BlX,EAAMe,OAAS1D,EAAa2Z,EAE5Btc,IA2CX,SAASyc,GAAT,GAQI,IAAD,IAPDC,EAOC,EAPDA,SACApX,EAMC,EANDA,MAOMqX,EA5BR,SACED,EACAE,GAEA,OAAIF,IAAanC,GAASsC,KACpBD,IAAmBlQ,GAAQoI,KACtB,EACE8H,IAAmBlQ,GAAQiI,KAC7B,IACK,EACL+H,IAAanC,GAASuC,SAC3BF,IAAmBlQ,GAAQmI,MACtB,EACE+H,IAAmBlQ,GAAQoI,KAC7B,IACK,EACF,EAYaiI,CACzBL,EAFD,EALD5I,SAWA,GAAI6I,EAAqB,EAAG,CAAC,IAAD,EAEtBK,EAAgB,EACpB,OAAQN,GACN,KAAKnC,GAASuC,SACZE,EAAa,UAAG1X,EAAM+C,wBAAT,QAA6B,EAC1C,MACF,KAAKkS,GAASsC,KACZG,EAAa,UAAG1X,EAAMgD,oBAAT,QAAyB,EAO1C,IAAM5B,EAAgB,UAAGpB,EAAMoB,wBAAT,QAA6B,EAGnD,OAAOiW,GADL,EAAK,KAAOjW,GAAqB,KAAOA,GAAoBsW,GAG9D,OAAO,EAIJ,SAASC,GAAT,GAcH,IAEoC,EAftC3X,EAaC,EAbDA,MACA3C,EAYC,EAZDA,WACAmR,EAWC,EAXDA,QAWC,IAVDuI,mBAUC,MAVazP,GAAYkF,OAUzB,EATDoL,EASC,EATDA,WACA7N,EAQC,EARDA,SASIiN,EAAUjN,EAASiN,QACvB,GAAIY,IAAevQ,GAAWwQ,OAC5Bb,GAAO,UAAIjN,EAAS+N,2BAAb,QAAoC,OACtC,GAAIF,IAAevQ,GAAW0Q,QAAS,CAAC,IAAD,EAC5Cf,GAAO,UAAIjN,EAASiO,4BAAb,QAAqC,OACvC,GAAIJ,IAAevQ,GAAWoF,MAAO,CAAC,IAAD,EAC1CuK,GAAO,UAAIjN,EAASkO,oBAAb,QAA6B,EAGtC,IAAIC,EAAUpB,GAAoB,CAChC9W,QACA3C,aACA0Z,cACAC,YAEE3U,EAlJN,YAQI,IAAD,MAPDrC,EAOC,EAPDA,MACAwO,EAMC,EANDA,QACAoJ,EAKC,EALDA,WAMIvV,EAAW,EAKf,OAJAA,GAAQ,UAAIrC,EAAMqC,gBAAV,QAAsB,EAC9BA,GAAQ,UAAIrC,EAAM,GAAD,OAAIwO,EAAJ,oBAAT,QAAmC,EAC3CnM,GAAQ,UAAIrC,EAAM,GAAD,OAAI4X,EAAJ,oBAAT,QAAsC,GAsI/BO,CAAe,CAAEnY,QAAOwO,UAASoJ,eAE5CQ,EAAO,EACX,GAAIrO,EAASsO,WAAaxB,GAASyB,KACjCF,GAAQpY,EAAMmB,aACT,GAAI4I,EAASsO,WAAaxB,GAAS0B,QAAS,CACjD,IACuC,EADnCrX,EAAWlB,EAAMkB,SACrB,GAAI0W,IAAevQ,GAAW0Q,QAC5B7W,GAAQ,UAAIlB,EAAM2C,uBAAV,QAA6B,OAChC,GAAIiV,IAAevQ,GAAWqF,MAAO,CAAC,IAAD,EAC1CxL,GAAQ,UAAIlB,EAAM4C,qBAAV,QAA2B,EAErCwV,GAAQ1Z,KAAK2L,IAAI,EAAGnJ,GAAYlB,EAAMmB,QAoBxC,OACE+W,EACA7V,EACA+V,IAnBCrO,EAASyO,eAAiB,MAC1BzO,EAASyO,eACR,KACCzO,EAAS0O,WAAa,MAAQ,EAAI1O,EAAS2O,qBA9HlD,YAQI,IAPFlK,EAOC,EAPDA,QAOC,IANDmK,WAMC,MANK,IAAI9C,GAMT,MALD+C,oBAKC,MALc,IAAI/C,GAKlB,EACGgD,EAAWF,EAAIhC,IAAInI,GAAWoK,EAAajC,IAAInI,GAEnD,OAAIqK,EAAW,EACN,EAAIA,EAAW,EACbA,EAAW,IACb,EAAIA,EAEJ,GAAK,EAAIA,EAAW,GA+GJC,CAAuB,CAC9CtK,UACAmK,IAAK5O,EAASgP,SACdH,aAAc7O,EAAS0F,oBAGE0H,GAAsC,CAC/DC,SAAUrN,EAASqN,SACnBpX,QACAwO,YAsCJ,SAASwK,GAAT,GAUI,IATFhZ,EASC,EATDA,MACA3C,EAQC,EARDA,WACA4b,EAOC,EAPDA,UAOC,IANDlC,mBAMC,MANazP,GAAY4P,GAMzB,EACD,OAAIH,IAAgBzP,GAAYkF,OACvBxM,EAAMU,QAAUrD,EAAa4b,EAC3BlC,IAAgBzP,GAAY2P,QAC9BjX,EAAMY,QAAUvD,EAAa4b,EAC3BlC,IAAgBzP,GAAY4P,GAC9BlX,EAAMe,OAAS1D,EAAa4b,EAE5Bve,IA4CJ,SAASwe,GAAT,GAUU,IAAD,MATd1K,EASc,EATdA,QACAnR,EAQc,EARdA,WACA2C,EAOc,EAPdA,MACA+J,EAMc,EANdA,SAkBA,MAAO,CACLC,OAAQ,CATK2N,GAAqB,CAClC3X,QACA3C,aACAmR,QANFA,EAAO,8BACLA,SADK,QACMzE,EAASoP,sBADf,QACiCpP,EAASqP,gBAD1C,QACsDhS,GAAQsP,SAMnEkB,WAAYvQ,GAAWwQ,OACvB9N,cAKAyE,WAKG,SAAS6K,GAAT,GAYU,IAAD,MAXdC,EAWc,EAXdA,KACA9K,EAUc,EAVdA,QACAlW,EASc,EATdA,OACA0H,EAQc,EARdA,MACA+J,EAOc,EAPdA,SAQAyE,EAAO,8BACLA,SADK,QACMzE,EAASoP,sBADf,QACiCpP,EAASqP,gBAD1C,QACsDhS,GAAQsP,SAGrE,IADA,IAAM6C,EAAU,GACPvV,EAAI,EAAGA,EAAIsV,EAAMtV,IAAK,CAC7B,IAAMgG,EAAS2N,GAAqB,CAClC3X,QACA3C,WAAY/E,EAAO0L,GACnBwK,UACAoJ,WAAYvQ,GAAWwQ,OACvB9N,aAEFwP,EAAQ/P,KAAKQ,GAGf,MAAO,CACLA,OAAQuP,EACR/K,WAKG,SAASgL,GAAT,GAUU,IAAD,IATdhL,EASc,EATdA,QACAnR,EAQc,EARdA,WACA2C,EAOc,EAPdA,MACA+J,EAMc,EANdA,SAiBA,MAAO,CACLC,OAAQ,CATK2N,GAAqB,CAClC3X,QACA3C,aACAmR,QALFA,EAAO,oBAAGA,SAAH,QAAczE,EAASqP,gBAAvB,QAAmChS,GAAQsP,SAMhDkB,WAAYvQ,GAAW0Q,QACvBhO,cAKAyE,WAKG,SAASiL,GAAT,GAYU,IAAD,IAXdH,EAWc,EAXdA,KACA9K,EAUc,EAVdA,QACAlW,EASc,EATdA,OACA0H,EAQc,EARdA,MACA+J,EAOc,EAPdA,SAQAyE,EAAO,oBAAGA,SAAH,QAAczE,EAASqP,gBAAvB,QAAmChS,GAAQsP,SAGlD,IADA,IAAM6C,EAAU,GACPvV,EAAI,EAAGA,EAAIsV,EAAMtV,IAAK,CAC7B,IAAMgG,EAAS2N,GAAqB,CAClC3X,QACA3C,WAAY/E,EAAO0L,GACnBwK,UACAoJ,WAAYvQ,GAAW0Q,QACvBhO,aAEFwP,EAAQ/P,KAAKQ,GAGf,MAAO,CACLA,OAAQuP,EACR/K,WAKG,SAASkL,GAAT,GAQU,IAAD,EAPdrc,EAOc,EAPdA,WACA2C,EAMc,EANdA,MACA+J,EAKc,EALdA,SAMMyE,EAAO,UAAGzE,EAASqP,gBAAZ,QAAwBhS,GAAQsP,SAU7C,MAAO,CACL1M,OAAQ,CATK2N,GAAqB,CAClC3X,QACA3C,aACAmR,UACAoJ,WAAYvQ,GAAW0Q,QACvBhO,cAKAyE,WAKG,SAASmL,GAAT,GAUU,IATfnL,EASc,EATdA,QACAnR,EAQc,EARdA,WACA2C,EAOc,EAPdA,MACA+J,EAMc,EANdA,SAeA,MAAO,CACLC,OAAQ,CATK2N,GAAqB,CAClC3X,QACA3C,WAAYA,EACZmR,UACAoJ,WAAYvQ,GAAW0Q,QACvBhO,cAKAyE,WAKG,SAASoL,GAAT,GAUU,IAAD,MATdpL,EASc,EATdA,QACAnR,EAQc,EARdA,WACA2C,EAOc,EAPdA,MACA+J,EAMc,EANdA,SAkBA,MAAO,CACLC,OAAQ,CATK2N,GAAqB,CAClC3X,QACA3C,aACAmR,QANFA,EAAO,8BACLA,SADK,QACMzE,EAAS8P,sBADf,QACiC9P,EAASqP,gBAD1C,QACsDhS,GAAQsP,SAMnEkB,WAAYvQ,GAAWyS,OACvB/P,cAKAyE,WAKG,SAASuL,GAAT,GAYU,IAXfvL,EAWc,EAXdA,QACAnR,EAUc,EAVdA,WACA0Z,EASc,EATdA,YACA/W,EAQc,EARdA,MACA+J,EAOc,EAPdA,SAiBA,MAAO,CACLC,OAAQ,CAVK2N,GAAqB,CAClC3X,QACA3C,aACAmR,UACAuI,cACAa,WAAYvQ,GAAWoF,MACvB1C,cAKAyE,WAKG,SAASwL,GAAT,GAeL,IAHE,IAXFV,EAWC,EAXDA,KACA9K,EAUC,EAVDA,QACAlW,EASC,EATDA,OACA0H,EAQC,EARDA,MACA+J,EAOC,EAPDA,SAQMwP,EAAU,GAEPvV,EAAI,EAAGA,EAAIsV,EAAMtV,IACxBuV,EAAQ/P,KACNmO,GAAqB,CACnBnJ,UACAnR,WAAY/E,EAAO0L,GACnB4T,WAAYvQ,GAAWoF,MACvBzM,QACA+J,cAKN,MAAO,CACLC,OAAQuP,EACR/K,WAKG,SAASyL,GAAT,GAYU,IAXfzL,EAWc,EAXdA,QACAnR,EAUc,EAVdA,WACA0Z,EASc,EATdA,YACA/W,EAQc,EARdA,MACA+J,EAOc,EAPdA,SAiBA,MAAO,CACLC,OAAQ,CAVK2N,GAAqB,CAClCnJ,UACAnR,aACA0Z,cACAa,WAAYvQ,GAAWqF,MACvB1M,QACA+J,cAKAyE,WAKG,SAAS0L,GAAT,GAeL,IAHE,IAXFZ,EAWC,EAXDA,KACA9K,EAUC,EAVDA,QACAlW,EASC,EATDA,OACA0H,EAQC,EARDA,MACA+J,EAOC,EAPDA,SAQMwP,EAAU,GAEPvV,EAAI,EAAGA,EAAIsV,EAAMtV,IACxBuV,EAAQ/P,KACNmO,GAAqB,CACnBnJ,UACAnR,WAAY/E,EAAO0L,GACnB4T,WAAYvQ,GAAWqF,MACvB1M,QACA+J,cAKN,MAAO,CACLC,OAAQuP,EACR/K,WAKG,SAAS2L,GAAT,GAUU,IATf3L,EASc,EATdA,QACAnR,EAQc,EARdA,WACA2C,EAOc,EAPdA,MACA+J,EAMc,EANdA,SAeA,MAAO,CACLC,OAAQ,CATK2N,GAAqB,CAClC3X,QACA3C,aACAmR,UACAoJ,WAAYvQ,GAAW+S,KACvBrQ,cAKAyE,WAKG,SAAS6L,GAAT,GAYU,IAXfhd,EAWc,EAXdA,WACAid,EAUc,EAVdA,YAUc,IATdvD,mBASc,MATAzP,GAAY4P,GASZ,EARdlX,EAQc,EARdA,MAQc,EAPd+J,SAeA,MAAO,CACLC,OAAQ,CAndZ,YAUI,IAAD,EATDhK,EASC,EATDA,MACA3C,EAQC,EARDA,WACAid,EAOC,EAPDA,YAOC,IANDvD,YAiBA,OAVoBD,GAAoB,CACtC9W,QACA3C,aACA0Z,iBAJD,MANazP,GAAY4P,GAMzB,EAKCF,QAASsD,KAMW,aAAKta,EAAMmC,oBAAX,QAA2B,IAsbjCoY,CAAiB,CAC/Bva,QACA3C,aACAid,cACAvD,kBASG,SAASyD,GAAT,GAYU,IAXfnd,EAWc,EAXdA,WACA4b,EAUc,EAVdA,UAUc,IATdlC,mBASc,MATAzP,GAAY4P,GASZ,EARdlX,EAQc,EARdA,MAQc,EAPd+J,SAeA,MAAO,CACLC,OAAQ,CARCgP,GAAY,CACrBhZ,QACA3C,aACA4b,YACAlC,kBASG,SAAS0D,GAAT,GAcU,IAbfpd,EAac,EAbdA,WACA4b,EAYc,EAZdA,UACAzK,EAWc,EAXdA,QAWc,IAVduI,mBAUc,MAVAzP,GAAY4P,GAUZ,EAUd,MAAO,CACLlN,OAAQ,CA3dZ,YAcI,IAbFhK,EAaC,EAbDA,MACA3C,EAYC,EAZDA,WACA4b,EAWC,EAXDA,UACAzK,EAUC,EAVDA,QAUC,IATDuI,mBASC,MATazP,GAAY4P,GASzB,EARDnN,EAQC,EARDA,SASI2Q,EAAgB1B,GAAY,CAC9BhZ,QACA3C,aACA4b,YACAlC,gBAcF,OAVIvI,IAAYpH,GAAQqP,MAAKiE,GAAiB,UAGjB5f,IAAzBkF,EAAMoC,iBACRsY,GAAiB,EAAI1a,EAAMoC,gBAIzB2H,EAAS4Q,iBAAgBD,GAAiB,MAEvCA,EAgbeE,CAAuB,CAC3C5a,MAFY,EATdA,MAYE3C,aACA4b,YACAzK,UACAuI,cACAhN,SAPY,EARdA,aAwBK,SAAS8Q,GAAT,GAQU,IAPfxd,EAOc,EAPdA,WACA2C,EAMc,EANdA,MAMc,EALd+J,SAOA,MAAO,CACLC,OAAQ,CAFOhK,EAAMS,QAAUpD,IC9sBnC,OAII/C,GAAc,UAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAGIyiB,GAAyC,CAC7C,UAAW,gBAAGjb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV0P,GAAmB,CACjBH,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAIAuR,GAAwC,CAC5CC,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQqP,IACjBpZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJyR,oBAAqB,gBAAGxb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACnBgQ,GAAY,CACVvL,QAASpH,GAAQqP,IACjBpZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDoX,YAAazP,GAAY2P,QACzBjX,QACA+J,eAIA0R,GAAwC,CAC5CC,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQqP,IACjBpZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ4R,gBAAiB,gBAAG3b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfkQ,GAAY,CACVzL,QAASpH,GAAQqP,IACjBpZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,eAIA6R,GAAyB,CAC7BxjB,OAAQ6iB,GACR1iB,MAAO+iB,GACP9iB,MAAOijB,IAGMG,MC/HMC,G,kDACnB,WAAYtgB,EAAarE,EAAgBoE,GAAwB,uCACzD,SAAUpE,EAAOoE,G,gDAGzB,WACE,OAAOsgB,O,GANyBvgB,ICFfygB,G,kDACnB,aAA8B,IAAlBxlB,EAAiB,uDAAJ,GAAI,uCACrBA,G,UAFmCkH,ICSvCue,G,kDAMJ,aAAe,IAAD,8BACZ,cAAM,SAHR7f,MAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SACLP,EACAgc,EACArc,EACAsc,GAEA,GAAI,EAAK/f,MAAQ,EAAG,CAClB,IAMqB,EAGd,EATD6e,EAAcpgB,GAClBwM,GAAWsF,MACX9M,EACArF,GAAc,SAGhB,GAAI,EAAK4B,OAAS,EAEhB8D,EAAMsC,eAAiByY,EAAY,IAAZ,UAAkB/a,EAAMsC,sBAAxB,QAA0C,QAEjEtC,EAAMsC,eACJyY,EAAY,EAAK7e,MAAQ,IAAzB,UAA+B8D,EAAMsC,sBAArC,QAAuD,MAvBnD,EA6BdjE,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,OAAS,IAChB6N,EAASoP,eAAiB/R,GAAQiI,QAhC1B,E,UALNyM,IA2CJI,GAAc,CAACH,IACNG,MC9Cf,eAAyB5hB,GAAc,QAAQ7B,SAA/C,GAAO0jB,GAAP,MAAeC,GAAf,MACMC,GAAWF,GAAO7jB,OAClBgkB,GAAWF,GAAO9jB,OAElBikB,G,kDAMJ,aAAe,IAAD,8BACZ,cAAM,mBAHRrgB,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMW,SAAyB,EAAd0b,GAAS,IAAT,UAAmBrc,EAAMW,gBAAzB,QAAqC,MAP9C,E,UALNmb,IAkBJU,GAAmC,CACvClmB,GAAI,iBACJiG,eAAgB,EAChBqB,QAAS,CAAC2e,KAGNE,G,kDAMJ,aAAe,IAAD,8BACZ,cAAM,mBAHRvgB,MAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACN,GAAI,EAAK9D,MAAQ,EAAG,CAAC,IAAD,EACd8T,EAAS,EAAK9T,MACd8T,EAAS,KACXA,EAAS,IAGX,IAAM1O,EAAegb,GAAS,GAAKtM,EACnChQ,EAAMsB,aAAeA,GAAY,UAAItB,EAAMsB,oBAAV,QAA0B,MAbnD,E,UALNwa,IAwBJY,GAAmC,CACvCpmB,GAAI,iBACJiG,eAAgB,EAChBqB,QAAS,CAAC6e,KAGNE,GAAe,CAACH,GAAgBE,IACvBC,MC3Df,GAIIriB,GAAc,QAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAGIokB,GAAuC,CAC3C,UAAW,gBAAG5c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8S,WAAY,gBAAG7c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV2P,GAAQ,CACNrc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+S,kBAAmB,gBAAG9c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjB4P,GAAe,CACbnL,QAASpH,GAAQiI,KACjBhS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eAIAgT,GAAsC,CAC1CC,cAAe,gBAAGhd,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJkT,qBAAsB,gBAAGjd,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACpBgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAIAmT,GAAsC,CAC1CxB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,eAIAoT,GAAuB,CAC3B/kB,OAAQwkB,GACRrkB,MAAOwkB,GACPvkB,MAAO0kB,IAGMC,MC/GMC,G,kDACnB,WAAY7hB,EAAarE,EAAgBoE,GAAwB,uCACzD,OAAQpE,EAAOoE,G,gDAGvB,WACE,OAAO6hB,K,2CAGT,WACE,OAAOjB,K,4BAGT,WACE,OAAOS,O,GAduBthB,ICIlC,GAIIf,GAAc,SAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAGI6kB,GAAwC,CAC5C,UAAW,gBAAGrd,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8S,WAAY,gBAAG7c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV2P,GAAQ,CACNrc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+S,kBAAmB,gBAAG9c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjB4P,GAAe,CACbnL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eAIAuT,GAAuC,CAC3CC,aAAc,gBAAGvd,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJyT,aAAc,gBAAGxd,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZyQ,GAAQ,CACNnd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW,EACXjZ,QACA+J,eAIA0T,GAAuC,CAC3CC,WAAY,gBAAG1d,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ4T,SAAU,YAAuC,IAApC3d,EAAmC,EAAnCA,MAAO+J,EAA4B,EAA5BA,SACZ6T,EAAc3D,GAAY,CAC9BzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,aAGF,OADA6T,EAAY5T,OAAO,IAAM,GAClB4T,IAILC,GAAwB,CAC5BzlB,OAAQilB,GACR9kB,MAAO+kB,GACP9kB,MAAOilB,IAGMI,MCpIMC,G,kDACnB,WAAYviB,EAAarE,EAAgBoE,GAAwB,uCACzD,QAASpE,EAAOoE,G,gDAGxB,WACE,OAAOuiB,O,GANwBxiB,ICC7B0iB,G,kDAMJ,aAAe,IAAD,8BACZ,cAAM,iBAHR7hB,OAAQ,EAEM,EAIdmC,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,QACP6N,EAASqP,SAAWhS,GAAQiI,QAPpB,E,UALNyM,IAkBJkC,GAAe,CAACD,IACPC,MCdf,GAII1jB,GAAc,SAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAwGaylB,GANe,CAC5B7lB,OAhG4C,CAC5C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV0P,GAAmB,CACjBH,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAkCJxR,MA9B2C,CAC3CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAyBJvR,MArB2C,CAC3C0lB,WAAY,gBAAGle,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJoU,SAAU,gBAAGne,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBCtGeqU,G,kDACnB,WAAY7iB,EAAarE,EAAgBoE,GAAwB,uCACzD,QAASpE,EAAOoE,G,gDAGxB,WACE,OAAO2iB,K,2CAGT,WACE,OAAOD,O,GAVwB3iB,ICInC,GAIIf,GAAc,WAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA+Ga6lB,GANiB,CAC9BjmB,OAvG8C,CAC9C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBhL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXpL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXpL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXpL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eA0CJxR,MAtC6C,CAC7C+lB,kBAAmB,gBAAGte,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjBsQ,GAAa,CACXhd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnD2a,YAAaS,GAAYhR,EAASpK,kBAAkB,GACpDK,QACA+J,cAGJwU,aAAc,gBAAGve,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZsQ,GAAa,CACXhd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnD2a,YAAaS,GAAYhR,EAASpK,kBAAkB,GACpDK,QACA+J,cAGJyU,WAAY,gBAAGxe,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVgQ,GAAY,CACVvL,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAiBJvR,MAb6C,CAC7CimB,QAAS,gBAAGze,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAaU,GAAYjR,EAASnK,kBAAkB,GACpDI,QACA+J,gBC9Ge2U,G,kDACnB,WAAYnjB,EAAarE,EAAgBoE,GAAwB,uCACzD,UAAWpE,EAAOoE,G,gDAG1B,WACE,OAAO+iB,O,GAN0BhjB,ICG/BihB,GADN,YAAmBhiB,GAAc,UAAU7B,SAA3C,MACwBH,OA6BTqmB,GADQ,CANoB,CACzCroB,GAAI,mBACJiG,eAAgB,EAChBqB,QAAS,C,kDAjBT,aAAe,IAAD,8BACZ,cAAM,qBAHR1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,IAAZ,EAAK9D,QACP8D,EAAMsC,eAAiBga,GAAS,IAAT,UAAetc,EAAMsC,sBAArB,QAAuC,GAC9DtC,EAAMuC,gBAAkB+Z,GAAS,IAAT,UAAetc,EAAMuC,uBAArB,QAAwC,MARxD,E,UALNuZ,OCCV,GAIIxhB,GAAc,UAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA8HaomB,GANgB,CAC7BxmB,OAtH6C,CAC7C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8U,eAAgB,gBAAG7e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+U,gBAAiB,gBAAG9e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAmDJxR,MA/C4C,CAC5CwmB,SAAU,gBAAG/e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACR0Q,GAAc,CACZpd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW8B,GAAYhR,EAASpK,kBAAkB,GAClD6O,QAASpH,GAAQkI,QACjBtP,QACA+J,cAGJmO,QAAS,gBAAGlY,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJiV,mBAAoB,gBAAGhf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAClBgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAyBJvR,MArB4C,CAC5C+iB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJkV,aAAc,gBAAGjf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC5HemV,G,kDACnB,WAAY3jB,EAAarE,EAAgBoE,GAAwB,uCACzD,SAAUpE,EAAOoE,G,gDAGzB,WACE,OAAOsjB,K,4BAGT,WACE,OAAOD,O,GAVyBtjB,ICOpC,GAIIf,GAAc,WAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAwIa2mB,GANiB,CAC9B/mB,OAhI8C,CAC9C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV0P,GAAmB,CACjBH,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAmEJxR,MA/D6C,CAC7C6mB,SAAU,gBAAGpf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJsV,gBAAiB,gBAAGrf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfiQ,GAAW,CACTV,KAAM,EACN9K,QAASpH,GAAQoI,KACjBlX,OAAQyiB,GAAYhR,EAASpK,kBAAkBT,MAAM,EAAG,GACxDc,QACA+J,cAGJuV,gBAAiB,gBAAGtf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfiQ,GAAW,CACTV,KAAM,EACN9K,QAASpH,GAAQoI,KACjBlX,OAAQyiB,GAAYhR,EAASpK,kBAAkBT,MAAM,EAAG,GACxDc,QACA+J,cAGJwT,aAAc,gBAAGvd,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAgCJvR,MA5B6C,CAC7CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJwV,2BAA4B,gBAAGvf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAC1BsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAaU,GAAYjR,EAASnK,kBAAkB,GACpDI,QACA+J,cAGJpJ,SAAU,gBAAGX,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACR8Q,GAAa,CACXxd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC1IeyV,G,kDACnB,WAAYjkB,EAAarE,EAAgBoE,GAAwB,uCACzD,UAAWpE,EAAOoE,G,gDAG1B,WACE,OAAO6jB,O,GAN0B9jB,ICqBtBokB,GADmC,C,kDAbhD,aAAe,IAAD,8BACZ,cAAM,iBAHRvjB,OAAQ,EAEM,EAIdmC,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,QACP6N,EAASqP,SAAWhS,GAAQiI,QAPpB,E,UALNyM,KCIV,GAIIxhB,GAAc,YAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA8FaknB,GANkB,CAC/BtnB,OAtF+C,CAC/C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8U,eAAgB,gBAAG7e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+U,gBAAiB,gBAAG9e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eA0BJxR,MAtB8C,CAC9CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAiBJvR,MAb8C,CAC9CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC3Fe4V,G,kDACnB,WAAYpkB,EAAarE,EAAgBoE,GAAwB,uCACzD,WAAYpE,EAAOoE,G,gDAG3B,WACE,OAAOokB,K,2CAGT,WACE,OAAOD,O,GAV2BpkB,ICItC,GAIIf,GAAc,SAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA8HaonB,GANe,CAC5BxnB,OAtH4C,CAC5C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8U,eAAgB,gBAAG7e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+U,gBAAiB,gBAAG9e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eA0DJxR,MAtD2C,CAC3C,UAAW,gBAAGyH,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAiCJvR,MA7B2C,CAC3CqnB,YAAa,gBAAG7f,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACXkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ+V,IAAK,gBAAG9f,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACHkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJwT,aAAc,gBAAGvd,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC/ESgW,GADgC,C,kDAhC7C,aAAe,IAAD,8BACZ,cAAM,eAHR7jB,OAAQ,EAEM,EAIdmC,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,QACP6N,EAASqP,SAAWhS,GAAQoI,QAPpB,EAYdrR,UAAY,CACVoC,MAAO,SACLP,EACAgc,EACAgE,EACA/D,EACA1f,GAEA,GAAI,EAAKL,OAASK,GAAkB,EAAG,CAAC,IAAD,MAC/BjE,EAAM,UAAGgC,GAAc,SAAS7B,SAAS8Q,MAC7C,SAAC0W,GAAD,MAAoC,2BAAnBA,EAAY3pB,aADnB,aAAG,EAEZgC,OACGoJ,EAAY,iBAAGpJ,QAAH,IAAGA,OAAH,EAAGA,EAAS,UAAZ,QAAkBoC,IAEpCsF,EAAM0B,aAAeA,GAAY,UAAI1B,EAAM0B,oBAAV,QAA0B,MA1BnD,E,UALNoa,KCNWoE,G,kDACnB,WAAY3kB,EAAarE,EAAgBoE,GAAwB,uCACzD,QAASpE,EAAOoE,G,gDAGxB,WACE,OAAOskB,K,2CAGT,WACE,OAAOG,O,GAVwB1kB,ICOnC,GAIIf,GAAc,SAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAwIa2nB,GANe,CAC5B/nB,OAhI4C,CAC5C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8S,WAAY,gBAAG7c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV2P,GAAQ,CACNrc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+S,kBAAmB,gBAAG9c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjB4P,GAAe,CACbnL,QAASpH,GAAQiI,KACjBhS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eA4DJxR,MAxD2C,CAC3C6nB,gBAAiB,gBAAGpgB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJsW,cAAe,gBAAGrgB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb0Q,GAAc,CACZpd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW8B,GAAYhR,EAASpK,kBAAkB,GAClD6O,QAASpH,GAAQiI,KACjBrP,QACA+J,cAGJuW,aAAc,gBAAGtgB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ0Q,GAAc,CACZpd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW8B,GAAYhR,EAASpK,kBAAkB,GAClD6O,QAASpH,GAAQiI,KACjBrP,QACA+J,SAAS,2BAAMA,GAAP,IAAiB4Q,gBAAgB,QAiC7CniB,MA7B2C,CAC3CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJwW,mBAAoB,gBAAGvgB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAClBkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJyW,sBAAuB,gBAAGxgB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACrBsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAaU,GAAYjR,EAASnK,kBAAkB,GACpDI,QACA+J,gBC1Ie0W,G,kDACnB,WAAYllB,EAAarE,EAAgBoE,GAAwB,uCACzD,QAASpE,EAAOoE,G,gDAGxB,WACE,OAAO6kB,O,GANwB9kB,ICOnC,GAIIf,GAAc,QAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAuIakoB,GANc,CAC3BtoB,OA/H2C,CAC3C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ8U,eAAgB,gBAAG7e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+U,gBAAiB,gBAAG9e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eA0DJxR,MAtD0C,CAC1C6mB,SAAU,gBAAGpf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ4W,QAAS,gBAAG3gB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ6W,iBAAkB,gBAAG5gB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAChBgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAiCJvR,MA7B0C,CAC1CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ8W,sBAAuB,gBAAG7gB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACrBkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ+W,uBAAwB,gBAAG9gB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACtBkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBCvIegX,G,kDACnB,WAAYxlB,EAAarE,EAAgBoE,GAAwB,uCACzD,OAAQpE,EAAOoE,G,gDAGvB,WACE,OAAOolB,O,GANuBrlB,ICOlC,GAIIf,GAAc,UAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA8GawoB,GANgB,CAC7B5oB,OAtG6C,CAC7C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8S,WAAY,gBAAG7c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV2P,GAAQ,CACNrc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+S,kBAAmB,gBAAG9c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjB4P,GAAe,CACbnL,QAASpH,GAAQkI,QACjBjS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eAkCJxR,MA9B4C,CAC5C0oB,MAAO,gBAAGjhB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACLgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJmX,aAAc,gBAAGlhB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAiBJvR,MAb4C,CAC5C2oB,kBAAmB,gBAAGnhB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjBkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC9GeqX,G,kDACnB,WAAY7lB,EAAarE,EAAgBoE,GAAwB,uCACzD,SAAUpE,EAAOoE,G,gDAGzB,WACE,OAAO0lB,O,GANyB3lB,ICQpC,GAIIf,GAAc,SAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAqIa6oB,GANe,CAC5BjpB,OA7H4C,CAC5C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8S,WAAY,gBAAG7c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV2P,GAAQ,CACNrc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJuX,oBAAqB,gBAAGthB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACnB4P,GAAe,CACbnL,QAASpH,GAAQiI,KACjBhS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJwX,mBAAoB,gBAAGvhB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAClB4P,GAAe,CACbnL,QAASpH,GAAQiI,KACjBhS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJyX,wBAAyB,gBAAGxhB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACvB4P,GAAe,CACbnL,QAASpH,GAAQiI,KACjBhS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAkCJxR,MA9B2C,CAC3CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ0X,WAAY,gBAAGzhB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyQ,GAAQ,CACNnd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW,EACXjZ,QACA+J,eAiBJvR,MAb2C,CAC3CkpB,YAAa,gBAAG1hB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACXkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBCtIe4X,G,kDACnB,WAAYpmB,EAAarE,EAAgBoE,GAAwB,uCACzD,QAASpE,EAAOoE,G,gDAGxB,WACE,OAAO+lB,O,GANwBhmB,ICG7BihB,GADN,YAAmBhiB,GAAc,SAAS7B,SAA1C,MACwBH,OA4BTspB,GADO,CANoB,CACxCtrB,GAAI,kBACJiG,eAAgB,EAChBqB,QAAS,C,kDAhBT,aAAe,IAAD,8BACZ,cAAM,oBAHR1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAM0B,aAAe4a,GAAS,IAAT,UAAetc,EAAM0B,oBAArB,QAAqC,MAPlD,E,UALNoa,OCEV,GAIIxhB,GAAc,SAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA8HaqpB,GANe,CAC5BzpB,OAtH4C,CAC5C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAkDJxR,MA9C2C,CAC3CupB,gBAAiB,gBAAG9hB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAyCJvR,MArC2C,CAC3CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJgY,cAAe,gBAAG/hB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ0U,QAAS,gBAAGze,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAa,EACbta,QACA+J,cAGJiY,aAAc,gBAAGhiB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAa,EACbta,QACA+J,gBCzESkY,GADM,C,kDAxCnB,aAAe,IAAD,8BACZ,cAAM,yBAHR/lB,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SACLP,EACAgc,EACArc,EACAsc,GAEA,GAAI,EAAK/f,MAAO,CAAC,IAAD,QACV6e,EAAcpgB,GAChBwM,GAAWsF,MACX9M,EACArF,GAAc,UAMZ4nB,IAFF,UAACliB,EAAMgB,cAAP,QAAiB,IAAM,aAAKhB,EAAMiB,eAAX,QAAsB,KAA7C,UACCjB,EAAMe,cADP,QACiB,IACUga,EAAY,GACrCmH,EAAeliB,EAAMS,QAAUsa,EAAY,KAC7CmH,EAAeliB,EAAMS,QAAUsa,EAAY,IAG7C/a,EAAMU,QAAUwhB,GAAY,UAAIliB,EAAMU,eAAV,QAAqB,MA1BzC,EA+BdrC,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,QACP6N,EAASqP,SAAWhS,GAAQoI,QAlCpB,E,UALNsM,KCJWqG,G,kDACnB,WAAY5mB,EAAarE,EAAgBoE,GAAwB,uCACzD,QAASpE,EAAOoE,G,gDAGxB,WACE,OAAOumB,K,2CAGT,WACE,OAAOI,K,4BAGT,WACE,OAAOL,O,GAdwBvmB,ICSnC,GAIIf,GAAc,QAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAwHa4pB,GANc,CAC3BhqB,OAhH2C,CAC3C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eAoDJxR,MAhD0C,CAC1CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQoP,MACjBnZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eA2CJvR,MAvC0C,CAC1CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQoP,MACjBnZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJsY,kBAAmB,gBAAGriB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjBkQ,GAAY,CACVzL,QAASpH,GAAQoP,MACjBnZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJuY,uBAAwB,gBAAGtiB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACtBsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAaU,GAAYjR,EAASnK,kBAAkB,GACpDmX,YAAazP,GAAYkF,OACzBxM,QACA+J,cAGJuU,kBAAmB,gBAAGte,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjBsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAaU,GAAYjR,EAASnK,kBAAkB,GACpDmX,YAAazP,GAAYkF,OACzBxM,QACA+J,gBC9HewY,G,kDACnB,WAAYhnB,EAAarE,EAAgBoE,GAAwB,uCACzD,OAAQpE,EAAOoE,G,gDAGvB,WACE,OAAO8mB,O,GANuB/mB,ICMlC,GAIIf,GAAc,SAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA+FagqB,GANe,CAC5BpqB,OAvF4C,CAC5C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV0P,GAAmB,CACjBH,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eA0BJxR,MAtB2C,CAC3CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAiBJvR,MAb2C,CAC3CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC9Fe0Y,G,kDACnB,WAAYlnB,EAAarE,EAAgBoE,GAAwB,uCACzD,QAASpE,EAAOoE,G,gDAGxB,WACE,OAAOknB,O,GANwBnnB,ICOnC,GAIIf,GAAc,UAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAgIakqB,GANgB,CAC7BtqB,OAxH6C,CAC7C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV0P,GAAmB,CACjBH,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAyDJxR,MArD4C,CAC5C6mB,SAAU,gBAAGpf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQoP,MACjBnZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ4W,QAAS,gBAAG3gB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPgQ,GAAY,CACVvL,QAASpH,GAAQoP,MACjBnZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAwCJvR,MApC4C,CAC5CqnB,YAAa,gBAAG7f,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACXkQ,GAAY,CACVzL,QAASpH,GAAQoP,MACjBnZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ+V,IAAK,gBAAG9f,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACHkQ,GAAY,CACVzL,QAASpH,GAAQoP,MACjBnZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ4Y,uBAAwB,YAAuC,IAApC3iB,EAAmC,EAAnCA,MAAO+J,EAA4B,EAA5BA,SAChC,YAAqCjP,IAAjCiP,EAAS6Y,oBACJ3I,GAAY,CACjBzL,QAASzE,EAAS6Y,oBAClBvlB,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,aAGK,CACLC,OAAQ,CAACtP,SCzGFmoB,G,kDAbb,aAAe,IAAD,8BACZ,cAAM,wBAJR3mB,MAAQ,GAGM,EAFdkT,QAAU,CAAChI,GAAQiI,KAAMjI,GAAQkI,QAASlI,GAAQmI,MAAOnI,GAAQoI,MAEnD,EAIdnR,cAAgB,CACdkC,MAAO,SAACwJ,GACa,KAAf,EAAK7N,QACP6N,EAAS6Y,oBAAsB,EAAK1mB,SAP5B,E,UANN4f,ICoBKgH,GADO,C,kDAbpB,aAAe,IAAD,8BACZ,cAAM,wBAHR5mB,OAAQ,EAEM,EAIdmC,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,QACP6N,EAAS8P,eAAiBzS,GAAQoP,SAP1B,E,UALNsF,IAkBmC+G,ICnBxBE,G,kDACnB,WAAYxnB,EAAarE,EAAgBoE,GAAwB,uCACzD,SAAUpE,EAAOoE,G,gDAGzB,WACE,OAAOonB,K,2CAGT,WACE,OAAOI,O,GAVyBznB,ICOpC,GAIIf,GAAc,UAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAkIawqB,GANgB,CAC7B5qB,OA1H6C,CAC7C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV0P,GAAmB,CACjBH,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eA4DJxR,MAxD4C,CAC5C0qB,qBAAsB,gBAAGjjB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACpBgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ8V,YAAa,gBAAG7f,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACXgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJmZ,oBAAqB,gBAAGljB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACnBiQ,GAAW,CACTV,KAAM,EACN9K,QAASpH,GAAQkI,QACjBhX,OAAQkC,MAAM,GAAGC,KAAKsgB,GAAYhR,EAASpK,kBAAkB,IAC7DK,QACA+J,eAkCJvR,MA9B4C,CAC5C2qB,aAAc,gBAAGnjB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJqZ,oBAAqB,gBAAGpjB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACnBmQ,GAAW,CACTZ,KAAM,EACN9K,QAASpH,GAAQkI,QACjBhX,OAAQkC,MAAM,GAAGC,KAAKugB,GAAYjR,EAASnK,kBAAkB,IAC7DI,QACA+J,cAGJsZ,cAAe,gBAAGrjB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBCpIeuZ,G,kDACnB,WAAY/nB,EAAarE,EAAgBoE,GAAwB,uCACzD,SAAUpE,EAAOoE,G,gDAGzB,WACE,OAAO0nB,O,GANyB3nB,ICMpC,GAIIf,GAAc,QAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA+Fa+qB,GANc,CAC3BnrB,OAvF2C,CAC3C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBhL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXpL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXpL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXpL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eAkCJxR,MA9B0C,CAC1CirB,eAAgB,gBAAGxjB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ0Z,QAAS,gBAAGzjB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAiBJvR,MAb0C,CAC1CkrB,iBAAkB,gBAAG1jB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAChBkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC9Fe4Z,G,kDACnB,WAAYpoB,EAAarE,EAAgBoE,GAAwB,uCACzD,OAAQpE,EAAOoE,G,gDAGvB,WACE,OAAOioB,O,GANuBloB,ICE5BihB,GADN,YAAmBhiB,GAAc,UAAU7B,SAA3C,MACwBH,OA8BTsrB,GADQ,CA3BoB,CACzCttB,GAAI,mBACJiG,eAAgB,EAChBqB,QAAS,GACTO,UAAW,CACToC,MAAO,SAACP,GAAkB,IAAD,IACvBA,EAAMkB,UAAW,UAAClB,EAAMkB,gBAAP,QAAmB,GAAK,EACrClB,EAAMkB,SAAW,IACnBlB,EAAMkB,SAAW,GAGnBlB,EAAMmC,aAAe,eAAQnC,EAAMmC,oBAAd,QAA8B,MAKd,CACzC7L,GAAI,mBACJiG,eAAgB,EAChBqB,QAAS,GACTS,cAAe,CACbkC,MAAO,SAACwJ,GACNA,EAAS8Z,sBAAwBvH,GAAS,OCXhD,GAIIhiB,GAAc,UAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAwGasrB,GANgB,CAC7B1rB,OAhG6C,CAC7C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,SAAUga,GAA8B/jB,EAAO+J,MAGnD,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,SAAUga,GAA8B/jB,EAAO+J,MAGnD,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,SAAUga,GAA8B/jB,EAAO+J,MAGnDmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBhL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,SAAUia,GAA+BhkB,EAAO+J,MAGpDoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXpL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXpL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXpL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eA2CJxR,MAvC4C,CAC5CkmB,QAAS,gBAAGze,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPsQ,GAAa,CACXhd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnD2a,YAAaS,GAAYhR,EAASpK,kBAAkB,GACpDK,QACA+J,cAGJka,UAAW,gBAAGjkB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTgQ,GAAY,CACVvL,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,SAAUma,GAAuBlkB,EAAO+J,OA0B5CvR,MAtB4C,CAC5CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQmI,MACjBlS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDmX,YAAazP,GAAY4P,GACzBlX,QACA+J,cAGJwU,aAAc,gBAAGve,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAaU,GAAYjR,EAASnK,kBAAkB,GACpDI,QACA+J,gBAcN,SAASga,GACP/jB,EACA+J,GACiB,IAAD,MAChB,IAAKA,EAASoa,YACZ,OAAOpa,EAGT,IAAMqa,EAAW,eAAQra,GACnBsa,GACHrJ,GAAYoJ,EAAYxkB,kBAAkB,IACzC,UAACwkB,EAAYP,6BAAb,QAAsC,IAAtC,UAA4C7jB,EAAMmC,oBAAlD,QAAkE,IACpEnC,EAAMe,OAKR,OAHAqjB,EAAYtM,oBACVuM,GAAoB,UAAID,EAAYtM,2BAAhB,QAAuC,GAEtDsM,EAGT,SAASJ,GACPhkB,EACA+J,GACiB,IAAD,MAChB,IAAKA,EAASoa,YACZ,OAAOpa,EAGT,IAAMqa,EAAW,eAAQra,GACnBua,GACHtJ,GAAYoJ,EAAYxkB,kBAAkB,IACzC,UAACwkB,EAAYP,6BAAb,QAAsC,IAAtC,UAA4C7jB,EAAMmC,oBAAlD,QAAkE,IACpEnC,EAAMe,OAKR,OAHAqjB,EAAYpM,qBACVsM,GAAqB,UAAIF,EAAYpM,4BAAhB,QAAwC,GAExDoM,EAGT,SAASF,GACPlkB,EACA+J,GACiB,IAAD,EAChB,IAAKA,EAASoa,YACZ,OAAOpa,EAGT,IAAMqa,EAAW,eAAQra,GACnBwa,EACJvJ,GAAYoJ,EAAYxkB,kBAAkB,GAAKI,EAAMe,OAGvD,OAFAqjB,EAAYnM,aAAesM,GAAa,UAAIH,EAAYnM,oBAAhB,QAAgC,GAEjEmM,E,IC/JMI,GADO,C,kDAbpB,aAAe,IAAD,8BACZ,cAAM,gBAHRtoB,OAAQ,EAEM,EAIdmC,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,QACP6N,EAASoa,aAAc,KAPf,E,UALNrI,KCGW2I,G,kDACnB,WAAYlpB,EAAarE,EAAgBoE,GAAwB,uCACzD,SAAUpE,EAAOoE,G,gDAGzB,WACE,OAAOwoB,K,2CAGT,WACE,OAAOU,K,4BAGT,WACE,OAAOZ,O,GAdyBvoB,ICEpC,GAIIf,GAAc,QAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA+HaksB,GANc,CAC3BtsB,OAvH2C,CAC3C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQkI,QACjBjS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQkI,QACjBjS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQkI,QACjBjS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQkI,QACjBjS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBhL,QAASpH,GAAQkI,QACjBjS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXpL,QAASpH,GAAQkI,QACjBjS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXpL,QAASpH,GAAQkI,QACjBjS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXpL,QAASpH,GAAQkI,QACjBjS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eA0DJxR,MAtD0C,CAC1C6mB,SAAU,gBAAGpf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ4a,cAAe,gBAAG3kB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ6a,cAAe,gBAAG5kB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ8a,cAAe,gBAAG7kB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ+a,cAAe,gBAAG9kB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAiBJvR,MAb0C,CAC1CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC9Hegb,G,kDACnB,WAAYxpB,EAAarE,EAAgBoE,GAAwB,uCACzD,OAAQpE,EAAOoE,G,gDAGvB,WACE,OAAOopB,O,GANuBrpB,ICiCnB2pB,GADK,C,kDAxBlB,aAAe,IAAD,8BACZ,cAAM,SAHR9oB,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SACLP,EACAgc,EACAgE,EACApgB,GAEA,GAAI,EAAK1D,MAAO,CAAC,IAAD,EACR8e,EAAcrgB,GAClBwM,GAAWuF,MACX9M,EACAtF,GAAc,SAGhB0F,EAAMqC,SAAW2Y,EAAY,IAAZ,UAAkBhb,EAAMqC,gBAAxB,QAAoC,MAlB7C,E,UALNyZ,KCGV,GAIIxhB,GAAc,QAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAuGaysB,GANc,CAC3B7sB,OA/F2C,CAC3C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBhL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXpL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXpL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXpL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eAkCJxR,MA9B0C,CAC1CunB,IAAK,gBAAG9f,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACHgQ,GAAY,CACVvL,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJwT,aAAc,gBAAGvd,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZgQ,GAAY,CACVvL,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAiBJvR,MAb0C,CAC1C+kB,aAAc,gBAAGvd,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZkQ,GAAY,CACVzL,QAASpH,GAAQmI,MACjBlS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBCpGemb,G,kDACnB,WAAY3pB,EAAarE,EAAgBoE,GAAwB,uCACzD,OAAQpE,EAAOoE,G,gDAGvB,WACE,OAAO2pB,K,2CAGT,WACE,OAAOD,O,GAVuB3pB,ICKlC,GAIIf,GAAc,aAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAuFa2sB,GANmB,CAChC/sB,OA/EgD,CAChDgtB,aAAc,gBAAGplB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZmP,GAAmB,CACjB1K,QAASpH,GAAQqP,IACjBpZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBhL,QAASpH,GAAQqP,IACjBpZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsb,YAAa,gBAAGrlB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACXyP,GAAoB,CAClBhL,QAASpH,GAAQqP,IACjBpZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXpL,QAASpH,GAAQqP,IACjBpZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXpL,QAASpH,GAAQqP,IACjBpZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXpL,QAASpH,GAAQqP,IACjBpZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eAkCJxR,MA9B+C,CAC/CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQqP,IACjBpZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJub,aAAc,gBAAGtlB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZyQ,GAAQ,CACNnd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW,EACXjZ,QACA+J,eAiBJvR,MAb+C,CAC/C+sB,UAAW,gBAAGvlB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTkQ,GAAY,CACVzL,QAASpH,GAAQqP,IACjBpZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBCvFeyb,G,kDACnB,WAAYjqB,EAAarE,EAAgBoE,GAAwB,uCACzD,YAAapE,EAAOoE,G,gDAG5B,WACE,OAAO6pB,O,GAN4B9pB,ICcvC,GAIIf,GAAc,UAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA0HaitB,GANgB,CAC7BrtB,OAlH6C,CAC7C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8U,eAAgB,gBAAG7e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+U,gBAAiB,gBAAG9e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAsDJxR,MAlD4C,CAC5CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQqP,IACjBpZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDoX,YAAazP,GAAY2P,QACzBjX,QACA+J,cAGJgV,SAAU,gBAAG/e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACR0Q,GAAc,CACZjM,QAASpH,GAAQqP,IACjBpZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW8B,GAAYhR,EAASpK,kBAAkB,GAClDoX,YAAazP,GAAY2P,QACzBjX,QACA+J,cAGJ2b,QAAS,gBAAG1lB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPsQ,GAAa,CACXhd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnD2a,YAAaS,GAAYhR,EAASpK,kBAAkB,GACpDoX,YAAazP,GAAY2P,QACzBjX,QACA+J,eAyBJvR,MArB4C,CAC5C2qB,aAAc,gBAAGnjB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZkQ,GAAY,CACVzL,QAASpH,GAAQqP,IACjBpZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ4b,cAAe,gBAAG3lB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbkQ,GAAY,CACVzL,QAASpH,GAAQqP,IACjBpZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC/ES6b,GADO,C,kDApCpB,aAAe,IAAD,8BACZ,cAAM,gBAHR1pB,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SACLP,EACAgc,EACAgE,EACApgB,GAEA,GAAI,EAAK1D,MAAO,CAAC,IAAD,QACV8e,EAAcrgB,GAChBwM,GAAWuF,MACX9M,EACAtF,GAAc,WAGVurB,GACJ,UAAC7lB,EAAMa,eAAP,QAAkB,IAAM,aAAKb,EAAMc,gBAAX,QAAuB,KAA/C,UACCd,EAAMY,eADP,QACkB,GAEpBZ,EAAMU,SAAU,UAACV,EAAMU,eAAP,QAAkB,GAAKmlB,EAAW7K,EAAY,MAtBtD,EA2Bd3c,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,QACP6N,EAASqP,SAAWhS,GAAQqP,OA9BpB,E,UALNqF,KCNWgK,G,kDACnB,WAAYvqB,EAAarE,EAAgBoE,GAAwB,uCACzD,SAAUpE,EAAOoE,G,gDAGzB,WACE,OAAOmqB,K,2CAGT,WACE,OAAOG,O,GAVyBvqB,ICYpC,GAIIf,GAAc,QAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAoIautB,GANc,CAC3B3tB,OA5H2C,CAC3C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV0P,GAAmB,CACjBH,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eA6DJxR,MAzD0C,CAC1CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJic,iBAAkB,gBAAGhmB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAChBgQ,GAAY,CACVvL,QAASpH,GAAQiI,KACjBhS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJwU,aAAc,gBAAGve,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZsQ,GAAa,CACXhd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnD2a,YAAaS,GAAYhR,EAASpK,kBAAkB,GACpDoX,YAAazP,GAAYkF,OACzBxM,QACA+J,cAGJuU,kBAAmB,gBAAGte,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjBsQ,GAAa,CACXhd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnD2a,YAAaS,GAAYhR,EAASpK,kBAAkB,GACpDoX,YAAazP,GAAYkF,OACzBxM,QACA+J,eA0BJvR,MAtB0C,CAC1CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ2b,QAAS,gBAAG1lB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAaU,GAAYjR,EAASnK,kBAAkB,GACpDmX,YAAazP,GAAYkF,OACzBxM,QACA+J,gBC3Iekc,G,kDACnB,WAAY1qB,EAAarE,EAAgBoE,GAAwB,uCACzD,OAAQpE,EAAOoE,G,gDAGvB,WACE,OAAOyqB,O,GANuB1qB,ICE5BihB,GADN,YAAmBhiB,GAAc,UAAU7B,SAA3C,MACwBH,OAiBT4tB,GADQ,CAdoB,CACzC5vB,GAAI,mBACJiG,eAAgB,EAChBqB,QAAS,GACTO,UAAW,CACTmS,SAAU1F,GAAS2F,KACnBhQ,MAAO,SAACP,GAAkB,IAAD,IACjBM,EAAc,UAAGN,EAAMM,sBAAT,QAA2B,EACzCiB,EAAkB+a,GAAS,IAAMhc,EAAiB,GAAK,IAC7DN,EAAMuB,gBAAkBA,GAAe,UAAIvB,EAAMuB,uBAAV,QAA6B,OCJ1E,GAIIjH,GAAc,UAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAqMa2tB,GANgB,CAC7B/tB,OA7L6C,CAC7C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAgIJxR,MA5H4C,CAC5CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJqc,kBAAmB,gBAAGpmB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjBgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eA+GJvR,MA3G4C,CAC5C6tB,oBAAqB,gBAAGrmB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACnBkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACE2d,GAAYjR,EAASnK,kBAAkB,GACvC0mB,GAAuBvc,GACzB/J,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACE2d,GAAYjR,EAASnK,kBAAkB,GACvC2mB,GAAsBxc,GACxB/J,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACE2d,GAAYjR,EAASnK,kBAAkB,GACvC2mB,GAAsBxc,GACxB/J,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACE2d,GAAYjR,EAASnK,kBAAkB,GACvC2mB,GAAsBxc,GACxB/J,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmQ,GAAW,CACTZ,KAAM,EACN9K,QAASpH,GAAQkI,QACjBhX,OAAQ0iB,GAAYjR,EAASnK,kBAC1BV,MAAM,EAAG,GACTvI,KAAI,SAAC0G,GAAD,OAAgBA,EAAakpB,GAAsBxc,MAC1D/J,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACE2d,GAAYjR,EAASnK,kBAAkB,GACvC2mB,GAAsBxc,GACxB/J,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVmQ,GAAW,CACTZ,KAAM,EACN9K,QAASpH,GAAQkI,QACjBhX,OAAQ0iB,GAAYjR,EAASnK,kBAC1BV,MAAM,GAAI,IACVvI,KAAI,SAAC0G,GAAD,OAAgBA,EAAakpB,GAAsBxc,MAC1D/J,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACE2d,GAAYjR,EAASnK,kBAAkB,IACvC2mB,GAAsBxc,GACxB/J,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACE2d,GAAYjR,EAASnK,kBAAkB,IACvC2mB,GAAsBxc,GACxB/J,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACE2d,GAAYjR,EAASnK,kBAAkB,IACvC2mB,GAAsBxc,GACxB/J,QACA+J,gBAcN,SAASuc,GAAuBvc,GAAmC,IAAD,EAChE,OACEiR,GAAYjR,EAASnK,kBAAkB,IAAvC,UAA6CmK,EAASyc,qBAAtD,QAAuE,GAI3E,SAASD,GAAsBxc,GAAmC,IAAD,EAC/D,OACEiR,GAAYjR,EAASnK,kBAAkB,IAAvC,UAA6CmK,EAASyc,qBAAtD,QAAuE,G,IClK5DC,GADO,C,kDA5CpB,aAAe,IAAD,8BACZ,cAAM,gBAHRvqB,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SACLP,EACAgc,EACArc,EACAsc,GAEA,GAAI,EAAK/f,MAAO,CAAC,IAAD,EAORwG,EAA4B,GANnB/H,GACbwM,GAAWsF,MACX9M,EACArF,GAAc,WAGa,GAC7B0F,EAAM0C,cAAgBA,GAAa,UAAI1C,EAAM0C,qBAAV,QAA2B,MAnBtD,E,UALNoZ,I,kDAoCR,aAAe,IAAD,8BACZ,cAAM,YAHR5f,MAAQ,EAEM,EAIdmC,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,MAAQ,EAAG6N,EAASyc,cAAgB,EACpC,EAAKtqB,MAAQ,GAAI6N,EAASyc,cAAgB,GAC9Czc,EAASyc,cAAgB,EAAKtqB,QARzB,E,UALN4f,KCpCW4K,G,kDACnB,WAAYnrB,EAAarE,EAAgBoE,GAAwB,uCACzD,SAAUpE,EAAOoE,G,gDAGzB,WACE,OAAO6qB,K,2CAGT,WACE,OAAOM,K,4BAGT,WACE,OAAOP,O,GAdyB7qB,ICEpC,GAIIf,GAAc,SAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA8IamuB,GANe,CAC5BvuB,OAtI4C,CAC5C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8U,eAAgB,gBAAG7e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+U,gBAAiB,gBAAG9e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eA0EJxR,MAtE2C,CAC3C6mB,SAAU,gBAAGpf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ4W,QAAS,gBAAG3gB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAyDJvR,MArD2C,CAC3CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ,uBAAwB,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACtBkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACEyd,GAAa/Q,EAASrK,mBAAmB,GACzCsb,GAAYjR,EAASnK,kBAAkB,GACzCI,QACA+J,cAGJ,uBAAwB,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACtBkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACEyd,GAAa/Q,EAASrK,mBAAmB,GACzCsb,GAAYjR,EAASnK,kBAAkB,GACzCI,QACA+J,cAGJ,uBAAwB,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACtBkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACEyd,GAAa/Q,EAASrK,mBAAmB,GACzCsb,GAAYjR,EAASnK,kBAAkB,GACzCI,QACA+J,cAGJ,uBAAwB,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACtBkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WACEyd,GAAa/Q,EAASrK,mBAAmB,GACzCsb,GAAYjR,EAASnK,kBAAkB,GACzCI,QACA+J,gBC7Ie6c,G,kDACnB,WAAYrrB,EAAarE,EAAgBoE,GAAwB,uCACzD,QAASpE,EAAOoE,G,gDAGxB,WACE,OAAOqrB,O,GANwBtrB,ICQnC,GAIIf,GAAc,WAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA0GaquB,GANiB,CAC9BzuB,OAlG8C,CAC9C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAoCJxR,MAhC6C,CAC7CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRiQ,GAAW,CACTV,KAAM,EACN9K,QAASpH,GAAQiI,KACjB/W,OAAQyiB,GAAYhR,EAASpK,kBAAkBT,MAAM,EAAG,GACxDc,QACA+J,eA0BJvR,MAtB6C,CAC7CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRmQ,GAAW,CACTZ,KAAM,EACN9K,QAASpH,GAAQiI,KACjB/W,OAAQ0iB,GAAYjR,EAASnK,kBAAkBV,MAAM,EAAG,GACxDc,QACA+J,cAGJ+c,YAAa,gBAAG9mB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACXkQ,GAAY,CACVzL,QAASpH,GAAQiI,KACjBhS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC3Gegd,G,kDACnB,WAAYxrB,EAAarE,EAAgBoE,GAAwB,uCACzD,UAAWpE,EAAOoE,G,gDAG1B,WACE,OAAOurB,O,GAN0BxrB,ICQrC,GAIIf,GAAc,QAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAqHawuB,GANc,CAC3B5uB,OA7G2C,CAC3C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8S,WAAY,gBAAG7c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV2P,GAAQ,CACNrc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+S,kBAAmB,gBAAG9c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjB4P,GAAe,CACbnL,QAASpH,GAAQkI,QACjBjS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eAyCJxR,MArC0C,CAC1C0uB,qBAAsB,gBAAGjnB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACpBgQ,GAAY,CACVvL,QAASpH,GAAQkI,QACjBjS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJpJ,SAAU,gBAAGX,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACR8Q,GAAa,CACXxd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAyBJvR,MArB0C,CAC1C0uB,2BAA4B,gBAAGlnB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAC1BkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJod,2BAA4B,gBAAGnnB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAC1BkQ,GAAY,CACVzL,QAASpH,GAAQkI,QACjBjS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBCtHeqd,G,kDACnB,WAAY7rB,EAAarE,EAAgBoE,GAAwB,uCACzD,OAAQpE,EAAOoE,G,gDAGvB,WACE,OAAO0rB,O,GANuB3rB,ICclC,GAIIf,GAAc,QAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAuKa6uB,GANc,CAC3BjvB,OA/J2C,CAC3C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8U,eAAgB,gBAAG7e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+U,gBAAiB,gBAAG9e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAkGJxR,MA9F0C,CAC1C+uB,mBAAoB,gBAAGtnB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAClBgQ,GAAY,CACVvL,QAASpH,GAAQoP,MACjBnZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJwd,4BAA6B,gBAAGvnB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAC3BgQ,GAAY,CACVvL,QAASpH,GAAQoP,MACjBnZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJyd,2BAA4B,gBAAGxnB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAC1BgQ,GAAY,CACVvL,QAASpH,GAAQoP,MACjBnZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ0d,4BAA6B,YAAuC,IAApCznB,EAAmC,EAAnCA,MAAO+J,EAA4B,EAA5BA,SACrC,YAAqCjP,IAAjCiP,EAAS6Y,oBACJ7I,GAAY,CACjBvL,QAASzE,EAAS6Y,oBAClBvlB,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,aAGK,CACLC,OAAQ,CAACtP,OAKfgtB,gCAAiC,YAAuC,IAApC1nB,EAAmC,EAAnCA,MAAO+J,EAA4B,EAA5BA,SACzC,YAAqCjP,IAAjCiP,EAAS6Y,oBACJ7I,GAAY,CACjBvL,QAASzE,EAAS6Y,oBAClBvlB,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,aAGK,CACLC,OAAQ,CAACtP,QA6CflC,MAvC0C,CAC1CmvB,cAAe,gBAAG3nB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbkQ,GAAY,CACVzL,QAASpH,GAAQoP,MACjBnZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ6d,kBAAmB,gBAAG5nB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjBsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAaU,GAAYjR,EAASnK,kBAAkB,GACpDmX,YAAazP,GAAYkF,OACzBxM,QACA+J,cAGJ8d,kBAAmB,gBAAG7nB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjBkQ,GAAY,CACVzL,QAASpH,GAAQoP,MACjBnZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ+d,sBAAuB,gBAAG9nB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACrBsQ,GAAa,CACXhd,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnD0a,YAAaU,GAAYjR,EAASnK,kBAAkB,GACpDmX,YAAazP,GAAYkF,OACzBxM,QACA+J,gBC/KSge,GADK,CAAClF,ICIAmF,G,kDACnB,WAAYzsB,EAAarE,EAAgBoE,GAAwB,uCACzD,OAAQpE,EAAOoE,G,gDAGvB,WACE,OAAO+rB,K,2CAGT,WACE,OAAOU,O,GAVuB1sB,ICHnB4sB,GADQ,CAACpF,ICQxB,GAIIvoB,GAAc,WAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA8Ga0vB,GANiB,CAC9B9vB,OAtG8C,CAC9C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQoP,MACjBnZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQoP,MACjBnZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQoP,MACjBnZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQoP,MACjBnZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBhL,QAASpH,GAAQoP,MACjBnZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXpL,QAASpH,GAAQoP,MACjBnZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXpL,QAASpH,GAAQoP,MACjBnZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXpL,QAASpH,GAAQoP,MACjBnZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eAyCJxR,MArC6C,CAC7CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQoP,MACjBnZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAgCJvR,MA5B6C,CAC7CsnB,IAAK,gBAAG9f,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACHkQ,GAAY,CACVzL,QAASpH,GAAQoP,MACjBnZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ4Y,uBAAwB,YAAuC,IAApC3iB,EAAmC,EAAnCA,MAAO+J,EAA4B,EAA5BA,SAChC,YAAqCjP,IAAjCiP,EAAS6Y,oBACJ3I,GAAY,CACjBzL,QAASzE,EAAS6Y,oBAClBvlB,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,aAGK,CACLC,OAAQ,CAACtP,SCzGIytB,G,kDACnB,WAAY5sB,EAAarE,EAAgBoE,GAAwB,uCACzD,UAAWpE,EAAOoE,G,gDAG1B,WACE,OAAO4sB,K,2CAGT,WACE,OAAOD,O,GAV0B5sB,ICQrC,GAIIf,GAAc,aAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA+Ma4vB,GANmB,CAChChwB,OAvMgD,CAChD,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8S,WAAY,gBAAG7c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV2P,GAAQ,CACNrc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+S,kBAAmB,gBAAG9c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjB4P,GAAe,CACbnL,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJse,gBAAiB,gBAAGroB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfoQ,GAAe,CACb3L,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJue,gBAAiB,gBAAGtoB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfoQ,GAAe,CACb3L,QAASpH,GAAQmI,MACjBlS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eA4GJxR,MAxG+C,CAC/CgwB,gBAAiB,gBAAGvoB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfgQ,GAAY,CACVvL,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACN9K,QAASpH,GAAQmI,MACjBjX,OAAQyiB,GAAYhR,EAASpK,kBAAkBT,MAAM,EAAG,GACxDc,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV0P,GAAmB,CACjBH,KAAM,EACN9K,QAASpH,GAAQmI,MACjBjX,OAAQyiB,GAAYhR,EAASpK,kBAAkBT,MAAM,EAAG,IACxDc,QACA+J,cAGJye,gBAAiB,gBAAGxoB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfgQ,GAAY,CACVvL,QAASpH,GAAQmI,MACjBlS,WAAY0d,GAAYhR,EAASpK,kBAAkB,IACnDK,QACA+J,eAiCJvR,MA7B+C,CAC/CiwB,cAAe,gBAAGzoB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACbkQ,GAAY,CACVzL,QAASpH,GAAQmI,MACjBlS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ2e,eAAgB,gBAAG1oB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdkQ,GAAY,CACVzL,QAASpH,GAAQmI,MACjBlS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ4e,gBAAiB,gBAAG3oB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfkQ,GAAY,CACVzL,QAASpH,GAAQmI,MACjBlS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBClNe6e,G,kDACnB,WAAYrtB,EAAarE,EAAgBoE,GAAwB,uCACzD,YAAapE,EAAOoE,G,gDAG5B,WACE,OAAO8sB,O,GAN4B/sB,ICOvC,GAIIf,GAAc,SAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAoIaqwB,GANe,CAC5BzwB,OA5H4C,CAC5C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8S,WAAY,gBAAG7c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV2P,GAAQ,CACNrc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+S,kBAAmB,gBAAG9c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjB4P,GAAe,CACbnL,QAASpH,GAAQoP,MACjBnZ,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAiDJxR,MA7C2C,CAC3C6mB,SAAU,gBAAGpf,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQoP,MACjBnZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ4W,QAAS,gBAAG3gB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPgQ,GAAY,CACVvL,QAASpH,GAAQoP,MACjBnZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAgCJvR,MA5B2C,CAC3CsnB,IAAK,gBAAG9f,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACHkQ,GAAY,CACVzL,QAASpH,GAAQoP,MACjBnZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJ4Y,uBAAwB,YAAuC,IAApC3iB,EAAmC,EAAnCA,MAAO+J,EAA4B,EAA5BA,SAChC,YAAqCjP,IAAjCiP,EAAS6Y,oBACJ3I,GAAY,CACjBzL,QAASzE,EAAS6Y,oBAClBvlB,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,aAGK,CACLC,OAAQ,CAACtP,SCnIFouB,GADM,CAACjG,ICIDkG,G,kDACnB,WAAYxtB,EAAarE,EAAgBoE,GAAwB,uCACzD,QAASpE,EAAOoE,G,gDAGxB,WACE,OAAOutB,K,2CAGT,WACE,OAAOC,O,GAVwBztB,ICKnC,GAIIf,GAAc,aAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAwHawwB,GANmB,CAChC5wB,OAhHgD,CAChD,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,eAkDJxR,MA9C+C,CAC/C0wB,SAAU,gBAAGjpB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAyCJvR,MArC+C,CAC/C0wB,aAAc,gBAAGlpB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJof,aAAc,gBAAGnpB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJqf,aAAc,gBAAGppB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJsf,YAAa,gBAAGrpB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACXkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBCxHeuf,G,kDACnB,WAAY/tB,EAAarE,EAAgBoE,GAAwB,uCACzD,YAAapE,EAAOoE,G,gDAG5B,WACE,OAAO0tB,O,GAN4B3tB,ICgDxBkuB,GADK,C,kDAlClB,aAAe,IAAD,8BACZ,cAAM,cAHRrtB,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SACLP,EACAgc,EACAgE,EACApgB,GAEA,GAAI,EAAK1D,MAAO,CAAC,IAAD,MACV8e,EAAcrgB,GAChBwM,GAAWuF,MACX9M,EACAtF,GAAc,SAGhB0F,EAAMsC,eAAiB0Y,EAAY,IAAZ,UAAkBhb,EAAMsC,sBAAxB,QAA0C,GACjEtC,EAAMuC,gBAAkByY,EAAY,IAAZ,UAAkBhb,EAAMuC,uBAAxB,QAA2C,GACnEvC,EAAMwC,eAAiBwY,EAAY,IAAZ,UAAkBhb,EAAMwC,sBAAxB,QAA0C,MApBzD,EAyBdnE,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,QACP6N,EAASqP,SAAWhS,GAAQoP,SA5BpB,E,UALNsF,KCFV,GAAqDxhB,GAAc,QAAnDwgB,GAAhB,GAAQ1iB,OAA6B2iB,GAArC,GAA8BxiB,MA2FfixB,GALc,CAC3BpxB,OArF2C,CAC3C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAgBJxR,MAZ0C,CAC1CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQoP,MACjBnZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,gBCtFe0f,G,kDACnB,WAAYluB,EAAarE,EAAgBoE,GAAwB,uCACzD,OAAQpE,EAAOoE,G,gDAGvB,WACE,OAAOkuB,K,2CAGT,WACE,OAAOD,O,GAVuBluB,ICKlC,GAIIf,GAAc,WAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAkGakxB,GANiB,CAC9BtxB,OA1F8C,CAC9C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV0P,GAAmB,CACjBH,KAAM,EACNhhB,OAAQwiB,GAAa/Q,EAASrK,mBAAmBR,MAAM,EAAG,GAC1Dc,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eA2BJxR,MAvB6C,CAC7CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRiQ,GAAW,CACTV,KAAM,EACN9K,QAASpH,GAAQmI,MACjBjX,OAAQyiB,GAAYhR,EAASpK,kBAAkBT,MAAM,EAAG,GACxDc,QACA+J,eAiBJvR,MAb6C,CAC7CmxB,aAAc,gBAAG3pB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZkQ,GAAY,CACVzL,QAASpH,GAAQmI,MACjBlS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBClGe6f,G,kDACnB,WAAYruB,EAAarE,EAAgBoE,GAAwB,uCACzD,UAAWpE,EAAOoE,G,gDAG1B,WACE,OAAOouB,O,GAN0BruB,ICarC,GAIIf,GAAc,UAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA4IaqxB,GANgB,CAC7BzxB,OApI6C,CAC7C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ8U,eAAgB,gBAAG7e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+U,gBAAiB,gBAAG9e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAwEJxR,MApE4C,CAC5CuxB,SAAU,gBAAG9pB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJggB,eAAgB,gBAAG/pB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACd0Q,GAAc,CACZpd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW8B,GAAYhR,EAASpK,kBAAkB,GAClD6O,QAASpH,GAAQoI,KACjBuH,YAAazP,GAAY2P,QACzBjX,QACA+J,cAGJigB,eAAgB,gBAAGhqB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACd0Q,GAAc,CACZpd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW8B,GAAYhR,EAASpK,kBAAkB,GAClD6O,QAASpH,GAAQoI,KACjBuH,YAAazP,GAAY2P,QACzBjX,QACA+J,cAGJkgB,eAAgB,gBAAGjqB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACd0Q,GAAc,CACZpd,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW8B,GAAYhR,EAASpK,kBAAkB,GAClD6O,QAASpH,GAAQoI,KACjBuH,YAAazP,GAAY2P,QACzBjX,QACA+J,cAGJ+V,IAAK,gBAAG9f,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACHgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAyBJvR,MArB4C,CAC5CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQsP,SACjBrZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJmgB,QAAS,gBAAGlqB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBClJeogB,G,kDACnB,WAAY5uB,EAAarE,EAAgBoE,GAAwB,uCACzD,SAAUpE,EAAOoE,G,gDAGzB,WACE,OAAOuuB,O,GANyBxuB,ICgCrB+uB,GADO,C,kDAvBpB,aAAe,IAAD,8BACZ,cAAM,eAHRluB,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SACLP,EACAgc,EACAgE,EACApgB,GAEA,GAAI,EAAK1D,MAAO,CAAC,IAAD,EACR8e,EAAcrgB,GAClBwM,GAAWuF,MACX9M,EACAtF,GAAc,WAEhB0F,EAAMuC,gBAAkByY,EAAY,IAAZ,UAAkBhb,EAAMuC,uBAAxB,QAA2C,MAjB3D,E,UALNuZ,KCGV,GAIIxhB,GAAc,UAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAuHa6xB,GANgB,CAC7BjyB,OA/G6C,CAC7C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB1K,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJugB,gBAAiB,gBAAGtqB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBhL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJwgB,gBAAiB,gBAAGvqB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBhL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJygB,gBAAiB,gBAAGxqB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBhL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ0gB,gBAAiB,gBAAGzqB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBhL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ2gB,gBAAiB,gBAAG1qB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACfyP,GAAoB,CAClBhL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXpL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXpL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXpL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eA0BJxR,MAtB4C,CAC5CgjB,SAAU,gBAAGvb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRgQ,GAAY,CACVvL,QAASpH,GAAQoI,KACjBnS,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,eAiBJvR,MAb4C,CAC5CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBCpHe4gB,G,kDACnB,WAAYpvB,EAAarE,EAAgBoE,GAAwB,uCACzD,SAAUpE,EAAOoE,G,gDAGzB,WACE,OAAO+uB,K,2CAGT,WACE,OAAOD,O,GAVyB/uB,ICoBrBuvB,GADQ,C,kDAdrB,aAAe,IAAD,8BACZ,cAAM,iBAHR1uB,OAAQ,EAEM,EAIdmC,cAAgB,CACdkC,MAAO,SAACwJ,GACF,EAAK7N,QACP6N,EAASoP,eAAiB/R,GAAQoI,KAClCzF,EAAS8gB,cAAe,KARhB,E,UALN/O,KCCJO,GADN,YAAiB/hB,GAAc,WAAW7B,SAA1C,MACwBH,OA+BTwyB,GADS,CANoB,CAC1Cx0B,GAAI,oBACJiG,eAAgB,EAChBqB,QAAS,C,kDAnBT,aAAe,IAAD,8BACZ,cAAM,sBAHR1B,MAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GAAkB,IAAD,EACnB0B,EAAe,EAAKxF,MAAQmgB,GAAS,IACrC,EAAKngB,MAAQ,GAAK,EAAKA,MAAQ,MACjCwF,EAAehH,KAGjBsF,EAAM0B,aAAeA,GAAY,UAAI1B,EAAM0B,oBAAV,QAA0B,KAXjD,E,UALNoa,OCEV,GAIIxhB,GAAc,WAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MAgIauyB,GALiB,CAC9B3yB,OAzH8C,CAC9C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KACfuwB,GACElQ,GAAa/Q,EAASrK,mBAAmB,GACzCqK,IAGJ/J,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAY2tB,GACVlQ,GAAa/Q,EAASrK,mBAAmB,GACzCqK,GAEF/J,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAY2tB,GACVlQ,GAAa/Q,EAASrK,mBAAmB,GACzCqK,GAEF/J,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KACfuwB,GACElQ,GAAa/Q,EAASrK,mBAAmB,GACzCqK,IAGJ/J,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAY2tB,GACVlQ,GAAa/Q,EAASrK,mBAAmB,GACzCqK,GAEF/J,QACA+J,cAGJ8S,WAAY,gBAAG7c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACV2P,GAAQ,CACNrc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ+S,kBAAmB,gBAAG9c,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACjB4P,GAAe,CACbnL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJkhB,iBAAkB,gBAAGjrB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OAChB4P,GAAe,CACbnL,QAASpH,GAAQoI,KACjBnS,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAwBJvR,MApB6C,CAC7CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,cAGJmhB,wBAAyB,gBAAGlrB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACvBkQ,GAAY,CACVzL,QAASpH,GAAQoI,KACjBnS,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBAaN,SAASihB,GACP3tB,EACA0M,GAEA,OAAKA,EAAS8gB,aAIPxtB,EAAa0d,GAAYhR,EAASpK,kBAAkB,GAHlDtC,E,IChJU8tB,G,kDACnB,WAAY5vB,EAAarE,EAAgBoE,GAAwB,uCACzD,UAAWpE,EAAOoE,G,gDAG1B,WACE,OAAOyvB,K,2CAGT,WACE,OAAOH,K,4BAGT,WACE,OAAOE,O,GAd0BzvB,ICIrC,GAIIf,GAAc,WAHRwgB,GADV,GACE1iB,OACO2iB,GAFT,GAEExiB,MACOyiB,GAHT,GAGExiB,MA+Ha4yB,GANiB,CAC9BhzB,OAvH8C,CAC9C,UAAW,gBAAG4H,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTsP,GAAkB,CAChBC,KAAM,EACNhhB,OAAQkC,MAAM,GAAGC,KAAKqgB,GAAa/Q,EAASrK,mBAAmB,IAC/DM,QACA+J,cAGJ,UAAW,gBAAG/J,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACTmP,GAAmB,CACjB7b,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJmR,WAAY,gBAAGlb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACVyP,GAAoB,CAClBnc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJoR,UAAW,gBAAGnb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACT6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJqR,aAAc,gBAAGpb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZ6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,GACrDM,QACA+J,cAGJsR,cAAe,gBAAGrb,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACb6P,GAAa,CACXvc,WAAYyd,GAAa/Q,EAASrK,mBAAmB,IACrDM,QACA+J,eAmDJxR,MA/C6C,CAC7C8yB,eAAgB,gBAAGrrB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACdgQ,GAAY,CACVvL,QAASpH,GAAQqP,IACjBpZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJuhB,aAAc,gBAAGtrB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACZgQ,GAAY,CACVvL,QAASpH,GAAQqP,IACjBpZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJ4W,QAAS,gBAAG3gB,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACPgQ,GAAY,CACVvL,QAASpH,GAAQqP,IACjBpZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDK,QACA+J,cAGJgV,SAAU,gBAAG/e,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACR0Q,GAAc,CACZjM,QAASpH,GAAQqP,IACjBpZ,WAAY0d,GAAYhR,EAASpK,kBAAkB,GACnDsZ,UAAW8B,GAAYhR,EAASpK,kBAAkB,GAClDK,QACA+J,eAiBJvR,MAb6C,CAC7CkjB,SAAU,gBAAG1b,EAAH,EAAGA,MAAO+J,EAAV,EAAUA,SAAV,OACRkQ,GAAY,CACVzL,QAASpH,GAAQqP,IACjBpZ,WAAY2d,GAAYjR,EAASnK,kBAAkB,GACnDI,QACA+J,gBC1FAwhB,GAA+C,CACnDC,OAAQ3P,GACR4P,KAAMrO,GACNsO,MAAO5N,GACP6N,MAAOvN,GACPwN,QAASlN,GACTmN,OAAQ3M,GACR4M,QAAStM,GACTuM,SAAUpM,GACVqM,MAAO9L,GACP+L,MAAOxL,GACPyL,KAAMnL,GACNoL,OAAQ/K,GACRgL,MAAOzK,GACP0K,MAAOlK,GACPmK,KAAM/J,GACNgK,MAAO9J,GACP+J,OAAQzJ,GACR0J,OAAQnJ,GACRoJ,KAAM/I,GACNgJ,OAAQlI,GACRmI,KAAM7H,GACN8H,KAAM3H,GACN4H,UAAWtH,GACXuH,OAAQjH,GACRkH,KAAM/G,GACNgH,OAAQvG,GACRwG,MAAOtG,GACPuG,QAASpG,GACTqG,KAAMhG,GACNiG,KAAMrF,GACNsF,QAASnF,GACToF,UAAW3E,GACX4E,MAAOzE,GACP0E,UAAWnE,GACXoE,KAAMjE,GACNkE,QAAS/D,GACTgE,OAAQzD,GACR0D,OAAQlD,GACRmD,QAAS3C,GACT4C,Q,kDC7EA,WAAYxyB,EAAarE,EAAgBoE,GAAwB,uCACzD,UAAWpE,EAAOoE,G,gDAG1B,WACE,OAAO8vB,O,GAN0B/vB,KDiFrC,SAAS2yB,GAAwB13B,GAA+B,IAAD,EAC7D,iBAAOi1B,GAAWj1B,UAAlB,QAAyB+E,GAGpB,SAAS4yB,KAIF,IAHZ33B,EAGW,uDAHE,GACbY,EAEW,uCADXoE,EACW,uCACL4yB,EAAuBF,GAAwB13B,GAErD,OAAO,IAAI43B,EAAqB53B,EAAIY,EAAOoE,G,IE3D9B6yB,G,4MA1BbnnB,SAAW,SAAC9K,GACV,EAAK4I,MAAMspB,eAAelyB,I,4CAG5B,WACE,OACE,gBAAC,GAAD,CACE5F,GAAG,mBACH0P,MAAM,aACNjB,aAAa,GACb7I,MAAOD,KAAK6I,MAAMrO,YAClBuQ,SAAU/K,KAAK+K,SALjB,UAOE,eAAC,GAAOE,KAAR,CAAalB,MAAM,GAAG9J,MAAM,WhKoPNpB,IAAxBtF,IACFA,EAAsBqH,OAAOK,QAAQjH,GAClCoe,MAAK,qCAAcC,GAAd,UAAQ9Y,MAAR,mBAAqC+Y,GAArC,UAA+B/Y,MAA/B,OACJ8Y,EAAME,cAAcD,MAErB5d,KAAI,mCAAEL,EAAF,iBAAaA,MAGfd,GgK3P8BmB,KAAI,SAACL,GAAD,OACjC,eAAC,GAAO4Q,KAAR,CACElB,MAAO7J,EAAsB7F,GAAIkF,KACjCU,MAAO5F,GACFA,a,GAnBa8P,IAAMC,WC6FrBgoB,G,4MA3EbD,eAAiB,SAAC93B,GAChB,MAA+B,EAAKwO,MAAM2D,SAASnJ,UAC7CA,EAAY2uB,GAAc33B,EADhC,EAAQY,MAAR,EAAeoE,aAETS,EAAmBuD,EAAUqO,aACnC,EAAK7I,MAAMiH,iBAAiB,CAAEzM,YAAWvD,qBACzC,EAAK+I,MAAMkH,YAAY,CAAE1M,YAAWvD,sB,EAGtCuyB,kBAAoB,SAACp3B,GACnB,IAAMoI,EAAY,EAAKwF,MAAM2D,SAASnJ,UACtCA,EAAUpI,MAAQA,EAClB,IAAM6E,EAAmBuD,EAAUqO,aACnC,EAAK7I,MAAMiH,iBAAiB,CAAEzM,YAAWvD,qBACzC,EAAK+I,MAAMkH,YAAY,CAAE1M,YAAWvD,sB,EAGtCwyB,uBAAyB,SAACC,GACxB,IAAMlvB,EAAY,EAAKwF,MAAM2D,SAASnJ,UACtCA,EAAUhE,YAAckzB,EACxB,IAAMzyB,EAAmBuD,EAAUqO,aACnC,EAAK7I,MAAMiH,iBAAiB,CAAEzM,YAAWvD,qBACzC,EAAK+I,MAAMkH,YAAY,CAAE1M,YAAWvD,sB,EAGtCqZ,cAAgB,WACd,IAAQrZ,EAAqB,EAAK+I,MAAM2D,SAAhC1M,iBACR,EAAK+I,MAAMiH,iBAAiB,CAAEhQ,qBAC9B,EAAK+I,MAAMkH,YAAY,CAAEjQ,iBAAiB,YAAKA,M,4CAGjD,WAAU,IAAD,OACC0M,EAAaxM,KAAK6I,MAAlB2D,SAER,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,UACE,eAAC,GAAD,CACEhS,YAAagS,EAASnJ,UAAUhJ,GAChC83B,eAAgBnyB,KAAKmyB,mBAIzB,eAAC,GAAD,UACE,eAAC,GAAD,CACE93B,GAAG,wBACH0P,MAAM,SACNjB,aAAc,EACd7I,MAAOuM,EAASnJ,UAAUpI,MAC1BwO,QAASzJ,KAAKqyB,kBACdnoB,UAAU,kBAId,eAAC,GAAD,UACE,eAAC,GAAD,CACE7P,GAAG,+BACH0P,MAAM,YACNjB,cAAc,EACd7I,MAAOuM,EAASnJ,UAAUhE,YAC1B0L,SAAU/K,KAAKsyB,2BAIlB9lB,EAAS1M,iBAAiBpF,KAAI,SAACuH,GAC9B,OACE,eAAC,GAAD,UACE,eAAC,GAAD,CAAaA,OAAQA,EAAQkX,cAAe,EAAKA,iBADpClX,EAAO5H,c,GAlEA8P,IAAMC,W,kBCyGzBooB,G,4MAlGbC,cAAgB,SAACx3B,GACf,EAAK4N,MAAM6pB,mBAAmB,CAAElW,WAAYvhB,IAC5C,EAAK4N,MAAMkH,YAAY,CAAEyM,WAAYvhB,K,EAGvC03B,YAAc,SAACh0B,GAAD,OAAmB,SAACsB,GAChC,IAAM6c,EAAW,EAAKjU,MAAM2D,SAASsQ,SACrCA,EAASxC,IAAI3b,EAAMsB,EAAQ,KAC3B,EAAK4I,MAAM6pB,mBAAmB,CAAE5V,aAChC,EAAKjU,MAAMkH,YAAY,CAAE+M,e,EAG3B8V,YAAc,SAACxW,GACb,EAAKvT,MAAM6pB,mBAAmB,CAAEtW,aAChC,EAAKvT,MAAMkH,YAAY,CAAEqM,c,EAG3ByW,YAAc,SAAC1X,GACb,EAAKtS,MAAM6pB,mBAAmB,CAC5BvX,SAAUnC,GAASmC,KAErB,EAAKtS,MAAMkH,YAAY,CACrBoL,SAAUnC,GAASmC,M,4CAIvB,WAAU,IAAD,OACP,EAAqDnb,KAAK6I,MAAM2D,SAAxDgQ,EAAR,EAAQA,WAAYM,EAApB,EAAoBA,SAAUV,EAA9B,EAA8BA,SAAUjB,EAAxC,EAAwCA,SACxC,OACE,gBAAC,GAAD,WACE,gBAAC,GAAD,mBAEE,gBAAC2X,GAAA,EAAD,CACEvzB,KAAK,kBACLZ,KAAK,QACLsL,KAAK,KACLhK,MAAOmc,EACPrR,SAAU/K,KAAK4yB,YALjB,UAOE,eAACG,GAAA,EAAD,CAAc9yB,MAAM,OAAO2Q,QAAQ,oBAAnC,kBAGA,eAACmiB,GAAA,EAAD,CAAc9yB,MAAM,OAAO2Q,QAAQ,oBAAnC,kBAGA,eAACmiB,GAAA,EAAD,CAAc9yB,MAAM,UAAU2Q,QAAQ,oBAAtC,2BAMJ,eAAC,GAAD,UACE,eAAC,GAAD,CACEvW,GAAG,oBACH0P,MAAM,eACNjB,aAAc,EACd7I,MAAOuc,EACP/S,QAASzJ,KAAKyyB,cACdvoB,UAAU,kBAIbtJ,OAAOiC,OAAOsI,IAASzQ,KAAI,SAAC6X,GAAD,OAC1B,gBAAC,GAAD,WACE,eAAC,GAAD,CACElY,GAAE,oBAAekY,EAAf,UACFxI,MAAK,gBAAW/C,GAAWuL,GAAtB,SACLzJ,aAAc,EACd7I,MAA+B,IAAxB6c,EAASpC,IAAInI,GACpB9I,QAAS,EAAKkpB,YAAYpgB,GAC1BrI,UAAU,gBAEZ,qCATaqI,MAajB,eAAC,GAAD,UACE,eAAC,GAAD,CACElY,GAAG,kBACH0P,MAAM,YACNjB,aAAckQ,GAASmF,KACvBle,MAAOkb,EACPpQ,SAAU/K,KAAK6yB,YALjB,SAOGjyB,OAAOiC,OAAOmW,IAAUte,KAAI,SAACygB,GAAD,OAC3B,eAAC,GAAOlQ,KAAR,CAEElB,MAAO/C,GAAWmU,GAClBlb,MAAOkb,GAFFA,iB,GAvFYhR,IAAMC,W,SCZlB4oB,G,WACnB,WACE34B,GAIC,IAHDY,EAGA,uDAHgB,EAChBoE,EAEA,wDADApB,EACA,uDADqB,EACrB,yBAQMqB,IAAc,GARpB,KAqCFC,UArCE,OAsCFZ,UAtCE,OAuCFs0B,UAvCE,OAwCFzzB,eAxCE,OAyCFC,sBAzCE,OA0CF7E,sBA1CE,OA2CFs4B,oBA3CE,OA6CMC,aAAuB,EA7C7B,KAsDMvzB,cAAwB,EAtD9B,KA+DMwzB,YAAsB,EA/D5B,KA4EFrvB,MAAe,GA5Eb,KA6EFigB,iBA7EE,OA8EF9lB,aA9EE,OA+EF6B,eAAiC,GA9E/BC,KAAKmzB,aAAel4B,EACpB+E,KAAKJ,aAAeP,EACpBW,KAAKozB,YAAcn1B,EAEnB+B,KAAK3F,GAAKA,E,oCAIZ,WACE,OAAO2F,KAAKV,K,IAEd,SAAOW,GAELD,KAAKV,IAAMW,EAEX,IAAMC,EAAOzC,GAAQwC,GACrBD,KAAKT,KAAL,OAAYW,QAAZ,IAAYA,OAAZ,EAAYA,EAAMX,KAClBS,KAAKrB,KAAL,OAAYuB,QAAZ,IAAYA,OAAZ,EAAYA,EAAMvB,KAClBqB,KAAKizB,KAAL,OAAY/yB,QAAZ,IAAYA,OAAZ,EAAYA,EAAM+yB,KAClBjzB,KAAKR,UAAL,OAAiBU,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMV,UACvBQ,KAAKP,iBAAL,OAAwBS,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAMhF,WAC9B8E,KAAKpF,iBnKoJA+C,EmKpJyCsC,EnKoJfzE,GmKlJ/BwE,KAAKkzB,eAAiBn1B,GAAqBkC,QACfpB,IAAxBmB,KAAKkzB,iBACPlzB,KAAKgkB,YAAc7kB,GACjBa,KAAK/B,WACL+B,KAAKkzB,iBAGTlzB,KAAK9B,QAAU8B,KAAKqzB,WAAWrzB,KAAK/B,YACpC+B,KAAKD,eAAiBC,KAAKS,oBAE3BT,KAAK+D,MAAQ/D,KAAKszB,WAAWtzB,KAAKuzB,YAAavzB,KAAKX,e,uBAYtD,WACE,OAAOW,KAAKmzB,c,IAEd,SAAgBlzB,GACdD,KAAKmzB,aAAelzB,EACpBD,KAAK+D,MAAQ/D,KAAKszB,WAAWrzB,EAAOD,KAAKX,e,uBAI3C,WACE,OAAOW,KAAKJ,c,IAEd,SAAgBK,GACdD,KAAKJ,aAAeK,EACpBD,KAAK+D,MAAQ/D,KAAKszB,WAAWtzB,KAAKuzB,YAAatzB,K,sBAIjD,WACE,OAAOD,KAAKozB,a,IAEd,SAAenzB,GACbD,KAAKozB,YAAcnzB,OACSpB,IAAxBmB,KAAKkzB,iBACPlzB,KAAKgkB,YAAc7kB,GAAmBc,EAAOD,KAAKkzB,gBAClDlzB,KAAK9B,QAAU8B,KAAKqzB,WAAWpzB,GAC/BD,KAAKD,eAAiBC,KAAKS,mBAAkB,M,uBASjD,WACE,MAAmB,KAAZT,KAAK3F,K,wBAId,SAAWk5B,EAAqBl0B,GAC9B,QACgBR,IAAdmB,KAAKizB,WACcp0B,IAAnBmB,KAAKR,gBACqBX,IAA1BmB,KAAKP,uBACqBZ,IAA1BmB,KAAKpF,iBAGL,MAAO,GAGT,GACE+F,MAAM4yB,IACNA,EAAc,GACbvzB,KAAKizB,MAAQ,GAAKM,EAAc,IACjCA,EAAc,GAcd,YAVmB10B,IAAfmB,KAAK+D,MAEOnD,OAAOC,KAAKb,KAAK+D,OAAO7J,QAAO,SAAC4G,EAAKC,GAEjD,OADAD,EAAIC,GAAQtC,IACLqC,IACN,IAEW,GAQlB,IAAIgD,EAAW,eAAQ9D,KAAKR,WAExBg0B,EnKoDC51B,EmKpDiC21B,EnKoDX33B,GmKjD3BgF,OAAOK,QAAQjB,KAAKP,kBAAkByB,SAAQ,YAAoB,IAAD,mBAAjBH,EAAiB,KAAXI,EAAW,KAC3DC,EAAaoyB,EAAiBryB,GAClC2C,EAAY/C,IAASK,KA2BvB,IAAIxG,EAAmBwD,GApBrB4B,KAAKizB,KAAO,IACXM,EAAc,IAAuB,KAAhBA,GAAsBl0B,GAE3B,EAEjBW,KAAKizB,KAAO,IACXM,EAAc,IAAuB,KAAhBA,GAAsBl0B,GAE3B,EACRk0B,EAAc,IAAuB,KAAhBA,GAAsBl0B,EACnC,EACRk0B,EAAc,IAAuB,KAAhBA,GAAsBl0B,EACnC,EACRk0B,EAAc,IAAuB,KAAhBA,GAAsBl0B,EACnC,EACRk0B,EAAc,IAAuB,KAAhBA,GAAsBl0B,EACnC,EAEA,EAIjBW,KAAKpF,kBAaP,YAVyBiE,IAArBjE,GACFgG,OAAOK,QAAQrG,GAAkBsG,SAAQ,YAAoB,IAAD,mBAAjBH,EAAiB,KAAXM,EAAW,KACtDN,KAAQ+C,EACVA,EAAY/C,IAASM,EAErByC,EAAY/C,GAAQM,KAKnByC,I,wBAMT,SAAWsvB,M,+BAKX,WAAqD,IAAD,IAAlCK,EAAkC,wDAC9C5xB,GAAa,oBAAC7B,KAAK9B,eAAN,aAAC,EAAcyD,eAAf,QAA0B,IAAIjH,KAC7C,SAAC6G,GAAD,OAAY,IAAIA,KAclB,OAXIkyB,GACFzzB,KAAKD,eAAemB,SAAQ,SAACe,GAC3B,IAAIyxB,EAAY7xB,EAAWyL,MACzB,SAAComB,GAAD,OAAeA,EAAUr5B,KAAO4H,EAAO5H,WAEvBwE,IAAd60B,GACF3a,GAAe2a,EAAW5a,GAAe7W,OAKxCJ,I,kCAGT,WAAqC,IAAD,IAC9B+B,EAAa,GAgBjB,YAdgC/E,KAA5B,UAAAmB,KAAK9B,eAAL,eAAcgE,YAChB0B,EAAW2J,KAAKvN,KAAK9B,QAAQgE,gBAGOrD,KAAlC,UAAAmB,KAAKgkB,mBAAL,eAAkB2P,cACpB3zB,KAAKgkB,YAAY2P,YAAYzyB,SAAQ,YAAsB,IAAnBH,EAAkB,EAAlBA,KAAMd,EAAY,EAAZA,MAC5C2D,EAAW2J,KAAK,CACdjJ,MAAO,SAACP,GAAkB,IAAD,EACvBA,EAAMhD,GAAQd,GAAK,UAAI8D,EAAMhD,UAAV,QAAmB,SAMvC6C,I,sCAGT,WAA6C,IAAD,EAC1C,YAAoC/E,KAAhC,UAAAmB,KAAK9B,eAAL,eAAckE,eACT,GAGF,CAACpC,KAAK9B,QAAQkE,mB,KCzPJwxB,G,kDACnB,aAA8B,IAAlBv5B,EAAiB,uDAAJ,GAAI,uCACrBA,G,UAFgCkH,I,ICErBsyB,G,kDACnB,WACEv0B,EACArE,EACAoE,EACApB,GACC,uCACK,cAAehD,EAAOoE,EAAapB,G,8CAG3C,SAAWA,GACT,OCTG,SAA4BA,GACjC,IAAM5B,EAAS2B,GAAuB,cAAeC,GAqBrD,MAAO,CACL5D,GAAI,cACJsH,QAAS,CAxByD,kDASlE,aAAe,IAAD,8BACZ,cAAM,uBAHR1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMqC,SAAW/J,EAAO,IAAP,UAAa0H,EAAMqC,gBAAnB,QAA+B,MAPxC,EAToD,UAI1DwtB,MDKDE,CAAmB71B,O,GAXW+0B,I,IEApBe,G,kDACnB,WACEz0B,EACArE,EACAoE,EACApB,GACC,uCACK,qBAAsBhD,EAAOoE,EAAapB,G,8CAGlD,SAAWA,GACT,OCRG,SAAmCA,GACxC,IAAM5B,EAAS2B,GAAuB,qBAAsBC,GAqB5D,MAAO,CACL5D,GAAI,qBACJsH,QAAS,CAxBgE,kDASzE,aAAe,IAAD,8BACZ,cAAM,qCAHR1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMM,eAAiBhI,EAAO,IAAP,UAAa0H,EAAMM,sBAAnB,QAAqC,MAPpD,EAT2D,UAIjEuvB,KAsBR1xB,UAAW,CACTmS,SAAU1F,GAAS2F,KACnBhQ,MAAO,SAACP,GAAkB,IAAD,EACnBW,GAAYX,EAAMM,eAAiB,GAAKhI,EAAO,GAC/CqI,EAAWrI,EAAO,KACpBqI,EAAWrI,EAAO,IAGpB0H,EAAMW,SAAWA,GAAQ,UAAIX,EAAMW,gBAAV,QAAsB,MD1B5CsvB,CAA0B/1B,O,GAXW+0B,I,IEA3BiB,G,kDACnB,WACE30B,EACArE,EACAoE,EACApB,GACC,uCACK,sBAAuBhD,EAAOoE,EAAapB,G,8CAGnD,SAAWA,GACT,OCVG,SAAoCA,GACzC,IAAM5B,EAAS2B,GAAuB,sBAAuBC,GAE7D,MAAO,CACL5D,GAAI,sBACJsH,QAAS,GACTS,cAAe,CACbkC,MAAO,SAACwJ,EAA0B/J,GAAkB,IAAD,IACjD+J,EAAS+N,oBACPxf,EAAO,IAAP,UAAa0H,EAAMe,cAAnB,QAA6B,IAA7B,UAAmCgJ,EAAS+N,2BAA5C,QAAmE,MDClEqY,CAA2Bj2B,O,GAXW+0B,I,IEA5BmB,G,kDACnB,WACE70B,EACArE,EACAoE,EACApB,GACC,uCACK,mBAAoBhD,EAAOoE,EAAapB,G,8CAGhD,SAAWA,GACT,OCXG,SAAiCA,GACtC,IAAM5B,EAAS2B,GAAuB,mBAAoBC,GAE1D,MAAO,CACL5D,GAAI,mBACJsH,QAAS,GAETO,UAAW,CACToC,MAAO,SAACP,GAAkB,IAAD,EACvBA,EAAM0C,cAAgBpK,EAAO,IAAP,UAAa0H,EAAM0C,qBAAnB,QAAoC,MDEvD2tB,CAAwBn2B,O,GAXW+0B,I,IEAzBqB,G,kDACnB,WACE/0B,EACArE,EACAoE,EACApB,GACC,uCACK,aAAchD,EAAOoE,EAAapB,G,8CAG1C,SAAWA,GACT,OCTG,SAA2BA,GAChC,IAAM5B,EAAS2B,GAAuB,aAAcC,GAyCpD,MAAO,CACL5D,GAAI,aACJsH,QAAS,CA5CwD,kDASjE,aAAe,IAAD,8BACZ,cAAM,2BAHR1B,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,IAAZ,EAAK9D,QACP8D,EAAMyC,cAAgBnK,EAAO,IAAP,UAAa0H,EAAMyC,qBAAnB,QAAoC,GAC1DzC,EAAM0C,cAAgBpK,EAAO,IAAP,UAAa0H,EAAM0C,qBAAnB,QAAoC,MARlD,EATmD,UAIzDmtB,IAJyD,kDA6BjE,aAAe,IAAD,8BACZ,cAAM,yBAHR3zB,OAAQ,EAEM,EAIdiC,UAAY,CACVoC,MAAO,SAACP,GACW,IAAD,EAAZ,EAAK9D,QACP8D,EAAMsC,eAAiBhK,EAAO,IAAP,UAAa0H,EAAMsC,sBAAnB,QAAqC,MAPpD,EA7BmD,UAwBzDutB,MDfDU,CAAkBr2B,O,GAXW+0B,I,IEKlCuB,GAAyC,CAE7CC,YAAaX,GACbY,mBAAoBV,GACpBW,Y,kDCRA,WACEp1B,EACArE,EACAoE,EACApB,GACC,uCACK,cAAehD,EAAOoE,EAAapB,G,8CAG3C,SAAWA,GACT,OCRG,SAA4BA,GACjC,IAAM5B,EAAS2B,GAAuB,cAAeC,GA6BrD,MAAO,CACL5D,GAAI,cACJsH,QAAS,CAhCyD,kDASlE,aAAe,IAAD,8BACZ,cAAM,wBAHR1B,OAAQ,EAEM,EAIdiC,UAAY,CACVmS,SAAU1F,GAAS2F,KACnBhQ,MAAO,SAACP,GAAkB,IAAD,QACjB4wB,GACJ,UAAC5wB,EAAMgB,cAAP,QAAiB,IAAM,aAAKhB,EAAMiB,eAAX,QAAsB,KAA7C,UACCjB,EAAMe,cADP,QACiB,GAEfmhB,EAAe0O,EAAUt4B,EAAO,GAChC,EAAK4D,QACPgmB,GAAgB0O,EAAUt4B,EAAO,IAGnC0H,EAAMU,QAAUwhB,GAAY,UAAIliB,EAAMU,eAAV,QAAqB,KAhBvC,EAToD,UAI1DmvB,MDIDgB,CAAmB32B,O,GAXW+0B,IDUvC6B,S,kDGTA,WACEv1B,EACArE,EACAoE,EACApB,GACC,uCACK,WAAYhD,EAAOoE,EAAapB,G,8CAGxC,SAAWA,GACT,OCXG,SAAyBA,GAC9B,IAAM5B,EAAS2B,GAAuB,WAAYC,GAElD,MAAO,CACL5D,GAAI,WACJsH,QAAS,GACTO,UAAW,CACToC,MAAO,SAACP,GAAkB,IAAD,IACvBA,EAAM0C,cAAgBpK,EAAO,IAAP,UAAa0H,EAAM0C,qBAAnB,QAAoC,GAC1D1C,EAAM4C,cAAgBtK,EAAO,IAAP,UAAa0H,EAAM4C,qBAAnB,QAAoC,MDEvDmuB,CAAgB72B,O,GAXW+0B,IHapC+B,oBAAqBd,GACrBe,WAAYX,GAGZY,iBAAkBd,IAGpB,SAASe,GAAqB76B,GAA4B,IAAD,EACvD,iBAAOk6B,GAAQl6B,UAAf,QAAsB24B,GAGjB,SAASmC,KAKL,IAJT96B,EAIQ,uDAJK,GACbY,EAGQ,uCAFRoE,EAEQ,uCADRpB,EACQ,uCACFm3B,EAAoBF,GAAqB76B,GAE/C,OAAO,IAAI+6B,EAAkB/6B,EAAIY,EAAOoE,EAAapB,G,IKsIxCo3B,G,kDArIb,WAAYxsB,GAAwB,IAAD,yBACjC,cAAMA,IAHRD,WAEmC,IAmBnC0sB,YAAc,WACZ,GAAiC,KAA7B,EAAK1sB,MAAM2sB,cAAsB,CACnC,IAAMC,GCgBezrB,EDhBG,EAAKnB,MAAM2sB,cCgBC/oB,EDhBc,EAAK3D,MAAM2D,SCiB9C,CACjBzC,QAEAvP,YAAagS,EAASnJ,UAAUhJ,GAChCkiB,eAAgB/P,EAASnJ,UAAUpI,MACnCw6B,qBAAsBjpB,EAASnJ,UAAUhE,YAEzC5D,SAAU+Q,EAASlJ,OAAOjJ,GAC1Bk5B,YAAa/mB,EAASlJ,OAAOiwB,YAC7BmC,kBAAmBlpB,EAASlJ,OAAOjE,YACnCs2B,iBAAkBnpB,EAASlJ,OAAOrF,WAElCuF,UAAWgJ,EAAShJ,UAAU9I,KAAI,SAACyJ,GACjC,MAAO,CACLxF,KAAMwF,EAASxF,KACf4I,OAAQpD,EAASoD,OACjBtM,MAAOkJ,EAASlJ,MAChByM,SAAUvD,EAASuD,SAAS3G,KAC5B4G,SAAUxD,EAASwD,SAASjN,KAAI,SAACyN,GAAD,MAtB/B,CAAEpH,MALX,EA4B8BoH,GA3B5BpH,KAIed,MADY,EAF3BA,MAGsBmH,SADK,EAD3BA,UAHF,aAiCIgP,aAAc5J,EAAS4J,aAAa1b,KAAI,SAAC+e,GACvC,MAAO,CACLtB,cAAesB,EAAYpf,GAC3Bu7B,kBAAmBnc,EAAYxa,WAInCwE,kBAAmB+I,EAAS/I,kBAC5BC,iBAAkB8I,EAAS9I,iBAC3BC,iBAAkB6I,EAAS7I,iBAE3ByY,SAAU5P,EAAS4P,SACnBI,WAAYhQ,EAASgQ,WACrBM,SAAU,CACRjD,MAAOrN,EAASsQ,SAASpC,IAAIvP,GAAQoP,OACrCT,KAAMtN,EAASsQ,SAASpC,IAAIvP,GAAQiI,MACpC2G,QAASvN,EAASsQ,SAASpC,IAAIvP,GAAQkI,SACvC2G,IAAKxN,EAASsQ,SAASpC,IAAIvP,GAAQqP,KACnCP,MAAOzN,EAASsQ,SAASpC,IAAIvP,GAAQmI,OACrC4G,KAAM1N,EAASsQ,SAASpC,IAAIvP,GAAQoI,MACpC4G,SAAU3N,EAASsQ,SAASpC,IAAIvP,GAAQsP,WAE1CU,SAAU3O,EAAS2O,SAEnBrb,iBAAkB0M,EAAS1M,iBAAiBpF,KAAI,SAACuH,GAC/C,MAAO,CAAE5H,GAAI4H,EAAO5H,GAAI4F,MAAO6Y,GAAe7W,OAEhD4zB,cAAerpB,EAASqpB,cAAcn7B,KAAI,SAACuH,GACzC,MAAO,CAAE5H,GAAI4H,EAAO5H,GAAI4F,MAAO6Y,GAAe7W,OAEhDuX,mBAAoBhN,EAASgN,mBAAmB9e,KAAI,SAACuH,GACnD,MAAO,CAAE5H,GAAI4H,EAAO5H,GAAI4F,MAAO6Y,GAAe7W,SDvExC6zB,EAAQ,EAAKltB,MAAMktB,OC+LxB,SAAiBN,EAAYM,GAClCA,EAAMN,EAAKzrB,OAASyrB,EACpBO,OAAOC,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,IDhMhDM,CAAQZ,EAAMM,GACd,EAAKzsB,SAAS,CAAEysB,UCaf,IAAoB/rB,EAAeyC,GDrCL,EA4BnC6pB,kBAAoB,SAACntB,GACnB,EAAKG,SAAS,CAAEksB,cAAersB,EAAE2B,OAAO5K,SA7BP,EAgCnCq2B,YAAc,WACZ,GAAgC,KAA5B,EAAK1tB,MAAM2tB,aAAqB,CAClC,IAAMf,GCwLYzrB,EDxLG,EAAKnB,MAAM2tB,aAAc,EAAK3tB,MAAMktB,MCyLhD/rB,SDxLIlL,IAAT22B,GCiEH,SACLA,EACAzlB,EAIAymB,GACC,IAAD,0BACMnzB,EAAY2uB,GAChBwD,EAAKh7B,YACLg7B,EAAKjZ,eACLiZ,EAAKC,sBAEDnyB,EAAS6xB,GACbK,EAAK/5B,SACL+5B,EAAKjC,YACLiC,EAAKE,kBACLF,EAAKG,kBAGDnyB,EAAS,oBACbgyB,EAAKhyB,iBADQ,aACb,EAAgB9I,KAAI,SAAC+7B,EAAe1uB,GAAO,IAAD,YAClC2uB,EAAY,UAAGD,EAAc93B,YAAjB,QAAyBiC,OAAOiC,OAAOqE,IAAca,GACnE5D,EAAW,IAAImD,GACjBovB,EADa,UAEbD,EAAclvB,cAFD,QAEW,EAFX,UAGbkvB,EAAcx7B,aAHD,QAGU,EAHV,UAIbw7B,EAAc/uB,gBAJD,QAIa,IAY5B,OAVAvD,EAASwD,SAAT,oBACE8uB,EAAc9uB,gBADhB,aACE,EAAwBjN,KACtB,SAACyN,GAAD,iBACE,IAAIhB,GAAJ,UACEgB,EAAQpH,YADV,QACkB,GADlB,UAEEoH,EAAQlI,aAFV,QAEmBxB,IAFnB,UAGE0J,EAAQf,gBAHV,QAGsB3I,eAN5B,QAQO0F,EAASwD,SAETxD,YAnBI,QAqBbvD,OAAOiC,OAAOqE,IAAcxM,KAAI,SAACiE,GAAD,OAAU,IAAI2I,GAAS3I,EAAM,EAAG,EAAG,OAE/DyX,EAAY,oBAAGof,EAAKpf,oBAAR,aAAG,EAAmB1b,KAAI,SAAC+e,GAAD,OAC1C3B,GAAgB2B,EAAYtB,cAAesB,EAAYmc,6BADvC,QAEb,CAAC9d,KAAmBA,KAAmBA,MAEtCrU,EAAiB,UAAG+xB,EAAK/xB,yBAAR,QAA6B,EAC9CC,EAAgB,UAAG8xB,EAAK9xB,wBAAR,QAA4B,EAC5CC,EAAgB,UAAG6xB,EAAK7xB,wBAAR,QAA4B,EAE5CyY,EAAQ,UAAGoZ,EAAKpZ,gBAAR,QAAoBxB,GAASuD,KACrC3B,EAAU,UAAGgZ,EAAKhZ,kBAAR,QAAsB,EAChCM,EAAW0Y,EAAK1Y,SAClB,IAAIlD,GAAW4b,EAAK1Y,UACpB,IAAIlD,GACFuB,EAAQ,UAAGqa,EAAKra,gBAAR,QAAoBnC,GAASmF,KAErCre,EAAmBuD,EAAUqO,aACnC,UAAA8jB,EAAK11B,wBAAL,SAAuBoB,SAAQ,SAACe,GAC9B,IAAI00B,EAAkB72B,EAAiBwN,MACrC,SAACqpB,GAAD,OAAqBA,EAAgBt8B,KAAO4H,EAAO5H,WAE7BwE,IAApB83B,GACF5d,GAAe4d,EAAiB10B,EAAOhC,UAI3C,IAAM41B,EAAgBvyB,EAAOvD,eAC7B,UAAAy1B,EAAKK,qBAAL,SAAoB30B,SAAQ,SAACe,GAC3B,IAAI20B,EAAef,EAAcvoB,MAC/B,SAACspB,GAAD,OAAkBA,EAAav8B,KAAO4H,EAAO5H,WAE1BwE,IAAjB+3B,GACF7d,GAAe6d,EAAc30B,EAAOhC,UAIxC,IAAMuZ,EAAqBpD,EAAa1U,SACtC,SAAC+X,GAAD,OAAiBA,EAAY9X,WAE/B,UAAA6zB,EAAKhc,0BAAL,SAAyBtY,SAAQ,SAACe,GAChC,IAAI40B,EAAoBrd,EAAmBlM,MACzC,SAACupB,GAAD,OAAuBA,EAAkBx8B,KAAO4H,EAAO5H,WAE/BwE,IAAtBg4B,GACF9d,GAAe8d,EAAmB50B,EAAOhC,UAI7C8P,EACE,CACE1M,YACAC,SACAE,YACA4S,eACA3S,oBACAC,mBACAC,mBACAyY,WACAI,aACAM,WACA3B,WACArb,mBACA+1B,gBACArc,sBAIFgd,GD7KIM,CAAStB,EAAM,EAAK3sB,MAAMkH,YAAa,EAAKlH,MAAM2tB,YCsLnD,IAAiBzsB,GD1Na,EAyCnCgtB,kBAAoB,SAAC92B,GACnB,EAAKoJ,SAAS,CAAEktB,aAAct2B,KA1CG,EA6CnC+2B,cAAgB,WACkB,KAA5B,EAAKpuB,MAAM2tB,cACb,EAAKltB,SAAS,CAAE4tB,mBAAmB,KA/CJ,EAmDnCC,eAAiB,WACf,IAAMpB,EAAQ,EAAKltB,MAAMktB,OC0KtB,SAAoB/rB,EAAe+rB,UACjCA,EAAM/rB,GACbgsB,OAAOC,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,ID3KlDqB,CAAW,EAAKvuB,MAAM2tB,aAAcT,GACpC,EAAKzsB,SAAS,CAAEysB,UAEhB,EAAKzsB,SAAS,CAAE4tB,mBAAmB,KAxDF,EA2DnCG,YAAc,WACZ,EAAK/tB,SAAS,CAAE4tB,mBAAmB,KAxDU,OAAzClB,OAAOC,aAAaqB,QAAQ,UAC9BtB,OAAOC,aAAaC,QAAQ,QAAS,MAIvC,IAAMH,EAAQI,KAAKoB,MAAL,UAAWvB,OAAOC,aAAaqB,QAAQ,gBAAvC,QAAmD,MAThC,OAWjC,EAAKzuB,MAAQ,CACXktB,QACAP,cAAe,GACfgB,aAAc,GACdU,mBAAmB,GAfY,E,0CA+DnC,WACE,OACE,gBAAC,GAAD,WACE,gBAAC,GAAD,WACE,eAACtmB,GAAA,EAAD,CAAQC,QAAQ,YAAY3G,KAAK,KAAK4G,QAAS7Q,KAAKs1B,YAApD,kBAIA,eAACvkB,EAAA,EAAD,CAAK7G,UAAU,gBAAf,SACE,eAACP,GAAA,EAAKK,QAAN,CACErL,KAAK,OACLsL,KAAK,KACLstB,YAAY,+BACZxsB,SAAU/K,KAAKq2B,yBAKrB,gBAAC,GAAD,WACE,eAAC1lB,GAAA,EAAD,CAAQC,QAAQ,YAAY3G,KAAK,KAAK4G,QAAS7Q,KAAKs2B,YAApD,kBAIA,gBAAC,GAAD,CACEj8B,GAAG,cACH0P,MAAM,GACNjB,aAAa,GACb7I,MAAOD,KAAK4I,MAAM2tB,aAClBxrB,SAAU/K,KAAK+2B,kBACf/tB,cAAc,EANhB,UAQE,eAAC,GAAOiC,KAAR,CAAalB,MAAM,GAAG9J,MAAM,KAC3BW,OAAOiC,OAAO7C,KAAK4I,MAAMktB,OAAOp7B,KAAI,SAAC86B,GAAD,OACnC,eAAC,GAAOvqB,KAAR,CACElB,MAAOyrB,EAAKzrB,MACZ9J,MAAOu1B,EAAKzrB,OACPyrB,EAAKzrB,aAKhB,uCACE,eAAC4G,GAAA,EAAD,CAAQC,QAAQ,SAAS3G,KAAK,KAAK4G,QAAS7Q,KAAKg3B,cAAjD,oBAIA,gBAACQ,GAAA,EAAD,CACEC,KAAMz3B,KAAK4I,MAAMquB,kBACjBS,OAAQ13B,KAAKo3B,YAFf,UAIE,eAACI,GAAA,EAAMlnB,KAAP,mGAIA,gBAACknB,GAAA,EAAMG,OAAP,WACE,eAAChnB,GAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS7Q,KAAKo3B,YAA1C,oBAGA,eAACzmB,GAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS7Q,KAAKk3B,eAAvC,uC,GA5HQ/sB,IAAMC,WE4CfwtB,G,4MAtDbC,qBAAuB,SAAC58B,GACtB,EAAK4N,MAAMiH,iBAAiB,CAAErM,kBAAmBxI,IACjD,EAAK4N,MAAMkH,YAAY,CAAEtM,kBAAmBxI,K,EAG9C68B,oBAAsB,SAAC78B,GACrB,EAAK4N,MAAMiH,iBAAiB,CAAEpM,iBAAkBzI,IAChD,EAAK4N,MAAMkH,YAAY,CAAErM,iBAAkBzI,K,EAG7C88B,oBAAsB,SAAC98B,GACrB,EAAK4N,MAAMiH,iBAAiB,CAAEnM,iBAAkB1I,IAChD,EAAK4N,MAAMkH,YAAY,CAAEpM,iBAAkB1I,K,4CAG7C,WACE,IAAQuR,EAAaxM,KAAK6I,MAAlB2D,SACR,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,UACE,eAAC,GAAD,CACEnS,GAAG,4BACH0P,MAAM,uBACNjB,aAAc,EACd7I,MAAOuM,EAAS/I,kBAChBgG,QAASzJ,KAAK63B,qBACd3tB,UAAU,kBAGd,eAAC,GAAD,UACE,eAAC,GAAD,CACE7P,GAAG,2BACH0P,MAAM,sBACNjB,aAAc,EACd7I,MAAOuM,EAAS9I,iBAChB+F,QAASzJ,KAAK83B,oBACd5tB,UAAU,kBAGd,eAAC,GAAD,UACE,eAAC,GAAD,CACE7P,GAAG,2BACH0P,MAAM,sBACNjB,aAAc,EACd7I,MAAOuM,EAAS7I,iBAChB8F,QAASzJ,KAAK+3B,oBACd7tB,UAAU,yB,GA/CSC,IAAMC,WCctB4tB,G,4MA1BbjtB,SAAW,SAAC9K,GACV,EAAK4I,MAAMovB,YAAYh4B,I,4CAGzB,WACE,OACE,gBAAC,GAAD,CACE5F,GAAG,gBACH0P,MAAM,UACNjB,aAAa,GACb7I,MAAOD,KAAK6I,MAAMpN,SAClBsP,SAAU/K,KAAK+K,SALjB,UAOE,eAAC,GAAOE,KAAR,CAAalB,MAAM,GAAG9J,MAAM,WvLgQTpB,IAArBrF,IACFA,EAAmBoH,OAAOK,QAAQ5F,GAC/B+c,MAAK,qCAAcC,GAAd,UAAQ9Y,MAAR,mBAAqC+Y,GAArC,UAA+B/Y,MAA/B,OACJ8Y,EAAME,cAAcD,MAErB5d,KAAI,mCAAEL,EAAF,iBAAaA,MAGfb,GuLvQ2BkB,KAAI,SAACL,GAAD,OAC9B,eAAC,GAAO4Q,KAAR,CACElB,MAAO7J,GAAmB7F,GAAIkF,KAC9BU,MAAO5F,GACFA,a,GAnBU8P,IAAMC,WC6GlB8tB,G,4MA3FbD,YAAc,SAAC59B,GACb,MAAiD,EAAKwO,MAAM2D,SAASlJ,OAC/DA,EAAS6xB,GAAW96B,EAD1B,EAAQk5B,YAAR,EAAqBl0B,YAArB,EAAkCpB,YAE5B43B,EAAgBvyB,EAAOvD,eAC7B,EAAK8I,MAAMiH,iBAAiB,CAAExM,SAAQuyB,kBACtC,EAAKhtB,MAAMkH,YAAY,CAAEzM,SAAQuyB,mB,EAGnCsC,eAAiB,SAACl9B,GAChB,IAAMqI,EAAS,EAAKuF,MAAM2D,SAASlJ,OACnCA,EAAOiwB,YAAct4B,EACrB,EAAK4N,MAAMiH,iBAAiB,CAAExM,WAC9B,EAAKuF,MAAMkH,YAAY,CAAEzM,Y,EAG3B80B,oBAAsB,SAAC7F,GACrB,IAAMjvB,EAAS,EAAKuF,MAAM2D,SAASlJ,OACnCA,EAAOjE,YAAckzB,EACrB,EAAK1pB,MAAMiH,iBAAiB,CAAExM,WAC9B,EAAKuF,MAAMkH,YAAY,CAAEzM,Y,EAG3B+0B,oBAAsB,SAACp6B,GACrB,IAAMqF,EAAS,EAAKuF,MAAM2D,SAASlJ,OACnCA,EAAOrF,WAAaA,EACpB,IAAM43B,EAAgBvyB,EAAOvD,eAC7B,EAAK8I,MAAMiH,iBAAiB,CAAExM,SAAQuyB,kBACtC,EAAKhtB,MAAMkH,YAAY,CAAEzM,SAAQuyB,mB,EAGnC1c,cAAgB,WACd,IAAQ0c,EAAkB,EAAKhtB,MAAM2D,SAA7BqpB,cACR,EAAKhtB,MAAMiH,iBAAiB,CAAE+lB,kBAC9B,EAAKhtB,MAAMkH,YAAY,CAAE8lB,cAAc,YAAKA,M,4CAG9C,WAAU,IAAD,OACCrpB,EAAaxM,KAAK6I,MAAlB2D,SACR,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,UACE,eAAC,GAAD,CACE/Q,SAAU+Q,EAASlJ,OAAOjJ,GAC1B49B,YAAaj4B,KAAKi4B,gBAItB,eAAC,GAAD,UACE,eAAC,GAAD,CACE59B,GAAG,qBACH0P,MAAM,SACNjB,aAAc,EACd7I,MAAOuM,EAASlJ,OAAOiwB,YACvB9pB,QAASzJ,KAAKm4B,eACdjuB,UAAU,kBAId,eAAC,GAAD,UACE,eAAC,GAAD,CACE7P,GAAG,4BACH0P,MAAM,YACNjB,cAAc,EACd7I,MAAOuM,EAASlJ,OAAOjE,YACvB0L,SAAU/K,KAAKo4B,wBAInB,eAAC,GAAD,UACE,eAAC,GAAD,CACE/9B,GAAG,0BACH0P,MAAM,cACNjB,aAAc,EACd7I,MAAOuM,EAASlJ,OAAOrF,WACvBwL,QAASzJ,KAAKq4B,oBACdnuB,UAAU,kBAIbsC,EAASqpB,cAAcn7B,KAAI,SAACuH,GAC3B,OACE,eAAC,GAAD,UACE,eAAC,GAAD,CAAaA,OAAQA,EAAQkX,cAAe,EAAKA,iBADpClX,EAAO5H,c,GAlFH8P,IAAMC,WC0GtBkuB,G,4JAzDb,WACE,MAOIt4B,KAAK6I,MANP2D,EADF,EACEA,SACAuD,EAFF,EAEEA,YACA2J,EAHF,EAGEA,yBACA5J,EAJF,EAIEA,iBACA4iB,EALF,EAKEA,mBACA8D,EANF,EAMEA,WAGF,OACE,gBAACzlB,EAAA,EAAD,CACE1W,GAAG,eACH6P,UAAU,mDACV8G,GAAG,OACHC,GAAI,GAJN,UAME,eAAC,GAAD,CACEzE,SAAUA,EACVuD,YAAaA,EACbymB,WAAYA,IAGd,eAAC,GAAD,CACEhqB,SAAUA,EACVuD,YAAaA,EACbD,iBAAkBA,IAGpB,eAAC,GAAD,CACEtD,SAAUA,EACVuD,YAAaA,EACbD,iBAAkBA,IAGpB,eAAC,GAAD,CACEtD,SAAUA,EACVuD,YAAaA,EACb2J,yBAA0BA,IAG5B,eAAC,GAAD,CACElN,SAAUA,EACVuD,YAAaA,EACbD,iBAAkBA,IAGpB,eAAC,GAAD,CACEtD,SAAUA,EACVuD,YAAaA,EACb2iB,mBAAoBA,W,GAnDJvoB,IAAMC,WCrCjBmuB,G,4JA5Bb,WACE,IAAQh1B,EAAuBvD,KAAK6I,MAA5BtF,mBAER,OAA+C,IAA3C3C,OAAOC,KAAK0C,GAAoBR,OAC3B,KAIP,uBAAKmH,UAAU,eAAf,UACE,gDACCtJ,OAAOK,QAAQsC,GACb9B,QACC,mCAAEa,EAAF,gBAEW,uCAATA,GACS,qCAATA,GACS,qBAATA,KAEH5H,KAAI,mCAAE4H,EAAF,KAAQrC,EAAR,YACH,+BACGvG,EAAY4I,GAAM/C,KADrB,KAC6B8C,GAAoBC,EAAMrC,KAD/CqC,a,GApBe6H,IAAMC,WC4B1BouB,G,4JA3Bb,WAAU,IAAD,EACDn1B,EAAYrD,KAAK6I,MAAMxF,UAE7B,OAAKA,EAAUo1B,YAKb,uBAAKvuB,UAAU,eAAf,UACE,4CACA,sBACEwuB,IAAG,mDAA8Cr1B,EAAU9D,KAAxD,QACHo5B,MAAO,GACPC,OAAQ,GACRC,IAAI,wBAEN,uCAAIx1B,EAAU9D,YAAd,QAAsB,KACrBqB,OAAOK,QAAQoC,EAAUxD,aAAanF,KAAI,mCAAE4H,EAAF,KAAQrC,EAAR,YACzC,+BACGvG,EAAY4I,GAAM/C,KADrB,KAC6B8C,GAAoBC,EAAMrC,KAD/CqC,SAdL,S,GALoB6H,IAAMC,WCqBxB0uB,G,4JApBb,WACE,OACE,uBAAK5uB,UAAU,eAAf,UACE,8CACCtJ,OAAOK,QAAQjB,KAAK6I,MAAMtE,YAAY7J,KACrC,mCAAE4H,EAAF,KAAQrC,EAAR,WAIW,YAATqC,GACE,+BACG5I,EAAY4I,GAAM/C,KADrB,KAC6B8C,GAAoBC,EAAMrC,KAD/CqC,a,GAXO6H,IAAMC,WCsBpB2uB,G,4JArBb,WAAU,IAAD,EACDz1B,EAAStD,KAAK6I,MAAMvF,OAE1B,OAAKA,EAAOm1B,YAKV,uBAAKvuB,UAAU,eAAf,UACE,yCACA,uCAAI5G,EAAO/D,YAAX,QAAmB,KAClBqB,OAAOK,QAAQqC,EAAOS,OAAOrJ,KAAI,mCAAE4H,EAAF,KAAQrC,EAAR,YAChC,+BACGvG,EAAY4I,GAAM/C,KADrB,KAC6B8C,GAAoBC,EAAMrC,KAD/CqC,SARL,S,GALiB6H,IAAMC,WC4BrB4uB,G,4JArBb,WACE,MAA8Bh5B,KAAK6I,MAAM2D,SAAjCnJ,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAEnB,OACE,gBAACyN,EAAA,EAAD,CACE1W,GAAG,cACH6P,UAAU,kDACV8G,GAAG,OACHC,GAAI,GAJN,UAME,eAAC,GAAD,CAAgB1M,WAAYvE,KAAK6I,MAAMtE,aACvC,eAAC,GAAD,CAAoBlB,UAAWA,IAC/B,eAAC,GAAD,CAAiBC,OAAQA,IACzB,eAAC,GAAD,CACEC,mBAAoBvD,KAAK6I,MAAMtF,4B,GAfhB4G,IAAMC,WCShB6uB,G,4JAbb,WACE,OACE,uBAAK/uB,UAAU,YAAf,UACE,8BAAKtQ,EAAkBoG,KAAK6I,MAAMlK,QACjCiC,OAAOK,QAAQjB,KAAK6I,MAAM6H,cAAchW,KAAI,mCAAEL,EAAF,KAAQ0T,EAAR,KAAQA,OAAR,OAC3C,+BACGnU,EAAkBS,GADrB,KAC4BuI,GAAsBmL,KAD1C1T,a,GANQ8P,IAAMC,WCqBjB8uB,G,4JArBb,WACE,IAAMxoB,EAAe1Q,KAAK6I,MAAM6H,aAEhC,OACE,eAACK,EAAA,EAAD,CACE1W,GAAG,gBACH6P,UAAU,oDACV8G,GAAG,OACHC,GAAI,GAJN,SAME,uBAAK/G,UAAU,eAAf,UACE,0CACCtJ,OAAOK,QAAQyP,GAAchW,KAAI,mCAAEiE,EAAF,KAAQkE,EAAR,YAChC,eAAC,GAAD,CAAwBlE,KAAMA,EAAM+R,aAAc7N,GAAhClE,e,GAdHwL,IAAMC,WC6flB+uB,G,4MA/cbvwB,MAAkB,CAChBvF,UAAW2uB,KACX1uB,OAAQ6xB,KACR3xB,UAAW5C,OAAOiC,OAAOqE,IAAcxM,KACrC,SAACiE,GAAD,OAAU,IAAI2I,GAAS3I,EAAM,EAAG,EAAG,OAGrCyX,aAAc,CAAC0B,KAAmBA,KAAmBA,MAErD0E,WAAY,EACZC,kBAAmB,EACnBK,SAAU,IAAIlD,GACdwC,SAAUxB,GAASuD,KACnBpD,QAAS,EACTI,SAAUnC,GAASmF,KACnB1a,kBAAmB,EACnBC,iBAAkB,EAClBC,iBAAkB,EAElB7D,iBAAkB,GAClB+1B,cAAe,GACfrc,mBAAoB,I,EAGtBjW,mBAA4B,G,EAC5BgB,WAAoB,G,EACpBmM,aAA+B,G,EAE/B0oB,eAAkC,G,EAClCx1B,WAA0B,G,EAuN1BmM,YAAc,SACZnH,EACAywB,GAEA,EAAKhwB,SAAST,EAAOywB,I,EAGvB3f,yBAA2B,YAMpB,IALLtD,EAKI,EALJA,aACAoD,EAII,EAJJA,mBAKM8f,EAAe,OAAGljB,QAAH,IAAGA,IAAgB,EAAKxN,MAAMwN,aACnD,EAAK7S,mBAAqB+1B,EACvB5+B,KAAI,SAAC+e,GAAD,OAAiBA,EAAY1V,SACjC7J,QAAO,SAACC,EAAK4J,GAIZ,OAHAnD,OAAOK,QAAQ8C,GAAO7C,SAAQ,YAAoB,IAAD,qBAAjBH,EAAiB,KAAXd,EAAW,KAC/C9F,EAAI4G,GAAQd,GAAK,UAAI9F,EAAI4G,UAAR,QAAiB,MAE7B5G,IACN,IAEL,EAAK2V,iBAAiB,CACpBsG,eACA7S,mBAAoB,EAAKA,mBACzBiW,wB,EAIJ1J,iBAAmB,YAwBZ,IAvBLzM,EAuBI,EAvBJA,UACAC,EAsBI,EAtBJA,OACAE,EAqBI,EArBJA,UACA4S,EAoBI,EApBJA,aACA7S,EAmBI,EAnBJA,mBACAE,EAkBI,EAlBJA,kBACAC,EAiBI,EAjBJA,iBACAC,EAgBI,EAhBJA,iBACA7D,EAeI,EAfJA,iBACA+1B,EAcI,EAdJA,cACArc,EAaI,EAbJA,mBAcM5V,EAAa,EAAK21B,cAAc,CACpCl2B,YACAvD,mBACAwD,SACAuyB,gBACAzf,eACAoD,uBAGF,EAAKjV,WAAanB,GAAe,OAC/BC,QAD+B,IAC/BA,IAAa,EAAKuF,MAAMvF,UADO,OAE/BC,QAF+B,IAE/BA,IAAU,EAAKsF,MAAMtF,OAFU,OAG/BC,QAH+B,IAG/BA,IAAsB,EAAKA,mBAHI,OAI/BC,QAJ+B,IAI/BA,IAAa,EAAKoF,MAAMpF,UAJO,OAK/BC,QAL+B,IAK/BA,IAAqB,EAAKmF,MAAMnF,kBALD,OAM/BC,QAN+B,IAM/BA,IAAoB,EAAKkF,MAAMlF,iBANA,OAO/BC,QAP+B,IAO/BA,IAAoB,EAAKiF,MAAMjF,iBAC/BC,GAGF,EAAK8uB,mBAAmB,CACtBrvB,YACAI,oBACAC,mBACAC,mBACA7D,mBACA0Z,wB,EAIJkZ,mBAAqB,YA4Bd,IA3BM8G,EA2BP,EA3BJn2B,UACAC,EA0BI,EA1BJA,OACA8S,EAyBI,EAzBJA,aACA3S,EAwBI,EAxBJA,kBACAC,EAuBI,EAvBJA,iBACAC,EAsBI,EAtBJA,iBACA6Y,EAqBI,EArBJA,WACAM,EAoBI,EApBJA,SACAV,EAmBI,EAnBJA,SACAjB,EAkBI,EAlBJA,SACArb,EAiBI,EAjBJA,iBACA+1B,EAgBI,EAhBJA,cACArc,EAeI,EAfJA,mBAgBMnW,EAAS,OAAGm2B,QAAH,IAAGA,IAAW,EAAK5wB,MAAMvF,UAElC+1B,EAAiB,EAAKK,kBAAkB,CAC5Cp2B,YACAvD,mBACAwD,SACAuyB,gBACAzf,eACAoD,uBAGI/M,EAAiB,EAAKitB,kBAAkB,CAC5Cnd,eAAc,OAAEid,QAAF,IAAEA,OAAF,EAAEA,EAASv+B,MACzBuhB,aACAM,WACAV,WACAjB,WACA1X,oBACAC,mBACAC,mBACAy1B,mBAGF,EAAK1oB,aAAe,GACpB9P,OAAOK,QAAQoC,EAAU3D,WAAWwB,SAAQ,YAAkB,IAAD,mBAAfvC,EAAe,KAATg7B,EAAS,KAC3D,EAAKjpB,aAAa/R,GAAQiC,OAAOK,QAAQ04B,GAAKz/B,QAAO,SAACC,EAAD,GAAoB,IAAD,mBAAZE,EAAY,KAARu/B,EAAQ,KAEtE,OADAz/B,EAAIE,GAAMu/B,EAAG,CAAE71B,MAAO,EAAKQ,WAAYuJ,SAAUrB,IAC1CtS,IACN,Q,EAIPq8B,WAAa,WACX,EAAK+C,cAAc,CACjBl2B,UAAW,EAAKuF,MAAMvF,UACtBvD,iBAAkB,EAAK8I,MAAM9I,iBAC7BwD,OAAQ,EAAKsF,MAAMtF,OACnBuyB,cAAe,EAAKjtB,MAAMitB,cAC1Bzf,aAAc,EAAKxN,MAAMwN,aACzBoD,mBAAoB,EAAK5Q,MAAM4Q,qBAEjC,EAAKigB,kBAAkB,CACrBp2B,UAAW,EAAKuF,MAAMvF,UACtBvD,iBAAkB,EAAK8I,MAAM9I,iBAC7BwD,OAAQ,EAAKsF,MAAMtF,OACnBuyB,cAAe,EAAKjtB,MAAMitB,cAC1Bzf,aAAc,EAAKxN,MAAMwN,aACzBoD,mBAAoB,EAAK5Q,MAAM4Q,qBAGjC,EAAKE,yBAAyB,IAC9B,EAAKrQ,SAAS,K,uDA1XhB,YAcI,IAAD,IAbDhG,EAaC,EAbDA,UACAvD,EAYC,EAZDA,iBACAwD,EAWC,EAXDA,OACAuyB,EAUC,EAVDA,cACAzf,EASC,EATDA,aACAoD,EAQC,EARDA,mBASA,QACgB3a,IAAdwE,QACqBxE,IAArBiB,QACWjB,IAAXyE,QACkBzE,IAAlBg3B,QACiBh3B,IAAjBuX,QACuBvX,IAAvB2a,EAEA,OAAOxZ,KAAKo5B,eAGd,IAAMS,GAAyB,OAC7Bx2B,QAD6B,IAC7BA,IAAarD,KAAK4I,MAAMvF,WACxBy2B,2BAEIC,GAAsB,OAC1Bz2B,QAD0B,IAC1BA,IAAUtD,KAAK4I,MAAMtF,QACrBw2B,2BAEIE,GAAoB,OAAC5jB,QAAD,IAACA,IAAgBpW,KAAK4I,MAAMwN,cAAc1U,SAClE,SAAC+X,GAAD,OAAiBA,EAAYggB,uBAGzBQ,GAAwB,OAC5Bn6B,QAD4B,IAC5BA,IAAoBE,KAAK4I,MAAM9I,kBAE9B2B,QAAO,SAACQ,GAAD,OACN4W,GAAqB5W,MAEtBvH,KAAI,SAACuH,GAAD,OAAYA,EAAOG,iBAEpB83B,GAAqB,OAACrE,QAAD,IAACA,IAAiB71B,KAAK4I,MAAMitB,eACrDp0B,QAAO,SAACQ,GAAD,OACN4W,GAAqB5W,MAEtBvH,KAAI,SAACuH,GAAD,OAAYA,EAAOG,iBAEpB+3B,GAA0B,OAC9B3gB,QAD8B,IAC9BA,IAAsBxZ,KAAK4I,MAAM4Q,oBAEhC/X,QAAO,SAACQ,GAAD,OACN4W,GAAqB5W,MAEtBvH,KAAI,SAACuH,GAAD,OAAYA,EAAOG,iBAEpBg4B,EAAmBP,EACtB93B,OAAOg4B,GACPh4B,OAAOi4B,GACPj4B,OAAOk4B,GACPl4B,OAAOm4B,GACPn4B,OAAOo4B,GACJE,EAAgB,IAAIhgB,IAe1B,OAdA+f,EAAiBl5B,SAAQ,SAACiB,GAAW,IAAD,EAC5BkS,EAAQ,UAAGlS,EAAMkS,gBAAT,QAAqB1F,GAASiN,OACtC0e,EAAQD,EAAc3f,IAAIrG,GAC3BimB,EAGHA,EAAM/sB,KAAKpL,GAFXk4B,EAAc/f,IAAIjG,EAAU,CAAClS,OAMjCnC,KAAKo5B,gBAAiB,UAACiB,EAAc3f,IAAI/L,GAASiN,eAA5B,QAAuC,IAAI7Z,OAA3C,UACpBs4B,EAAc3f,IAAI/L,GAAS2F,aADP,QACgB,IAG/BtU,KAAKo5B,iB,2BAId,YAcI,IAAD,IAbD/1B,EAaC,EAbDA,UACAvD,EAYC,EAZDA,iBACAwD,EAWC,EAXDA,OACAuyB,EAUC,EAVDA,cACAzf,EASC,EATDA,aACAoD,EAQC,EARDA,mBASA,QACgB3a,IAAdwE,QACqBxE,IAArBiB,QACWjB,IAAXyE,QACkBzE,IAAlBg3B,QACiBh3B,IAAjBuX,QACuBvX,IAAvB2a,EAEA,OAAOxZ,KAAK4D,WAGd,IAAMi2B,GAAyB,OAC7Bx2B,QAD6B,IAC7BA,IAAarD,KAAK4I,MAAMvF,WACxBk3B,uBAEIR,GAAsB,OAC1Bz2B,QAD0B,IAC1BA,IAAUtD,KAAK4I,MAAMtF,QACrBi3B,uBAEIP,GAAoB,OAAC5jB,QAAD,IAACA,IAAgBpW,KAAK4I,MAAMwN,cAAc1U,SAClE,SAAC+X,GAAD,OAAiBA,EAAY8f,mBAGzBU,GAAwB,OAC5Bn6B,QAD4B,IAC5BA,IAAoBE,KAAK4I,MAAM9I,kBAE9B2B,QAAO,SAACQ,GAAD,OACN2W,GAAkB3W,MAEnBvH,KAAI,SAACuH,GAAD,OAAYA,EAAOC,aAEpBg4B,GAAqB,OAACrE,QAAD,IAACA,IAAiB71B,KAAK4I,MAAMitB,eACrDp0B,QAAO,SAACQ,GAAD,OACN2W,GAAkB3W,MAEnBvH,KAAI,SAACuH,GAAD,OAAYA,EAAOC,aAEpBi4B,GAA0B,OAC9B3gB,QAD8B,IAC9BA,IAAsBxZ,KAAK4I,MAAM4Q,oBAEhC/X,QAAO,SAACQ,GAAD,OACN2W,GAAkB3W,MAEnBvH,KAAI,SAACuH,GAAD,OAAYA,EAAOC,aAEpBk4B,EAAmBP,EACtB93B,OAAOg4B,GACPh4B,OAAOi4B,GACPj4B,OAAOk4B,GACPl4B,OAAOm4B,GACPn4B,OAAOo4B,GACJE,EAAgB,IAAIhgB,IAe1B,OAdA+f,EAAiBl5B,SAAQ,SAACiB,GAAW,IAAD,EAC5BkS,EAAQ,UAAGlS,EAAMkS,gBAAT,QAAqB1F,GAASiN,OACtC0e,EAAQD,EAAc3f,IAAIrG,GAC3BimB,EAGHA,EAAM/sB,KAAKpL,GAFXk4B,EAAc/f,IAAIjG,EAAU,CAAClS,OAMjCnC,KAAK4D,YAAa,UAACy2B,EAAc3f,IAAI/L,GAASiN,eAA5B,QAAuC,IAAI7Z,OAA3C,UAChBs4B,EAAc3f,IAAI/L,GAAS2F,aADX,QACoB,IAG/BtU,KAAK4D,a,+BAGd,WAoByB,IAAD,gEAApB,GAnBF2Y,EAmBsB,EAnBtBA,eACAC,EAkBsB,EAlBtBA,WACAM,EAiBsB,EAjBtBA,SACAV,EAgBsB,EAhBtBA,SACAjB,EAesB,EAftBA,SACA1X,EAcsB,EAdtBA,kBACAC,EAasB,EAbtBA,iBACAC,EAYsB,EAZtBA,iBACAy1B,EAWsB,EAXtBA,eAYMtrB,EAA2B,CAC/ByO,eAAc,OAAEA,QAAF,IAAEA,IAAkBvc,KAAK4I,MAAMvF,UAAUpI,MACvDuhB,WAAU,OAAEA,QAAF,IAAEA,IAAcxc,KAAK4I,MAAM4T,WACrCC,kBAAmBzc,KAAK4I,MAAM6T,kBAC9BK,SAAQ,OAAEA,QAAF,IAAEA,IAAY9c,KAAK4I,MAAMkU,SACjCtJ,kBAAmB,IAAIoG,GACvBwC,SAAQ,OAAEA,QAAF,IAAEA,IAAYpc,KAAK4I,MAAMwT,SACjCrB,QAAS/a,KAAK4I,MAAMmS,QACpBI,SAAQ,OAAEA,QAAF,IAAEA,IAAYnb,KAAK4I,MAAMuS,SACjC1X,kBAAiB,OAAEA,QAAF,IAAEA,IAAqBzD,KAAK4I,MAAMnF,kBACnDC,iBAAgB,OAAEA,QAAF,IAAEA,IAAoB1D,KAAK4I,MAAMlF,iBACjDC,iBAAgB,OAAEA,QAAF,IAAEA,IAAoB3D,KAAK4I,MAAMjF,kBAQnD,OAJA,OAACy1B,QAAD,IAACA,IAAkBp5B,KAAKo5B,gBAAgBl4B,SAAQ,SAACiB,GAAD,OAC9CA,EAAMmC,MAAMwJ,EAAU,EAAKvJ,eAGtBuJ,I,oBA4KT,WACE,OACE,gBAAC0sB,EAAA,EAAD,CAAWtwB,UAAU,WAAWuwB,OAAK,EAArC,UACE,eAACC,EAAA,EAAD,CAAQC,OAAO,MAAMC,GAAG,QAAQ1wB,UAAU,YAA1C,SACE,gBAAC2wB,EAAA,EAAD,WACE,eAACA,EAAA,EAAI5vB,KAAL,UACE,eAAC4vB,EAAA,EAAIC,KAAL,CAAUC,KAAK,gBAAf,qBAEF,eAACF,EAAA,EAAI5vB,KAAL,UACE,eAAC4vB,EAAA,EAAIC,KAAL,CAAUC,KAAK,mBAAf,yBAEF,eAACF,EAAA,EAAI5vB,KAAL,UACE,eAAC4vB,EAAA,EAAIC,KAAL,CAAUC,KAAK,eAAf,qBAEF,eAACF,EAAA,EAAI5vB,KAAL,UACE,eAAC4vB,EAAA,EAAIC,KAAL,CAAUC,KAAK,iBAAf,4BAKN,gBAACvwB,EAAA,EAAD,CAAKN,UAAU,OAAf,UACE,eAAC,GAAD,CACEsC,SAAUxM,KAAK4I,MACfmH,YAAa/P,KAAK+P,YAClB2J,yBAA0B1Z,KAAK0Z,yBAC/B5J,iBAAkB9P,KAAK8P,iBACvB4iB,mBAAoB1yB,KAAK0yB,mBACzB8D,WAAYx2B,KAAKw2B,aAEnB,eAAC,GAAD,CACEhqB,SAAUxM,KAAK4I,MACfmH,YAAa/P,KAAK+P,YAClBD,iBAAkB9P,KAAK8P,iBACvBvM,mBAAoBvD,KAAKuD,mBACzBkJ,eAAgBzM,KAAK05B,oBACrB91B,WAAY5D,KAAK4D,WACjB8M,aAAc1Q,KAAK0Q,eAErB,eAAC,GAAD,CACElE,SAAUxM,KAAK4I,MACfrE,WAAYvE,KAAKuE,WACjBhB,mBAAoBvD,KAAKuD,qBAE3B,eAAC,GAAD,CAAcmN,aAAc1Q,KAAK0Q,yB,GAzczBvG,IAAMC,WCxCT4wB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.420c1b76.chunk.js","sourcesContent":["import type * as Data from './types';\nimport type { TalentType } from '../talent/types';\n\nimport characterDataRaw from './characterdata.json';\nimport characterAscensionBonusDataRaw from './characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from './characterstatcurvedata.json';\nimport weaponDataRaw from './weapondata.json';\nimport weaponAscensionBonusDataRaw from './weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from './weaponstatcurvedata.json';\nimport weaponPassiveDataRaw from './weaponpassivedata.json';\nimport talentDataRaw from './talentdata.json';\nimport artifactSetDataRaw from './artifactsetdata.json';\nimport artifactSetBonusDataRaw from './artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from './artifactmainstatdata.json';\n\nimport propMappingRaw from './propmapping.json';\nimport talentDescMappingRaw from './talentdescmapping.json';\nimport optionMappingRaw from './optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\nconst weaponPassiveData = weaponPassiveDataRaw as Record<\n  string,\n  Data.WeaponPassiveSetData\n>;\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getWeaponPassiveData(id: string) {\n  return getData(id, weaponPassiveData);\n}\n\nexport function getWeaponPassiveParams(id: string, refinement: number) {\n  return getWeaponPassiveData(id).passive[refinement]?.passiveParams ?? [];\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\nexport function getWeaponPassiveAt(\n  refinement: number,\n  passives: Data.WeaponPassiveSetData\n): Data.WeaponPassiveData | undefined {\n  return passives.passive[refinement];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n} from '../data/Data';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../data/types';\nimport type { Talents } from '../talent/types';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\n\nexport default class Character {\n  constructor(id: string, level: number = 1, hasAscended: boolean = false) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n    this.talentFns = this.getTalentFns();\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n  talentFns: Talents = {};\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Override in derived classes\n  getTalentFns(): Talents {\n    return {};\n  }\n\n  // Override in derived classes if character has base options\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return [];\n  }\n\n  getCharacterOptions(): CharacterOption[] {\n    return this.getCharacterOptionConstuctors().map((Option) => new Option());\n  }\n\n  // Override in derived classes\n  getAllPassives(): CharacterPassive[] {\n    return [];\n  }\n\n  // Returns passives that character should have based on their current ascension\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    return this.getAllPassives().filter(\n      (passive) => ascensionLevel >= passive.ascensionLevel\n    );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(ascensionLevel: number, prevAscensionLevel?: number) {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n\n    return characterOptions.concat(passiveOptions);\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from '../data/Data';\nimport { StatMixin } from '../option/Mixin';\nimport Weapon from '../weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputted value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\n// Returns a number representing the value to display (e.g. in stat inputs)\nexport function convertStatToDisplayValue(\n  value: number,\n  isPercentage: boolean\n) {\n  if (isPercentage) {\n    return value * 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin.apply(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n  if (combinedStats.burstCritRate !== undefined) {\n    totalStats.burstCritRate = combinedStats.burstCritRate;\n  }\n\n  if (combinedStats.overloadDmgBonus !== undefined) {\n    totalStats.overloadDmgBonus = combinedStats.overloadDmgBonus;\n  }\n  if (combinedStats.burningDmgBonus !== undefined) {\n    totalStats.burningDmgBonus = combinedStats.burningDmgBonus;\n  }\n  if (combinedStats.vaporizeDmgBonus !== undefined) {\n    totalStats.vaporizeDmgBonus = combinedStats.vaporizeDmgBonus;\n  }\n  if (combinedStats.meltDmgBonus !== undefined) {\n    totalStats.meltDmgBonus = combinedStats.meltDmgBonus;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatToDisplayValue, convertStatValue } from '../stat/Stat';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setInputValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n\n  setValue(value: number) {\n    this.value = value;\n    if (this.stat !== '') {\n      this.rawValue = convertStatToDisplayValue(\n        value,\n        propMapping[this.stat].isPercentage\n      );\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  pieces: number;\n  options?: typeof ArtifactSetOption[];\n  extraStats?: Stat[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stat, Stats } from '../data/types';\nimport { getArtifactMainStatValue } from '../data/Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatInputValue(i: number, value: number) {\n    this.subStats[i].setInputValue(value);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value + (stats[subStat.stat] ?? 0);\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          type='number'\n          size='sm'\n          value={displayString}\n          onInput={this.handleInput}\n          className={`number-input ${this.props.className ?? ''}`}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\nimport Row from 'react-bootstrap/esm/Row';\n\nclass InputRow extends React.Component {\n  render() {\n    return <Row className='input-row no-gutters'>{this.props.children}</Row>;\n  }\n}\n\nexport default InputRow;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          as='select'\n          size='sm'\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={`picker ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </Form.Control>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport type TalentFn = (props: TalentProps) => TalentValue;\n\nexport type Talents = Record<string, Record<string, TalentFn>>;\n\nexport type TalentValueSet = Record<string, Record<string, TalentValue>>;\n\nexport interface TalentValue {\n  damage: number[];\n  element?: Element;\n}\n\nexport interface TalentProps {\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  None = 'none',\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../artifact/Artifact';\nimport { propMapping } from '../data/Data';\nimport { capitalize, getStatDisplayValue } from '../stat/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactRarity = (rarity: number) => {\n    this.props.artifact.rarity = rarity;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactLevel = (level: number) => {\n    this.props.artifact.level = level;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatInputValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-rarity`}\n            label='Rarity:'\n            defaultValue={1}\n            value={artifact.rarity}\n            onInput={this.setArtifactRarity}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-level`}\n            label='Level:'\n            defaultValue={0}\n            value={artifact.level}\n            onInput={this.setArtifactLevel}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label='Main Stat:'\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <p>\n            {getStatDisplayValue(\n              artifact.mainStat.stat,\n              artifact.mainStat.value\n            )}\n          </p>\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { StatMixin } from '../option/Mixin';\nimport { getTotalStatsAt } from '../stat/Stat';\nimport { TalentType } from '../talent/types';\n\nexport type RollDistribution = {\n  stat: string;\n  rolls: number;\n};\n\ntype SubstatOptimzerResult = {\n  subStatRolls: RollDistribution[];\n  artifacts: Artifact[];\n};\n\n// Average substat rolls, as per KQM guidelines\nexport const substats: Record<string, number> = {\n  hpBonus: 0.0496,\n  flatHp: 253.94,\n  atkBonus: 0.0496,\n  flatAtk: 16.54,\n  defBonus: 0.062,\n  flatDef: 19.68,\n  elementalMastery: 19.82,\n  energyRecharge: 0.0551,\n  critRate: 0.0331,\n  critDmg: 0.0662,\n};\n\n// Optimize substats according to KQM standardized guidelines\n// 20 preallocated fixed subs (2 of each substat)\n// maxRolls liquid subs (default/max = 20)\n// each sub type can have maximum 2 rolls per different main stat type\nexport function optimizeSubstats(\n  possibleStats: string[],\n  maxRolls: number,\n  erThreshold: number,\n  optimizeTalentType: TalentType,\n  optimizeTalentId: string,\n  appState: AppState,\n  artifactSetBonuses: Stats,\n  damageModifier: DamageModifier,\n  statMixins: StatMixin[]\n): SubstatOptimzerResult {\n  let maxDmg = 0;\n  let optimalSubstatRolls: RollDistribution[] = [];\n  let optimalArtifacts: Artifact[] = appState.artifacts;\n\n  // Roll ER to reach threshold\n  const baseArtifacts = generateBaseArtifacts(appState.artifacts);\n  const baseTotalStats = getTotalStatsAt(\n    appState.character,\n    appState.weapon,\n    artifactSetBonuses,\n    baseArtifacts,\n    appState.talentAttackLevel,\n    appState.talentSkillLevel,\n    appState.talentBurstLevel,\n    statMixins\n  );\n  const baseEr = baseTotalStats.energyRecharge ?? 0;\n\n  let baseErRolls = Math.ceil((erThreshold - baseEr) / substats.energyRecharge);\n\n  const erMainStatCount = baseArtifacts\n    .map((artifact) => artifact.mainStat.stat)\n    .filter((mainStat) => mainStat === 'energyRecharge').length;\n\n  if (baseErRolls < 0) {\n    baseErRolls = 0;\n  } else if (baseErRolls > 2 * (5 - erMainStatCount)) {\n    baseErRolls = 2 * (5 - erMainStatCount);\n  }\n\n  // Generate all combinations\n  const combinations = generateRollCombinationsKqm(\n    possibleStats,\n    maxRolls - baseErRolls,\n    appState.artifacts.map((artifact) => artifact.mainStat.stat),\n    baseErRolls\n  );\n\n  combinations.forEach((combination) => {\n    // Add in ER threshold rolls\n    if (baseErRolls > 0) {\n      const erDistribution = combination.find(\n        ({ stat }) => stat === 'energyRecharge'\n      );\n      if (erDistribution === undefined) {\n        combination.push({ stat: 'energyRecharge', rolls: baseErRolls });\n      } else {\n        erDistribution.rolls += baseErRolls;\n      }\n    }\n\n    const artifacts = generateBaseArtifacts(appState.artifacts);\n\n    addRollsToArtifacts(combination, artifacts);\n\n    const totalStats = getTotalStatsAt(\n      appState.character,\n      appState.weapon,\n      artifactSetBonuses,\n      artifacts,\n      appState.talentAttackLevel,\n      appState.talentSkillLevel,\n      appState.talentBurstLevel,\n      statMixins\n    );\n\n    // Calculate talent damage\n    const talentDmg =\n      appState.character.talentFns?.[optimizeTalentType]?.[optimizeTalentId]?.({\n        stats: totalStats,\n        modifier: damageModifier,\n      })?.damage?.[0] ?? 0;\n\n    // Update optimal rolls\n    if (talentDmg > maxDmg) {\n      optimalSubstatRolls = combination;\n      optimalArtifacts = artifacts;\n      maxDmg = talentDmg;\n    }\n  });\n\n  return {\n    subStatRolls: optimalSubstatRolls,\n    artifacts: optimalArtifacts,\n  };\n}\n\n// Recursive function to generate all substat combinations according to KQM 2*n rule\nfunction generateRollCombinationsKqm(\n  possibleStats: string[],\n  maxRolls: number,\n  mainStats: string[],\n  baseErRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const sameMainStatCount = mainStats.filter(\n    (mainStat) => possibleStats[0] === mainStat\n  ).length;\n  let currentMaxRolls = Math.min((5 - sameMainStatCount) * 2, maxRolls);\n  if (possibleStats[0] === 'energyRecharge') {\n    currentMaxRolls -= baseErRolls;\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = currentMaxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinationsKqm(\n      possibleStats.slice(1),\n      maxRolls - i,\n      mainStats,\n      baseErRolls\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n\n// Recursive function to generate all combinations of possibleStats.length numbers that sum to maxRolls\n// Generated combinations are not guaranteed to be valid substat combinations\n/*\nfunction generateRollCombinations(\n  possibleStats: string[],\n  maxRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = maxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinations(\n      possibleStats.slice(1),\n      maxRolls - i\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n*/\n\n// Generate artifacts with 2 of each substat\nfunction generateBaseArtifacts(prevArtifacts: Artifact[]): Artifact[] {\n  const artifacts = prevArtifacts.map((artifact) => {\n    return new Artifact(\n      artifact.type,\n      artifact.rarity,\n      artifact.level,\n      artifact.mainStat.stat\n    );\n  });\n\n  // Set artifact substats according to currentSubstatRolls\n  let iArtifact = 0;\n  let jArtifact = 0;\n  Object.entries(substats).forEach(([stat, value]) => {\n    artifacts[iArtifact].setSubStatProp(jArtifact, stat);\n    artifacts[iArtifact].setSubStatValue(jArtifact, value * 2);\n    if (++jArtifact >= 4) {\n      jArtifact = 0;\n      if (++iArtifact >= 5) {\n        // This really should not happen\n        iArtifact = 0;\n      }\n    }\n  });\n\n  return artifacts;\n}\n\n// Add liquid subs to fixed subs without replacing any fixed subs\nfunction addRollsToArtifacts(\n  combination: RollDistribution[],\n  artifacts: Artifact[]\n) {\n  const subStats = artifacts.flatMap((artifact) => artifact.subStats);\n  combination.forEach(({ stat, rolls }) => {\n    const subStat = subStats.find((inputStat) => inputStat.stat === stat);\n    if (subStat === undefined) {\n      let sIndex = 0;\n      artifacts\n        .find((artifact) =>\n          artifact.subStats.find((inputStat, i) => {\n            sIndex = i;\n            return isNaN(inputStat.value);\n          })\n        )\n        ?.setSubStatValue(sIndex, substats[stat] * rolls);\n    } else {\n      subStat.setValue(subStat.value + substats[stat] * rolls);\n    }\n  });\n}\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport enum Priority {\n  Normal,\n  Last,\n}\n\ninterface Mixin {\n  priority?: Priority;\n}\n\nexport interface StatMixin extends Mixin {\n  apply: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number,\n    ascensionLevel: number\n  ) => void;\n}\n\n// Do not modify stats here, use StatMixin for that purpose\nexport interface ModifierMixin extends Mixin {\n  apply: (modifier: DamageModifier, stats: Stats) => void;\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <div>\n        <Form.Check\n          type='checkbox'\n          className={`checkbox ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          <Form.Check.Label>{this.props.label}</Form.Check.Label>\n          <Form.Check.Input\n            type='checkbox'\n            checked={value}\n            onChange={this.handleChange}\n          />\n        </Form.Check>\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Button from 'react-bootstrap/esm/Button';\nimport Card from 'react-bootstrap/esm/Card';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport { propMapping, talentDescMapping } from '../data/Data';\nimport DamageModifier from '../modifier/DamageModifer';\nimport {\n  optimizeSubstats,\n  RollDistribution,\n  substats,\n} from '../optimization/Optimization';\nimport { StatMixin } from '../option/Mixin';\nimport { capitalize } from '../stat/Stat';\nimport { TalentType, TalentValueSet } from '../talent/types';\nimport Checkbox from './Checkbox';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptimizerBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  damageModifier: DamageModifier;\n  statMixins: StatMixin[];\n  talentValues: TalentValueSet;\n};\n\ntype OptimizerBlockState = {\n  maxRolls: number;\n  selectedSubstats: string[];\n  erThreshold: number;\n  targetTalentType?: TalentType;\n  targetTalentId: string;\n  substatRolls: RollDistribution[];\n};\n\nclass OptimizerBlock extends React.Component<\n  OptimizerBlockProps,\n  OptimizerBlockState\n> {\n  state: OptimizerBlockState = {\n    substatRolls: [],\n    selectedSubstats: [],\n    erThreshold: 100,\n    targetTalentId: '',\n    maxRolls: 20,\n  };\n\n  setMaxRolls = (maxRolls: number) => {\n    this.setState({ maxRolls });\n  };\n\n  setSelectedSubstats = (stat: string) => (selected: boolean) => {\n    if (selected) {\n      if (!this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: [...this.state.selectedSubstats, stat],\n        });\n      }\n    } else {\n      if (this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: this.state.selectedSubstats.filter(\n            (substat) => substat !== stat\n          ),\n        });\n      }\n    }\n  };\n\n  setErThreshold = (value: number) => {\n    if (isNaN(value)) {\n      this.setState({ erThreshold: 0 });\n    } else {\n      this.setState({ erThreshold: value });\n    }\n  };\n\n  setTargetTalentType = (value: string) => {\n    if (value === '') {\n      this.setState({ targetTalentType: undefined });\n    } else {\n      this.setState({ targetTalentType: value as TalentType });\n    }\n  };\n\n  setTargetTalentId = (value: string) => {\n    this.setState({ targetTalentId: value });\n  };\n\n  onOptimizeClick = () => {\n    if (\n      this.state.targetTalentType !== undefined &&\n      this.state.targetTalentId !== ''\n    ) {\n      const result = optimizeSubstats(\n        this.state.selectedSubstats,\n        this.state.maxRolls,\n        this.state.erThreshold / 100,\n        this.state.targetTalentType,\n        this.state.targetTalentId,\n        this.props.appState,\n        this.props.artifactSetBonuses,\n        this.props.damageModifier,\n        this.props.statMixins\n      );\n\n      this.props.updateTotalStats({ artifacts: result.artifacts });\n      this.props.setAppState({ artifacts: result.artifacts });\n      this.setState({ substatRolls: result.subStatRolls });\n    }\n  };\n\n  render() {\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='0'\n            className='bg-transparent border-0'\n          >\n            <h3>Substat Optimizer</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n          <Accordion.Collapse eventKey='0'>\n            <Card.Body>\n              <div className='input-block'>\n                <p>Fixed Substats: 20</p>\n\n                <InputRow>\n                  <IntInput\n                    className='level-input'\n                    id={'optimizer-liquid-substats'}\n                    label='Liquid Substats:'\n                    defaultValue={20}\n                    value={this.state.maxRolls}\n                    onInput={this.setMaxRolls}\n                  />\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <p>Select substats to optimize:</p>\n                {Object.keys(substats).map((stat) => (\n                  <InputRow key={stat}>\n                    <Checkbox\n                      id={`optimizer-selected-substats-${stat}`}\n                      label={`${propMapping[stat].name}`}\n                      defaultValue={false}\n                      value={this.state.selectedSubstats.includes(stat)}\n                      onChange={this.setSelectedSubstats(stat)}\n                    />\n                  </InputRow>\n                ))}\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <FloatInput\n                    className='stat-input'\n                    id={'optimizer-er-threshold'}\n                    label='ER Threshold:'\n                    defaultValue={100}\n                    value={this.state.erThreshold}\n                    onInput={this.setErThreshold}\n                  />\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <Picker\n                    id={`optimizer-target-talent-type`}\n                    label='Target Talent Type:'\n                    defaultValue=''\n                    value={this.state.targetTalentType ?? ''}\n                    onChange={this.setTargetTalentType}\n                  >\n                    <Picker.Item value='' label='' />\n                    <Picker.Item\n                      value={TalentType.Attack}\n                      label={capitalize(TalentType.Attack)}\n                    />\n                    <Picker.Item\n                      value={TalentType.Skill}\n                      label={capitalize(TalentType.Skill)}\n                    />\n                    <Picker.Item\n                      value={TalentType.Burst}\n                      label={capitalize(TalentType.Burst)}\n                    />\n                  </Picker>\n                </InputRow>\n\n                <InputRow>\n                  <Picker\n                    id={`optimizer-target-talent-id`}\n                    label='Target Talent Name:'\n                    defaultValue=''\n                    value={this.state.targetTalentId ?? ''}\n                    onChange={this.setTargetTalentId}\n                  >\n                    <Picker.Item value='' label='' />\n                    {this.state.targetTalentType\n                      ? Object.keys(\n                          this.props.talentValues[this.state.targetTalentType]\n                        ).map((id) => (\n                          <Picker.Item\n                            key={id}\n                            value={id}\n                            label={talentDescMapping[id]}\n                          />\n                        ))\n                      : null}\n                  </Picker>\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <Button\n                    variant='secondary'\n                    size='sm'\n                    onClick={this.onOptimizeClick}\n                  >\n                    Optimize\n                  </Button>\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                {this.state.substatRolls.length > 0 && (\n                  <p>Liquid roll distribution:</p>\n                )}\n\n                {this.state.substatRolls.map(({ stat, rolls }) => (\n                  <p key={stat}>\n                    {propMapping[stat].name}: {rolls}\n                  </p>\n                ))}\n              </div>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default OptimizerBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { StatMixin } from '../option/Mixin';\nimport { TalentValueSet } from '../talent/types';\nimport ArtifactBlock from './ArtifactBlock';\nimport OptimizerBlock from './OptimizerBlock';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  damageModifier: DamageModifier;\n  statMixins: StatMixin[];\n  talentValues: TalentValueSet;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Col\n        id='artifact-column'\n        className='artifact-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='artifact-heading'>\n          <h2>Artifacts</h2>\n        </div>\n        <OptimizerBlock {...this.props} />\n        <div className='result-block'>\n          {appState.artifacts.map((artifact) => (\n            <ArtifactBlock\n              artifact={artifact}\n              updateArtifactState={this.updateArtifactState}\n              key={artifact.type}\n            />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import { getArtifactSetData, getArtifactSetBonusData } from '../data/Data';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../data/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces: number = 0) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  // Override in derived classes to implement special set bonuses\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [];\n  }\n\n  // Returns all special set bonuses that are active for given pieces\n  getSetBonusesAt(pieces: number): ArtifactSetBonus[] {\n    return this.getAllSetBonuses().filter(\n      (setBonus) => pieces >= setBonus.pieces\n    );\n  }\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n    });\n\n    // Special bonus stats, has to be handled individually\n    let extraStats = this.setBonuses.flatMap(\n      (setBonus) => setBonus.extraStats ?? []\n    );\n\n    extraStats.forEach((statBonus) => {\n      if (stats[statBonus.stat] !== undefined) {\n        stats[statBonus.stat] += statBonus.value;\n      } else {\n        stats[statBonus.stat] = statBonus.value;\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap(\n        (setBonus) => setBonus.options ?? []\n      );\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class ResolutionOfSojourner extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [resolutionOfSojourner4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('resolutionofsojourner', 4);\n\nconst resolutionOfSojourner4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  extraStats: [\n    {\n      stat: 'chargedCritRate',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class TinyMiracle extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tinyMiracle2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('tinymiracle', 2);\n\nconst tinyMiracle2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'].map(\n    (element) => {\n      return {\n        stat: `${element}Res`,\n        value: params2Pc[0],\n      };\n    }\n  ),\n};\n","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  statMixin: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  modifierMixin: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MartialArtist extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [martialArtist2Pc, martialArtist4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('martialartist', 2);\n\nconst martialArtist2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params2Pc[0],\n    },\n    {\n      stat: 'chargedDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('martialartist', 4);\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[2] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[2] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst martialArtist4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MartialArtist4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Gambler extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gambler2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('gambler', 2);\n\nconst gambler2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'skillDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class GladiatorsFinale extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gladiatorsFinale4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('gladiatorsfinale', 4);\n\nconst gladiatorsFinale4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for sword, polearm, claymore characters\n  // Did not make this an Option because this would likely not want to be disabled\n  // Calculation will be wrong if used on a catalyst, bow character\n  // Checking for that would require character weapon type to be implemented first\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionPicker, IModifierApplicable } from '../../option/Option';\n\nexport default class ViridescentVenerer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [viridescentVenerer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('viridescentvenerer', 4);\n\nclass ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.enemyResReduction.add(this.value as Element, params4Pc[1]);\n      }\n    },\n  };\n}\n\nconst viridescentVenerer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ViridescentVenerer4PcOption],\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class WanderersTroupe extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [wanderersTroupe4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('wandererstroupe', 4);\n\nconst wanderersTroupe4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for catalyst, bow characters\n  // See Gladiator's Finale for more details\n  extraStats: [\n    {\n      stat: 'chargedDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import {\n  getArtifactSetBonusData,\n  getArtifactSetBonusParams,\n} from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\n\nexport default class CrimsonWitch extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [crimsonWitch4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('crimsonwitchofflames', 4);\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n        const param = setBonusData[2].bonuses.find(\n          ({ stat }) => stat === 'pyroDmgBonus'\n        )?.value!!;\n\n        let stacks = this.value;\n        if (stacks > 3) stacks = 3;\n        stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst crimsonWitch4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [CrimsonWitch4PcOption],\n\n  extraStats: [\n    {\n      stat: 'overloadDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'burningDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'vaporizeDmgBonus',\n      value: params4Pc[1],\n    },\n    {\n      stat: 'meltDmgBonus',\n      value: params4Pc[2],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class NoblesseOblige extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [noblesseOblige2Pc, noblesseOblige4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('noblesseoblige', 2);\n\nconst noblesseOblige2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'burstDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('noblesseoblige', 4);\n\nclass NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst noblesseOblige4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [NoblesseOblige4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class EmblemOfSeveredFate extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [emblemOfSeveredFate4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('emblemofseveredfate', 4);\n\nconst emblemOfSeveredFate4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  statMixin: {\n    priority: Priority.Last,\n    apply: (stats: Stats) => {\n      let burstDmgBonus = params4Pc[0] * stats.energyRecharge;\n      if (burstDmgBonus > params4Pc[1]) {\n        burstDmgBonus = params4Pc[1];\n      }\n\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n    },\n  },\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BraveHeart extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [braveHeart4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('braveheart', 4);\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst braveHeart4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BraveHeart4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Berserker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [berserker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('berserker', 4);\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst berserker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Berserker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Instructor extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [instructor4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('instructor', 4);\n\nclass Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.elementalMastery = params4Pc[1] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst instructor4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Instructor4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BlizzardStrayer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [blizzardStrayer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('blizzardstrayer', 4);\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[1] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst blizzardStrayer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BlizzardStrayer4PcCryoOption, BlizzardStrayer4PcFrozenOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Thundersoother extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [thundersoother4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('thundersoother', 4);\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst thundersoother4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Thundersoother4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Lavawalker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [lavawalker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('lavawalker', 4);\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst lavawalker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Lavawalker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MaidenBeloved extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [maidenBeloved4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('maidenbeloved', 4);\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.healedBonus = params4Pc[0] + (stats.healedBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst maidenBeloved4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MaidenBeloved4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BloodstainedChivalry extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [bloodstainedChivalry4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n\nclass BloodstainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.chargedDmgBonus = params4Pc[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst bloodstainedChivalry4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BloodstainedChivalry4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionPicker, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class ArchaicPetra extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [archaicPetra4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('archaicpetra', 4);\n\nclass ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value !== '') {\n        stats[`${this.value}DmgBonus`] =\n          params4Pc[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n      }\n    },\n  };\n}\n\nconst archaicPetra4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ArchaicPetra4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class RetracingBolide extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [retracingBolide4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('retracingbolide', 4);\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst retracingBolide4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [RetracingBolide4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class HeartOfDepth extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [heartOfDepth4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('heartofdepth', 4);\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst heartOfDepth4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [HeartOfDepth4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Tenacity extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tenacity4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n\nclass Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.shieldStrength = params4Pc[1] + (stats.shieldStrength ?? 0);\n      }\n    },\n  };\n}\n\nconst tenacity4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Tenacity4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class PaleFlame extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [paleFlame4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('paleflame', 4);\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value >= 1) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n\n      if (this.value >= 2) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.physicalDmgBonus = params4Pc[3] + (stats.physicalDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst paleFlame4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [PaleFlame4PcOption],\n};\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Shimenawa extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [shimenawa4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('shimenawasreminiscence', 4);\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const param = params4Pc[1];\n        stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst shimenawa4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Shimenawa4PcOption],\n};\n","import ArtifactSet from './ArtifactSet';\nimport ResolutionOfSojourner from './artifactSet/ResolutionOfSojourner';\nimport TinyMiracle from './artifactSet/TinyMiracle';\nimport MartialArtist from './artifactSet/MartialArtist';\nimport Gambler from './artifactSet/Gambler';\nimport GladiatorsFinale from './artifactSet/GladiatorsFinale';\nimport ViridescentVenerer from './artifactSet/ViridescentVenerer';\nimport WanderersTroupe from './artifactSet/WanderersTroupe';\nimport CrimsonWitch from './artifactSet/CrimsonWitch';\nimport NoblesseOblige from './artifactSet/NoblesseOblige';\nimport EmblemOfSeveredFate from './artifactSet/EmblemOfSeveredFate';\nimport BraveHeart from './artifactSet/BraveHeart';\nimport Berserker from './artifactSet/Berserker';\nimport Instructor from './artifactSet/Instructor';\nimport BlizzardStrayer from './artifactSet/BlizzardStrayer';\nimport Thundersoother from './artifactSet/Thundersoother';\nimport Lavawalker from './artifactSet/Lavawalker';\nimport MaidenBeloved from './artifactSet/MaidenBeloved';\nimport BloodstainedChivalry from './artifactSet/BloodstainedChivalry';\nimport ArchaicPetra from './artifactSet/ArchaicPetra';\nimport RetracingBolide from './artifactSet/RetracingBolide';\nimport HeartOfDepth from './artifactSet/HeartOfDepth';\nimport Tenacity from './artifactSet/Tenacity';\nimport PaleFlame from './artifactSet/PaleFlame';\nimport Shimenawa from './artifactSet/Shimenawa';\n\nconst artifactSets: Record<string, typeof ArtifactSet> = {\n  resolutionofsojourner: ResolutionOfSojourner,\n  tinymiracle: TinyMiracle,\n  martialartist: MartialArtist,\n  gambler: Gambler,\n  gladiatorsfinale: GladiatorsFinale,\n  viridescentvenerer: ViridescentVenerer,\n  wandererstroupe: WanderersTroupe,\n  crimsonwitchofflames: CrimsonWitch,\n  noblesseoblige: NoblesseOblige,\n  emblemofseveredfate: EmblemOfSeveredFate,\n  braveheart: BraveHeart,\n  berserker: Berserker,\n  instructor: Instructor,\n  blizzardstrayer: BlizzardStrayer,\n  thundersoother: Thundersoother,\n  lavawalker: Lavawalker,\n  maidenbeloved: MaidenBeloved,\n  bloodstainedchivalry: BloodstainedChivalry,\n  archaicpetra: ArchaicPetra,\n  retracingbolide: RetracingBolide,\n  heartofdepth: HeartOfDepth,\n  tenacityofthemillelith: Tenacity,\n  paleflame: PaleFlame,\n  shimenawasreminiscence: Shimenawa,\n};\n\nfunction getArtifactSetConstructor(id: string): typeof ArtifactSet {\n  return artifactSets[id] ?? ArtifactSet;\n}\n\nexport function initArtifactSet(id: string = '', pieces?: number) {\n  const ArtifactSetConstructor = getArtifactSetConstructor(id);\n\n  return new ArtifactSetConstructor(id, pieces);\n}\n\n/* To be implemented\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\nRelic_ReactionWindEnhance,\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionFireEnhance,\n\n// Not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionElectricEnhance: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Requires info about team composition\nRelic_AbsorbTeamElemResist: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Probably can be implemented with a dropdown option for prev received elem dmg\nRelic_ElemDmgEnhanceElemResist: defaultSetBonus,\n*/\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import React from 'react';\r\nimport Row from 'react-bootstrap/esm/Row';\r\n\r\nclass InputBlock extends React.Component {\r\n  render() {\r\n    return <Row className='input-block no-gutters'>{this.props.children}</Row>;\r\n  }\r\n}\r\n\r\nexport default InputBlock;\r\n","import Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).statMixin !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (option as unknown as IModifierApplicable).modifierMixin !== undefined;\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import Option from './Option';\n\nexport default Option;\nexport * from './OptionUtils';\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n}\r\n\r\nexport default Reaction;\r\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../option';\nimport { IOptionBoolean, IOptionNumber, IOptionPicker } from '../option/Option';\nimport { capitalize, getOptionName } from '../stat/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i] = initArtifactSet(id, artifactSets[i].pieces);\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </InputBlock>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import { Element } from '../talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import { Stats, TalentParams } from '../data/types';\nimport { AttackType, Element, ScalingType, TalentValue } from './types';\nimport Resistance from '../stat/Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport CritType from '../modifier/CritType';\n\n// Helper functions\n\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\n\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\n\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\n\nfunction calculateAmplifyingStrengthMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\n\nfunction calculateAmplifyingReactionMultiplier({\n  reaction,\n  stats,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  element: Element;\n}) {\n  const amplifyingStrength = calculateAmplifyingStrengthMultiplier(\n    reaction,\n    element\n  );\n\n  if (amplifyingStrength > 1) {\n    // Caulculate reactionbonus\n    let reactionBonus = 0;\n    switch (reaction) {\n      case Reaction.Vaporize:\n        reactionBonus = stats.vaporizeDmgBonus ?? 0;\n        break;\n      case Reaction.Melt:\n        reactionBonus = stats.meltDmgBonus ?? 0;\n        break;\n      default:\n        break;\n    }\n\n    // Calculate amplifying reaction multiplier\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingStrength * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\n\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let flatDmg = modifier.flatDmg;\n  if (attackType === AttackType.Normal) {\n    flatDmg += modifier.normalAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Charged) {\n    flatDmg += modifier.chargedAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Skill) {\n    flatDmg += modifier.skillFlatDmg ?? 0;\n  }\n\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === CritType.Crit) {\n    crit += stats.critDmg;\n  } else if (modifier.critType === CritType.Average) {\n    let critRate = stats.critRate;\n    if (attackType === AttackType.Charged) {\n      critRate += stats.chargedCritRate ?? 0;\n    } else if (attackType === AttackType.Burst) {\n      critRate += stats.burstCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateAmplifyingReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\n\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  const baseHealing = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n\n  // Incoming healing bonus is ignored because the healer's\n  // incoming healing bonus is not necessarily the same as the\n  // character being healed\n  return baseHealing * (1 + (stats.healingBonus ?? 0));\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n\n// Functions to calculate Talent Values\n\n// Used for all single-hit normal attacks\nexport function normalAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit normal attacks\nexport function normalAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: number[];\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for single-hit charged attacks\nexport function chargedAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for uncharged aim shots\nexport function aimShot({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const element = modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for charged aim shots\nexport function aimShotCharged({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier: multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all physical plunge attacks\nexport function plungeAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionPlunge ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Plunge,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all single-hit skill dmg\nexport function skillSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    scalingType,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit skills\nexport function skillMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for all single-hit burst dmg\nexport function burstSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    element,\n    multiplier,\n    scalingType,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit bursts\nexport function burstMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for damage that does not have an AttackType\nexport function typelessAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.None,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for healing skills/bursts\nexport function healingValue({\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const healing = calculateHealing({\n    stats,\n    multiplier,\n    flatHealing,\n    scalingType,\n  });\n\n  return {\n    damage: [healing],\n  };\n}\n\n// Used for all summons HP\nexport function hpValue({\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    damage: [hp],\n  };\n}\n\n// Used for all shields\nexport function shieldHpValue({\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    damage: [dmgAbsorption],\n  };\n}\n\n// Used for Bennett and Sara's ATK buffs\nexport function atkBuffValue({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const atkBonus = stats.baseAtk * multiplier;\n  return {\n    damage: [atkBonus],\n  };\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('albedo');\n\nconst albedoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  transientBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  fatalBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoTalents: Talents = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport albedoTalents from './AlbedoTalent';\n\nexport default class Albedo extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('albedo', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return albedoTalents;\n  }\n}\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentStatsAt } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { Element, TalentType } from '../../talent/types';\r\nimport {\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n  IModifierApplicable,\r\n} from '../../option/Option';\r\n\r\nclass AloyOptionCoil\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('coil');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value > 0) {\r\n        const skillParams = getTalentStatsAt(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('aloy')\r\n        );\r\n\r\n        if (this.value >= 4) {\r\n          // Rushing Ice state\r\n          stats.normalDmgBonus = skillParams[7] + (stats.normalDmgBonus ?? 0);\r\n        } else {\r\n          stats.normalDmgBonus =\r\n            skillParams[this.value + 3] + (stats.normalDmgBonus ?? 0);\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value >= 4) {\r\n        modifier.infusionNormal = Element.Cryo;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyOptions = [AloyOptionCoil];\r\nexport default aloyOptions;\r\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport {\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [a1Data, a4Data] = getTalentData('aloy').passives;\r\nconst a1Params = a1Data.params;\r\nconst a4Params = a4Data.params;\r\n\r\nclass AloyOptionAscension1\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('aloyAscension1');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value) {\r\n        stats.atkBonus = a1Params[0] * 2 + (stats.atkBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension1: CharacterPassive = {\r\n  id: 'aloyAscension1',\r\n  ascensionLevel: 1,\r\n  options: [AloyOptionAscension1],\r\n};\r\n\r\nclass AloyOptionAscension4\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('aloyAscension4');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value > 0) {\r\n        let stacks = this.value;\r\n        if (stacks > 10) {\r\n          stacks = 10;\r\n        }\r\n\r\n        const cryoDmgBonus = a4Params[0] * stacks;\r\n        stats.cryoDmgBonus = cryoDmgBonus + (stats.cryoDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension4: CharacterPassive = {\r\n  id: 'aloyAscension4',\r\n  ascensionLevel: 4,\r\n  options: [AloyOptionAscension4],\r\n};\r\n\r\nconst aloyPassives = [aloyAscension1, aloyAscension4];\r\nexport default aloyPassives;\r\n","import { Element, TalentFn, TalentProps, Talents } from '../../talent/types';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { getTalentData } from '../../data/Data';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('aloy');\r\n\r\nconst aloyAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: attackParams[modifier.talentAttackLevel].slice(0, 2),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Cryo,\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloySkill: Record<string, TalentFn> = {\r\n  freezeBombDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chillwaterBombletDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Cryo,\r\n      multiplier: burstParams[modifier.talentBurstLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyTalents: Talents = {\r\n  attack: aloyAttack,\r\n  skill: aloySkill,\r\n  burst: aloyBurst,\r\n};\r\n\r\nexport default aloyTalents;\r\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport aloyOptions from './AloyOption';\nimport aloyPassives from './AloyPassive';\nimport aloyTalents from './AloyTalent';\n\nexport default class Aloy extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('aloy', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return aloyTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return aloyOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return aloyPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, TalentFn, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('amber');\n\nconst amberAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst amberSkill: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  baronBunnyHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst amberBurst: Record<string, TalentFn> = {\n  dmgPerWave: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  totalDmg: ({ stats, modifier }: TalentProps) => {\n    const talentValue = burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    });\n    talentValue.damage[0] *= 18;\n    return talentValue;\n  },\n};\n\nconst amberTalents: Talents = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport amberTalents from './AmberTalent';\n\nexport default class Amber extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('amber', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return amberTalents;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { Element, TalentFn, TalentProps, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('ayaka');\n\nconst ayakaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(attackParams[modifier.talentAttackLevel][3]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 3,\n      params: Array(3).fill(attackParams[modifier.talentAttackLevel][7]),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaBurst: Record<string, TalentFn> = {\n  cuttingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  bloomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaTalents: Talents = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ayakaOptions from './AyakaOption';\nimport ayakaTalents from './AyakaTalent';\n\nexport default class Ayaka extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('ayaka', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return ayakaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ayakaOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('barbara');\n\nconst barbaraAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraSkill: Record<string, TalentFn> = {\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatHealing: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      flatHealing: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  dropletDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraBurst: Record<string, TalentFn> = {\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      flatHealing: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraTalents: Talents = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport barbaraTalents from './BarbaraTalent';\n\nexport default class Barbara extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('barbara', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return barbaraTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('beidou').passives;\nconst a4Params = a4Data.params;\n\nclass BeidouOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('beidouAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = a4Params[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = a4Params[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst beidouAscension4: CharacterPassive = {\n  id: 'beidouAscension4',\n  ascensionLevel: 4,\n  options: [BeidouOptionAscension4],\n};\n\nconst beidouPassives = [beidouAscension4];\nexport default beidouPassives;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  chargedAttackSingle,\n  shieldHpValue,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('beidou');\n\nconst beidouAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouSkill: Record<string, TalentFn> = {\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: skillParams[modifier.talentSkillLevel][1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  baseDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  dmgBonusOnHitTaken: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouBurst: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  lightningDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouTalents: Talents = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalents;\n","import { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport beidouPassives from './BeidouPassive';\nimport beidouTalents from './BeidouTalent';\n\nexport default class Beidou extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('beidou', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return beidouTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return beidouPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  atkBuffValue,\n  burstSingle,\n  chargedAttackMulti,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillMulti,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('bennett');\n\nconst bennettAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  chargeLevel1Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: skillParams[modifier.talentSkillLevel].slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n  chargeLevel2Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: skillParams[modifier.talentSkillLevel].slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousPerSecond: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      flatHealing: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  atkBonus: ({ stats, modifier }: TalentProps) =>\n    atkBuffValue({\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettTalents: Talents = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport bennettTalents from './BennettTalent';\n\nexport default class Bennett extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('bennett', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return bennettTalents;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('chongyun');\n\nconst chongyunAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunTalents: Talents = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport chongyunOptions from './ChongyunOption';\nimport chongyunTalents from './ChongyunTalent';\n\nexport default class Chongyun extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('chongyun', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return chongyunTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return chongyunOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('diluc');\n\nconst dilucAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucSkill: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucTalents: Talents = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalents;\n","import { Stats } from '../../data/types';\nimport { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      _talentBurstLevel: number,\n      ascensionLevel: number\n    ) => {\n      if (this.value && ascensionLevel >= 4) {\n        const params = getTalentData('diluc').passives.find(\n          (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n        )?.params;\n        const pyroDmgBonus = params?.[1] ?? NaN;\n\n        stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dilucTalents from './DilucTalent';\nimport dilucOptions from './DilucOption';\n\nexport default class Diluc extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('diluc', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return dilucTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return dilucOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  shieldHpValue,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('diona');\n\nconst dionaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaSkill: Record<string, TalentFn> = {\n  icyPawDmgPerPaw: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpPress: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatBonus: skillParams[modifier.talentSkillLevel][2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  shieldHpHold: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatBonus: skillParams[modifier.talentSkillLevel][2],\n      element: Element.Cryo,\n      stats,\n      modifier: { ...modifier, dionaHoldSkill: true },\n    }),\n};\n\nconst dionaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  continuousFieldDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousTime: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaTalents: Talents = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dionaTalents from './DionaTalent';\n\nexport default class Diona extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('diona', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return dionaTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('eula');\n\nconst eulaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][4]),\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  icewhirlBrandDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordBaseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordStackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaTalents: Talents = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport eulaTalents from './EulaTalent';\n\nexport default class Eula extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('eula', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return eulaTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('fischl');\n\nconst fischlAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlSkill: Record<string, TalentFn> = {\n  ozDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  summoningDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlBurst: Record<string, TalentFn> = {\n  fallingThunderDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlTalents: Talents = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport fischlTalents from './FischlTalent';\n\nexport default class Fischl extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('fischl', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return fischlTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  hpValue,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('ganyu');\n\nconst ganyuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  aimShotChargeLevel1: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowBloomDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  iceLotusHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuBurst: Record<string, TalentFn> = {\n  iceShardDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuTalents: Talents = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ganyuTalents from './GanyuTalent';\n\nexport default class Ganyu extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('ganyu', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return ganyuTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('hutao').passives;\nconst a4Params = a4Data.params;\n\nclass HuTaoOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('hutaoAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.pyroDmgBonus = a4Params[1] + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst hutaoAscension4: CharacterPassive = {\n  id: 'hutaoAscension4',\n  ascensionLevel: 4,\n  options: [HuTaoOptionAscension4],\n};\n\nconst hutaoPassives = [hutaoAscension4];\nexport default hutaoPassives;\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('hutao');\n\nconst hutaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoSkill: Record<string, TalentFn> = {\n  bloodBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgLowHp: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n\n  hpRegenLowHp: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoTalents: Talents = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      talentSkillLevel: number,\n      _talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let skillParams = getTalentStatsAt(\n          TalentType.Skill,\n          talentSkillLevel,\n          getTalentData('hutao')\n        );\n\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n        let flatAtkBonus = totalHp * skillParams[1];\n        if (flatAtkBonus > stats.baseAtk * skillParams[6]) {\n          flatAtkBonus = stats.baseAtk * skillParams[6];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport hutaoPassives from './HutaoPassive';\nimport hutaoTalents from './HutaoTalent';\nimport hutaoOptions from './HutaoOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Hutao extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('hutao', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return hutaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return hutaoOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return hutaoPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('jean');\n\nconst jeanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  fieldEnterExitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  fieldActivationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: burstParams[modifier.talentBurstLevel][3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][4],\n      flatHealing: burstParams[modifier.talentBurstLevel][5],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanTalents: Talents = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport jeanTalents from './JeanTalent';\n\nexport default class Jean extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('jean', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return jeanTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('kaeya');\n\nconst kaeyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaTalents: Talents = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kaeyaTalents from './KaeyaTalent';\n\nexport default class Kaeya extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('kaeya', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return kaeyaTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport { Element, TalentFn, TalentProps, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('kazuha');\n\nconst kazuhaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(attackParams[modifier.talentAttackLevel][5]),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: burstParams[modifier.talentBurstLevel][2],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst kazuhaTalents: Talents = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.elementalAbsorption = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionPlunge = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kazuhaTalents from './KazuhaTalent';\nimport kazuhaOptions from './KazuhaOption';\n\nexport default class Kazuha extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('kazuha', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return kazuhaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kazuhaOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('keqing');\n\nconst keqingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingSkill: Record<string, TalentFn> = {\n  lightningStilettoDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  thunderclapSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Electro,\n      params: Array(2).fill(skillParams[modifier.talentSkillLevel][2]),\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  consecutiveSlashDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 8,\n      element: Element.Electro,\n      params: Array(8).fill(burstParams[modifier.talentBurstLevel][1]),\n      stats,\n      modifier,\n    }),\n\n  lastAttackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingTalents: Talents = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport keqingTalents from './KeqingTalent';\n\nexport default class Keqing extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('keqing', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return keqingTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('klee');\n\nconst kleeAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeSkill: Record<string, TalentFn> = {\n  jumpyDumptyDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  mineDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeBurst: Record<string, TalentFn> = {\n  sparksNSplashDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeTalents: Talents = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kleeTalents from './KleeTalent';\n\nexport default class Klee extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('klee', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return kleeTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('kokomi').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst kokomiAscension0: CharacterPassive = {\r\n  id: 'kokomiAscension0',\r\n  ascensionLevel: 0,\r\n  options: [],\r\n  statMixin: {\r\n    apply: (stats: Stats) => {\r\n      stats.critRate = (stats.critRate ?? 0) - 1;\r\n      if (stats.critRate < 0) {\r\n        stats.critRate = 0;\r\n      }\r\n\r\n      stats.healingBonus = 0.25 + (stats.healingBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiAscension4: CharacterPassive = {\r\n  id: 'kokomiAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  modifierMixin: {\r\n    apply: (modifier: DamageModifier) => {\r\n      modifier.kokomiHealingBonusDmg = a4Params[0];\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiPassives = [kokomiAscension0, kokomiAscension4];\r\nexport default kokomiPassives;\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  burstSingle,\r\n  chargedAttackSingle,\r\n  healingValue,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  ScalingType,\r\n} from '../../talent/types';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('kokomi');\r\n\r\nconst kokomiAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][0],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][1],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][3],\r\n      stats,\r\n      modifier: getKokomiChargedAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiSkill: Record<string, TalentFn> = {\r\n  hpRegen: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      flatHealing: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  rippleDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Hydro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][2],\r\n      stats,\r\n      modifier: getKokomiSkillModifier(stats, modifier),\r\n    }),\r\n};\r\n\r\nconst kokomiBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Hydro,\r\n      multiplier: burstParams[modifier.talentBurstLevel][0],\r\n      scalingType: ScalingType.Hp,\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: burstParams[modifier.talentBurstLevel][1],\r\n      flatHealing: burstParams[modifier.talentBurstLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiTalents: Talents = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getKokomiNormalAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const normalAttackBonusDmg =\r\n    (burstParams[newModifier.talentBurstLevel][3] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.normalAttackFlatDmg =\r\n    normalAttackBonusDmg + (newModifier.normalAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiChargedAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const chargedAttackBonusDmg =\r\n    (burstParams[newModifier.talentBurstLevel][4] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.chargedAttackFlatDmg =\r\n    chargedAttackBonusDmg + (newModifier.chargedAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiSkillModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const skillBonusDmg =\r\n    burstParams[newModifier.talentBurstLevel][8] * stats.flatHp;\r\n  newModifier.skillFlatDmg = skillBonusDmg + (newModifier.skillFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value) {\r\n        modifier.kokomiBurst = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kokomiPassives from './KokomiPassive';\nimport kokomiTalents from './KokomiTalent';\nimport kokomiOptions from './KokomiOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Kokomi extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('kokomi', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return kokomiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kokomiOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return kokomiPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('lisa');\n\nconst lisaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack0: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack1: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack2: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack3: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaTalents: Talents = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport lisaTalents from './LisaTalent';\n\nexport default class Lisa extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('lisa', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return lisaTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport { TalentType } from '../../talent/types';\n\nclass MonaOptionOmen\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('omen');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('mona')\n        );\n\n        stats.dmgBonus = burstParams[9] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst monaOptions = [MonaOptionOmen];\nexport default monaOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('mona');\n\nconst monaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaSkill: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaBurst: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaTalents: Talents = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport monaOptions from './MonaOption';\nimport monaTalents from './MonaTalent';\n\nexport default class Mona extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('mona', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return monaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return monaOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('ningguang');\n\nconst ningguangAttack: Record<string, TalentFn> = {\n  normalAtkDmg: ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  starJadeDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  jadeScreenHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangBurst: Record<string, TalentFn> = {\n  dmgPerGem: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangTalents: Talents = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ningguangTalents from './NingguangTalent';\n\nexport default class Ningguang extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('ningguang', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return ningguangTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  skillSingle,\n  shieldHpValue,\n  healingValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('noelle');\n\nconst noelleAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: skillParams[modifier.talentSkillLevel][6],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatHealing: skillParams[modifier.talentSkillLevel][7],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  firstSwingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleTalents: Talents = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('noelle')\n        );\n\n        const totalDef =\n          (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n          (stats.flatDef ?? 0);\n\n        stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Geo;\n      }\n    },\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport noelleTalents from './NoelleTalent';\nimport noelleOptions from './NoelleOption';\n\nexport default class Noelle extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('noelle', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return noelleTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return noelleOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  healingValue,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('qiqi');\n\nconst qiqiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][3]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][5]),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][7],\n      stats,\n      modifier,\n    }),\n\n  heraldOfFrostDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatHealing: skillParams[modifier.talentSkillLevel][1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      flatHealing: skillParams[modifier.talentSkillLevel][3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      flatHealing: burstParams[modifier.talentBurstLevel][1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiTalents: Talents = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport qiqiTalents from './QiqiTalent';\n\nexport default class Qiqi extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('qiqi', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return qiqiTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport { Priority } from '../../option/Mixin';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('raiden').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst raidenAscension4: CharacterPassive = {\r\n  id: 'raidenAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  statMixin: {\r\n    priority: Priority.Last,\r\n    apply: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = a4Params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst raidenPassives = [raidenAscension4];\r\nexport default raidenPassives;\r\n","import { getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  normalAttackSingle,\r\n  chargedAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  burstMulti,\r\n} from '../../talent/TalentUtil';\r\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('raiden');\r\n\r\nconst raidenAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: attackParams[modifier.talentAttackLevel].slice(3, 5),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][10],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenSkill: Record<string, TalentFn> = {\r\n  skillDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  coordinatedAtkDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenBurst: Record<string, TalentFn> = {\r\n  musouNoHitotachiDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][0] +\r\n        getInitialResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][4] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][5] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][6] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: burstParams[modifier.talentBurstLevel]\r\n        .slice(7, 9)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][9] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: burstParams[modifier.talentBurstLevel]\r\n        .slice(10, 12)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][13] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][14] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][15] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenTalents: Talents = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getInitialResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    burstParams[modifier.talentBurstLevel][1] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n\r\nfunction getAttackResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    burstParams[modifier.talentBurstLevel][2] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value) {\r\n        const params = getTalentStatsAt(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('raiden')\r\n        );\r\n\r\n        const burstDmgBonus = params[3] * 90;\r\n        stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value < 0) modifier.resolveStacks = 0;\r\n      else if (this.value > 60) modifier.resolveStacks = 60;\r\n      else modifier.resolveStacks = this.value;\r\n    },\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport raidenPassives from './RaidenPassive';\nimport raidenTalents from './RaidenTalent';\nimport raidenOptions from './RaidenOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Raiden extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('raiden', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return raidenTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return raidenOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return raidenPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('razor');\n\nconst razorAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][0] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][1] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][2] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][3] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorTalents: Talents = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport razorTalents from './RazorTalent';\n\nexport default class Razor extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('razor', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return razorTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('rosaria');\n\nconst rosariaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: skillParams[modifier.talentSkillLevel].slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: burstParams[modifier.talentBurstLevel].slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n  iceLanceDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaTalents: Talents = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport rosariaTalents from './RosariaTalent';\n\nexport default class Rosaria extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('rosaria', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return rosariaTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  atkBuffValue,\r\n  burstSingle,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { TalentProps, Element, TalentFn, Talents } from '../../talent/types';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('sara');\r\n\r\nconst saraAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Electro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraSkill: Record<string, TalentFn> = {\r\n  tenguJuuraiAmbushDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  atkBonus: ({ stats, modifier }: TalentProps) =>\r\n    atkBuffValue({\r\n      multiplier: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraBurst: Record<string, TalentFn> = {\r\n  tenguJuuraiTitanbreakerDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: burstParams[modifier.talentBurstLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  tenguJuuraiStormclusterDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: burstParams[modifier.talentBurstLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraTalents: Talents = {\r\n  attack: saraAttack,\r\n  skill: saraSkill,\r\n  burst: saraBurst,\r\n};\r\n\r\nexport default saraTalents;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport saraTalents from './SaraTalent';\n\nexport default class Sara extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('sara', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return saraTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('sayu');\n\nconst sayuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuSkill: Record<string, TalentFn> = {\n  fuufuuWindwheelDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickPressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickHoldDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWindwheelElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: skillParams[modifier.talentSkillLevel][1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n\n  fuufuuWhirlwindKickElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: skillParams[modifier.talentSkillLevel][4],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sayuBurst: Record<string, TalentFn> = {\n  activationDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  activationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: burstParams[modifier.talentBurstLevel][1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][5],\n      flatHealing: burstParams[modifier.talentBurstLevel][4],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuTalents: Talents = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sayuTalents from './SayuTalent';\nimport sayuOptions from './SayuOption';\n\nexport default class Sayu extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('sayu', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return sayuTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sayuOptions;\n  }\n}\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('sucrose');\n\nconst sucroseAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: burstParams[modifier.talentBurstLevel][1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sucroseTalents: Talents = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sucroseOptions from './SucroseOption';\nimport sucroseTalents from './SucroseTalent';\n\nexport default class Sucrose extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('sucrose', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return sucroseTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sucroseOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  typelessAttack,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('tartaglia');\n\nconst tartagliaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n\n  riptideFlashDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  riptideBurstDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaSkill: Record<string, TalentFn> = {\n  stanceChangeDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: skillParams[modifier.talentSkillLevel].slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: skillParams[modifier.talentSkillLevel].slice(8, 10),\n      stats,\n      modifier,\n    }),\n\n  riptideSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaBurst: Record<string, TalentFn> = {\n  burstDmgMelee: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgRanged: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  riptideBlastDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaTalents: Talents = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport tartagliaTalents from './TartagliaTalent';\n\nexport default class Tartaglia extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('tartaglia', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return tartagliaTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('venti');\n\nconst ventiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: burstParams[modifier.talentBurstLevel][1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst ventiTalents: Talents = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ventiTalents from './VentiTalent';\nimport ventiOptions from './VentiOption';\n\nexport default class Venti extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('venti', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return ventiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ventiOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('xiangling');\n\nconst xianglingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(attackParams[modifier.talentAttackLevel][3]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingSkill: Record<string, TalentFn> = {\n  guobaDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingBurst: Record<string, TalentFn> = {\n  swing1HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  swing2HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  swing3HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  pyronadoDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingTalents: Talents = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xianglingTalents from './XianglingTalent';\n\nexport default class Xiangling extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('xiangling', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return xianglingTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('xiao')\n        );\n\n        stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst { attack: attackParams, skill: skillParams } = getTalentData('xiao');\n\nconst xiaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][0]),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][4]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoTalents: Talents = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n};\n\nexport default xiaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xiaoOptions from './XiaoOption';\nimport xiaoTalents from './XiaoTalent';\n\nexport default class Xiao extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('xiao', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return xiaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return xiaoOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, TalentFn, Talents, Element } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('xingqiu');\n\nconst xingqiuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(7, 9),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: skillParams[modifier.talentSkillLevel].slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuBurst: Record<string, TalentFn> = {\n  swordRainDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuTalents: Talents = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xingqiuTalents from './XingqiuTalent';\n\nexport default class Xingqiu extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('xingqiu', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return xingqiuTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('xinyan');\n\nconst xinyanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanSkill: Record<string, TalentFn> = {\n  swingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel1: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatBonus: skillParams[modifier.talentSkillLevel][2],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel2: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      flatBonus: skillParams[modifier.talentSkillLevel][4],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel3: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      flatBonus: skillParams[modifier.talentSkillLevel][6],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][7],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Physical,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  pyroDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanTalents: Talents = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xinyanTalents from './XinyanTalent';\n\nexport default class Xinyan extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('xinyan', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return xinyanTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('yanfei')\n        );\n        stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('yanfei');\n\nconst yanfeiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal0: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal1: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal2: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal3: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal4: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][15],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][16],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][17],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiTalents: Talents = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yanfeiOptions from './YanfeiOption';\nimport yanfeiTalents from './YanfeiTalent';\n\nexport default class Yanfei extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('yanfei', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return yanfeiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yanfeiOptions;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionNormal = Element.Pyro;\n        modifier.yoimiyaSkill = true;\n      }\n    },\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [a1Data] = getTalentData('yoimiya').passives;\nconst a1Params = a1Data.params;\n\nclass YoimiyaOptionAscension1\n  extends CharacterOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('yoimiyaAscension1');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      let pyroDmgBonus = this.value * a1Params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    },\n  };\n}\n\nconst yoimiyaAscension1: CharacterPassive = {\n  id: 'yoimiyaAscension1',\n  ascensionLevel: 1,\n  options: [YoimiyaOptionAscension1],\n};\n\nconst yoimiyaPassives = [yoimiyaAscension1];\nexport default yoimiyaPassives;\n","import { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, TalentFn, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('yoimiya');\n\nconst yoimiyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          attackParams[modifier.talentAttackLevel][0],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        attackParams[modifier.talentAttackLevel][1],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        attackParams[modifier.talentAttackLevel][2],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          attackParams[modifier.talentAttackLevel][3],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        attackParams[modifier.talentAttackLevel][4],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  kindlingArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  aurousBlazeExplosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaTalents: Talents = {\n  attack: yoimiyaAttack,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalents;\n\n// Helper functions\n\nfunction getYoimiyaNormalAttackMultiplier(\n  multiplier: number,\n  modifier: DamageModifier\n): number {\n  if (!modifier.yoimiyaSkill) {\n    return multiplier;\n  }\n\n  return multiplier * skillParams[modifier.talentSkillLevel][3];\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yoimiyaOptions from './YoimiyaOption';\nimport yoimiyaPassives from './YoimiyaPassive';\nimport yoimiyaTalents from './YoimiyaTalent';\n\nexport default class Yoimiya extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('yoimiya', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return yoimiyaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yoimiyaOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return yoimiyaPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('zhongli');\n\nconst zhongliAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(attackParams[modifier.talentAttackLevel][4]),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliSkill: Record<string, TalentFn> = {\n  stoneSteeleDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  resonanceDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      flatBonus: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliTalents: Talents = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalents;\n","import Albedo from './albedo/Albedo';\nimport Aloy from './aloy/Aloy';\nimport Amber from './amber/Amber';\nimport Ayaka from './ayaka/Ayaka';\nimport Barbara from './barbara/Barbara';\nimport Beidou from './beidou/Beidou';\nimport Bennett from './bennett/Bennett';\nimport Character from './Character';\nimport Chongyun from './chongyun/Chongyun';\nimport Diluc from './diluc/Diluc';\nimport Diona from './diona/Diona';\nimport Eula from './eula/Eula';\nimport Fischl from './fischl/Fischl';\nimport Ganyu from './ganyu/Ganyu';\nimport Hutao from './hutao/Hutao';\nimport Jean from './jean/Jean';\nimport Kaeya from './kaeya/Kaeya';\nimport Kazuha from './kazuha/Kazuha';\nimport Keqing from './keqing/Keqing';\nimport Klee from './klee/Klee';\nimport Kokomi from './kokomi/Kokomi';\nimport Lisa from './lisa/Lisa';\nimport Mona from './mona/Mona';\nimport Ningguang from './ningguang/Ningguang';\nimport Noelle from './noelle/Noelle';\nimport Qiqi from './qiqi/Qiqi';\nimport Raiden from './raiden/Raiden';\nimport Razor from './razor/Razor';\nimport Rosaria from './rosaria/Rosaria';\nimport Sara from './sara/Sara';\nimport Sayu from './sayu/Sayu';\nimport Sucrose from './sucrose/Sucrose';\nimport Tartaglia from './tartaglia/Tartaglia';\nimport Venti from './venti/Venti';\nimport Xiangling from './xiangling/Xiangling';\nimport Xiao from './xiao/Xiao';\nimport Xingqiu from './xingqiu/Xingqiu';\nimport Xinyan from './xinyan/Xinyan';\nimport Yanfei from './yanfei/Yanfei';\nimport Yoimiya from './yoimiya/Yoimiya';\nimport Zhongli from './zhongli/Zhongli';\n\nconst characters: Record<string, typeof Character> = {\n  albedo: Albedo,\n  aloy: Aloy,\n  amber: Amber,\n  ayaka: Ayaka,\n  barbara: Barbara,\n  beidou: Beidou,\n  bennett: Bennett,\n  chongyun: Chongyun,\n  diluc: Diluc,\n  diona: Diona,\n  eula: Eula,\n  fischl: Fischl,\n  ganyu: Ganyu,\n  hutao: Hutao,\n  jean: Jean,\n  kaeya: Kaeya,\n  kazuha: Kazuha,\n  keqing: Keqing,\n  klee: Klee,\n  kokomi: Kokomi,\n  lisa: Lisa,\n  mona: Mona,\n  ningguang: Ningguang,\n  noelle: Noelle,\n  qiqi: Qiqi,\n  raiden: Raiden,\n  razor: Razor,\n  rosaria: Rosaria,\n  sara: Sara,\n  sayu: Sayu,\n  sucrose: Sucrose,\n  tartaglia: Tartaglia,\n  venti: Venti,\n  xiangling: Xiangling,\n  xiao: Xiao,\n  xingqiu: Xingqiu,\n  xinyan: Xinyan,\n  yanfei: Yanfei,\n  yoimiya: Yoimiya,\n  zhongli: Zhongli,\n};\n\nfunction getCharacterConstructor(id: string): typeof Character {\n  return characters[id] ?? Character;\n}\n\nexport function initCharacter(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean\n): Character {\n  const CharacterConstructor = getCharacterConstructor(id);\n\n  return new CharacterConstructor(id, level, hasAscended);\n}\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport zhongliTalents from './ZhongliTalent';\n\nexport default class Zhongli extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('zhongli', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return zhongliTalents;\n  }\n}\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const { level, hasAscended } = this.props.appState.character;\n    const character = initCharacter(id, level, hasAscended);\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport Resistance from '../stat/Resistance';\nimport { capitalize } from '../stat/Stat';\nimport { Element } from '../talent/types';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  setReaction = (reaction: string) => {\n    this.props.updateTalentValues({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n    this.props.setAppState({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType, reaction } = this.props.appState;\n    return (\n      <InputBlock>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n\n        <InputRow>\n          <Picker\n            id='reaction-picker'\n            label='Reaction:'\n            defaultValue={Reaction.None}\n            value={reaction}\n            onChange={this.setReaction}\n          >\n            {Object.values(Reaction).map((reaction) => (\n              <Picker.Item\n                key={reaction}\n                label={capitalize(reaction)}\n                value={reaction}\n              />\n            ))}\n          </Picker>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  WeaponPassiveData,\n  WeaponPassiveSetData,\n} from '../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getWeaponPassiveAt,\n  getWeaponPassiveData,\n} from '../data/Data';\nimport { getOptionValue, setOptionValue } from '../option';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../passive/types';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    refinement: number = 1\n  ) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n    this._refinement = refinement;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.passiveDataSet = getWeaponPassiveData(value);\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(\n        this.refinement,\n        this.passiveDataSet\n      );\n    }\n    this.passive = this.getPassive(this.refinement);\n    this.passiveOptions = this.getPassiveOptions();\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  passiveDataSet?: WeaponPassiveSetData;\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  private _refinement: number = 1;\n  get refinement(): number {\n    return this._refinement;\n  }\n  set refinement(value: number) {\n    this._refinement = value;\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(value, this.passiveDataSet);\n      this.passive = this.getPassive(value);\n      this.passiveOptions = this.getPassiveOptions(true);\n    }\n  }\n\n  stats: Stats = {};\n  passiveData?: WeaponPassiveData;\n  passive?: WeaponPassive;\n  passiveOptions: WeaponOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n\n  // Override in derived classes to implement special passives\n  // Only returns the extra passive bonuses, excluding the direct stat bonuses\n  // To be called when passive should update (e.g. id or refinement change)\n  getPassive(_refinement: number): WeaponPassive | undefined {\n    return;\n  }\n\n  // getPassive should be called before this if passives are updated\n  getPassiveOptions(shouldKeepValue: boolean = false) {\n    let newOptions = (this.passive?.options ?? []).map(\n      (Option) => new Option()\n    );\n\n    if (shouldKeepValue) {\n      this.passiveOptions.forEach((option) => {\n        let newOption = newOptions.find(\n          (newOption) => newOption.id === option.id\n        );\n        if (newOption !== undefined) {\n          setOptionValue(newOption, getOptionValue(option));\n        }\n      });\n    }\n\n    return newOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    let statMixins = [];\n\n    if (this.passive?.statMixin !== undefined) {\n      statMixins.push(this.passive.statMixin);\n    }\n\n    if (this.passiveData?.statBonuses !== undefined) {\n      this.passiveData.statBonuses.forEach(({ stat, value }) => {\n        statMixins.push({\n          apply: (stats: Stats) => {\n            stats[stat] = value + (stats[stat] ?? 0);\n          },\n        });\n      });\n    }\n\n    return statMixins;\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    if (this.passive?.modifierMixin === undefined) {\n      return [];\n    }\n\n    return [this.passive.modifierMixin];\n  }\n}\n","import Option from '../Option';\n\nexport default class WeaponOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { dragonsBanePassive } from './DragonsBanePassive';\n\nexport default class DragonsBane extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('dragonsbane', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return dragonsBanePassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function dragonsBanePassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('dragonsbane', refinement);\n\n  class DragonsBaneOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('dragonsBanePassive');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'dragonsBane',\n    options: [DragonsBaneOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { engulfingLightningPassive } from './EngulfingLightningPassive';\n\nexport default class EngulfingLightning extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('engulfinglightning', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return engulfingLightningPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function engulfingLightningPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('engulfinglightning', refinement);\n\n  class EngulfingLightningOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('engulfingLightningEnergyRecharge');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.energyRecharge = params[2] + (stats.energyRecharge ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'engulfingLightning',\n    options: [EngulfingLightningOption],\n\n    statMixin: {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        let atkBonus = (stats.energyRecharge - 1) * params[0];\n        if (atkBonus > params[1]) {\n          atkBonus = params[1];\n        }\n\n        stats.atkBonus = atkBonus + (stats.atkBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { everlastingMoonglowPassive } from './EverlastingMoonglowPassive';\n\nexport default class EverlastingMoonglow extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('everlastingmoonglow', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return everlastingMoonglowPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function everlastingMoonglowPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('everlastingmoonglow', refinement);\n\n  return {\n    id: 'everlastingMoonglow',\n    options: [],\n    modifierMixin: {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        modifier.normalAttackFlatDmg =\n          params[1] * (stats.flatHp ?? 0) + (modifier.normalAttackFlatDmg ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { luxuriousSeaLordPassive } from './LuxuriousSeaLordPassive';\n\nexport default class LuxuriousSeaLord extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('luxurioussealord', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return luxuriousSeaLordPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function luxuriousSeaLordPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('luxurioussealord', refinement);\n\n  return {\n    id: 'luxuriousSeaLord',\n    options: [],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { solarPearlPassive } from './SolarPearlPassive';\n\nexport default class SolarPearl extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('solarpearl', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return solarPearlPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function solarPearlPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('solarpearl', refinement);\n\n  class SolarPearlOptionNormalAttack\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlNormalAttack');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n          stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  class SolarPearlOptionSkillBurst\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlSkillBurst');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'solarPearl',\n    options: [SolarPearlOptionNormalAttack, SolarPearlOptionSkillBurst],\n  };\n}\n","import Weapon from './Weapon';\nimport DragonsBane from './dragonsbane/DragonsBane';\nimport EngulfingLightning from './engulfinglightning/EngulfingLightning';\nimport EverlastingMoonglow from './everlastingmoonglow/EverlastingMoonglow';\nimport LuxuriousSeaLord from './luxurioussealord/LuxuriousSeaLord';\nimport SolarPearl from './solarpearl/SolarPearl';\nimport StaffOfHoma from './staffofhoma/StaffOfHoma';\nimport TheCatch from './thecatch/TheCatch';\n\nconst weapons: Record<string, typeof Weapon> = {\n  // Polearm\n  dragonsbane: DragonsBane,\n  engulfinglightning: EngulfingLightning,\n  staffofhoma: StaffOfHoma,\n  thecatch: TheCatch,\n\n  // Catalyst\n  everlastingmoonglow: EverlastingMoonglow,\n  solarpearl: SolarPearl,\n\n  // Claymore\n  luxurioussealord: LuxuriousSeaLord,\n};\n\nfunction getWeaponConstructor(id: string): typeof Weapon {\n  return weapons[id] ?? Weapon;\n}\n\nexport function initWeapon(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  refinement?: number\n): Weapon {\n  const WeaponConstructor = getWeaponConstructor(id);\n\n  return new WeaponConstructor(id, level, hasAscended, refinement);\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { staffOfHomaPassive } from './StaffOfHomaPassive';\n\nexport default class StaffOfHoma extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('staffofhoma', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return staffOfHomaPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function staffOfHomaPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('staffofhoma', refinement);\n\n  class StaffOfHomaOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('staffOfHomaAtkBonus');\n    }\n\n    statMixin = {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n\n        let flatAtkBonus = totalHp * params[1];\n        if (this.value) {\n          flatAtkBonus += totalHp * params[2];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      },\n    };\n  }\n\n  return {\n    id: 'staffOfHoma',\n    options: [StaffOfHomaOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { theCatchPassive } from './TheCatchPassive';\n\nexport default class TheCatch extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('thecatch', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return theCatchPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function theCatchPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('thecatch', refinement);\n\n  return {\n    id: 'theCatch',\n    options: [],\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        stats.burstCritRate = params[1] + (stats.burstCritRate ?? 0);\n      },\n    },\n  };\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Col from 'react-bootstrap/esm/Col';\nimport Form from 'react-bootstrap/esm/Form';\nimport Modal from 'react-bootstrap/esm/Modal';\nimport { AppState } from '../App';\nimport {\n  createSave,\n  addSave,\n  getSave,\n  loadSave,\n  Saves,\n  deleteSave,\n} from '../save/Save';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype SaveBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  refreshApp: () => void;\n};\n\ntype SaveBlockState = {\n  saves: Saves;\n  saveInputName: string;\n  selectedSave: string;\n  showDeleteWarning: boolean;\n};\n\nclass SaveBlock extends React.Component<SaveBlockProps, SaveBlockState> {\n  state: SaveBlockState;\n\n  constructor(props: SaveBlockProps) {\n    super(props);\n\n    // Populate local storage if empty\n    if (window.localStorage.getItem('saves') === null) {\n      window.localStorage.setItem('saves', '{}');\n    }\n\n    // Initialize saves in memory\n    const saves = JSON.parse(window.localStorage.getItem('saves') ?? '{}');\n    // Initialize state\n    this.state = {\n      saves,\n      saveInputName: '',\n      selectedSave: '',\n      showDeleteWarning: false,\n    };\n  }\n\n  onSaveClick = () => {\n    if (this.state.saveInputName !== '') {\n      const save = createSave(this.state.saveInputName, this.props.appState);\n      const saves = this.state.saves;\n      addSave(save, saves);\n      this.setState({ saves });\n    }\n  };\n\n  onSaveInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveInputName: e.target.value });\n  };\n\n  onLoadClick = () => {\n    if (this.state.selectedSave !== '') {\n      const save = getSave(this.state.selectedSave, this.state.saves);\n      if (save !== undefined) {\n        loadSave(save, this.props.setAppState, this.props.refreshApp);\n      }\n    }\n  };\n\n  onLoadInputChange = (value: string) => {\n    this.setState({ selectedSave: value });\n  };\n\n  onDeleteClick = () => {\n    if (this.state.selectedSave !== '') {\n      this.setState({ showDeleteWarning: true });\n    }\n  };\n\n  onModalConfirm = () => {\n    const saves = this.state.saves;\n    deleteSave(this.state.selectedSave, saves);\n    this.setState({ saves });\n\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onModalHide = () => {\n    this.setState({ showDeleteWarning: false });\n  };\n\n  render() {\n    return (\n      <InputBlock>\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onSaveClick}>\n            Save\n          </Button>\n\n          <Col className='save-name-col'>\n            <Form.Control\n              type='text'\n              size='sm'\n              placeholder='Save label (cannot be empty)'\n              onChange={this.onSaveInputChange}\n            />\n          </Col>\n        </InputRow>\n\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onLoadClick}>\n            Load\n          </Button>\n\n          <Picker\n            id='save-picker'\n            label=''\n            defaultValue=''\n            value={this.state.selectedSave}\n            onChange={this.onLoadInputChange}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {Object.values(this.state.saves).map((save) => (\n              <Picker.Item\n                label={save.label}\n                value={save.label}\n                key={save.label}\n              />\n            ))}\n          </Picker>\n\n          <>\n            <Button variant='danger' size='sm' onClick={this.onDeleteClick}>\n              Delete\n            </Button>\n\n            <Modal\n              show={this.state.showDeleteWarning}\n              onHide={this.onModalHide}\n            >\n              <Modal.Body>\n                Are you sure you want to delete the save configuration? This\n                action is irreversible!\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={this.onModalHide}>\n                  Cancel\n                </Button>\n                <Button variant='danger' onClick={this.onModalConfirm}>\n                  Delete\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default SaveBlock;\n","import { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport { ArtifactType, InputStat } from '../artifact/types';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport { initWeapon } from '../weapon/WeaponUtil';\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n  weaponRefinement?: number;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  characterOptions?: { id?: string; value?: unknown }[];\n  weaponOptions?: { id?: string; value?: unknown }[];\n  artifactSetOptions?: { id?: string; value?: unknown }[];\n}\n\nexport type Saves = Record<string, Save>;\n\ninterface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n    weaponRefinement: appState.weapon.refinement,\n\n    artifacts: appState.artifacts.map((artifact) => {\n      return {\n        type: artifact.type,\n        rarity: artifact.rarity,\n        level: artifact.level,\n        mainStat: artifact.mainStat.stat,\n        subStats: artifact.subStats.map((subStat) =>\n          createInputStatSave(subStat)\n        ),\n      };\n    }),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    characterOptions: appState.characterOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    weaponOptions: appState.weaponOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactSetOptions: appState.artifactSetOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n  };\n\n  return save;\n}\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const character = initCharacter(\n    save.characterId,\n    save.characterLevel,\n    save.characterHasAscended\n  );\n  const weapon = initWeapon(\n    save.weaponId,\n    save.weaponLevel,\n    save.weaponHasAscended,\n    save.weaponRefinement\n  );\n\n  const artifacts =\n    save.artifacts?.map((savedArtifact, i) => {\n      const artifactType = savedArtifact.type ?? Object.values(ArtifactType)[i];\n      let artifact = new Artifact(\n        artifactType,\n        savedArtifact.rarity ?? 1,\n        savedArtifact.level ?? 0,\n        savedArtifact.mainStat ?? ''\n      );\n      artifact.subStats =\n        savedArtifact.subStats?.map(\n          (subStat) =>\n            new InputStat(\n              subStat.stat ?? '',\n              subStat.value ?? NaN,\n              subStat.rawValue ?? NaN\n            )\n        ) ?? artifact.subStats;\n\n      return artifact;\n    }) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map((artifactSet) =>\n    initArtifactSet(artifactSet.artifactSetId, artifactSet.artifactSetPieces)\n  ) ?? [initArtifactSet(), initArtifactSet(), initArtifactSet()];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, option.value);\n    }\n  });\n\n  const weaponOptions = weapon.passiveOptions;\n  save.weaponOptions?.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, option.value);\n    }\n  });\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, option.value);\n    }\n  });\n\n  setAppState(\n    {\n      character,\n      weapon,\n      artifacts,\n      artifactSets,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      critType,\n      enemyLevel,\n      enemyRes,\n      reaction,\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n    },\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Weapon from '../weapon/Weapon';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    weapon,\n    weaponOptions,\n  }: {\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n  }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const { weaponLevel, hasAscended, refinement } = this.props.appState.weapon;\n    const weapon = initWeapon(id, weaponLevel, hasAscended, refinement);\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponRefinement = (refinement: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.refinement = refinement;\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  updateOptions = () => {\n    const { weaponOptions } = this.props.appState;\n    this.props.updateTotalStats({ weaponOptions });\n    this.props.setAppState({ weaponOptions: [...weaponOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-refinement-input'\n            label='Refinement:'\n            defaultValue={1}\n            value={appState.weapon.refinement}\n            onInput={this.setWeaponRefinement}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.weaponOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport CritType from '../modifier/CritType';\nimport Resistance from '../stat/Resistance';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport SaveBlock from './SaveBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  refreshApp: () => void;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n      refreshApp,\n    } = this.props;\n\n    return (\n      <Col\n        id='input-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <SaveBlock\n          appState={appState}\n          setAppState={setAppState}\n          refreshApp={refreshApp}\n        />\n\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../character/Character';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\nimport Weapon from '../weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Col\n        id='stat-column'\n        className='stat-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\n\ntype TalentBlockProps = {\n  type: string;\n  talentValues: Record<string, TalentValue>;\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{talentDescMapping[this.props.type]}</h3>\n        {Object.entries(this.props.talentValues).map(([id, { damage }]) => (\n          <p key={id}>\n            {talentDescMapping[id]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport { TalentValueSet } from '../talent/types';\nimport TalentBlock from './TalentBlock';\nimport Col from 'react-bootstrap/esm/Col';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const talentValues = this.props.talentValues;\n\n    return (\n      <Col\n        id='talent-column'\n        className='talent-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='result-block'>\n          <h2>Talents</h2>\n          {Object.entries(talentValues).map(([type, values]) => (\n            <TalentBlock key={type} type={type} talentValues={values} />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport Row from 'react-bootstrap/esm/Row';\nimport './App.css';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport { Stats } from './data/types';\nimport Artifact from './artifact/Artifact';\nimport ArtifactSet from './artifact/ArtifactSet';\nimport { ArtifactType } from './artifact/types';\nimport Character from './character/Character';\nimport { initCharacter } from './character/CharacterUtil';\nimport CritType from './modifier/CritType';\nimport DamageModifier from './modifier/DamageModifer';\nimport Reaction from './modifier/Reaction';\nimport { isModifierApplicable, isStatsApplicable } from './option';\nimport { ModifierMixin, Priority, StatMixin } from './option/Mixin';\nimport { IModifierApplicable, IStatsApplicable } from './option/Option';\nimport WeaponOption from './option/weaponOptions/WeaponOption';\nimport Resistance from './stat/Resistance';\nimport { getTotalStatsAt } from './stat/Stat';\nimport { TalentValue, TalentValueSet } from './talent/types';\nimport Weapon from './weapon/Weapon';\nimport CharacterOption from './option/characterOptions/CharacterOption';\nimport ArtifactSetOption from './option/artifactSetOptions/ArtifactSetOption';\nimport { initArtifactSet } from './artifact/ArtifactSetUtil';\nimport { initWeapon } from './weapon/WeaponUtil';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: initCharacter(),\n    weapon: initWeapon(),\n    artifacts: Object.values(ArtifactType).map(\n      (type) => new Artifact(type, 1, 0, '')\n    ),\n\n    artifactSets: [initArtifactSet(), initArtifactSet(), initArtifactSet()],\n\n    enemyLevel: 1,\n    enemyDefReduction: 0,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    flatDmg: 0,\n    reaction: Reaction.None,\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    characterOptions: [],\n    weaponOptions: [],\n    artifactSetOptions: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = {};\n\n  modifierMixins: ModifierMixin[] = [];\n  statMixins: StatMixin[] = [];\n\n  // Gets all modifier mixins and updates cache (modifierMixins)\n  getModifierMixins({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined\n    ) {\n      return this.modifierMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveModifierMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveModifierMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getModifierMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const unarrangedMixins = characterPassiveMixins\n      .concat(weaponPassiveMixins)\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(weaponOptionMixins)\n      .concat(artifactSetOptionMixins);\n    const groupedMixins = new Map<Priority, ModifierMixin[]>();\n    unarrangedMixins.forEach((mixin) => {\n      const priority = mixin.priority ?? Priority.Normal;\n      const array = groupedMixins.get(priority);\n      if (!array) {\n        groupedMixins.set(priority, [mixin]);\n      } else {\n        array.push(mixin);\n      }\n    });\n\n    this.modifierMixins = (groupedMixins.get(Priority.Normal) ?? []).concat(\n      groupedMixins.get(Priority.Last) ?? []\n    );\n\n    return this.modifierMixins;\n  }\n\n  // Gets all stat mixins and updates cache (statMixins)\n  getStatMixins({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined\n    ) {\n      return this.statMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveStatMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveStatMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getStatMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const unarrangedMixins = characterPassiveMixins\n      .concat(weaponPassiveMixins)\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(weaponOptionMixins)\n      .concat(artifactSetOptionMixins);\n    const groupedMixins = new Map<Priority, StatMixin[]>();\n    unarrangedMixins.forEach((mixin) => {\n      const priority = mixin.priority ?? Priority.Normal;\n      const array = groupedMixins.get(priority);\n      if (!array) {\n        groupedMixins.set(priority, [mixin]);\n      } else {\n        array.push(mixin);\n      }\n    });\n\n    this.statMixins = (groupedMixins.get(Priority.Normal) ?? []).concat(\n      groupedMixins.get(Priority.Last) ?? []\n    );\n\n    return this.statMixins;\n  }\n\n  getDamageModifier({\n    characterLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n  }: {\n    characterLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    modifierMixins?: ModifierMixin[];\n  } = {}): DamageModifier {\n    const modifier: DamageModifier = {\n      characterLevel: characterLevel ?? this.state.character.level,\n      enemyLevel: enemyLevel ?? this.state.enemyLevel,\n      enemyDefReduction: this.state.enemyDefReduction,\n      enemyRes: enemyRes ?? this.state.enemyRes,\n      enemyResReduction: new Resistance(),\n      critType: critType ?? this.state.critType,\n      flatDmg: this.state.flatDmg,\n      reaction: reaction ?? this.state.reaction,\n      talentAttackLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n    };\n\n    // Apply modifier mixins\n    (modifierMixins ?? this.modifierMixins).forEach((mixin) =>\n      mixin.apply(modifier, this.totalStats)\n    );\n\n    return modifier;\n  }\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = newArtifactSets\n      .map((artifactSet) => artifactSet.stats)\n      .reduce((acc, stats) => {\n        Object.entries(stats).forEach(([stat, value]) => {\n          acc[stat] = value + (acc[stat] ?? 0);\n        });\n        return acc;\n      }, {} as Stats);\n\n    this.updateTotalStats({\n      artifactSets,\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSets?: ArtifactSet[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const statMixins = this.getStatMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n    });\n\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel,\n      statMixins\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      characterOptions,\n      artifactSetOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    weapon,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifactSets?: ArtifactSet[];\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n\n    const modifierMixins = this.getModifierMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n    });\n\n    const damageModifier = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n    });\n\n    this.talentValues = {};\n    Object.entries(character.talentFns).forEach(([type, fns]) => {\n      this.talentValues[type] = Object.entries(fns).reduce((acc, [id, fn]) => {\n        acc[id] = fn({ stats: this.totalStats, modifier: damageModifier });\n        return acc;\n      }, {} as Record<string, TalentValue>);\n    });\n  };\n\n  refreshApp = () => {\n    this.getStatMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n    });\n    this.getModifierMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n    });\n\n    this.updateArtifactSetBonuses({});\n    this.setState({});\n  };\n\n  render() {\n    return (\n      <Container className='app px-0' fluid>\n        <Navbar sticky='top' bg='light' className='d-md-none'>\n          <Nav>\n            <Nav.Item>\n              <Nav.Link href='#input-column'>Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#artifact-column'>Artifacts</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#stat-column'>Stats</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#talent-column'>Talents</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar>\n\n        <Row className='mx-0'>\n          <InputColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n            updateTotalStats={this.updateTotalStats}\n            updateTalentValues={this.updateTalentValues}\n            refreshApp={this.refreshApp}\n          />\n          <ArtifactColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateTotalStats={this.updateTotalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n            damageModifier={this.getDamageModifier()}\n            statMixins={this.statMixins}\n            talentValues={this.talentValues}\n          />\n          <StatColumn\n            appState={this.state}\n            totalStats={this.totalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n          />\n          <TalentColumn talentValues={this.talentValues} />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}