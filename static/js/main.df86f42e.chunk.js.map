{"version":3,"sources":["data/Data.ts","character/Character.ts","stat/Stat.ts","artifact/types.ts","artifact/Artifact.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/IntInput.tsx","component/Picker.tsx","component/ArtifactBlock.tsx","optimization/Optimization.ts","talent/types.ts","component/Checkbox.tsx","component/OptimizerBlock.tsx","component/ArtifactColumn.tsx","artifact/ArtifactSet.ts","artifact/artifactSet/ResolutionOfSojourner.ts","artifact/artifactSet/TinyMiracle.ts","option/Option.ts","option/artifactSetOptions/ArtifactSetOption.ts","artifact/artifactSet/MartialArtist.ts","artifact/artifactSet/Gambler.ts","artifact/artifactSet/GladiatorsFinale.ts","option/Mixin.ts","artifact/artifactSet/ViridescentVenerer.ts","artifact/artifactSet/WanderersTroupe.ts","artifact/artifactSet/CrimsonWitch.ts","artifact/artifactSet/NoblesseOblige.ts","artifact/artifactSet/EmblemOfSeveredFate.ts","artifact/artifactSet/BraveHeart.ts","artifact/artifactSet/Berserker.ts","artifact/artifactSet/Instructor.ts","artifact/artifactSet/BlizzardStrayer.ts","artifact/artifactSet/Thundersoother.ts","artifact/artifactSet/Lavawalker.ts","artifact/artifactSet/MaidenBeloved.ts","artifact/artifactSet/BloodstainedChivalry.ts","artifact/artifactSet/ArchaicPetra.ts","artifact/artifactSet/RetracingBolide.ts","artifact/artifactSet/HeartOfDepth.ts","artifact/artifactSet/Tenacity.ts","artifact/artifactSet/PaleFlame.ts","artifact/artifactSet/Shimenawa.ts","artifact/ArtifactSetUtil.ts","component/ArtifactSetPicker.tsx","component/InputBlock.tsx","option/OptionUtils.ts","option/index.ts","modifier/Reaction.ts","component/OptionInput.tsx","component/ArtifactSetInputBlock.tsx","stat/Resistance.ts","modifier/CritType.ts","talent/TalentUtil.ts","character/albedo/AlbedoTalent.ts","character/albedo/Albedo.ts","option/characterOptions/CharacterOption.ts","character/aloy/AloyOption.ts","character/aloy/AloyPassive.ts","character/aloy/AloyTalent.ts","character/aloy/Aloy.ts","character/amber/AmberTalent.ts","character/amber/Amber.ts","character/ayaka/AyakaOption.ts","character/ayaka/AyakaTalent.ts","character/ayaka/Ayaka.ts","character/barbara/BarbaraTalent.ts","character/barbara/Barbara.ts","character/beidou/BeidouPassive.ts","character/beidou/BeidouTalent.ts","character/beidou/Beidou.ts","character/bennett/BennettTalent.ts","character/bennett/BennettTeamPassive.ts","character/bennett/Bennett.ts","character/chongyun/ChongyunOption.ts","character/chongyun/ChongyunTalent.ts","character/chongyun/Chongyun.ts","character/diluc/DilucTalent.ts","character/diluc/DilucOption.ts","character/diluc/Diluc.ts","character/diona/DionaTalent.ts","character/diona/Diona.ts","character/eula/EulaTalent.ts","character/eula/Eula.ts","character/fischl/FischlTalent.ts","character/fischl/Fischl.ts","character/ganyu/GanyuTalent.ts","character/ganyu/Ganyu.ts","character/hutao/HutaoPassive.ts","character/hutao/HutaoTalent.ts","character/hutao/HutaoOption.ts","character/hutao/Hutao.ts","character/jean/JeanTalent.ts","character/jean/Jean.ts","character/kaeya/KaeyaTalent.ts","character/kaeya/Kaeya.ts","character/kazuha/KazuhaTalent.ts","option/characterOptions/ElementalAbsorptionOption.ts","character/kazuha/KazuhaOption.ts","character/kazuha/Kazuha.ts","character/keqing/KeqingTalent.ts","character/keqing/Keqing.ts","character/klee/KleeTalent.ts","character/klee/Klee.ts","character/kokomi/KokomiPassive.ts","character/kokomi/KokomiTalent.ts","character/kokomi/KokomiOption.ts","character/kokomi/Kokomi.ts","character/lisa/LisaTalent.ts","character/lisa/Lisa.ts","character/mona/MonaOption.ts","character/mona/MonaTalent.ts","character/mona/Mona.ts","character/ningguang/NingguangTalent.ts","character/ningguang/Ningguang.ts","character/noelle/NoelleTalent.ts","character/noelle/NoelleOption.ts","character/noelle/Noelle.ts","character/qiqi/QiqiTalent.ts","character/qiqi/Qiqi.ts","character/raiden/RaidenPassive.ts","character/raiden/RaidenTalent.ts","character/raiden/RaidenOption.ts","character/raiden/Raiden.ts","character/razor/RazorTalent.ts","character/razor/Razor.ts","character/rosaria/RosariaTalent.ts","character/rosaria/Rosaria.ts","character/sara/SaraTalent.ts","character/sara/Sara.ts","character/sayu/SayuTalent.ts","character/sayu/SayuOption.ts","character/sayu/Sayu.ts","character/sucrose/SucroseOption.ts","character/sucrose/SucroseTalent.ts","character/sucrose/Sucrose.ts","character/tartaglia/TartagliaTalent.ts","character/tartaglia/TartagliaPassive.ts","character/tartaglia/TartagliaTeamPassive.ts","character/tartaglia/Tartaglia.ts","character/thoma/ThomaTalent.ts","character/thoma/ThomaPassive.ts","character/thoma/ThomaConstellation.ts","constellation/Constellation.ts","character/thoma/ThomaTeamPassive.ts","character/thoma/Thoma.ts","character/venti/VentiTalent.ts","character/venti/VentiOption.ts","character/venti/Venti.ts","character/xiangling/XianglingTalent.ts","character/xiangling/Xiangling.ts","character/xiao/XiaoOption.ts","character/xiao/XiaoTalent.ts","character/xiao/Xiao.ts","character/xingqiu/XingqiuTalent.ts","character/xingqiu/Xingqiu.ts","character/xinyan/XinyanTalent.ts","character/xinyan/Xinyan.ts","character/yanfei/YanfeiOption.ts","character/yanfei/YanfeiTalent.ts","character/yanfei/Yanfei.ts","character/yoimiya/YoimiyaOption.ts","character/yoimiya/YoimiyaPassive.ts","character/yoimiya/YoimiyaTalent.ts","character/yoimiya/Yoimiya.ts","character/zhongli/ZhongliTalent.ts","character/zhongli/ZhongliTeamPassive.ts","character/CharacterUtil.ts","character/zhongli/Zhongli.ts","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","weapon/Weapon.ts","option/weaponOptions/WeaponOption.ts","weapon/watatsumi/WatatsumiWavewalker.ts","weapon/watatsumi/Akuoumaru.ts","weapon/dragonsbane/DragonsBane.ts","weapon/dragonsbane/DragonsBanePassive.ts","weapon/engulfinglightning/EngulfingLightning.ts","weapon/engulfinglightning/EngulfingLightningPassive.ts","weapon/everlastingmoonglow/EverlastingMoonglow.ts","weapon/everlastingmoonglow/EverlastingMoonglowPassive.ts","weapon/luxurioussealord/LuxuriousSeaLord.ts","weapon/luxurioussealord/LuxuriousSeaLordPassive.ts","weapon/watatsumi/MouunsMoon.ts","weapon/polarstar/PolarStar.ts","weapon/polarstar/PolarStarPassive.ts","weapon/solarpearl/SolarPearl.ts","weapon/solarpearl/SolarPearlPassive.ts","weapon/staffofhoma/StaffOfHoma.ts","weapon/staffofhoma/StaffOfHomaPassive.ts","weapon/thecatch/TheCatch.ts","weapon/thecatch/TheCatchPassive.ts","weapon/whiteblind/Whiteblind.ts","weapon/whiteblind/WhiteblindPassive.ts","weapon/WeaponUtil.ts","weapon/watatsumi/WavebreakersFin.ts","option/characterOptions/ReactionOption.ts","component/SaveBlock.tsx","save/Save.ts","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/TeamInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","component/DPSOptionInput.tsx","component/DPSAttackInput.tsx","dps/DPSCalculator.ts","component/DPSColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","constellations","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","weaponPassiveData","weaponPassiveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getWeaponPassiveData","getWeaponPassiveParams","refinement","passive","passiveParams","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentParams","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","getWeaponPassiveAt","Character","hasAscended","constellationLevel","_id","name","baseStats","statCurveMapping","talentFns","_level","_hasAscended","_constellationLevel","innateStats","characterOptions","passiveOptions","constellationOptions","teamOptions","this","value","data","getTalentFns","getInnateStatsAt","getCharacterOptions","ascensionLevel","getAscensionLevel","getPassives","getPassiveOptions","getConstellations","getConstellationsOptions","getTeamOptions","prevAscensionLevel","prevConstellationLevel","isNaN","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","multiplier","bonus","getCharacterOptionConstuctors","Option","getAllPassives","filter","flatMap","options","oldOptionIds","newOptions","includes","concat","keptOptionIds","option","statMixin","mixin","modifierMixin","getAllConstellations","constellation","getTeamPassive","teamPassive","unroll","getStatDisplayValue","prop","isPercentage","toFixed","Math","round","toString","getDamageDisplayValue","values","str","length","every","slice","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","talentAttackLevel","talentSkillLevel","talentBurstLevel","statMixins","characterStats","weaponStats","stats","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","energyRecharge","apply","totalStats","baseAtk","flatAtk","atkBonus","flatDef","baseDef","defBonus","flatHp","baseHp","hpBonus","critRate","critDmg","elementalMastery","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","shieldStrength","dmgBonus","normalDmgBonus","chargedDmgBonus","plungeDmgBonus","skillDmgBonus","burstDmgBonus","chargedCritRate","burstCritRate","overloadDmgBonus","burningDmgBonus","vaporizeDmgBonus","meltDmgBonus","capitalize","toUpperCase","ArtifactType","InputStat","rawValue","convertStatToDisplayValue","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","setMainStatValue","getArtifactMainStatValue","i","setProp","setInputValue","setValue","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","Form","Label","htmlFor","srOnly","label","Control","size","className","React","Component","FloatInput","parseFloat","InputRow","Row","children","IntInput","Picker","selectedValue","target","handleChange","onChange","as","Item","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactRarity","setArtifactLevel","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatInputValue","statObj","substats","optimizeSubstats","possibleStats","maxRolls","erThreshold","optimizeTalentType","optimizeTalentId","appState","damageModifier","maxDmg","optimalSubstatRolls","optimalArtifacts","baseArtifacts","generateBaseArtifacts","baseEr","baseErRolls","ceil","erMainStatCount","generateRollCombinationsKqm","combination","erDistribution","find","push","rolls","inputStat","sIndex","setSubStatValue","addRollsToArtifacts","talentDmg","modifier","damage","subStatRolls","mainStats","sameMainStatCount","currentMaxRolls","min","combinations","current","backCombinations","prevArtifacts","iArtifact","jArtifact","TalentType","Element","AttackType","ScalingType","Checkbox","checked","Check","Input","OptimizerBlock","substatRolls","selectedSubstats","targetTalentType","targetTalentId","setMaxRolls","setSelectedSubstats","selected","substat","setErThreshold","setTargetTalentType","setTargetTalentId","onOptimizeClick","result","updateTotalStats","setAppState","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","talentValues","Button","variant","onClick","ArtifactColumn","Col","md","xs","ArtifactSet","bonusThresholds","setBonusData","_pieces","setBonusSets","setBonuses","getSetBonusSetsAt","getSetBonusesAt","getOptions","prevPieces","getAllSetBonuses","setBonus","threshold","bonuses","statBonus","extraStats","ResolutionOfSojourner","resolutionOfSojourner4Pc","TinyMiracle","tinyMiracle2Pc","params2Pc","element","ArtifactSetOption","MartialArtist","martialArtist2Pc","martialArtist4Pc","params4Pc","Gambler","gambler2Pc","GladiatorsFinale","gladiatorsFinale4Pc","Priority","ViridescentVenerer","viridescentVenerer4Pc","choices","Cryo","Electro","Hydro","Pyro","enemyResReduction","add","WanderersTroupe","wanderersTroupe4Pc","CrimsonWitch","crimsonWitch4Pc","param","stacks","NoblesseOblige","noblesseOblige2Pc","noblesseOblige4Pc","EmblemOfSeveredFate","emblemOfSeveredFate4Pc","priority","Last","BraveHeart","braveHeart4Pc","Berserker","berserker4Pc","Instructor","instructor4Pc","BlizzardStrayer","blizzardStrayer4Pc","Thundersoother","thundersoother4Pc","Lavawalker","lavawalker4Pc","MaidenBeloved","maidenBeloved4Pc","healedBonus","BloodstainedChivalry","bloodstainedChivalry4Pc","ArchaicPetra","archaicPetra4Pc","RetracingBolide","retracingBolide4Pc","HeartOfDepth","heartOfDepth4Pc","Tenacity","tenacity4Pc","PaleFlame","paleFlame4Pc","Shimenawa","shimenawa4Pc","artifactSets","resolutionofsojourner","tinymiracle","martialartist","gambler","gladiatorsfinale","viridescentvenerer","wandererstroupe","crimsonwitchofflames","noblesseoblige","emblemofseveredfate","braveheart","berserker","instructor","blizzardstrayer","thundersoother","lavawalker","maidenbeloved","bloodstainedchivalry","archaicpetra","retracingbolide","heartofdepth","tenacityofthemillelith","paleflame","shimenawasreminiscence","getArtifactSetConstructor","initArtifactSet","ArtifactSetConstructor","ArtifactSetPicker","setArtifactSetId","index","artifactSetId","sort","name1","name2","localeCompare","InputBlock","isBooleanOption","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","Reaction","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","choice","ArtifactSetInputBlock","artifactSetOptions","artifactSet","updateArtifactSetBonuses","setArtifactSetPieces","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","Map","set","Anemo","Geo","Physical","get","prevValue","CritType","calculateBaseDamage","scalingType","flatDmg","Attack","Defense","Hp","calculateAmplifyingReactionMultiplier","reaction","amplifyingStrength","triggerElement","Melt","Vaporize","calculateAmplifyingStrengthMultiplier","reactionBonus","calculateTotalDamage","attackType","Normal","normalAttackFlatDmg","Charged","chargedAttackFlatDmg","Skill","skillFlatDmg","baseDmg","getDamageBonus","crit","critType","Crit","Average","Burst","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","calculateHp","flatBonus","normalAttackSingle","infusionNormal","infusion","normalAttackMulti","hits","damages","chargedAttackSingle","chargedAttackMulti","aimShot","aimShotCharged","plungeAttack","infusionPlunge","Plunge","skillSingle","skillMulti","burstSingle","burstMulti","typelessAttack","None","healingValue","flatHealing","calculateHealing","hpValue","shieldHpValue","dmgAbsorption","dionaHoldSkill","calculateDmgAbsorption","atkBuffValue","albedoTalents","chargedDmg","plungeDmg","lowPlungeDmg","highPlungeDmg","skillDmg","transientBlossomDmg","burstDmg","fatalBlossomDmg","Albedo","CharacterOption","aloyOptions","_talentAttackLevel","_talentBurstLevel","skillParams","a1Data","a4Data","a1Params","a4Params","aloyPassives","aloyTalents","aimShotDmg","chargedAimShotDmg","freezeBombDmg","chillwaterBombletDmg","Aloy","amberTalents","explosionDmg","baronBunnyHp","dmgPerWave","totalDmg","talentValue","Amber","ayakaOptions","ayakaTalents","cuttingDmg","bloomDmg","Ayaka","barbaraTalents","hpRegenContinuous","hpRegenOnHit","dropletDmg","hpRegen","Barbara","beidouPassives","beidouTalents","chargedSpinDmg","chargedFinalDmg","shieldHp","dmgBonusOnHitTaken","lightningDmg","Beidou","bennettTalents","pressDmg","chargeLevel1Dmg","chargeLevel2Dmg","hpRegenContinuousPerSecond","BennettOptionAtkBuff","bennettTeamPassive","atkBuff","Bennett","chongyunOptions","chongyunTalents","Chongyun","dilucTalents","slashingDmg","dot","dilucOptions","_talentSkillLevel","passiveData","Diluc","dionaTalents","icyPawDmgPerPaw","shieldHpPress","shieldHpHold","continuousFieldDmg","hpRegenContinuousTime","Diona","eulaTalents","holdDmg","icewhirlBrandDmg","lightfallSwordBaseDmg","lightfallSwordStackDmg","Eula","fischlTalents","ozDmg","summoningDmg","fallingThunderDmg","Fischl","ganyuTalents","aimShotChargeLevel1","frostflakeArrowDmg","frostflakeArrowBloomDmg","iceLotusHp","iceShardDmg","Ganyu","hutaoPassives","hutaoTalents","bloodBlossomDmg","burstDmgLowHp","hpRegenLowHp","hutaoOptions","flatAtkBonus","Hutao","jeanTalents","fieldEnterExitDmg","fieldActivationHealing","Jean","kaeyaTalents","Kaeya","kazuhaTalents","dotElementalAbsorption","elementalAbsorption","ElementalAbsoprtionOption","kazuhaOptions","Kazuha","keqingTalents","lightningStilettoDmg","thunderclapSlashDmg","burstInitDmg","consecutiveSlashDmg","lastAttackDmg","Keqing","kleeTalents","jumpyDumptyDmg","mineDmg","sparksNSplashDmg","Klee","kokomiPassives","kokomiHealingBonusDmg","kokomiTalents","getKokomiNormalAttackModifier","getKokomiChargedAttackModifier","rippleDmg","getKokomiSkillModifier","kokomiBurst","newModifier","normalAttackBonusDmg","chargedAttackBonusDmg","skillBonusDmg","kokomiOptions","Kokomi","lisaTalents","holdDmgStack0","holdDmgStack1","holdDmgStack2","holdDmgStack3","Lisa","monaOptions","burstParams","monaTalents","Mona","ningguangTalents","normalAtkDmg","starJadeDmg","jadeScreenHp","dmgPerGem","Ningguang","noelleTalents","healing","firstSwingDmg","noelleOptions","totalDef","Noelle","qiqiTalents","heraldOfFrostDmg","Qiqi","raidenPassives","raidenTalents","coordinatedAtkDmg","musouNoHitotachiDmg","getInitialResolveBonus","getAttackResolveBonus","resolveStacks","raidenOptions","Raiden","razorTalents","Razor","rosariaTalents","iceLanceDot","Rosaria","saraTalents","tenguJuuraiAmbushDmg","tenguJuuraiTitanbreakerDmg","tenguJuuraiStormclusterDmg","Sara","sayuTalents","fuufuuWindwheelDmg","fuufuuWhirlwindKickPressDmg","fuufuuWhirlwindKickHoldDmg","fuufuuWindwheelElementalDmg","fuufuuWhirlwindKickElementalDmg","activationDmg","activationHealing","mujimujiDarumaDmg","mujimujiDarumaHealing","sayuOptions","Sayu","sucroseOptions","sucroseTalents","Sucrose","tartagliaTalents","riptideFlashDmg","riptideBurstDmg","stanceChangeDmg","riptideSlashDmg","burstDmgMelee","burstDmgRanged","riptideBlastDmg","tartagliaAscension0","tartagliaPassives","tartagliaTeamPassive","Tartaglia","thomaTalents","shieldHpMax","fieryCollapseDmg","getThomaFieryCollapseModifier","thomaHpBonusDmg","thomaPassives","c6Params","ThomaOptionConstellation6","thomaConstellations","ConstellationBurst","thomaTeamPassive","Thoma","ventiTalents","ventiOptions","Venti","xianglingTalents","guobaDmg","swing1HitDmg","swing2HitDmg","swing3HitDmg","pyronadoDmg","Xiangling","xiaoOptions","xiaoTalents","Xiao","xingqiuTalents","swordRainDmg","Xingqiu","xinyanTalents","swingDmg","shieldHpLevel1","shieldHpLevel2","shieldHpLevel3","pyroDot","Xinyan","yanfeiOptions","yanfeiTalents","chargedDmgSeal0","chargedDmgSeal1","chargedDmgSeal2","chargedDmgSeal3","chargedDmgSeal4","Yanfei","yoimiyaOptions","yoimiyaSkill","yoimiyaPassives","yoimiyaTalents","getYoimiyaNormalAttackMultiplier","kindlingArrowDmg","aurousBlazeExplosionDmg","Yoimiya","zhongliTalents","stoneSteeleDmg","resonanceDmg","zhongliTeamPassive","characters","albedo","aloy","amber","ayaka","barbara","beidou","bennett","chongyun","diluc","diona","eula","fischl","ganyu","hutao","jean","kaeya","kazuha","keqing","klee","kokomi","lisa","mona","ningguang","noelle","qiqi","raiden","razor","rosaria","sara","sayu","sucrose","tartaglia","thoma","venti","xiangling","xiao","xingqiu","xinyan","yanfei","yoimiya","zhongli","getCharacterConstructor","initCharacter","CharacterConstructor","CharacterPicker","setCharacterId","CharacterInputBlock","setCharacterLevel","setIsCharacterAscended","isAscended","setCharacterConstellationLevel","ModifierInputBlock","setEnemyLevel","updateTalentValues","setEnemyRes","setCritType","setReaction","ToggleButtonGroup","ToggleButton","Weapon","rank","passiveDataSet","_weaponLevel","_refinement","getPassive","getStatsAt","weaponLevel","weaponStatCurves","shouldKeepValue","newOption","statBonuses","WeaponOption","watatsumiWavewalkerPassive","Akuoumaru","DragonsBane","dragonsBanePassive","EngulfingLightning","engulfingLightningPassive","EverlastingMoonglow","everlastingMoonglowPassive","LuxuriousSeaLord","luxuriousSeaLordPassive","MouunsMoon","PolarStar","polarStarPassive","SolarPearl","solarPearlPassive","StaffOfHoma","totalHp","staffOfHomaPassive","TheCatch","theCatchPassive","Whiteblind","whiteblindPassive","weapons","dragonsbane","engulfinglightning","staffofhoma","thecatch","wavebreakersfin","everlastingmoonglow","solarpearl","luxurioussealord","whiteblind","akuoumaru","polarstar","mouunsmoon","getWeaponConstructor","initWeapon","WeaponConstructor","ReactionOption","SaveBlock","onSaveClick","saveInputName","save","characterHasAscended","characterConstellationLevel","weaponHasAscended","weaponRefinement","artifactSetPieces","teamCharacterIds","teamCharacters","weaponOptions","rotationTime","rotation","talentType","talentId","saves","window","localStorage","setItem","JSON","stringify","addSave","onSaveInputChange","onLoadClick","selectedSave","refreshApp","savedArtifact","artifactType","characterOption","weaponOption","artifactSetOption","teamOption","allOptions","attackSave","OptionConstructor","constructor","loadSave","onLoadInputChange","onDeleteClick","showDeleteWarning","onModalConfirm","deleteSave","onModalHide","getItem","parse","placeholder","Modal","show","onHide","Footer","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","talentAttackLevelExtra","talentSkillLevelExtra","talentBurstLevelExtra","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","setIsWeaponAscended","setWeaponRefinement","TeamInputBlock","InputColumn","ArtifactSetStatBlock","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","TalentColumn","DPSOptionInput","setOptionId","setOption","DPSAttackInput","setTalentType","setAttack","setTalentId","setMultiplier","splice","calculateTalentValue","getDamageModifier","getStatMixins","getModifierMixins","initializeAllOptions","oldOption","updateCache","modifierMixins","talentFn","defaultAttack","DPSColumn","dpr","dps","updateTalentValue","dmg","setRotationTime","time","isFinite","App","characterPassiveMixins","getPassiveModifierMixins","characterConstellationMixins","getConstellationModifierMixins","weaponPassiveMixins","artifactSetMixins","teamPassiveMixins","getTeamModifierMixin","characterOptionMixins","weaponOptionMixins","artifactSetOptionMixins","teamOptionMixins","unarrangedMixins","groupedMixins","array","getPassiveStatMixins","getConstellationStatMixins","getTeamStatMixin","callback","newArtifactSets","newChar","fns","fn","Container","fluid","Navbar","sticky","bg","Nav","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df86f42e.chunk.js","sourcesContent":["import type * as Data from './types';\nimport type { TalentType } from '../talent/types';\n\nimport characterDataRaw from './characterdata.json';\nimport characterAscensionBonusDataRaw from './characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from './characterstatcurvedata.json';\nimport weaponDataRaw from './weapondata.json';\nimport weaponAscensionBonusDataRaw from './weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from './weaponstatcurvedata.json';\nimport weaponPassiveDataRaw from './weaponpassivedata.json';\nimport talentDataRaw from './talentdata.json';\nimport artifactSetDataRaw from './artifactsetdata.json';\nimport artifactSetBonusDataRaw from './artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from './artifactmainstatdata.json';\n\nimport propMappingRaw from './propmapping.json';\nimport talentDescMappingRaw from './talentdescmapping.json';\nimport optionMappingRaw from './optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\nconst weaponPassiveData = weaponPassiveDataRaw as Record<\n  string,\n  Data.WeaponPassiveSetData\n>;\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n\n      constellations: talentDataSetRaw.constellations,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getWeaponPassiveData(id: string) {\n  return getData(id, weaponPassiveData);\n}\n\nexport function getWeaponPassiveParams(id: string, refinement: number) {\n  return getWeaponPassiveData(id).passive[refinement]?.passiveParams ?? [];\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentParams(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\nexport function getWeaponPassiveAt(\n  refinement: number,\n  passives: Data.WeaponPassiveSetData\n): Data.WeaponPassiveData | undefined {\n  return passives.passive[refinement];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n} from '../data/Data';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../data/types';\nimport type { Talents } from '../talent/types';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { CharacterPassive, TeamPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport Constellation from '../constellation/Constellation';\n\nexport default class Character {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    constellationLevel = 0\n  ) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n    this._constellationLevel = constellationLevel;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n    this.talentFns = this.getTalentFns();\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n    this.constellations = this.getConstellations(this.constellationLevel);\n    this.constellationOptions = this.getConstellationsOptions(\n      this.constellationLevel\n    );\n    this.teamOptions = this.getTeamOptions();\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n  talentFns: Talents = {};\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _constellationLevel: number = 0;\n  get constellationLevel(): number {\n    return this._constellationLevel;\n  }\n  set constellationLevel(value: number) {\n    const prevConstellationLevel = this.constellationLevel;\n    this._constellationLevel = value;\n\n    this.constellations = this.getConstellations(value);\n    this.constellationOptions = this.getConstellationsOptions(\n      value,\n      prevConstellationLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  constellations: Constellation[] = [];\n\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n  constellationOptions: CharacterOption[] = [];\n  teamOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Override in derived classes\n  getTalentFns(): Talents {\n    return {};\n  }\n\n  // Override in derived classes if character has base options\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return [];\n  }\n\n  getCharacterOptions(): CharacterOption[] {\n    return this.getCharacterOptionConstuctors().map((Option) => new Option());\n  }\n\n  // Override in derived classes\n  getAllPassives(): CharacterPassive[] {\n    return [];\n  }\n\n  // Returns passives that character should have based on their current ascension\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    return this.getAllPassives().filter(\n      (passive) => ascensionLevel >= passive.ascensionLevel\n    );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(\n    ascensionLevel: number,\n    prevAscensionLevel?: number\n  ): CharacterOption[] {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  // Override in derived classes\n  getAllConstellations(): Constellation[] {\n    return [];\n  }\n\n  getConstellations(constellationLevel: number): Constellation[] {\n    return this.getAllConstellations().filter(\n      (constellation) => constellationLevel >= constellation.constellationLevel\n    );\n  }\n\n  // getConstellations should be called before this if passives are updated\n  getConstellationsOptions(\n    constellationLevel: number,\n    prevConstellationLevel?: number\n  ): CharacterOption[] {\n    if (prevConstellationLevel === undefined || isNaN(prevConstellationLevel)) {\n      return this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n    }\n\n    if (constellationLevel > prevConstellationLevel) {\n      const newOptions = this.constellations\n        .filter(\n          ({ constellationLevel }) =>\n            constellationLevel > prevConstellationLevel\n        )\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n\n      return this.constellationOptions.concat(newOptions);\n    }\n\n    if (constellationLevel < prevConstellationLevel) {\n      const keptOptionIds = this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.constellationOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (constellationLevel === prevConstellationLevel)\n    return this.constellationOptions;\n  }\n\n  getConstellationStatMixins(): StatMixin[] {\n    return this.constellations\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getConstellationModifierMixins(): ModifierMixin[] {\n    return this.constellations\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n    const constellationOptions = this.constellationOptions;\n\n    return [...characterOptions, ...passiveOptions, ...constellationOptions];\n  }\n\n  // Override in derived classes to implement team buffs\n  getTeamPassive(): TeamPassive | undefined {\n    return undefined;\n  }\n\n  getTeamStatMixin(): StatMixin | undefined {\n    return this.getTeamPassive()?.statMixin;\n  }\n\n  getTeamModifierMixin(): ModifierMixin | undefined {\n    return this.getTeamPassive()?.modifierMixin;\n  }\n\n  getTeamOptions(): CharacterOption[] {\n    const teamPassive = this.getTeamPassive();\n\n    return (\n      teamPassive?.options?.flatMap((Option) => new Option().unroll()) ?? []\n    );\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from '../data/Data';\nimport { StatMixin } from '../option/Mixin';\nimport Weapon from '../weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputted value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\n// Returns a number representing the value to display (e.g. in stat inputs)\nexport function convertStatToDisplayValue(\n  value: number,\n  isPercentage: boolean\n) {\n  if (isPercentage) {\n    return value * 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin.apply(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n  if (combinedStats.burstCritRate !== undefined) {\n    totalStats.burstCritRate = combinedStats.burstCritRate;\n  }\n\n  if (combinedStats.overloadDmgBonus !== undefined) {\n    totalStats.overloadDmgBonus = combinedStats.overloadDmgBonus;\n  }\n  if (combinedStats.burningDmgBonus !== undefined) {\n    totalStats.burningDmgBonus = combinedStats.burningDmgBonus;\n  }\n  if (combinedStats.vaporizeDmgBonus !== undefined) {\n    totalStats.vaporizeDmgBonus = combinedStats.vaporizeDmgBonus;\n  }\n  if (combinedStats.meltDmgBonus !== undefined) {\n    totalStats.meltDmgBonus = combinedStats.meltDmgBonus;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatToDisplayValue, convertStatValue } from '../stat/Stat';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setInputValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n\n  setValue(value: number) {\n    this.value = value;\n    if (this.stat !== '') {\n      this.rawValue = convertStatToDisplayValue(\n        value,\n        propMapping[this.stat].isPercentage\n      );\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  pieces: number;\n  options?: typeof ArtifactSetOption[];\n  extraStats?: Stat[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stat, Stats } from '../data/types';\nimport { getArtifactMainStatValue } from '../data/Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatInputValue(i: number, value: number) {\n    this.subStats[i].setInputValue(value);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value + (stats[subStat.stat] ?? 0);\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          type='number'\n          size='sm'\n          value={displayString}\n          onInput={this.handleInput}\n          className={`number-input ${this.props.className ?? ''}`}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\nimport Row from 'react-bootstrap/esm/Row';\n\nclass InputRow extends React.Component {\n  render() {\n    return <Row className='input-row no-gutters'>{this.props.children}</Row>;\n  }\n}\n\nexport default InputRow;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          as='select'\n          size='sm'\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={`picker ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </Form.Control>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../artifact/Artifact';\nimport { propMapping } from '../data/Data';\nimport { capitalize, getStatDisplayValue } from '../stat/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactRarity = (rarity: number) => {\n    this.props.artifact.rarity = rarity;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactLevel = (level: number) => {\n    this.props.artifact.level = level;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatInputValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-rarity`}\n            label='Rarity:'\n            defaultValue={1}\n            value={artifact.rarity}\n            onInput={this.setArtifactRarity}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-level`}\n            label='Level:'\n            defaultValue={0}\n            value={artifact.level}\n            onInput={this.setArtifactLevel}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label='Main Stat:'\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <p>\n            {getStatDisplayValue(\n              artifact.mainStat.stat,\n              artifact.mainStat.value\n            )}\n          </p>\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { StatMixin } from '../option/Mixin';\nimport { getTotalStatsAt } from '../stat/Stat';\n\nexport type RollDistribution = {\n  stat: string;\n  rolls: number;\n};\n\ntype SubstatOptimzerResult = {\n  subStatRolls: RollDistribution[];\n  artifacts: Artifact[];\n};\n\n// Average substat rolls, as per KQM guidelines\nexport const substats: Record<string, number> = {\n  hpBonus: 0.0496,\n  flatHp: 253.94,\n  atkBonus: 0.0496,\n  flatAtk: 16.54,\n  defBonus: 0.062,\n  flatDef: 19.68,\n  elementalMastery: 19.82,\n  energyRecharge: 0.0551,\n  critRate: 0.0331,\n  critDmg: 0.0662,\n};\n\n// Optimize substats according to KQM standardized guidelines\n// 20 preallocated fixed subs (2 of each substat)\n// maxRolls liquid subs (default/max = 20)\n// each sub type can have maximum 2 rolls per different main stat type\nexport function optimizeSubstats(\n  possibleStats: string[],\n  maxRolls: number,\n  erThreshold: number,\n  optimizeTalentType: string,\n  optimizeTalentId: string,\n  appState: AppState,\n  artifactSetBonuses: Stats,\n  damageModifier: DamageModifier,\n  statMixins: StatMixin[]\n): SubstatOptimzerResult {\n  let maxDmg = 0;\n  let optimalSubstatRolls: RollDistribution[] = [];\n  let optimalArtifacts: Artifact[] = appState.artifacts;\n\n  // Roll ER to reach threshold\n  const baseArtifacts = generateBaseArtifacts(appState.artifacts);\n  const baseTotalStats = getTotalStatsAt(\n    appState.character,\n    appState.weapon,\n    artifactSetBonuses,\n    baseArtifacts,\n    appState.talentAttackLevel,\n    appState.talentSkillLevel,\n    appState.talentBurstLevel,\n    statMixins\n  );\n  const baseEr = baseTotalStats.energyRecharge ?? 0;\n\n  let baseErRolls = Math.ceil((erThreshold - baseEr) / substats.energyRecharge);\n\n  const erMainStatCount = baseArtifacts\n    .map((artifact) => artifact.mainStat.stat)\n    .filter((mainStat) => mainStat === 'energyRecharge').length;\n\n  if (baseErRolls < 0) {\n    baseErRolls = 0;\n  } else if (baseErRolls > 2 * (5 - erMainStatCount)) {\n    baseErRolls = 2 * (5 - erMainStatCount);\n  }\n\n  // Generate all combinations\n  const combinations = generateRollCombinationsKqm(\n    possibleStats,\n    maxRolls - baseErRolls,\n    appState.artifacts.map((artifact) => artifact.mainStat.stat),\n    baseErRolls\n  );\n\n  combinations.forEach((combination) => {\n    // Add in ER threshold rolls\n    if (baseErRolls > 0) {\n      const erDistribution = combination.find(\n        ({ stat }) => stat === 'energyRecharge'\n      );\n      if (erDistribution === undefined) {\n        combination.push({ stat: 'energyRecharge', rolls: baseErRolls });\n      } else {\n        erDistribution.rolls += baseErRolls;\n      }\n    }\n\n    const artifacts = generateBaseArtifacts(appState.artifacts);\n\n    addRollsToArtifacts(combination, artifacts);\n\n    const totalStats = getTotalStatsAt(\n      appState.character,\n      appState.weapon,\n      artifactSetBonuses,\n      artifacts,\n      appState.talentAttackLevel,\n      appState.talentSkillLevel,\n      appState.talentBurstLevel,\n      statMixins\n    );\n\n    // Calculate talent damage\n    const talentDmg =\n      appState.character.talentFns?.[optimizeTalentType]?.[optimizeTalentId]?.({\n        stats: totalStats,\n        modifier: damageModifier,\n      })?.damage?.[0] ?? 0;\n\n    // Update optimal rolls\n    if (talentDmg > maxDmg) {\n      optimalSubstatRolls = combination;\n      optimalArtifacts = artifacts;\n      maxDmg = talentDmg;\n    }\n  });\n\n  return {\n    subStatRolls: optimalSubstatRolls,\n    artifacts: optimalArtifacts,\n  };\n}\n\n// Recursive function to generate all substat combinations according to KQM 2*n rule\nfunction generateRollCombinationsKqm(\n  possibleStats: string[],\n  maxRolls: number,\n  mainStats: string[],\n  baseErRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const sameMainStatCount = mainStats.filter(\n    (mainStat) => possibleStats[0] === mainStat\n  ).length;\n  let currentMaxRolls = Math.min((5 - sameMainStatCount) * 2, maxRolls);\n  if (possibleStats[0] === 'energyRecharge') {\n    currentMaxRolls -= baseErRolls;\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = currentMaxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinationsKqm(\n      possibleStats.slice(1),\n      maxRolls - i,\n      mainStats,\n      baseErRolls\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n\n// Recursive function to generate all combinations of possibleStats.length numbers that sum to maxRolls\n// Generated combinations are not guaranteed to be valid substat combinations\n/*\nfunction generateRollCombinations(\n  possibleStats: string[],\n  maxRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = maxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinations(\n      possibleStats.slice(1),\n      maxRolls - i\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n*/\n\n// Generate artifacts with 2 of each substat\nfunction generateBaseArtifacts(prevArtifacts: Artifact[]): Artifact[] {\n  const artifacts = prevArtifacts.map((artifact) => {\n    return new Artifact(\n      artifact.type,\n      artifact.rarity,\n      artifact.level,\n      artifact.mainStat.stat\n    );\n  });\n\n  // Set artifact substats according to currentSubstatRolls\n  let iArtifact = 0;\n  let jArtifact = 0;\n  Object.entries(substats).forEach(([stat, value]) => {\n    artifacts[iArtifact].setSubStatProp(jArtifact, stat);\n    artifacts[iArtifact].setSubStatValue(jArtifact, value * 2);\n    if (++jArtifact >= 4) {\n      jArtifact = 0;\n      if (++iArtifact >= 5) {\n        // This really should not happen\n        iArtifact = 0;\n      }\n    }\n  });\n\n  return artifacts;\n}\n\n// Add liquid subs to fixed subs without replacing any fixed subs\nfunction addRollsToArtifacts(\n  combination: RollDistribution[],\n  artifacts: Artifact[]\n) {\n  const subStats = artifacts.flatMap((artifact) => artifact.subStats);\n  combination.forEach(({ stat, rolls }) => {\n    const subStat = subStats.find((inputStat) => inputStat.stat === stat);\n    if (subStat === undefined) {\n      let sIndex = 0;\n      artifacts\n        .find((artifact) =>\n          artifact.subStats.find((inputStat, i) => {\n            sIndex = i;\n            return isNaN(inputStat.value);\n          })\n        )\n        ?.setSubStatValue(sIndex, substats[stat] * rolls);\n    } else {\n      subStat.setValue(subStat.value + substats[stat] * rolls);\n    }\n  });\n}\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport type TalentFn = (props: TalentProps) => TalentValue;\n\nexport type Talents = Record<string, Record<string, TalentFn>>;\n\nexport type TalentValueSet = Record<string, Record<string, TalentValue>>;\n\nexport interface TalentValue {\n  damage: number[];\n  element?: Element;\n}\n\nexport interface TalentProps {\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  None = 'none',\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <div>\n        <Form.Check\n          type='checkbox'\n          className={`checkbox ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.isLabelShown() ? (\n            <Form.Check.Label>{this.props.label}</Form.Check.Label>\n          ) : (\n            <Form.Check.Label></Form.Check.Label>\n          )}\n\n          <Form.Check.Input\n            type='checkbox'\n            checked={value}\n            onChange={this.handleChange}\n          />\n        </Form.Check>\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Button from 'react-bootstrap/esm/Button';\nimport Card from 'react-bootstrap/esm/Card';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport { propMapping, talentDescMapping } from '../data/Data';\nimport DamageModifier from '../modifier/DamageModifer';\nimport {\n  optimizeSubstats,\n  RollDistribution,\n  substats,\n} from '../optimization/Optimization';\nimport { StatMixin } from '../option/Mixin';\nimport { TalentValueSet } from '../talent/types';\nimport Checkbox from './Checkbox';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptimizerBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  damageModifier: DamageModifier;\n  statMixins: StatMixin[];\n  talentValues: TalentValueSet;\n};\n\ntype OptimizerBlockState = {\n  maxRolls: number;\n  selectedSubstats: string[];\n  erThreshold: number;\n  targetTalentType: string;\n  targetTalentId: string;\n  substatRolls: RollDistribution[];\n};\n\nclass OptimizerBlock extends React.Component<\n  OptimizerBlockProps,\n  OptimizerBlockState\n> {\n  state: OptimizerBlockState = {\n    substatRolls: [],\n    selectedSubstats: [],\n    erThreshold: 100,\n    targetTalentType: '',\n    targetTalentId: '',\n    maxRolls: 20,\n  };\n\n  setMaxRolls = (maxRolls: number) => {\n    this.setState({ maxRolls });\n  };\n\n  setSelectedSubstats = (stat: string) => (selected: boolean) => {\n    if (selected) {\n      if (!this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: [...this.state.selectedSubstats, stat],\n        });\n      }\n    } else {\n      if (this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: this.state.selectedSubstats.filter(\n            (substat) => substat !== stat\n          ),\n        });\n      }\n    }\n  };\n\n  setErThreshold = (value: number) => {\n    if (isNaN(value)) {\n      this.setState({ erThreshold: 0 });\n    } else {\n      this.setState({ erThreshold: value });\n    }\n  };\n\n  setTargetTalentType = (value: string) => {\n    this.setState({ targetTalentType: value });\n  };\n\n  setTargetTalentId = (value: string) => {\n    this.setState({ targetTalentId: value });\n  };\n\n  onOptimizeClick = () => {\n    if (\n      this.state.targetTalentType !== undefined &&\n      this.state.targetTalentId !== ''\n    ) {\n      const result = optimizeSubstats(\n        this.state.selectedSubstats,\n        this.state.maxRolls,\n        this.state.erThreshold / 100,\n        this.state.targetTalentType,\n        this.state.targetTalentId,\n        this.props.appState,\n        this.props.artifactSetBonuses,\n        this.props.damageModifier,\n        this.props.statMixins\n      );\n\n      this.props.updateTotalStats({ artifacts: result.artifacts });\n      this.props.setAppState({ artifacts: result.artifacts });\n      this.setState({ substatRolls: result.subStatRolls });\n    }\n  };\n\n  render() {\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='0'\n            className='bg-transparent border-0'\n          >\n            <h3>Substat Optimizer</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n          <Accordion.Collapse eventKey='0'>\n            <Card.Body>\n              <div className='input-block'>\n                <p>Fixed Substats: 20</p>\n\n                <InputRow>\n                  <IntInput\n                    className='level-input'\n                    id={'optimizer-liquid-substats'}\n                    label='Liquid Substats:'\n                    defaultValue={20}\n                    value={this.state.maxRolls}\n                    onInput={this.setMaxRolls}\n                  />\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <p>Select substats to optimize:</p>\n                {Object.keys(substats).map((stat) => (\n                  <InputRow key={stat}>\n                    <Checkbox\n                      id={`optimizer-selected-substats-${stat}`}\n                      label={`${propMapping[stat].name}`}\n                      defaultValue={false}\n                      value={this.state.selectedSubstats.includes(stat)}\n                      onChange={this.setSelectedSubstats(stat)}\n                    />\n                  </InputRow>\n                ))}\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <FloatInput\n                    className='stat-input'\n                    id={'optimizer-er-threshold'}\n                    label='ER Threshold:'\n                    defaultValue={100}\n                    value={this.state.erThreshold}\n                    onInput={this.setErThreshold}\n                  />\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <Picker\n                    id={`optimizer-target-talent-type`}\n                    label='Target Talent Type:'\n                    defaultValue=''\n                    value={this.state.targetTalentType}\n                    onChange={this.setTargetTalentType}\n                  >\n                    <Picker.Item value='' label='' />\n                    {Object.keys(this.props.talentValues).map((type) => (\n                      <Picker.Item\n                        key={type}\n                        value={type}\n                        label={talentDescMapping[type]}\n                      />\n                    ))}\n                  </Picker>\n                </InputRow>\n\n                <InputRow>\n                  <Picker\n                    id={`optimizer-target-talent-id`}\n                    label='Target Talent Name:'\n                    defaultValue=''\n                    value={this.state.targetTalentId}\n                    onChange={this.setTargetTalentId}\n                  >\n                    <Picker.Item value='' label='' />\n                    {Object.keys(\n                      this.props.talentValues[this.state.targetTalentType] ?? {}\n                    ).map((id) => (\n                      <Picker.Item\n                        key={id}\n                        value={id}\n                        label={talentDescMapping[id]}\n                      />\n                    ))}\n                  </Picker>\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <Button\n                    variant='secondary'\n                    size='sm'\n                    onClick={this.onOptimizeClick}\n                  >\n                    Optimize\n                  </Button>\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                {this.state.substatRolls.length > 0 && (\n                  <p>Liquid roll distribution:</p>\n                )}\n\n                {this.state.substatRolls.map(({ stat, rolls }) => (\n                  <p key={stat}>\n                    {propMapping[stat].name}: {rolls}\n                  </p>\n                ))}\n              </div>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default OptimizerBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { StatMixin } from '../option/Mixin';\nimport { TalentValueSet } from '../talent/types';\nimport ArtifactBlock from './ArtifactBlock';\nimport OptimizerBlock from './OptimizerBlock';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  damageModifier: DamageModifier;\n  statMixins: StatMixin[];\n  talentValues: TalentValueSet;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Col\n        id='artifact-column'\n        className='artifact-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='artifact-heading'>\n          <h2>Artifacts</h2>\n        </div>\n        <OptimizerBlock {...this.props} />\n        <div className='result-block'>\n          {appState.artifacts.map((artifact) => (\n            <ArtifactBlock\n              artifact={artifact}\n              updateArtifactState={this.updateArtifactState}\n              key={artifact.type}\n            />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import { getArtifactSetData, getArtifactSetBonusData } from '../data/Data';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../data/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces: number = 0) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  // Override in derived classes to implement special set bonuses\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [];\n  }\n\n  // Returns all special set bonuses that are active for given pieces\n  getSetBonusesAt(pieces: number): ArtifactSetBonus[] {\n    return this.getAllSetBonuses().filter(\n      (setBonus) => pieces >= setBonus.pieces\n    );\n  }\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n    });\n\n    // Special bonus stats, has to be handled individually\n    let extraStats = this.setBonuses.flatMap(\n      (setBonus) => setBonus.extraStats ?? []\n    );\n\n    extraStats.forEach((statBonus) => {\n      if (stats[statBonus.stat] !== undefined) {\n        stats[statBonus.stat] += statBonus.value;\n      } else {\n        stats[statBonus.stat] = statBonus.value;\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap(\n        (setBonus) => setBonus.options ?? []\n      );\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class ResolutionOfSojourner extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [resolutionOfSojourner4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('resolutionofsojourner', 4);\n\nconst resolutionOfSojourner4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  extraStats: [\n    {\n      stat: 'chargedCritRate',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class TinyMiracle extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tinyMiracle2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('tinymiracle', 2);\n\nconst tinyMiracle2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'].map(\n    (element) => {\n      return {\n        stat: `${element}Res`,\n        value: params2Pc[0],\n      };\n    }\n  ),\n};\n","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  statMixin: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  modifierMixin: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MartialArtist extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [martialArtist2Pc, martialArtist4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('martialartist', 2);\n\nconst martialArtist2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params2Pc[0],\n    },\n    {\n      stat: 'chargedDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('martialartist', 4);\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[2] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[2] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst martialArtist4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MartialArtist4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Gambler extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gambler2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('gambler', 2);\n\nconst gambler2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'skillDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class GladiatorsFinale extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gladiatorsFinale4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('gladiatorsfinale', 4);\n\nconst gladiatorsFinale4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for sword, polearm, claymore characters\n  // Did not make this an Option because this would likely not want to be disabled\n  // Calculation will be wrong if used on a catalyst, bow character\n  // Checking for that would require character weapon type to be implemented first\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport enum Priority {\n  Normal,\n  Last,\n}\n\ninterface Mixin {\n  priority?: Priority;\n}\n\nexport interface StatMixin extends Mixin {\n  apply: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number,\n    ascensionLevel: number\n  ) => void;\n}\n\n// Do not modify stats here, use StatMixin for that purpose\nexport interface ModifierMixin extends Mixin {\n  apply: (modifier: DamageModifier, stats: Stats) => void;\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionPicker, IModifierApplicable } from '../../option/Option';\n\nexport default class ViridescentVenerer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [viridescentVenerer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('viridescentvenerer', 4);\n\nclass ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.enemyResReduction.add(this.value as Element, params4Pc[1]);\n      }\n    },\n  };\n}\n\nconst viridescentVenerer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ViridescentVenerer4PcOption],\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class WanderersTroupe extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [wanderersTroupe4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('wandererstroupe', 4);\n\nconst wanderersTroupe4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for catalyst, bow characters\n  // See Gladiator's Finale for more details\n  extraStats: [\n    {\n      stat: 'chargedDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import {\n  getArtifactSetBonusData,\n  getArtifactSetBonusParams,\n} from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\n\nexport default class CrimsonWitch extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [crimsonWitch4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('crimsonwitchofflames', 4);\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n        const param = setBonusData[2].bonuses.find(\n          ({ stat }) => stat === 'pyroDmgBonus'\n        )?.value!!;\n\n        let stacks = this.value;\n        if (stacks > 3) stacks = 3;\n        stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst crimsonWitch4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [CrimsonWitch4PcOption],\n\n  extraStats: [\n    {\n      stat: 'overloadDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'burningDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'vaporizeDmgBonus',\n      value: params4Pc[1],\n    },\n    {\n      stat: 'meltDmgBonus',\n      value: params4Pc[2],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class NoblesseOblige extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [noblesseOblige2Pc, noblesseOblige4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('noblesseoblige', 2);\n\nconst noblesseOblige2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'burstDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('noblesseoblige', 4);\n\nclass NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst noblesseOblige4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [NoblesseOblige4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class EmblemOfSeveredFate extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [emblemOfSeveredFate4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('emblemofseveredfate', 4);\n\nconst emblemOfSeveredFate4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  statMixin: {\n    priority: Priority.Last,\n    apply: (stats: Stats) => {\n      let burstDmgBonus = params4Pc[0] * stats.energyRecharge;\n      if (burstDmgBonus > params4Pc[1]) {\n        burstDmgBonus = params4Pc[1];\n      }\n\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n    },\n  },\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BraveHeart extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [braveHeart4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('braveheart', 4);\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst braveHeart4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BraveHeart4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Berserker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [berserker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('berserker', 4);\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst berserker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Berserker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Instructor extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [instructor4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('instructor', 4);\n\nclass Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.elementalMastery = params4Pc[1] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst instructor4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Instructor4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BlizzardStrayer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [blizzardStrayer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('blizzardstrayer', 4);\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[1] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst blizzardStrayer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BlizzardStrayer4PcCryoOption, BlizzardStrayer4PcFrozenOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Thundersoother extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [thundersoother4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('thundersoother', 4);\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst thundersoother4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Thundersoother4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Lavawalker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [lavawalker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('lavawalker', 4);\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst lavawalker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Lavawalker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MaidenBeloved extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [maidenBeloved4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('maidenbeloved', 4);\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.healedBonus = params4Pc[0] + (stats.healedBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst maidenBeloved4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MaidenBeloved4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BloodstainedChivalry extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [bloodstainedChivalry4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n\nclass BloodstainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.chargedDmgBonus = params4Pc[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst bloodstainedChivalry4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BloodstainedChivalry4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionPicker, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class ArchaicPetra extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [archaicPetra4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('archaicpetra', 4);\n\nclass ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value !== '') {\n        stats[`${this.value}DmgBonus`] =\n          params4Pc[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n      }\n    },\n  };\n}\n\nconst archaicPetra4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ArchaicPetra4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class RetracingBolide extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [retracingBolide4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('retracingbolide', 4);\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst retracingBolide4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [RetracingBolide4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class HeartOfDepth extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [heartOfDepth4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('heartofdepth', 4);\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst heartOfDepth4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [HeartOfDepth4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Tenacity extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tenacity4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n\nclass Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.shieldStrength = params4Pc[1] + (stats.shieldStrength ?? 0);\n      }\n    },\n  };\n}\n\nconst tenacity4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Tenacity4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class PaleFlame extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [paleFlame4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('paleflame', 4);\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value >= 1) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n\n      if (this.value >= 2) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.physicalDmgBonus = params4Pc[3] + (stats.physicalDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst paleFlame4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [PaleFlame4PcOption],\n};\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Shimenawa extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [shimenawa4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('shimenawasreminiscence', 4);\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const param = params4Pc[1];\n        stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst shimenawa4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Shimenawa4PcOption],\n};\n","import ArtifactSet from './ArtifactSet';\nimport ResolutionOfSojourner from './artifactSet/ResolutionOfSojourner';\nimport TinyMiracle from './artifactSet/TinyMiracle';\nimport MartialArtist from './artifactSet/MartialArtist';\nimport Gambler from './artifactSet/Gambler';\nimport GladiatorsFinale from './artifactSet/GladiatorsFinale';\nimport ViridescentVenerer from './artifactSet/ViridescentVenerer';\nimport WanderersTroupe from './artifactSet/WanderersTroupe';\nimport CrimsonWitch from './artifactSet/CrimsonWitch';\nimport NoblesseOblige from './artifactSet/NoblesseOblige';\nimport EmblemOfSeveredFate from './artifactSet/EmblemOfSeveredFate';\nimport BraveHeart from './artifactSet/BraveHeart';\nimport Berserker from './artifactSet/Berserker';\nimport Instructor from './artifactSet/Instructor';\nimport BlizzardStrayer from './artifactSet/BlizzardStrayer';\nimport Thundersoother from './artifactSet/Thundersoother';\nimport Lavawalker from './artifactSet/Lavawalker';\nimport MaidenBeloved from './artifactSet/MaidenBeloved';\nimport BloodstainedChivalry from './artifactSet/BloodstainedChivalry';\nimport ArchaicPetra from './artifactSet/ArchaicPetra';\nimport RetracingBolide from './artifactSet/RetracingBolide';\nimport HeartOfDepth from './artifactSet/HeartOfDepth';\nimport Tenacity from './artifactSet/Tenacity';\nimport PaleFlame from './artifactSet/PaleFlame';\nimport Shimenawa from './artifactSet/Shimenawa';\n\nconst artifactSets: Record<string, typeof ArtifactSet> = {\n  resolutionofsojourner: ResolutionOfSojourner,\n  tinymiracle: TinyMiracle,\n  martialartist: MartialArtist,\n  gambler: Gambler,\n  gladiatorsfinale: GladiatorsFinale,\n  viridescentvenerer: ViridescentVenerer,\n  wandererstroupe: WanderersTroupe,\n  crimsonwitchofflames: CrimsonWitch,\n  noblesseoblige: NoblesseOblige,\n  emblemofseveredfate: EmblemOfSeveredFate,\n  braveheart: BraveHeart,\n  berserker: Berserker,\n  instructor: Instructor,\n  blizzardstrayer: BlizzardStrayer,\n  thundersoother: Thundersoother,\n  lavawalker: Lavawalker,\n  maidenbeloved: MaidenBeloved,\n  bloodstainedchivalry: BloodstainedChivalry,\n  archaicpetra: ArchaicPetra,\n  retracingbolide: RetracingBolide,\n  heartofdepth: HeartOfDepth,\n  tenacityofthemillelith: Tenacity,\n  paleflame: PaleFlame,\n  shimenawasreminiscence: Shimenawa,\n};\n\nfunction getArtifactSetConstructor(id: string): typeof ArtifactSet {\n  return artifactSets[id] ?? ArtifactSet;\n}\n\nexport function initArtifactSet(id: string = '', pieces?: number) {\n  const ArtifactSetConstructor = getArtifactSetConstructor(id);\n\n  return new ArtifactSetConstructor(id, pieces);\n}\n\n/* To be implemented\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\nRelic_ReactionWindEnhance,\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionFireEnhance,\n\n// Not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionElectricEnhance: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Requires info about team composition\nRelic_AbsorbTeamElemResist: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Probably can be implemented with a dropdown option for prev received elem dmg\nRelic_ElemDmgEnhanceElemResist: defaultSetBonus,\n*/\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import React from 'react';\r\nimport Row from 'react-bootstrap/esm/Row';\r\n\r\nclass InputBlock extends React.Component {\r\n  render() {\r\n    return <Row className='input-block no-gutters'>{this.props.children}</Row>;\r\n  }\r\n}\r\n\r\nexport default InputBlock;\r\n","import Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).statMixin !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (option as unknown as IModifierApplicable).modifierMixin !== undefined;\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import Option from './Option';\n\nexport default Option;\nexport * from './OptionUtils';\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n}\r\n\r\nexport default Reaction;\r\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../option';\nimport { IOptionBoolean, IOptionNumber, IOptionPicker } from '../option/Option';\nimport { capitalize, getOptionName } from '../stat/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n  isLabelShown?: boolean;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n          isLabelShown={this.props.isLabelShown}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n          isLabelShown={this.props.isLabelShown}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          isLabelShown={this.props.isLabelShown}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i] = initArtifactSet(id, artifactSets[i].pieces);\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </InputBlock>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import { Element } from '../talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import { Stats, TalentParams } from '../data/types';\nimport { AttackType, Element, ScalingType, TalentValue } from './types';\nimport Resistance from '../stat/Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport CritType from '../modifier/CritType';\n\n// Helper functions\n\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\n\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\n\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\n\nfunction calculateAmplifyingStrengthMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\n\nfunction calculateAmplifyingReactionMultiplier({\n  reaction,\n  stats,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  element: Element;\n}) {\n  const amplifyingStrength = calculateAmplifyingStrengthMultiplier(\n    reaction,\n    element\n  );\n\n  if (amplifyingStrength > 1) {\n    // Caulculate reactionbonus\n    let reactionBonus = 0;\n    switch (reaction) {\n      case Reaction.Vaporize:\n        reactionBonus = stats.vaporizeDmgBonus ?? 0;\n        break;\n      case Reaction.Melt:\n        reactionBonus = stats.meltDmgBonus ?? 0;\n        break;\n      default:\n        break;\n    }\n\n    // Calculate amplifying reaction multiplier\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingStrength * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\n\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let flatDmg = modifier.flatDmg;\n  if (attackType === AttackType.Normal) {\n    flatDmg += modifier.normalAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Charged) {\n    flatDmg += modifier.chargedAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Skill) {\n    flatDmg += modifier.skillFlatDmg ?? 0;\n  }\n\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === CritType.Crit) {\n    crit += stats.critDmg;\n  } else if (modifier.critType === CritType.Average) {\n    let critRate = stats.critRate;\n    if (attackType === AttackType.Charged) {\n      critRate += stats.chargedCritRate ?? 0;\n    } else if (attackType === AttackType.Burst) {\n      critRate += stats.burstCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateAmplifyingReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\n\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  const baseHealing = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n\n  // Incoming healing bonus is ignored because the healer's\n  // incoming healing bonus is not necessarily the same as the\n  // character being healed\n  return baseHealing * (1 + (stats.healingBonus ?? 0));\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n\n// Functions to calculate Talent Values\n\n// Used for all single-hit normal attacks\nexport function normalAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit normal attacks\nexport function normalAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: number[];\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for single-hit charged attacks\nexport function chargedAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for uncharged aim shots\nexport function aimShot({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const element = modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for charged aim shots\nexport function aimShotCharged({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier: multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all physical plunge attacks\nexport function plungeAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionPlunge ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Plunge,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all single-hit skill dmg\nexport function skillSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    scalingType,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit skills\nexport function skillMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for all single-hit burst dmg\nexport function burstSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    element,\n    multiplier,\n    scalingType,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit bursts\nexport function burstMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for damage that does not have an AttackType\nexport function typelessAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.None,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for healing skills/bursts\nexport function healingValue({\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const healing = calculateHealing({\n    stats,\n    multiplier,\n    flatHealing,\n    scalingType,\n  });\n\n  return {\n    damage: [healing],\n  };\n}\n\n// Used for all summons HP\nexport function hpValue({\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    damage: [hp],\n  };\n}\n\n// Used for all shields\nexport function shieldHpValue({\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    damage: [dmgAbsorption],\n  };\n}\n\n// Used for Bennett and Sara's ATK buffs\nexport function atkBuffValue({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const atkBonus = stats.baseAtk * multiplier;\n  return {\n    damage: [atkBonus],\n  };\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('albedo');\n\nconst albedoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  transientBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fatalBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoTalents: Talents = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport albedoTalents from './AlbedoTalent';\n\nexport default class Albedo extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('albedo', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return albedoTalents;\n  }\n}\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  children: CharacterOption[];\n\n  constructor(id: string = '', children: typeof CharacterOption[] = []) {\n    super(id);\n    this.children = children.map((Option) => new Option());\n  }\n\n  unroll(): CharacterOption[] {\n    return [this, ...this.children.flatMap((option) => option.unroll())];\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { Element, TalentType } from '../../talent/types';\r\nimport {\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n  IModifierApplicable,\r\n} from '../../option/Option';\r\n\r\nclass AloyOptionCoil\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('coil');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value > 0) {\r\n        const skillParams = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('aloy')\r\n        );\r\n\r\n        if (this.value >= 4) {\r\n          // Rushing Ice state\r\n          stats.normalDmgBonus = skillParams[7] + (stats.normalDmgBonus ?? 0);\r\n        } else {\r\n          stats.normalDmgBonus =\r\n            skillParams[this.value + 3] + (stats.normalDmgBonus ?? 0);\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value >= 4) {\r\n        modifier.infusionNormal = Element.Cryo;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyOptions = [AloyOptionCoil];\r\nexport default aloyOptions;\r\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport {\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [a1Data, a4Data] = getTalentData('aloy').passives;\r\nconst a1Params = a1Data.params;\r\nconst a4Params = a4Data.params;\r\n\r\nclass AloyOptionAscension1\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('aloyAscension1');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value) {\r\n        stats.atkBonus = a1Params[0] * 2 + (stats.atkBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension1: CharacterPassive = {\r\n  id: 'aloyAscension1',\r\n  ascensionLevel: 1,\r\n  options: [AloyOptionAscension1],\r\n};\r\n\r\nclass AloyOptionAscension4\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('aloyAscension4');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value > 0) {\r\n        let stacks = this.value;\r\n        if (stacks > 10) {\r\n          stacks = 10;\r\n        }\r\n\r\n        const cryoDmgBonus = a4Params[0] * stacks;\r\n        stats.cryoDmgBonus = cryoDmgBonus + (stats.cryoDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension4: CharacterPassive = {\r\n  id: 'aloyAscension4',\r\n  ascensionLevel: 4,\r\n  options: [AloyOptionAscension4],\r\n};\r\n\r\nconst aloyPassives = [aloyAscension1, aloyAscension4];\r\nexport default aloyPassives;\r\n","import {\r\n  Element,\r\n  TalentFn,\r\n  TalentProps,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\n\r\nconst talentData = getTalentData('aloy');\r\n\r\nconst aloyAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(0, 2),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloySkill: Record<string, TalentFn> = {\r\n  freezeBombDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chillwaterBombletDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyTalents: Talents = {\r\n  attack: aloyAttack,\r\n  skill: aloySkill,\r\n  burst: aloyBurst,\r\n};\r\n\r\nexport default aloyTalents;\r\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport aloyOptions from './AloyOption';\nimport aloyPassives from './AloyPassive';\nimport aloyTalents from './AloyTalent';\n\nexport default class Aloy extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('aloy', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return aloyTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return aloyOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return aloyPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('amber');\n\nconst amberAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst amberSkill: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  baronBunnyHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst amberBurst: Record<string, TalentFn> = {\n  dmgPerWave: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  totalDmg: ({ stats, modifier }: TalentProps) => {\n    const talentValue = burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    });\n    talentValue.damage[0] *= 18;\n    return talentValue;\n  },\n};\n\nconst amberTalents: Talents = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport amberTalents from './AmberTalent';\n\nexport default class Amber extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('amber', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return amberTalents;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ayaka');\n\nconst ayakaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[7]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaBurst: Record<string, TalentFn> = {\n  cuttingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  bloomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaTalents: Talents = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ayakaOptions from './AyakaOption';\nimport ayakaTalents from './AyakaTalent';\n\nexport default class Ayaka extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ayaka', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ayakaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ayakaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('barbara');\n\nconst barbaraAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraSkill: Record<string, TalentFn> = {\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  dropletDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraBurst: Record<string, TalentFn> = {\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraTalents: Talents = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport barbaraTalents from './BarbaraTalent';\n\nexport default class Barbara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('barbara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return barbaraTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('beidou').passives;\nconst a4Params = a4Data.params;\n\nclass BeidouOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('beidouAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = a4Params[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = a4Params[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst beidouAscension4: CharacterPassive = {\n  id: 'beidouAscension4',\n  ascensionLevel: 4,\n  options: [BeidouOptionAscension4],\n};\n\nconst beidouPassives = [beidouAscension4];\nexport default beidouPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  chargedAttackSingle,\n  shieldHpValue,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('beidou');\n\nconst beidouAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouSkill: Record<string, TalentFn> = {\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  baseDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  dmgBonusOnHitTaken: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouBurst: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightningDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouTalents: Talents = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalents;\n","import { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport beidouPassives from './BeidouPassive';\nimport beidouTalents from './BeidouTalent';\n\nexport default class Beidou extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('beidou', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return beidouTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return beidouPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  atkBuffValue,\n  burstSingle,\n  chargedAttackMulti,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillMulti,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('bennett');\n\nconst bennettAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargeLevel1Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n  chargeLevel2Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousPerSecond: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  atkBonus: ({ stats, modifier }: TalentProps) =>\n    atkBuffValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettTalents: Talents = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalents;\n","import {\n  IOptionBoolean,\n  IOptionNumber,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Stats } from '../../data/types';\nimport { getOptionValue } from '../../option/OptionUtils';\nimport { TeamPassive } from '../../passive/types';\n\nclass BennettOptionAtkBuff extends CharacterOption implements IOptionNumber {\n  value = 0;\n\n  constructor() {\n    super('bennettAtkBuff');\n  }\n}\n\nclass BennettOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('bennettBurst', [BennettOptionAtkBuff]);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const atkBuff = getOptionValue(this.children[0]) as number;\n        stats.flatAtk = atkBuff + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n}\n\nconst bennettTeamPassive: TeamPassive = {\n  id: 'bennettTeamPassive',\n  options: [BennettOptionBurst],\n};\nexport default bennettTeamPassive;\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport bennettTalents from './BennettTalent';\nimport bennettTeamPassive from './BennettTeamPassive';\n\nexport default class Bennett extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('bennett', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return bennettTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return bennettTeamPassive;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('chongyun');\n\nconst chongyunAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunTalents: Talents = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport chongyunOptions from './ChongyunOption';\nimport chongyunTalents from './ChongyunTalent';\n\nexport default class Chongyun extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('chongyun', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return chongyunTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return chongyunOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diluc');\n\nconst dilucAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucSkill: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucTalents: Talents = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalents;\n","import { Stats } from '../../data/types';\nimport { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      _talentBurstLevel: number,\n      ascensionLevel: number\n    ) => {\n      if (this.value && ascensionLevel >= 4) {\n        const params = getTalentData('diluc').passives.find(\n          (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n        )?.params;\n        const pyroDmgBonus = params?.[1] ?? NaN;\n\n        stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dilucTalents from './DilucTalent';\nimport dilucOptions from './DilucOption';\n\nexport default class Diluc extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diluc', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dilucTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return dilucOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  shieldHpValue,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diona');\n\nconst dionaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaSkill: Record<string, TalentFn> = {\n  icyPawDmgPerPaw: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpPress: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  shieldHpHold: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier: { ...modifier, dionaHoldSkill: true },\n    }),\n};\n\nconst dionaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  continuousFieldDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousTime: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaTalents: Talents = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dionaTalents from './DionaTalent';\n\nexport default class Diona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dionaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('eula');\n\nconst eulaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  icewhirlBrandDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordBaseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordStackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaTalents: Talents = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport eulaTalents from './EulaTalent';\n\nexport default class Eula extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('eula', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return eulaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('fischl');\n\nconst fischlAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlSkill: Record<string, TalentFn> = {\n  ozDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  summoningDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlBurst: Record<string, TalentFn> = {\n  fallingThunderDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlTalents: Talents = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport fischlTalents from './FischlTalent';\n\nexport default class Fischl extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('fischl', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return fischlTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  hpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ganyu');\n\nconst ganyuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  aimShotChargeLevel1: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowBloomDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  iceLotusHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuBurst: Record<string, TalentFn> = {\n  iceShardDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuTalents: Talents = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ganyuTalents from './GanyuTalent';\n\nexport default class Ganyu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ganyu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ganyuTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('hutao').passives;\nconst a4Params = a4Data.params;\n\nclass HuTaoOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('hutaoAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.pyroDmgBonus = a4Params[1] + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst hutaoAscension4: CharacterPassive = {\n  id: 'hutaoAscension4',\n  ascensionLevel: 4,\n  options: [HuTaoOptionAscension4],\n};\n\nconst hutaoPassives = [hutaoAscension4];\nexport default hutaoPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('hutao');\n\nconst hutaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoSkill: Record<string, TalentFn> = {\n  bloodBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgLowHp: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n\n  hpRegenLowHp: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoTalents: Talents = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      talentSkillLevel: number,\n      _talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let skillParams = getTalentParams(\n          TalentType.Skill,\n          talentSkillLevel,\n          getTalentData('hutao')\n        );\n\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n        let flatAtkBonus = totalHp * skillParams[1];\n        if (flatAtkBonus > stats.baseAtk * skillParams[6]) {\n          flatAtkBonus = stats.baseAtk * skillParams[6];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport hutaoPassives from './HutaoPassive';\nimport hutaoTalents from './HutaoTalent';\nimport hutaoOptions from './HutaoOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Hutao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('hutao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return hutaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return hutaoOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return hutaoPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('jean');\n\nconst jeanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieldEnterExitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  fieldActivationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanTalents: Talents = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport jeanTalents from './JeanTalent';\n\nexport default class Jean extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('jean', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return jeanTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kaeya');\n\nconst kaeyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaTalents: Talents = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kaeyaTalents from './KaeyaTalent';\n\nexport default class Kaeya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kaeya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kaeyaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kazuha');\n\nconst kazuhaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[2],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst kazuhaTalents: Talents = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.elementalAbsorption = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionPlunge = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kazuhaTalents from './KazuhaTalent';\nimport kazuhaOptions from './KazuhaOption';\n\nexport default class Kazuha extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kazuha', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kazuhaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kazuhaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('keqing');\n\nconst keqingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingSkill: Record<string, TalentFn> = {\n  lightningStilettoDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  thunderclapSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Electro,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  consecutiveSlashDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 8,\n      element: Element.Electro,\n      params: Array(8).fill(\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1]\n      ),\n      stats,\n      modifier,\n    }),\n\n  lastAttackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingTalents: Talents = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport keqingTalents from './KeqingTalent';\n\nexport default class Keqing extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('keqing', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return keqingTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('klee');\n\nconst kleeAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeSkill: Record<string, TalentFn> = {\n  jumpyDumptyDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  mineDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeBurst: Record<string, TalentFn> = {\n  sparksNSplashDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeTalents: Talents = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kleeTalents from './KleeTalent';\n\nexport default class Klee extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('klee', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kleeTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('kokomi').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst kokomiAscension0: CharacterPassive = {\r\n  id: 'kokomiAscension0',\r\n  ascensionLevel: 0,\r\n  options: [],\r\n  statMixin: {\r\n    apply: (stats: Stats) => {\r\n      stats.critRate = (stats.critRate ?? 0) - 1;\r\n      if (stats.critRate < 0) {\r\n        stats.critRate = 0;\r\n      }\r\n\r\n      stats.healingBonus = 0.25 + (stats.healingBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiAscension4: CharacterPassive = {\r\n  id: 'kokomiAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  modifierMixin: {\r\n    apply: (modifier: DamageModifier) => {\r\n      modifier.kokomiHealingBonusDmg = a4Params[0];\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiPassives = [kokomiAscension0, kokomiAscension4];\r\nexport default kokomiPassives;\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  burstSingle,\r\n  chargedAttackSingle,\r\n  healingValue,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  ScalingType,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('kokomi');\r\n\r\nconst kokomiAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier: getKokomiChargedAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiSkill: Record<string, TalentFn> = {\r\n  hpRegen: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  rippleDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiSkillModifier(stats, modifier),\r\n    }),\r\n};\r\n\r\nconst kokomiBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      scalingType: ScalingType.Hp,\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiTalents: Talents = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getKokomiNormalAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const normalAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[3] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.normalAttackFlatDmg =\r\n    normalAttackBonusDmg + (newModifier.normalAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiChargedAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const chargedAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[4] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.chargedAttackFlatDmg =\r\n    chargedAttackBonusDmg + (newModifier.chargedAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiSkillModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const skillBonusDmg =\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[8] * stats.flatHp;\r\n  newModifier.skillFlatDmg = skillBonusDmg + (newModifier.skillFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value) {\r\n        modifier.kokomiBurst = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kokomiPassives from './KokomiPassive';\nimport kokomiTalents from './KokomiTalent';\nimport kokomiOptions from './KokomiOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Kokomi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kokomi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kokomiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kokomiOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return kokomiPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('lisa');\n\nconst lisaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack0: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack1: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack2: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack3: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaTalents: Talents = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport lisaTalents from './LisaTalent';\n\nexport default class Lisa extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('lisa', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return lisaTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { TalentType } from '../../talent/types';\n\nclass MonaOptionOmen\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('omen');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('mona')\n        );\n\n        stats.dmgBonus = burstParams[9] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst monaOptions = [MonaOptionOmen];\nexport default monaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('mona');\n\nconst monaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaSkill: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaBurst: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaTalents: Talents = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport monaOptions from './MonaOption';\nimport monaTalents from './MonaTalent';\n\nexport default class Mona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('mona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return monaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return monaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ningguang');\n\nconst ningguangAttack: Record<string, TalentFn> = {\n  normalAtkDmg: ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  starJadeDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  jadeScreenHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangBurst: Record<string, TalentFn> = {\n  dmgPerGem: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangTalents: Talents = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ningguangTalents from './NingguangTalent';\n\nexport default class Ningguang extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ningguang', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ningguangTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  skillSingle,\n  shieldHpValue,\n  healingValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('noelle');\n\nconst noelleAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  firstSwingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleTalents: Talents = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('noelle')\n        );\n\n        const totalDef =\n          (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n          (stats.flatDef ?? 0);\n\n        stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Geo;\n      }\n    },\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport noelleTalents from './NoelleTalent';\nimport noelleOptions from './NoelleOption';\n\nexport default class Noelle extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('noelle', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return noelleTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return noelleOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  healingValue,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('qiqi');\n\nconst qiqiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  heraldOfFrostDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiTalents: Talents = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport qiqiTalents from './QiqiTalent';\n\nexport default class Qiqi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('qiqi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return qiqiTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport { Priority } from '../../option/Mixin';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('raiden').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst raidenAscension4: CharacterPassive = {\r\n  id: 'raidenAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  statMixin: {\r\n    priority: Priority.Last,\r\n    apply: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = a4Params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst raidenPassives = [raidenAscension4];\r\nexport default raidenPassives;\r\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  normalAttackSingle,\r\n  chargedAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  burstMulti,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('raiden');\r\n\r\nconst raidenAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(3, 5),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[10],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenSkill: Record<string, TalentFn> = {\r\n  skillDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  coordinatedAtkDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenBurst: Record<string, TalentFn> = {\r\n  musouNoHitotachiDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[0] + getInitialResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[4] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[5] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[6] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(7, 9)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[9] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(10, 12)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[13] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[14] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[15] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenTalents: Talents = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getInitialResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[1] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n\r\nfunction getAttackResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[2] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentParams, getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value) {\r\n        const params = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('raiden')\r\n        );\r\n\r\n        const burstDmgBonus = params[3] * 90;\r\n        stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value < 0) modifier.resolveStacks = 0;\r\n      else if (this.value > 60) modifier.resolveStacks = 60;\r\n      else modifier.resolveStacks = this.value;\r\n    },\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport raidenPassives from './RaidenPassive';\nimport raidenTalents from './RaidenTalent';\nimport raidenOptions from './RaidenOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Raiden extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('raiden', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return raidenTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return raidenOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return raidenPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('razor');\n\nconst razorAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorTalents: Talents = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport razorTalents from './RazorTalent';\n\nexport default class Razor extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('razor', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return razorTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('rosaria');\n\nconst rosariaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n  iceLanceDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaTalents: Talents = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport rosariaTalents from './RosariaTalent';\n\nexport default class Rosaria extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('rosaria', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return rosariaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  atkBuffValue,\r\n  burstSingle,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  TalentFn,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('sara');\r\n\r\nconst saraAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraSkill: Record<string, TalentFn> = {\r\n  tenguJuuraiAmbushDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  atkBonus: ({ stats, modifier }: TalentProps) =>\r\n    atkBuffValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraBurst: Record<string, TalentFn> = {\r\n  tenguJuuraiTitanbreakerDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  tenguJuuraiStormclusterDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraTalents: Talents = {\r\n  attack: saraAttack,\r\n  skill: saraSkill,\r\n  burst: saraBurst,\r\n};\r\n\r\nexport default saraTalents;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport saraTalents from './SaraTalent';\n\nexport default class Sara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return saraTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sayu');\n\nconst sayuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuSkill: Record<string, TalentFn> = {\n  fuufuuWindwheelDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickPressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickHoldDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWindwheelElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n\n  fuufuuWhirlwindKickElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[4],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sayuBurst: Record<string, TalentFn> = {\n  activationDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  activationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuTalents: Talents = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sayuTalents from './SayuTalent';\nimport sayuOptions from './SayuOption';\n\nexport default class Sayu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sayu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sayuTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sayuOptions;\n  }\n}\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sucrose');\n\nconst sucroseAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sucroseTalents: Talents = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sucroseOptions from './SucroseOption';\nimport sucroseTalents from './SucroseTalent';\n\nexport default class Sucrose extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sucrose', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sucroseTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sucroseOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  typelessAttack,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('tartaglia');\n\nconst tartagliaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n\n  riptideFlashDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  riptideBurstDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaSkill: Record<string, TalentFn> = {\n  stanceChangeDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(8, 10),\n      stats,\n      modifier,\n    }),\n\n  riptideSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaBurst: Record<string, TalentFn> = {\n  burstDmgMelee: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgRanged: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  riptideBlastDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaTalents: Talents = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nexport const tartagliaAscension0: CharacterPassive = {\n  id: 'tartagliaAscension0',\n  ascensionLevel: 0,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.talentAttackLevel += 1;\n    },\n  },\n};\n\nconst tartagliaPassives = [tartagliaAscension0];\nexport default tartagliaPassives;\n","import { TeamPassive } from '../../passive/types';\nimport { tartagliaAscension0 } from './TartagliaPassive';\n\nconst tartagliaTeamPassive: TeamPassive = tartagliaAscension0;\nexport default tartagliaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport tartagliaTalents from './TartagliaTalent';\nimport tartagliaPassives from './TartagliaPassive';\nimport tartagliaTeamPassive from './TartagliaTeamPassive';\n\nexport default class Tartaglia extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('tartaglia', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return tartagliaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return tartagliaPassives;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return tartagliaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('thoma');\n\nconst thomaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  shieldHpMax: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieryCollapseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier: getThomaFieryCollapseModifier(stats, modifier),\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatBonus: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaTalents: Talents = {\n  attack: thomaAttack,\n  skill: thomaSkill,\n  burst: thomaBurst,\n};\n\nexport default thomaTalents;\n\n// Helper functions\n\nfunction getThomaFieryCollapseModifier(\n  stats: Stats,\n  modifier: DamageModifier\n): DamageModifier {\n  if (!modifier.thomaHpBonusDmg) {\n    return modifier;\n  }\n\n  const flatDmg = modifier.thomaHpBonusDmg * stats.flatHp + modifier.flatDmg;\n\n  return { ...modifier, flatDmg };\n}\n","import { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('thoma').passives;\nconst a4Params = a4Data.params;\n\nconst thomaAscension4: CharacterPassive = {\n  id: 'thomaAscension4',\n  ascensionLevel: 4,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.thomaHpBonusDmg = a4Params[0];\n    },\n  },\n};\n\nconst thomaPassives = [thomaAscension4];\nexport default thomaPassives;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport Constellation, {\n  ConstellationBurst,\n  ConstellationSkill,\n} from '../../constellation/Constellation';\n\nconst [, , , , , { params: c6Params }] = getTalentData('thoma').constellations;\n\nexport function ThomaOptionConstellation6(id?: string) {\n  return class ThomaOptionConstellation6\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super(id ?? 'thomaConstellation6');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = c6Params[0] + (stats.normalDmgBonus ?? 0);\n          stats.chargedDmgBonus = c6Params[0] + (stats.chargedDmgBonus ?? 0);\n          stats.plungeDmgBonus = c6Params[0] + (stats.plungeDmgBonus ?? 0);\n        }\n      },\n    };\n  };\n}\n\nconst thomaConstellation3 = ConstellationSkill(3);\nconst thomaConstellation5 = ConstellationBurst(5);\n\nconst thomaConstellation6: Constellation = {\n  constellationLevel: 6,\n  options: [ThomaOptionConstellation6()],\n};\n\nconst thomaConstellations = [\n  thomaConstellation3,\n  thomaConstellation5,\n  thomaConstellation6,\n];\nexport default thomaConstellations;\n","import DamageModifier from '../modifier/DamageModifer';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { StatMixin, ModifierMixin } from '../option/Mixin';\n\nexport default interface Constellation {\n  constellationLevel: number;\n  options?: typeof CharacterOption[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n\nexport function ConstellationSkill(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentSkillLevel += 3;\n      },\n    },\n  };\n}\n\nexport function ConstellationBurst(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentBurstLevel += 3;\n      },\n    },\n  };\n}\n","import { TeamPassive } from '../../passive/types';\nimport { ThomaOptionConstellation6 } from './ThomaConstellation';\n\nconst thomaTeamPassive: TeamPassive = {\n  id: 'thomaTeamPassive',\n  options: [ThomaOptionConstellation6('thomaConstellation6Team')],\n};\n\nexport default thomaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport thomaTalents from './ThomaTalent';\nimport thomaPassives from './ThomaPassive';\nimport Constellation from '../../constellation/Constellation';\nimport thomaConstellations from './ThomaConstellation';\nimport thomaTeamPassive from './ThomaTeamPassive';\n\nexport default class Thoma extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('thoma', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return thomaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return thomaPassives;\n  }\n\n  getAllConstellations(): Constellation[] {\n    return thomaConstellations;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return thomaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('venti');\n\nconst ventiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst ventiTalents: Talents = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ventiTalents from './VentiTalent';\nimport ventiOptions from './VentiOption';\n\nexport default class Venti extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('venti', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ventiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ventiOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiangling');\n\nconst xianglingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingSkill: Record<string, TalentFn> = {\n  guobaDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingBurst: Record<string, TalentFn> = {\n  swing1HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  swing2HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  swing3HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  pyronadoDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingTalents: Talents = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xianglingTalents from './XianglingTalent';\n\nexport default class Xiangling extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiangling', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xianglingTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('xiao')\n        );\n\n        stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiao');\n\nconst xiaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoTalents: Talents = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n};\n\nexport default xiaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xiaoOptions from './XiaoOption';\nimport xiaoTalents from './XiaoTalent';\n\nexport default class Xiao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xiaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return xiaoOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, TalentFn, Talents, Element, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('xingqiu');\n\nconst xingqiuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(7, 9),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuBurst: Record<string, TalentFn> = {\n  swordRainDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuTalents: Talents = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xingqiuTalents from './XingqiuTalent';\n\nexport default class Xingqiu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xingqiu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xingqiuTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xinyan');\n\nconst xinyanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanSkill: Record<string, TalentFn> = {\n  swingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel1: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel2: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel3: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Physical,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  pyroDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanTalents: Talents = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xinyanTalents from './XinyanTalent';\n\nexport default class Xinyan extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xinyan', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xinyanTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('yanfei')\n        );\n        stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('yanfei');\n\nconst yanfeiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal0: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal1: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal2: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal3: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal4: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[15],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[16],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[17],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiTalents: Talents = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yanfeiOptions from './YanfeiOption';\nimport yanfeiTalents from './YanfeiTalent';\n\nexport default class Yanfei extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yanfei', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yanfeiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yanfeiOptions;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionNormal = Element.Pyro;\n        modifier.yoimiyaSkill = true;\n      }\n    },\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [a1Data] = getTalentData('yoimiya').passives;\nconst a1Params = a1Data.params;\n\nclass YoimiyaOptionAscension1\n  extends CharacterOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('yoimiyaAscension1');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      let pyroDmgBonus = this.value * a1Params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    },\n  };\n}\n\nconst yoimiyaAscension1: CharacterPassive = {\n  id: 'yoimiyaAscension1',\n  ascensionLevel: 1,\n  options: [YoimiyaOptionAscension1],\n};\n\nconst yoimiyaPassives = [yoimiyaAscension1];\nexport default yoimiyaPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('yoimiya');\n\nconst yoimiyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[0],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[3],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  kindlingArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  aurousBlazeExplosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaTalents: Talents = {\n  attack: yoimiyaAttack,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalents;\n\n// Helper functions\n\nfunction getYoimiyaNormalAttackMultiplier(\n  multiplier: number,\n  modifier: DamageModifier\n): number {\n  if (!modifier.yoimiyaSkill) {\n    return multiplier;\n  }\n\n  return (\n    multiplier *\n    getTalentParams(TalentType.Skill, modifier.talentSkillLevel, talentData)[3]\n  );\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yoimiyaOptions from './YoimiyaOption';\nimport yoimiyaPassives from './YoimiyaPassive';\nimport yoimiyaTalents from './YoimiyaTalent';\n\nexport default class Yoimiya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yoimiya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yoimiyaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yoimiyaOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return yoimiyaPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('zhongli');\n\nconst zhongliAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliSkill: Record<string, TalentFn> = {\n  stoneSteeleDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  resonanceDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliTalents: Talents = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalents;\n","import { IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { TeamPassive } from '../../passive/types';\n\nclass ZhongliOptionShield extends CharacterOption implements IOptionBoolean {\n  value = false;\n\n  constructor() {\n    super('zhongliShield');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        Object.values(Element).forEach((element) =>\n          modifier.enemyResReduction.set(element, 0.2)\n        );\n      }\n    },\n  };\n}\n\nconst zhongliTeamPassive: TeamPassive = {\n  id: 'zhongliTeamPassive',\n  options: [ZhongliOptionShield],\n};\nexport default zhongliTeamPassive;\n","import Albedo from './albedo/Albedo';\nimport Aloy from './aloy/Aloy';\nimport Amber from './amber/Amber';\nimport Ayaka from './ayaka/Ayaka';\nimport Barbara from './barbara/Barbara';\nimport Beidou from './beidou/Beidou';\nimport Bennett from './bennett/Bennett';\nimport Character from './Character';\nimport Chongyun from './chongyun/Chongyun';\nimport Diluc from './diluc/Diluc';\nimport Diona from './diona/Diona';\nimport Eula from './eula/Eula';\nimport Fischl from './fischl/Fischl';\nimport Ganyu from './ganyu/Ganyu';\nimport Hutao from './hutao/Hutao';\nimport Jean from './jean/Jean';\nimport Kaeya from './kaeya/Kaeya';\nimport Kazuha from './kazuha/Kazuha';\nimport Keqing from './keqing/Keqing';\nimport Klee from './klee/Klee';\nimport Kokomi from './kokomi/Kokomi';\nimport Lisa from './lisa/Lisa';\nimport Mona from './mona/Mona';\nimport Ningguang from './ningguang/Ningguang';\nimport Noelle from './noelle/Noelle';\nimport Qiqi from './qiqi/Qiqi';\nimport Raiden from './raiden/Raiden';\nimport Razor from './razor/Razor';\nimport Rosaria from './rosaria/Rosaria';\nimport Sara from './sara/Sara';\nimport Sayu from './sayu/Sayu';\nimport Sucrose from './sucrose/Sucrose';\nimport Tartaglia from './tartaglia/Tartaglia';\nimport Thoma from './thoma/Thoma';\nimport Venti from './venti/Venti';\nimport Xiangling from './xiangling/Xiangling';\nimport Xiao from './xiao/Xiao';\nimport Xingqiu from './xingqiu/Xingqiu';\nimport Xinyan from './xinyan/Xinyan';\nimport Yanfei from './yanfei/Yanfei';\nimport Yoimiya from './yoimiya/Yoimiya';\nimport Zhongli from './zhongli/Zhongli';\n\nconst characters: Record<string, typeof Character> = {\n  albedo: Albedo,\n  aloy: Aloy,\n  amber: Amber,\n  ayaka: Ayaka,\n  barbara: Barbara,\n  beidou: Beidou,\n  bennett: Bennett,\n  chongyun: Chongyun,\n  diluc: Diluc,\n  diona: Diona,\n  eula: Eula,\n  fischl: Fischl,\n  ganyu: Ganyu,\n  hutao: Hutao,\n  jean: Jean,\n  kaeya: Kaeya,\n  kazuha: Kazuha,\n  keqing: Keqing,\n  klee: Klee,\n  kokomi: Kokomi,\n  lisa: Lisa,\n  mona: Mona,\n  ningguang: Ningguang,\n  noelle: Noelle,\n  qiqi: Qiqi,\n  raiden: Raiden,\n  razor: Razor,\n  rosaria: Rosaria,\n  sara: Sara,\n  sayu: Sayu,\n  sucrose: Sucrose,\n  tartaglia: Tartaglia,\n  thoma: Thoma,\n  venti: Venti,\n  xiangling: Xiangling,\n  xiao: Xiao,\n  xingqiu: Xingqiu,\n  xinyan: Xinyan,\n  yanfei: Yanfei,\n  yoimiya: Yoimiya,\n  zhongli: Zhongli,\n};\n\nfunction getCharacterConstructor(id: string): typeof Character {\n  return characters[id] ?? Character;\n}\n\nexport function initCharacter(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  constellationLevel?: number\n): Character {\n  const CharacterConstructor = getCharacterConstructor(id);\n\n  return new CharacterConstructor(id, level, hasAscended, constellationLevel);\n}\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport zhongliTalents from './ZhongliTalent';\nimport zhongliTeamPassive from './ZhongliTeamPassive';\n\nexport default class Zhongli extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('zhongli', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return zhongliTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return zhongliTeamPassive;\n  }\n}\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const { level, hasAscended, constellationLevel } =\n      this.props.appState.character;\n    const character = initCharacter(id, level, hasAscended, constellationLevel);\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterConstellationLevel = (constellationLevel: number) => {\n    const character = this.props.appState.character;\n    character.constellationLevel = constellationLevel;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-constellation-level-input'\n            label='Constellation:'\n            defaultValue={0}\n            value={appState.character.constellationLevel}\n            onInput={this.setCharacterConstellationLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport Resistance from '../stat/Resistance';\nimport { capitalize } from '../stat/Stat';\nimport { Element } from '../talent/types';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  setReaction = (reaction: string) => {\n    this.props.updateTalentValues({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n    this.props.setAppState({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType, reaction } = this.props.appState;\n    return (\n      <InputBlock>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n\n        <InputRow>\n          <Picker\n            id='reaction-picker'\n            label='Reaction:'\n            defaultValue={Reaction.None}\n            value={reaction}\n            onChange={this.setReaction}\n          >\n            {Object.values(Reaction).map((reaction) => (\n              <Picker.Item\n                key={reaction}\n                label={capitalize(reaction)}\n                value={reaction}\n              />\n            ))}\n          </Picker>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  WeaponPassiveData,\n  WeaponPassiveSetData,\n} from '../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getWeaponPassiveAt,\n  getWeaponPassiveData,\n} from '../data/Data';\nimport { getOptionValue, setOptionValue } from '../option';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../passive/types';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    refinement: number = 1\n  ) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n    this._refinement = refinement;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.passiveDataSet = getWeaponPassiveData(value);\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(\n        this.refinement,\n        this.passiveDataSet\n      );\n    }\n    this.passive = this.getPassive(this.refinement);\n    this.passiveOptions = this.getPassiveOptions();\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  passiveDataSet?: WeaponPassiveSetData;\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  private _refinement: number = 1;\n  get refinement(): number {\n    return this._refinement;\n  }\n  set refinement(value: number) {\n    this._refinement = value;\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(value, this.passiveDataSet);\n      this.passive = this.getPassive(value);\n      this.passiveOptions = this.getPassiveOptions(true);\n    }\n  }\n\n  stats: Stats = {};\n  passiveData?: WeaponPassiveData;\n  passive?: WeaponPassive;\n  passiveOptions: WeaponOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n\n  // Override in derived classes to implement special passives\n  // Only returns the extra passive bonuses, excluding the direct stat bonuses\n  // To be called when passive should update (e.g. id or refinement change)\n  getPassive(_refinement: number): WeaponPassive | undefined {\n    return;\n  }\n\n  // getPassive should be called before this if passives are updated\n  getPassiveOptions(shouldKeepValue: boolean = false) {\n    let newOptions = (this.passive?.options ?? []).map(\n      (Option) => new Option()\n    );\n\n    if (shouldKeepValue) {\n      this.passiveOptions.forEach((option) => {\n        let newOption = newOptions.find(\n          (newOption) => newOption.id === option.id\n        );\n        if (newOption !== undefined) {\n          setOptionValue(newOption, getOptionValue(option));\n        }\n      });\n    }\n\n    return newOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    let statMixins = [];\n\n    if (this.passive?.statMixin !== undefined) {\n      statMixins.push(this.passive.statMixin);\n    }\n\n    if (this.passiveData?.statBonuses !== undefined) {\n      this.passiveData.statBonuses.forEach(({ stat, value }) => {\n        statMixins.push({\n          apply: (stats: Stats) => {\n            stats[stat] = value + (stats[stat] ?? 0);\n          },\n        });\n      });\n    }\n\n    return statMixins;\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    if (this.passive?.modifierMixin === undefined) {\n      return [];\n    }\n\n    return [this.passive.modifierMixin];\n  }\n}\n","import Option from '../Option';\n\nexport default class WeaponOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport const watatsumiWavewalkerPassive =\n  (id: string) =>\n  (refinement: number): WeaponPassive => {\n    const params = getWeaponPassiveParams(id, refinement);\n\n    class WatatsumiWavewalkerOption\n      extends WeaponOption\n      implements IOptionNumber, IStatsApplicable\n    {\n      value = 0;\n\n      constructor() {\n        super('watatsumiWavewalkerPassive');\n      }\n\n      statMixin = {\n        apply: (stats: Stats) => {\n          if (this.value > 0) {\n            let burstDmgBonus = this.value * (params[0] / 100);\n            if (burstDmgBonus > params[1]) {\n              burstDmgBonus = params[1];\n            }\n            stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n          }\n        },\n      };\n    }\n\n    return {\n      id,\n      options: [WatatsumiWavewalkerOption],\n    };\n  };\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class Akuoumaru extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('akuoumaru', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('akuoumaru')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { dragonsBanePassive } from './DragonsBanePassive';\n\nexport default class DragonsBane extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('dragonsbane', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return dragonsBanePassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function dragonsBanePassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('dragonsbane', refinement);\n\n  class DragonsBaneOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('dragonsBanePassive');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'dragonsBane',\n    options: [DragonsBaneOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { engulfingLightningPassive } from './EngulfingLightningPassive';\n\nexport default class EngulfingLightning extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('engulfinglightning', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return engulfingLightningPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function engulfingLightningPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('engulfinglightning', refinement);\n\n  class EngulfingLightningOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('engulfingLightningEnergyRecharge');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.energyRecharge = params[2] + (stats.energyRecharge ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'engulfingLightning',\n    options: [EngulfingLightningOption],\n\n    statMixin: {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        let atkBonus = (stats.energyRecharge - 1) * params[0];\n        if (atkBonus > params[1]) {\n          atkBonus = params[1];\n        }\n\n        stats.atkBonus = atkBonus + (stats.atkBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { everlastingMoonglowPassive } from './EverlastingMoonglowPassive';\n\nexport default class EverlastingMoonglow extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('everlastingmoonglow', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return everlastingMoonglowPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function everlastingMoonglowPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('everlastingmoonglow', refinement);\n\n  return {\n    id: 'everlastingMoonglow',\n    options: [],\n    modifierMixin: {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        modifier.normalAttackFlatDmg =\n          params[1] * (stats.flatHp ?? 0) + (modifier.normalAttackFlatDmg ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { luxuriousSeaLordPassive } from './LuxuriousSeaLordPassive';\n\nexport default class LuxuriousSeaLord extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('luxurioussealord', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return luxuriousSeaLordPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function luxuriousSeaLordPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('luxurioussealord', refinement);\n\n  return {\n    id: 'luxuriousSeaLord',\n    options: [],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class MouunsMoon extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('mouunsmoon', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('mouunsmoon')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { polarStarPassive } from './PolarStarPassive';\n\nexport default class PolarStar extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('polarstar', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return polarStarPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function polarStarPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('polarstar', refinement);\n\n  class PolarStarOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('polarStarStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        let stacks = this.value;\n\n        if (stacks > 0) {\n          if (stacks > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[stacks + 1] + (stats.atkBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'polarStar',\n    options: [PolarStarOption],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { solarPearlPassive } from './SolarPearlPassive';\n\nexport default class SolarPearl extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('solarpearl', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return solarPearlPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function solarPearlPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('solarpearl', refinement);\n\n  class SolarPearlOptionNormalAttack\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlNormalAttack');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n          stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  class SolarPearlOptionSkillBurst\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlSkillBurst');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'solarPearl',\n    options: [SolarPearlOptionNormalAttack, SolarPearlOptionSkillBurst],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { staffOfHomaPassive } from './StaffOfHomaPassive';\n\nexport default class StaffOfHoma extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('staffofhoma', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return staffOfHomaPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function staffOfHomaPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('staffofhoma', refinement);\n\n  class StaffOfHomaOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('staffOfHomaAtkBonus');\n    }\n\n    statMixin = {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n\n        let flatAtkBonus = totalHp * params[1];\n        if (this.value) {\n          flatAtkBonus += totalHp * params[2];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      },\n    };\n  }\n\n  return {\n    id: 'staffOfHoma',\n    options: [StaffOfHomaOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { theCatchPassive } from './TheCatchPassive';\n\nexport default class TheCatch extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('thecatch', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return theCatchPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function theCatchPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('thecatch', refinement);\n\n  return {\n    id: 'theCatch',\n    options: [],\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        stats.burstCritRate = params[1] + (stats.burstCritRate ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { whiteblindPassive } from './WhiteblindPassive';\n\nexport default class Whiteblind extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('whiteblind', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return whiteblindPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function whiteblindPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('whiteblind', refinement);\n\n  class WhiteblindOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('whiteblindStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value > 0) {\n          let stacks = this.value;\n          if (this.value > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[0] * stacks + (stats.atkBonus ?? 0);\n          stats.defBonus = params[0] * stacks + (stats.defBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'whiteblind',\n    options: [WhiteblindOption],\n  };\n}\n","import Weapon from './Weapon';\nimport Akuoumaru from './watatsumi/Akuoumaru';\nimport DragonsBane from './dragonsbane/DragonsBane';\nimport EngulfingLightning from './engulfinglightning/EngulfingLightning';\nimport EverlastingMoonglow from './everlastingmoonglow/EverlastingMoonglow';\nimport LuxuriousSeaLord from './luxurioussealord/LuxuriousSeaLord';\nimport MouunsMoon from './watatsumi/MouunsMoon';\nimport PolarStar from './polarstar/PolarStar';\nimport SolarPearl from './solarpearl/SolarPearl';\nimport StaffOfHoma from './staffofhoma/StaffOfHoma';\nimport TheCatch from './thecatch/TheCatch';\nimport Whiteblind from './whiteblind/Whiteblind';\nimport WavebreakersFin from './watatsumi/WavebreakersFin';\n\nconst weapons: Record<string, typeof Weapon> = {\n  // Polearm\n  dragonsbane: DragonsBane,\n  engulfinglightning: EngulfingLightning,\n  staffofhoma: StaffOfHoma,\n  thecatch: TheCatch,\n  wavebreakersfin: WavebreakersFin,\n\n  // Catalyst\n  everlastingmoonglow: EverlastingMoonglow,\n  solarpearl: SolarPearl,\n\n  // Claymore\n  luxurioussealord: LuxuriousSeaLord,\n  whiteblind: Whiteblind,\n  akuoumaru: Akuoumaru,\n\n  // Bow\n  polarstar: PolarStar,\n  mouunsmoon: MouunsMoon,\n};\n\nfunction getWeaponConstructor(id: string): typeof Weapon {\n  return weapons[id] ?? Weapon;\n}\n\nexport function initWeapon(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  refinement?: number\n): Weapon {\n  const WeaponConstructor = getWeaponConstructor(id);\n\n  return new WeaponConstructor(id, level, hasAscended, refinement);\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class WavebreakersFin extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('wavebreakersfin', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('wavebreakersfin')(refinement);\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport Reaction from '../../modifier/Reaction';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ReactionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = Object.values(Reaction);\n\n  constructor() {\n    super('reaction');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.reaction = this.value as Reaction;\n      } else {\n        modifier.reaction = Reaction.None;\n      }\n    },\n  };\n}\n\nexport default ReactionOption;\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Col from 'react-bootstrap/esm/Col';\nimport Form from 'react-bootstrap/esm/Form';\nimport Modal from 'react-bootstrap/esm/Modal';\nimport { AppState } from '../App';\nimport {\n  createSave,\n  addSave,\n  getSave,\n  loadSave,\n  Saves,\n  deleteSave,\n} from '../save/Save';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype SaveBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  refreshApp: () => void;\n};\n\ntype SaveBlockState = {\n  saves: Saves;\n  saveInputName: string;\n  selectedSave: string;\n  showDeleteWarning: boolean;\n};\n\nclass SaveBlock extends React.Component<SaveBlockProps, SaveBlockState> {\n  state: SaveBlockState;\n\n  constructor(props: SaveBlockProps) {\n    super(props);\n\n    // Populate local storage if empty\n    if (window.localStorage.getItem('saves') === null) {\n      window.localStorage.setItem('saves', '{}');\n    }\n\n    // Initialize saves in memory\n    const saves = JSON.parse(window.localStorage.getItem('saves') ?? '{}');\n    // Initialize state\n    this.state = {\n      saves,\n      saveInputName: '',\n      selectedSave: '',\n      showDeleteWarning: false,\n    };\n  }\n\n  onSaveClick = () => {\n    if (this.state.saveInputName !== '') {\n      const save = createSave(this.state.saveInputName, this.props.appState);\n      const saves = this.state.saves;\n      addSave(save, saves);\n      this.setState({ saves });\n    }\n  };\n\n  onSaveInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveInputName: e.target.value });\n  };\n\n  onLoadClick = () => {\n    if (this.state.selectedSave !== '') {\n      const save = getSave(this.state.selectedSave, this.state.saves);\n      if (save !== undefined) {\n        loadSave(save, this.props.setAppState, this.props.refreshApp);\n      }\n    }\n  };\n\n  onLoadInputChange = (value: string) => {\n    this.setState({ selectedSave: value });\n  };\n\n  onDeleteClick = () => {\n    if (this.state.selectedSave !== '') {\n      this.setState({ showDeleteWarning: true });\n    }\n  };\n\n  onModalConfirm = () => {\n    const saves = this.state.saves;\n    deleteSave(this.state.selectedSave, saves);\n    this.setState({ saves });\n\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onModalHide = () => {\n    this.setState({ showDeleteWarning: false });\n  };\n\n  render() {\n    return (\n      <InputBlock>\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onSaveClick}>\n            Save\n          </Button>\n\n          <Col className='save-name-col'>\n            <Form.Control\n              type='text'\n              size='sm'\n              placeholder='Save label (cannot be empty)'\n              onChange={this.onSaveInputChange}\n            />\n          </Col>\n        </InputRow>\n\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onLoadClick}>\n            Load\n          </Button>\n\n          <Picker\n            id='save-picker'\n            label=''\n            defaultValue=''\n            value={this.state.selectedSave}\n            onChange={this.onLoadInputChange}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {Object.values(this.state.saves).map((save) => (\n              <Picker.Item\n                label={save.label}\n                value={save.label}\n                key={save.label}\n              />\n            ))}\n          </Picker>\n\n          <>\n            <Button variant='danger' size='sm' onClick={this.onDeleteClick}>\n              Delete\n            </Button>\n\n            <Modal\n              show={this.state.showDeleteWarning}\n              onHide={this.onModalHide}\n            >\n              <Modal.Body>\n                Are you sure you want to delete the save configuration? This\n                action is irreversible!\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={this.onModalHide}>\n                  Cancel\n                </Button>\n                <Button variant='danger' onClick={this.onModalConfirm}>\n                  Delete\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default SaveBlock;\n","import { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport { ArtifactType, InputStat } from '../artifact/types';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport { Attack } from '../component/DPSColumn';\nimport Option from '../option/Option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n  characterConstellationLevel?: number;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n  weaponRefinement?: number;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  teamCharacterIds?: string[];\n\n  characterOptions?: { id?: string; value?: unknown }[];\n  weaponOptions?: { id?: string; value?: unknown }[];\n  artifactSetOptions?: { id?: string; value?: unknown }[];\n  teamOptions?: { id?: string; value?: unknown }[];\n\n  rotationTime?: number;\n  rotation?: AttackSave[];\n}\n\nexport type Saves = Record<string, Save>;\n\ninterface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\ninterface AttackSave {\n  talentType?: string;\n  talentId?: string;\n  multiplier?: number;\n  options?: { id?: string; value?: unknown }[];\n}\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n    characterConstellationLevel: appState.character.constellationLevel,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n    weaponRefinement: appState.weapon.refinement,\n\n    artifacts: appState.artifacts.map((artifact) => {\n      return {\n        type: artifact.type,\n        rarity: artifact.rarity,\n        level: artifact.level,\n        mainStat: artifact.mainStat.stat,\n        subStats: artifact.subStats.map((subStat) =>\n          createInputStatSave(subStat)\n        ),\n      };\n    }),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    teamCharacterIds: appState.teamCharacters.map((character) => character.id),\n\n    characterOptions: appState.characterOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    weaponOptions: appState.weaponOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactSetOptions: appState.artifactSetOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    teamOptions: appState.teamOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n\n    rotationTime: appState.rotationTime,\n    rotation: appState.rotation.map((attack) => {\n      return {\n        talentType: attack.talentType,\n        talentId: attack.talentId,\n        multiplier: attack.multiplier,\n        options: attack.options.map((option) => {\n          return { id: option.id, value: getOptionValue(option) };\n        }),\n      };\n    }),\n  };\n\n  return save;\n}\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const character = initCharacter(\n    save.characterId,\n    save.characterLevel,\n    save.characterHasAscended,\n    save.characterConstellationLevel\n  );\n  const weapon = initWeapon(\n    save.weaponId,\n    save.weaponLevel,\n    save.weaponHasAscended,\n    save.weaponRefinement\n  );\n\n  const artifacts =\n    save.artifacts?.map((savedArtifact, i) => {\n      const artifactType = savedArtifact.type ?? Object.values(ArtifactType)[i];\n      let artifact = new Artifact(\n        artifactType,\n        savedArtifact.rarity ?? 1,\n        savedArtifact.level ?? 0,\n        savedArtifact.mainStat ?? ''\n      );\n      artifact.subStats =\n        savedArtifact.subStats?.map(\n          (subStat) =>\n            new InputStat(\n              subStat.stat ?? '',\n              subStat.value ?? NaN,\n              subStat.rawValue ?? NaN\n            )\n        ) ?? artifact.subStats;\n\n      return artifact;\n    }) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map((artifactSet) =>\n    initArtifactSet(artifactSet.artifactSetId, artifactSet.artifactSetPieces)\n  ) ?? [initArtifactSet(), initArtifactSet(), initArtifactSet()];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const teamCharacters = save.teamCharacterIds?.map((id) =>\n    initCharacter(id)\n  ) ?? [initCharacter(), initCharacter(), initCharacter()];\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, option.value);\n    }\n  });\n\n  const weaponOptions = weapon.passiveOptions;\n  save.weaponOptions?.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, option.value);\n    }\n  });\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, option.value);\n    }\n  });\n\n  const teamOptions = teamCharacters.flatMap(\n    (character) => character.teamOptions\n  );\n  save.teamOptions?.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, option.value);\n    }\n  });\n\n  const allOptions = [\n    ...characterOptions,\n    ...weaponOptions,\n    ...artifactSetOptions,\n    ...teamOptions,\n  ];\n\n  const rotationTime = save.rotationTime ?? 0;\n  const rotation: Attack[] =\n    save.rotation?.map((attackSave) => {\n      return {\n        talentType: attackSave.talentType ?? '',\n        talentId: attackSave.talentId ?? '',\n        multiplier: attackSave.multiplier ?? 1,\n        talentValue: { damage: [NaN] },\n        options:\n          attackSave.options\n            ?.map(({ id, value }) => {\n              const OptionConstructor = allOptions.find(\n                (option) => option.id === id\n              )?.constructor as { new (): Option };\n              let option;\n              if (OptionConstructor !== undefined) {\n                option = new OptionConstructor();\n                setOptionValue(option, value);\n              } else if (id === 'reaction') {\n                option = new ReactionOption();\n                setOptionValue(option, value);\n              }\n              return option;\n            })\n            ?.filter((option): option is Option => option !== undefined) ?? [],\n      };\n    }) ?? [];\n\n  setAppState(\n    {\n      character,\n      weapon,\n      artifacts,\n      artifactSets,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      critType,\n      enemyLevel,\n      enemyRes,\n      reaction,\n      teamCharacters,\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n      teamOptions,\n      rotationTime,\n      rotation,\n    },\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n  talentAttackLevelExtra: number;\n  talentSkillLevelExtra: number;\n  talentBurstLevelExtra: number;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n          {this.props.talentAttackLevelExtra > 0 &&\n            `+${this.props.talentAttackLevelExtra}`}\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n          {this.props.talentSkillLevelExtra > 0 &&\n            `+${this.props.talentSkillLevelExtra}`}\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n          {this.props.talentBurstLevelExtra > 0 &&\n            `+${this.props.talentBurstLevelExtra}`}\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Weapon from '../weapon/Weapon';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    weapon,\n    weaponOptions,\n  }: {\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n  }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const { weaponLevel, hasAscended, refinement } = this.props.appState.weapon;\n    const weapon = initWeapon(id, weaponLevel, hasAscended, refinement);\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponRefinement = (refinement: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.refinement = refinement;\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  updateOptions = () => {\n    const { weaponOptions } = this.props.appState;\n    this.props.updateTotalStats({ weaponOptions });\n    this.props.setAppState({ weaponOptions: [...weaponOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-refinement-input'\n            label='Refinement:'\n            defaultValue={1}\n            value={appState.weapon.refinement}\n            onInput={this.setWeaponRefinement}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.weaponOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React, { Fragment } from 'react';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport CharacterPicker from './CharacterPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport OptionInput from './OptionInput';\n\ntype TeamInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    teamCharacters,\n    teamOptions,\n  }: {\n    teamCharacters?: Character[];\n    teamOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass TeamInputBlock extends React.Component<TeamInputBlockProps> {\n  setCharacterId = (i: number) => (id: string) => {\n    const { teamCharacters } = this.props.appState;\n    teamCharacters[i] = initCharacter(id);\n    const teamOptions = teamCharacters.flatMap(\n      (character) => character.teamOptions\n    );\n    this.props.updateTotalStats({ teamCharacters, teamOptions });\n    this.props.setAppState({\n      teamCharacters: [...teamCharacters],\n      teamOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { teamOptions } = this.props.appState;\n    this.props.updateTotalStats({ teamOptions });\n    this.props.setAppState({ teamOptions: [...teamOptions] });\n  };\n\n  render() {\n    const { teamCharacters } = this.props.appState;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <p>Team Buffs</p>\n        </InputRow>\n\n        {[0, 1, 2].map((i) => (\n          <Fragment key={i}>\n            <InputRow>\n              <CharacterPicker\n                characterId={teamCharacters[i].id}\n                setCharacterId={this.setCharacterId(i)}\n              />\n            </InputRow>\n\n            {teamCharacters[i].teamOptions.map((option) => (\n              <InputRow key={option.id}>\n                <OptionInput\n                  option={option}\n                  updateOptions={this.updateOptions}\n                />\n              </InputRow>\n            ))}\n          </Fragment>\n        ))}\n      </InputBlock>\n    );\n  }\n}\n\nexport default TeamInputBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport CritType from '../modifier/CritType';\nimport Resistance from '../stat/Resistance';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport SaveBlock from './SaveBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport TeamInputBlock from './TeamInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n    teamOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  refreshApp: () => void;\n  talentAttackLevelExtra: number;\n  talentSkillLevelExtra: number;\n  talentBurstLevelExtra: number;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n      refreshApp,\n    } = this.props;\n\n    return (\n      <Col\n        id='input-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <SaveBlock\n          appState={appState}\n          setAppState={setAppState}\n          refreshApp={refreshApp}\n        />\n\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n          talentAttackLevelExtra={this.props.talentAttackLevelExtra}\n          talentSkillLevelExtra={this.props.talentSkillLevelExtra}\n          talentBurstLevelExtra={this.props.talentBurstLevelExtra}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n\n        <TeamInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../character/Character';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\nimport Weapon from '../weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Col\n        id='stat-column'\n        className='stat-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\n\ntype TalentBlockProps = {\n  type: string;\n  talentValues: Record<string, TalentValue>;\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{talentDescMapping[this.props.type]}</h3>\n        {Object.entries(this.props.talentValues).map(([id, { damage }]) => (\n          <p key={id}>\n            {talentDescMapping[id]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport { TalentValueSet } from '../talent/types';\nimport TalentBlock from './TalentBlock';\nimport Col from 'react-bootstrap/esm/Col';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const talentValues = this.props.talentValues;\n\n    return (\n      <Col\n        id='talent-column'\n        className='talent-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='result-block'>\n          <h2>Talents</h2>\n          {Object.entries(talentValues).map(([type, values]) => (\n            <TalentBlock key={type} type={type} talentValues={values} />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import React from 'react';\nimport Option from '../option/Option';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\nimport { optionMapping } from '../data/Data';\nimport OptionInput from './OptionInput';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\n\ntype DPSOptionInputProps = {\n  setOption: (option?: Option) => void;\n  options: Option[];\n  option?: Option;\n  index: number;\n};\n\nclass DPSOptionInput extends React.Component<DPSOptionInputProps> {\n  setOptionId = (id: string) => {\n    const OptionConstructor = this.props.options.find(\n      (option) => option.id === id\n    )?.constructor as { new (): Option };\n\n    if (OptionConstructor !== undefined) {\n      this.props.setOption(new OptionConstructor());\n    } else if (id === 'reaction') {\n      this.props.setOption(new ReactionOption());\n    } else {\n      this.props.setOption();\n    }\n  };\n\n  updateOptions = () => {\n    this.props.setOption(this.props.option);\n  };\n\n  render() {\n    return (\n      <InputRow>\n        <Picker\n          id={`dps-attack-option-${this.props.index}`}\n          label=''\n          defaultValue=''\n          value={this.props.option?.id ?? ''}\n          onChange={this.setOptionId}\n          isLabelShown={false}\n          className='ml-5'\n        >\n          <Picker.Item value='' label='' />\n          <Picker.Item value='reaction' label='Reaction' />\n          {this.props.options.map((option) => (\n            <Picker.Item\n              key={option.id}\n              value={option.id}\n              label={optionMapping[option.id]}\n            />\n          ))}\n        </Picker>\n\n        {this.props.option && (\n          <OptionInput\n            option={this.props.option}\n            updateOptions={this.updateOptions}\n            isLabelShown={false}\n          />\n        )}\n      </InputRow>\n    );\n  }\n}\n\nexport default DPSOptionInput;\n","import React from 'react';\nimport InputRow from './InputRow';\nimport { Attack } from './DPSColumn';\nimport Picker from './Picker';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport IntInput from './IntInput';\nimport { TalentValueSet } from '../talent/types';\nimport DPSOptionInput from './DPSOptionInput';\nimport Option from '../option';\n\ntype DPSAttackInputProps = {\n  setAttack: (attack: Attack) => void;\n  attack: Attack;\n  index: number;\n  talentValues: TalentValueSet;\n  options: Option[];\n};\n\nclass DPSAttackInput extends React.Component<DPSAttackInputProps> {\n  setTalentType = (type: string) => {\n    const attack = { ...this.props.attack, talentType: type };\n    this.props.setAttack(attack);\n  };\n\n  setTalentId = (id: string) => {\n    const attack = { ...this.props.attack, talentId: id };\n    this.props.setAttack(attack);\n  };\n\n  setMultiplier = (multiplier: number) => {\n    const attack = { ...this.props.attack, multiplier };\n    this.props.setAttack(attack);\n  };\n\n  setOption = (i: number) => (option?: Option) => {\n    const options = [...this.props.attack.options];\n\n    if (option === undefined) {\n      options.splice(i, 1);\n    } else {\n      options[i] = option;\n    }\n\n    this.props.setAttack({ ...this.props.attack, options });\n  };\n\n  render() {\n    return (\n      <>\n        <InputRow>\n          <Picker\n            id={`dps-talent-type-${this.props.index}`}\n            label=''\n            defaultValue=''\n            value={this.props.attack.talentType}\n            onChange={this.setTalentType}\n            isLabelShown={false}\n          >\n            <Picker.Item value='' label='' />\n            {Object.keys(this.props.talentValues).map((type) => (\n              <Picker.Item\n                key={type}\n                value={type}\n                label={talentDescMapping[type]}\n              />\n            ))}\n          </Picker>\n\n          <Picker\n            id={`dps-talent-id-${this.props.index}`}\n            label=''\n            defaultValue=''\n            value={this.props.attack.talentId}\n            onChange={this.setTalentId}\n            isLabelShown={false}\n          >\n            <Picker.Item value='' label='' />\n            {Object.keys(\n              this.props.talentValues[this.props.attack.talentType] ?? {}\n            ).map((id) => (\n              <Picker.Item key={id} value={id} label={talentDescMapping[id]} />\n            ))}\n          </Picker>\n\n          {getDamageDisplayValue(this.props.attack.talentValue.damage)}\n\n          <IntInput\n            id={`dps-attack-multiplier-${this.props.index}`}\n            label='x'\n            defaultValue={1}\n            value={this.props.attack.multiplier}\n            onInput={this.setMultiplier}\n            className='level-input'\n          />\n        </InputRow>\n\n        {this.props.attack.options.map((option, i) => (\n          <DPSOptionInput\n            key={i}\n            setOption={this.setOption(i)}\n            options={this.props.options}\n            option={option}\n            index={i}\n          />\n        ))}\n\n        <DPSOptionInput\n          setOption={this.setOption(this.props.attack.options.length)}\n          options={this.props.options}\n          index={this.props.attack.options.length}\n        />\n      </>\n    );\n  }\n}\n\nexport default DPSAttackInput;\n","import { AppState } from '../App';\nimport { getAscensionLevel } from '../character/Character';\nimport { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { getOptionValue, setOptionValue } from '../option';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { getTotalStatsAt } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\nimport Option from '../option/Option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\n\nexport function calculateTalentValue(\n  talentType: string,\n  talentId: string,\n  options: Option[],\n  appState: AppState,\n  artifactSetBonuses: Stats,\n  getDamageModifier: ({\n    modifierMixins,\n  }: {\n    modifierMixins: ModifierMixin[];\n  }) => DamageModifier,\n  getStatMixins: ({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache,\n  }: {\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => StatMixin[],\n  getModifierMixins: ({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache,\n  }: {\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => ModifierMixin[]\n): TalentValue {\n  // Initialize a set of all options\n  const { characterOptions, weaponOptions, artifactSetOptions, teamOptions } =\n    initializeAllOptions(appState);\n\n  const allOptions = [\n    ...characterOptions,\n    ...weaponOptions,\n    ...artifactSetOptions,\n    ...teamOptions,\n  ];\n\n  // Override option values\n  options.forEach((option) => {\n    let oldOption = allOptions.find((oldOption) => oldOption.id === option.id);\n    if (oldOption !== undefined) {\n      setOptionValue(oldOption, getOptionValue(option));\n    } else if (option.id === 'reaction') {\n      characterOptions.push(option as ReactionOption);\n    }\n  });\n\n  // Calculate stats and modifier\n  const statMixins = getStatMixins({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache: false,\n  });\n\n  const stats = getTotalStatsAt(\n    appState.character,\n    appState.weapon,\n    artifactSetBonuses,\n    appState.artifacts,\n    appState.talentAttackLevel,\n    appState.talentSkillLevel,\n    appState.talentBurstLevel,\n    statMixins\n  );\n\n  const modifierMixins = getModifierMixins({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache: false,\n  });\n\n  const modifier = getDamageModifier({ modifierMixins });\n\n  // Calculate talent value\n  const talentFn = appState.character.talentFns[talentType]?.[talentId];\n\n  const talentValue = talentFn?.({ stats, modifier }) ?? { damage: [NaN] };\n\n  return talentValue;\n}\n\nexport function initializeAllOptions(appState: AppState) {\n  const characterOptions = [\n    ...appState.character.getCharacterOptions(),\n    ...appState.character.getPassiveOptions(\n      getAscensionLevel(\n        appState.character.level,\n        appState.character.hasAscended\n      )\n    ),\n    ...appState.character.getConstellationsOptions(\n      appState.character.constellationLevel\n    ),\n  ];\n  appState.characterOptions.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, getOptionValue(option));\n    }\n  });\n\n  const weaponOptions = appState.weapon.getPassiveOptions();\n  appState.weaponOptions.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, getOptionValue(option));\n    }\n  });\n\n  const artifactSetOptions = appState.artifactSets.flatMap((artifactSet) =>\n    artifactSet.getOptions(artifactSet.pieces)\n  );\n  appState.artifactSetOptions.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, getOptionValue(option));\n    }\n  });\n\n  const teamOptions = appState.teamCharacters.flatMap((character) =>\n    character.getTeamOptions()\n  );\n  appState.teamOptions.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, getOptionValue(option));\n    }\n  });\n\n  return {\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n  };\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport InputRow from './InputRow';\nimport FloatInput from './FloatInput';\nimport { TalentValue, TalentValueSet } from '../talent/types';\nimport DPSAttackInput from './DPSAttackInput';\nimport { AppState } from '../App';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { Stats } from '../data/types';\nimport {\n  calculateTalentValue,\n  initializeAllOptions,\n} from '../dps/DPSCalculator';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Option from '../option/Option';\n\nexport type Attack = {\n  talentType: string;\n  talentId: string;\n  multiplier: number;\n  talentValue: TalentValue;\n  options: Option[];\n};\n\nconst defaultAttack: Attack = {\n  talentType: '',\n  talentId: '',\n  multiplier: 1,\n  talentValue: { damage: [NaN] },\n  options: [],\n};\n\ntype DPSColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  artifactSetBonuses: Stats;\n  getDamageModifier: ({\n    modifierMixins,\n  }: {\n    modifierMixins: ModifierMixin[];\n  }) => DamageModifier;\n  getStatMixins: ({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache,\n  }: {\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => StatMixin[];\n  getModifierMixins: ({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache,\n  }: {\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => ModifierMixin[];\n  talentValues: TalentValueSet;\n};\n\nclass DPSColumn extends React.Component<DPSColumnProps> {\n  dpr: number = 0;\n  dps: number = NaN;\n\n  updateTalentValue = (attack: Attack) => {\n    attack.talentValue = calculateTalentValue(\n      attack.talentType,\n      attack.talentId,\n      attack.options,\n      this.props.appState,\n      this.props.artifactSetBonuses,\n      this.props.getDamageModifier,\n      this.props.getStatMixins,\n      this.props.getModifierMixins\n    );\n  };\n\n  updateTalentValues = () => {\n    const rotation = this.props.appState.rotation;\n\n    rotation.forEach((attack) => this.updateTalentValue(attack));\n\n    this.dpr = rotation.reduce(\n      (acc, attack) =>\n        acc +\n        attack.talentValue.damage.reduce(\n          (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n          0\n        ) *\n          (!isNaN(attack.multiplier) ? attack.multiplier : 0),\n      0\n    );\n    this.dps = this.dpr / this.props.appState.rotationTime;\n  };\n\n  setRotationTime = (time: number) => {\n    this.props.setAppState({ rotationTime: time });\n  };\n\n  setAttack = (i: number) => (attack: Attack) => {\n    const rotation = this.props.appState.rotation;\n\n    if (attack.talentType === '') {\n      rotation.splice(i, 1);\n    } else {\n      rotation[i] = attack;\n    }\n\n    this.props.setAppState({ rotation });\n  };\n\n  render() {\n    this.updateTalentValues();\n\n    const { characterOptions, weaponOptions, artifactSetOptions, teamOptions } =\n      initializeAllOptions(this.props.appState);\n\n    const allOptions = [\n      ...characterOptions,\n      ...weaponOptions,\n      ...artifactSetOptions,\n      ...teamOptions,\n    ];\n\n    return (\n      <Col\n        id='dps-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <h2>DPS Calculator</h2>\n\n        <InputRow>\n          <FloatInput\n            id='rotation-time-input'\n            label='Rotation Time:'\n            defaultValue={0}\n            value={this.props.appState.rotationTime}\n            onInput={this.setRotationTime}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <p>DPR: {this.dpr.toFixed(0)}</p>\n        </InputRow>\n\n        <InputRow>\n          <p>DPS: {isFinite(this.dps) ? this.dps.toFixed(0) : '-'}</p>\n        </InputRow>\n\n        {this.props.appState.rotation.map((attack, i) => (\n          <DPSAttackInput\n            key={i}\n            setAttack={this.setAttack(i)}\n            attack={attack}\n            index={i}\n            talentValues={this.props.talentValues}\n            options={allOptions}\n          />\n        ))}\n\n        <DPSAttackInput\n          setAttack={this.setAttack(this.props.appState.rotation.length)}\n          attack={{ ...defaultAttack }}\n          index={this.props.appState.rotation.length}\n          talentValues={this.props.talentValues}\n          options={allOptions}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default DPSColumn;\n","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport Row from 'react-bootstrap/esm/Row';\nimport './App.css';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport DPSColumn, { Attack } from './component/DPSColumn';\nimport { Stats } from './data/types';\nimport Artifact from './artifact/Artifact';\nimport ArtifactSet from './artifact/ArtifactSet';\nimport { ArtifactType } from './artifact/types';\nimport Character from './character/Character';\nimport { initCharacter } from './character/CharacterUtil';\nimport CritType from './modifier/CritType';\nimport DamageModifier from './modifier/DamageModifer';\nimport Reaction from './modifier/Reaction';\nimport { isModifierApplicable, isStatsApplicable } from './option';\nimport { ModifierMixin, Priority, StatMixin } from './option/Mixin';\nimport { IModifierApplicable, IStatsApplicable } from './option/Option';\nimport WeaponOption from './option/weaponOptions/WeaponOption';\nimport Resistance from './stat/Resistance';\nimport { getTotalStatsAt } from './stat/Stat';\nimport { TalentValue, TalentValueSet } from './talent/types';\nimport Weapon from './weapon/Weapon';\nimport CharacterOption from './option/characterOptions/CharacterOption';\nimport ArtifactSetOption from './option/artifactSetOptions/ArtifactSetOption';\nimport { initArtifactSet } from './artifact/ArtifactSetUtil';\nimport { initWeapon } from './weapon/WeaponUtil';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  teamCharacters: Character[];\n\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamOptions: CharacterOption[];\n\n  rotationTime: number;\n  rotation: Attack[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: initCharacter(),\n    weapon: initWeapon(),\n    artifacts: Object.values(ArtifactType).map(\n      (type) => new Artifact(type, 1, 0, '')\n    ),\n\n    artifactSets: [initArtifactSet(), initArtifactSet(), initArtifactSet()],\n\n    enemyLevel: 1,\n    enemyDefReduction: 0,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    flatDmg: 0,\n    reaction: Reaction.None,\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    teamCharacters: [initCharacter(), initCharacter(), initCharacter()],\n\n    characterOptions: [],\n    weaponOptions: [],\n    artifactSetOptions: [],\n    teamOptions: [],\n\n    rotationTime: 0,\n    rotation: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = {};\n\n  modifierMixins: ModifierMixin[] = [];\n  statMixins: StatMixin[] = [];\n\n  talentAttackLevelExtra: number = 0;\n  talentSkillLevelExtra: number = 0;\n  talentBurstLevelExtra: number = 0;\n\n  // Gets all modifier mixins and updates cache (modifierMixins)\n  getModifierMixins = ({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    updateCache = true,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamCharacters?: Character[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined &&\n      teamOptions === undefined\n    ) {\n      return this.modifierMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveModifierMixins();\n\n    const characterConstellationMixins = (\n      character ?? this.state.character\n    ).getConstellationModifierMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveModifierMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getModifierMixins()\n    );\n\n    const teamPassiveMixins = (teamCharacters ?? this.state.teamCharacters)\n      .map((character) => character.getTeamModifierMixin())\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const teamOptionMixins = (teamOptions ?? this.state.teamOptions)\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const unarrangedMixins = [\n      ...characterPassiveMixins,\n      ...characterConstellationMixins,\n      ...weaponPassiveMixins,\n      ...artifactSetMixins,\n      ...teamPassiveMixins,\n      ...characterOptionMixins,\n      ...weaponOptionMixins,\n      ...artifactSetOptionMixins,\n      ...teamOptionMixins,\n    ];\n    const groupedMixins = new Map<Priority, ModifierMixin[]>();\n    unarrangedMixins.forEach((mixin) => {\n      const priority = mixin.priority ?? Priority.Normal;\n      const array = groupedMixins.get(priority);\n      if (!array) {\n        groupedMixins.set(priority, [mixin]);\n      } else {\n        array.push(mixin);\n      }\n    });\n\n    const modifierMixins = (groupedMixins.get(Priority.Normal) ?? []).concat(\n      groupedMixins.get(Priority.Last) ?? []\n    );\n\n    if (updateCache) {\n      this.modifierMixins = modifierMixins;\n    }\n\n    return modifierMixins;\n  };\n\n  // Gets all stat mixins and updates cache (statMixins)\n  getStatMixins = ({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    updateCache = true,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamCharacters?: Character[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined &&\n      teamOptions === undefined\n    ) {\n      return this.statMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveStatMixins();\n\n    const characterConstellationMixins = (\n      character ?? this.state.character\n    ).getConstellationStatMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveStatMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getStatMixins()\n    );\n\n    const teamPassiveMixins = (teamCharacters ?? this.state.teamCharacters)\n      .map((character) => character.getTeamStatMixin())\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const teamOptionMixins = (teamOptions ?? this.state.teamOptions)\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const unarrangedMixins = [\n      ...characterPassiveMixins,\n      ...characterConstellationMixins,\n      ...weaponPassiveMixins,\n      ...artifactSetMixins,\n      ...teamPassiveMixins,\n      ...characterOptionMixins,\n      ...weaponOptionMixins,\n      ...artifactSetOptionMixins,\n      ...teamOptionMixins,\n    ];\n    const groupedMixins = new Map<Priority, StatMixin[]>();\n    unarrangedMixins.forEach((mixin) => {\n      const priority = mixin.priority ?? Priority.Normal;\n      const array = groupedMixins.get(priority);\n      if (!array) {\n        groupedMixins.set(priority, [mixin]);\n      } else {\n        array.push(mixin);\n      }\n    });\n\n    const statMixins = (groupedMixins.get(Priority.Normal) ?? []).concat(\n      groupedMixins.get(Priority.Last) ?? []\n    );\n\n    if (updateCache) {\n      this.statMixins = statMixins;\n    }\n\n    return statMixins;\n  };\n\n  getDamageModifier = ({\n    characterLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n  }: {\n    characterLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    modifierMixins?: ModifierMixin[];\n  } = {}): DamageModifier => {\n    const modifier: DamageModifier = {\n      characterLevel: characterLevel ?? this.state.character.level,\n      enemyLevel: enemyLevel ?? this.state.enemyLevel,\n      enemyDefReduction: this.state.enemyDefReduction,\n      enemyRes: enemyRes ?? this.state.enemyRes,\n      enemyResReduction: new Resistance(),\n      critType: critType ?? this.state.critType,\n      flatDmg: this.state.flatDmg,\n      reaction: reaction ?? this.state.reaction,\n      talentAttackLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n    };\n\n    // Apply modifier mixins\n    (modifierMixins ?? this.modifierMixins).forEach((mixin) =>\n      mixin.apply(modifier, this.totalStats)\n    );\n\n    // Update extra talent levels (from constellations etc) for display\n    this.talentAttackLevelExtra =\n      modifier.talentAttackLevel -\n      (talentAttackLevel ?? this.state.talentAttackLevel);\n    this.talentSkillLevelExtra =\n      modifier.talentSkillLevel -\n      (talentSkillLevel ?? this.state.talentSkillLevel);\n    this.talentBurstLevelExtra =\n      modifier.talentBurstLevel -\n      (talentBurstLevel ?? this.state.talentBurstLevel);\n\n    return modifier;\n  };\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = newArtifactSets\n      .map((artifactSet) => artifactSet.stats)\n      .reduce((acc, stats) => {\n        Object.entries(stats).forEach(([stat, value]) => {\n          acc[stat] = value + (acc[stat] ?? 0);\n        });\n        return acc;\n      }, {} as Stats);\n\n    this.updateTotalStats({\n      artifactSets,\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSets?: ArtifactSet[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    teamCharacters?: Character[];\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n  }) => {\n    const statMixins = this.getStatMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n      teamCharacters,\n      teamOptions,\n    });\n\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel,\n      statMixins\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      teamCharacters,\n      characterOptions,\n      artifactSetOptions,\n      teamOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    weapon,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifactSets?: ArtifactSet[];\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    teamCharacters?: Character[];\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n\n    const modifierMixins = this.getModifierMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n      teamCharacters,\n      teamOptions,\n    });\n\n    const damageModifier = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n    });\n\n    this.talentValues = {};\n    Object.entries(character.talentFns).forEach(([type, fns]) => {\n      this.talentValues[type] = Object.entries(fns).reduce((acc, [id, fn]) => {\n        acc[id] = fn({ stats: this.totalStats, modifier: damageModifier });\n        return acc;\n      }, {} as Record<string, TalentValue>);\n    });\n  };\n\n  refreshApp = () => {\n    this.getStatMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n      teamCharacters: this.state.teamCharacters,\n      teamOptions: this.state.teamOptions,\n    });\n    this.getModifierMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n      teamCharacters: this.state.teamCharacters,\n      teamOptions: this.state.teamOptions,\n    });\n\n    this.updateArtifactSetBonuses({});\n    this.setState({});\n  };\n\n  render() {\n    return (\n      <Container className='app px-0' fluid>\n        <Navbar sticky='top' bg='light' className='d-md-none'>\n          <Nav>\n            <Nav.Item>\n              <Nav.Link href='#input-column'>Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#artifact-column'>Artifacts</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#stat-column'>Stats</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#talent-column'>Talents</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar>\n\n        <Row className='mx-0 flex-md-nowrap'>\n          <InputColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n            updateTotalStats={this.updateTotalStats}\n            updateTalentValues={this.updateTalentValues}\n            refreshApp={this.refreshApp}\n            talentAttackLevelExtra={this.talentAttackLevelExtra}\n            talentSkillLevelExtra={this.talentSkillLevelExtra}\n            talentBurstLevelExtra={this.talentBurstLevelExtra}\n          />\n          <ArtifactColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateTotalStats={this.updateTotalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n            damageModifier={this.getDamageModifier()}\n            statMixins={this.statMixins}\n            talentValues={this.talentValues}\n          />\n          <StatColumn\n            appState={this.state}\n            totalStats={this.totalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n          />\n          <TalentColumn talentValues={this.talentValues} />\n          <DPSColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            artifactSetBonuses={this.artifactSetBonuses}\n            getDamageModifier={this.getDamageModifier}\n            getStatMixins={this.getStatMixins}\n            getModifierMixins={this.getModifierMixins}\n            talentValues={this.talentValues}\n          />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}