{"version":3,"sources":["js/Character.js","js/Weapon.js","js/Styles.js","App.js"],"names":["Character","name","this","dbBaseStatRef","a","async","get","doc","exists","baseStats","data","console","log","dbStatCurveRef","statCurveMapping","dbAscensionBonusRef","ascensionBonuses","forEach","id","weapon","weaponLevel","weaponHasAscended","dbWeaponStatCurveColRef","characterLevel","characterHasAscended","dbCharStatCurveColRef","getWeaponStatsAt","weaponStats","getInnateStatsAt","innateStats","InnateHp","baseHp","InnateAtk","baseAtk","InnateDef","baseDef","WeaponHp","WeaponAtk","WeaponDef","undefined","getStatsAt","level","hasAscended","dbStatCurveColRef","isNaN","Object","keys","reduce","obj","stat","getStatCurvesAtLevel","charStatCurves","entries","curve","multiplier","ascensionLevel","bonus","toString","characterConverter","fromFirestore","snapshot","options","createCharacter","ref","collection","chararcter","character","setBaseStats","setStatCurveMapping","setAscensionBonuses","Weapon","type","rank","stats","weaponStatCurves","weaponConverter","createWeapon","styles","StyleSheet","create","container","display","flexDirection","alignItems","height","backgroundColor","inputColumn","padding","borderRightWidth","characterSelectRow","marginVertical","characterSelect","levelInputRow","levelInput","width","ascensionCheckRow","resultColumn","flexGrow","characterImage","resultText","App","renderCharacterList","sortedChars","characters","sort","name1","name2","localeCompare","View","style","Text","selectedValue","state","characterId","onValueChange","value","_","db","withConverter","characterHasInit","setState","Item","label","map","key","renderWeaponList","weaponId","weaponType","weapons","weaponDoc","renderCharacterImage","imageUrl","Image","source","uri","setCharacterStats","isCharacterAscended","characterStats","setWeaponStats","isWeaponAscended","hasCharacterParamsChanged","hasChanged","hasWeaponParamsChanged","renderCharacterStats","Math","round","firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","hasLoaded","dbInitRef","initSnapshot","TextInput","defaultValue","onChangeText","text","parseInt","Checkbox","Component"],"mappings":"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","file":"static/js/app.4c4e4651.chunk.js","sourcesContent":["class Character {\n    constructor(name) {\n        this.name = name;\n    }\n\n    async setBaseStats(dbBaseStatRef) {\n        let doc = await dbBaseStatRef.get()\n        \n        if (doc.exists) {\n            this.baseStats = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Base stats for ${this.name} not found!`);\n        }\n    }\n\n    async setStatCurveMapping(dbStatCurveRef) {\n        let doc = await dbStatCurveRef.get()\n\n        if (doc.exists) {\n            this.statCurveMapping = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Stat curve mapping for ${this.name} not found!`);\n        }\n    }\n\n    async setAscensionBonuses(dbAscensionBonusRef) {\n        this.ascensionBonuses = {};\n        \n        let querySnapshot = await dbAscensionBonusRef.get()\n        querySnapshot.forEach(doc => {\n            // doc.data() is never undefined for query doc snapshots\n            this.ascensionBonuses[doc.id] = doc.data();\n        })\n    }\n\n    async getStatsWithWeaponAt(weapon, weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef, characterLevel, characterHasAscended, dbCharStatCurveColRef) {\n\n        let weaponStats = await this.getWeaponStatsAt(weapon, weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef)\n\n        let innateStats = await this.getInnateStatsAt(characterLevel, characterHasAscended, dbCharStatCurveColRef);\n        \n        // TODO: Change this to return total stats instead, and directly call getInnateStatsAt and getWeaponStatsAt if stats breakdown is needed\n        return {\n            InnateHp: innateStats.baseHp,\n            InnateAtk: innateStats.baseAtk,\n            InnateDef: innateStats.baseDef,\n            WeaponHp: weaponStats.baseHp,\n            WeaponAtk: weaponStats.baseAtk,\n            WeaponDef: weaponStats.baseDef,\n        };\n    }\n\n    async getWeaponStatsAt(weapon, weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef) {\n        let weaponStats;\n        if (weapon !== undefined) {\n            weaponStats = await weapon.getStatsAt(weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef);\n        } else {\n            weaponStats = {};\n        }\n\n        return weaponStats;\n    }\n\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n    async getInnateStatsAt(level, hasAscended, dbStatCurveColRef) {\n        if (isNaN(level) || level < 1 || level > 90) {\n            // Return nulls if level is invalid\n            let innateStats;\n            if (this.innateStats !== undefined) {\n                // Copy all of innateStats' properties to a new object and initialize them to null\n                innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                innateStats = {};\n            }\n            \n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n            \n            return innateStats;\n        } \n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\n        else if (level === this.level && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.innateStats;\n        } else {\n\n            // Initialize stats with character level 1 base stats\n            let innateStats = {...this.baseStats};\n\n            let charStatCurves = await this.getStatCurvesAtLevel(level, dbStatCurveColRef);\n\n            // Calculate stats from character level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = charStatCurves[curve];\n                innateStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from character ascension\n            let ascensionLevel;\n            if (level > 80 || (level == 80 && hasAscended)) {\n                ascensionLevel = 6;\n            } else if (level > 70 || (level == 70 && hasAscended)) {\n                ascensionLevel = 5;\n            } else if (level > 60 || (level == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (level > 50 || (level == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (level > 40 || (level == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (level > 20 || (level == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = this.ascensionBonuses[ascensionLevel];\n\n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in innateStats) {\n                        innateStats[stat] += bonus;\n                    } else {\n                        innateStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n\n            return innateStats;\n        }\n    }\n\n    async getStatCurvesAtLevel(level, dbStatCurveColRef) {\n        let doc = await dbStatCurveColRef.doc(level.toString()).get();\n        if (doc.exists) {\n            return doc.data();\n        } else {\n            console.log(`WARN: Stat curves for level ${level} not found`);\n            return {};\n        }\n    }\n}\n\nexport const characterConverter = {\n    fromFirestore: async (snapshot, options) => {\n        const data = snapshot.data(options);\n        let chararcter = await createCharacter(\n            data.name,\n            snapshot.ref.collection('stats').doc('baseStats'),\n            snapshot.ref.collection('stats').doc('statCurves'), \n            snapshot.ref.collection('ascensionBonuses'),\n        );\n\n        return chararcter;\n    }\n}\n\nasync function createCharacter(name, dbBaseStatRef, dbStatCurveRef, dbAscensionBonusRef) {\n    let character = new Character(name);\n    await character.setBaseStats(dbBaseStatRef);\n    await character.setStatCurveMapping(dbStatCurveRef);\n    await character.setAscensionBonuses(dbAscensionBonusRef);\n\n    return character;\n}\n\n","class Weapon {\n    constructor(name, type, rank) {\n        this.name = name;\n        this.type = type;\n        this.rank = rank;\n    }\n\n    async setBaseStats(dbBaseStatRef) {\n        let doc = await dbBaseStatRef.get()\n        \n        if (doc.exists) {\n            this.baseStats = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Base stats for ${this.name} not found!`);\n        }\n    }\n\n    async setStatCurveMapping(dbStatCurveRef) {\n        let doc = await dbStatCurveRef.get()\n\n        if (doc.exists) {\n            this.statCurveMapping = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Stat curve mapping for ${this.name} not found!`);\n        }\n    }\n\n    async setAscensionBonuses(dbAscensionBonusRef) {\n        this.ascensionBonuses = {};\n        \n        let querySnapshot = await dbAscensionBonusRef.get()\n        querySnapshot.forEach(doc => {\n            // doc.data() is never undefined for query doc snapshots\n            this.ascensionBonuses[doc.id] = doc.data();\n        })\n    }\n\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n    async getStatsAt(weaponLevel, hasAscended, dbStatCurveColRef) {\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.rank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\n            // Return nulls if weapon level is invalid\n            let weaponStats;\n            if (this.stats !== undefined) {\n                // Copy all of stats' properties to a new object and initialize them to null\n                weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                weaponStats = {};\n            }\n            \n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n        // If getStatsAt has not been called before, this.weaponLevel, this.hasAscended, and this.stats will be undefined\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.stats;\n        } else {\n\n            // Level 1 weapon stats\n            let weaponStats = {...this.baseStats};\n\n            let weaponStatCurves = await this.getStatCurvesAtLevel(weaponLevel, dbStatCurveColRef);\n\n            // Calculate stats from weapon level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = weaponStatCurves[curve];\n                weaponStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from weapon ascension\n            let ascensionLevel;\n            // Only 3-star and above weapons can be ascended beyond level 70\n            if (this.rank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\n                ascensionLevel = 6;\n            } else if (this.rank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\n                ascensionLevel = 5;\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = this.ascensionBonuses[ascensionLevel];\n            \n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in weaponStats) {\n                        weaponStats[stat] += bonus;\n                    } else {\n                        weaponStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n    }\n\n    async getStatCurvesAtLevel(level, dbStatCurveColRef) {\n        let doc = await dbStatCurveColRef.doc(level.toString()).get();\n        if (doc.exists) {\n            return doc.data();\n        } else {\n            console.log(`WARN: Stat curves for level ${level} not found`);\n            return {};\n        }\n    }\n}\n\nexport const weaponConverter = {\n    fromFirestore: async (snapshot, options) => {\n        const data = snapshot.data(options);\n        let weapon = await createWeapon(\n            data.name,\n            data.type,\n            data.rank,\n            snapshot.ref.collection('stats').doc('baseStats'),\n            snapshot.ref.collection('stats').doc('statCurves'), \n            snapshot.ref.collection('ascensionBonuses'),\n        );\n\n        return weapon;\n    }\n}\n\nasync function createWeapon(name, type, rank, dbBaseStatRef, dbStatCurveRef, dbAscensionBonusRef) {\n    let weapon = new Weapon(name, type, rank);\n    await weapon.setBaseStats(dbBaseStatRef);\n    await weapon.setStatCurveMapping(dbStatCurveRef);\n    await weapon.setAscensionBonuses(dbAscensionBonusRef);\n\n    return weapon;\n}","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n\n        height: '100%',\n\n        backgroundColor: '#fff',\n    },\n\n    inputColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '1%',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#ccc',\n    },\n\n    characterSelectRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    characterSelect: {\n\n    },\n\n    levelInputRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    levelInput: {\n        width: '2em',\n\n    },\n\n    ascensionCheckRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    resultColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n\n        padding: '1%',\n\n        backgroundColor: '#eee',\n    },\n\n    characterImage: {\n        marginVertical: '0.25em',\n    },\n\n    resultText: {\n        marginVertical: '0.25em',\n    }\n});\n\nexport default styles;","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { Image, Text, TextInput, View } from 'react-native';\n\nimport { characterConverter } from './js/Character.js';\nimport { weaponConverter } from './js/Weapon.js';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { FIREBASE_APIKEY, FIREBASE_AUTHDOMAIN, FIREBASE_PROJECTID, FIREBASE_STORAGEBUCKET, FIREBASE_MESSAGINGSENDERID, FIREBASE_APPID } from '@env';\n\nimport styles from './js/Styles.js';\n\n\nexport default class App extends Component {\n\n  constructor() {\n    super();\n\n    // Initialize Firebase\n    const firebaseConfig = {\n      apiKey: FIREBASE_APIKEY,\n      authDomain: FIREBASE_AUTHDOMAIN,\n      projectId: FIREBASE_PROJECTID,\n      storageBucket: FIREBASE_STORAGEBUCKET,\n      messagingSenderId: FIREBASE_MESSAGINGSENDERID,\n      appId: FIREBASE_APPID,\n    }\n    if (!firebase.apps.length) {\n      firebase.initializeApp(firebaseConfig);\n    }\n\n    // Initialize Firestore\n    this.db = firebase.firestore();\n\n    this.state = {\n      hasLoaded: false,\n\n      characterId: undefined,\n      character: undefined,\n      characterHasInit: false,\n      characterLevel: 1,\n      isCharacterAscended: false,\n\n      weaponId: undefined,\n      weapon: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n\n      characterStats: undefined,\n      weaponStats: undefined,\n    }\n  }\n\n  // Called when component is mounted for the first time\n  async componentDidMount() {\n    // Get ref to stat curves\n    this.dbCharStatCurveColRef = this.db.collection('characterStatCurves');\n    this.dbWeaponStatCurveColRef = this.db.collection('weaponStatCurves');\n\n    // Get inititialization data (e.g. character and weapon list)\n    let dbInitRef = this.db.collection('init').doc('lists');\n    let initSnapshot = await dbInitRef.get();\n    if (initSnapshot.exists) {\n      let doc = initSnapshot.data();\n      this.characters = doc.characters; // Array of character names\n      this.weapons = doc.weapons;   // Object where key: weapon name and value: weapon type\n      this.setState({ hasLoaded: true })\n    } else {\n      console.log('WARN: Initialization data not found. The page will not be able to load.');\n      return;\n    }\n  }\n\n  renderCharacterList = () => {\n    let sortedChars = this.characters.sort((name1, name2) => name1.localeCompare(name2));\n    \n    return (\n      <View style={styles.characterSelectRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={async (value, _) => {\n            if (value != 0) {\n              let doc = await this.db.collection('characters').doc(value)\n                .withConverter(characterConverter)\n                .get()\n\n              if (doc.exists) {\n                this.setState({\n                  characterId: value,\n                  character: await doc.data(),\n                  characterHasInit: true,\n                });\n              } else {\n                console.log(`WARN: Could not find data for character ${value}`);\n              }\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {sortedChars.map(name => <Picker.Item label={name} value={name} key={name} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    return (\n      <View style={styles.characterSelectRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={async (value, _) => {\n            if (value != 0) {\n              let weaponType = this.weapons[value];\n              let weaponDoc = await this.db.collection('weapons').doc(weaponType).collection(weaponType + 's').doc(value)\n                .withConverter(weaponConverter)\n                .get();\n\n              if (weaponDoc.exists) {\n                this.setState({\n                  weaponId: value,\n                  weapon: await weaponDoc.data(),\n                });\n              } else {\n                console.log(`WARN: Could not find data for weapon ${value}`);\n              }\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {Object.keys(this.weapons).map(name => <Picker.Item label={name} value={name} key={name} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.state.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  setCharacterStats = async () => {\n    let stats = await this.state.character.getInnateStatsAt(this.state.characterLevel, this.state.isCharacterAscended, this.dbCharStatCurveColRef);\n    this.setState({ characterStats: stats });\n  }\n\n  setWeaponStats = async () => {\n    let stats = await this.state.weapon.getStatsAt(this.state.weaponLevel, this.state.isWeaponAscended, this.dbWeaponStatCurveColRef);\n    this.setState({ weaponStats: stats });\n  }\n\n  hasCharacterParamsChanged = () => {\n    let hasChanged = false;\n\n    if (this.state.character !== undefined) {\n      hasChanged = hasChanged || ((!isNaN(this.state.characterLevel) || !isNaN(this.state.character.level)) && this.state.characterLevel != this.state.character.level) || (this.state.isCharacterAscended != this.state.character.hasAscended);\n    }\n    \n    return hasChanged;\n  }\n\n  hasWeaponParamsChanged = () => {\n    let hasChanged = false;\n\n    if (this.state.weapon !== undefined) {\n      hasChanged = hasChanged || ((!isNaN(this.state.weaponLevel) || !isNaN(this.state.weapon.weaponLevel)) && this.state.weaponLevel != this.state.weapon.weaponLevel) || (this.state.isWeaponAscended != this.state.weapon.hasAscended);\n    }\n\n    return hasChanged;\n  }\n\n  renderCharacterStats = () => {\n    if (this.hasCharacterParamsChanged()) {\n      this.setCharacterStats();\n    }\n\n    if(this.hasWeaponParamsChanged()) {\n      this.setWeaponStats();\n    }\n\n    return (\n      <View>\n        {/* Render character stats */ }\n        {\n          this.state.character ? (\n            <View>\n              {this.renderCharacterImage()}\n              <Text style={styles.resultText}>Selected character: {this.state.character ? this.state.character.name : ''}</Text>\n              {\n                this.state.characterStats ? (\n                  // TODO: Make sure the stats are displayed in a particular order\n                  Object.entries(this.state.characterStats).map(([stat, value]) => {\n                    return <Text style={styles.resultText}>{stat}: {value ? Math.round(value) : '-'}</Text>\n                  })\n                ) : null\n              }\n            </View>\n          ) : null\n        }\n        \n        <br/>\n\n        {/* Render weapon stats */}\n        {\n          this.state.weapon ? (\n            <View>\n              <Text style={styles.resultText}>Selected weapon: {this.state.weapon ? this.state.weapon.name : ''}</Text>\n              {\n                this.state.weaponStats ? (\n                  // TODO: Make sure the stats are displayed in a particular order\n                  Object.entries(this.state.weaponStats).map(([stat, value]) => {\n                    return <Text style={styles.resultText}>{stat}: {value ? Math.round(value) : '-'}</Text>\n                  })\n                ) : null\n              }\n            </View>\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  render() {\n    if (this.state.hasLoaded) {\n      return (\n        <View style={styles.container}>\n          <View style={styles.inputColumn}>\n            {this.renderCharacterList()}\n\n            <View style={styles.levelInputRow}>\n              <Text>Level: </Text>\n              <TextInput \n                style={styles.levelInput}\n                defaultValue={this.state.characterLevel} \n                onChangeText={text => {\n                  this.setState({characterLevel: parseInt(text)});\n                }}\n              />\n            </View>\n\n            <View style={styles.ascensionCheckRow}>\n              <Text>Ascended? </Text>\n              <Checkbox\n                onValueChange={value => this.setState({isCharacterAscended: value})}\n                value={this.state.isCharacterAscended}\n              />\n            </View>\n\n            <br/>\n\n            {this.renderWeaponList()}\n\n            <View style={styles.levelInputRow}>\n              <Text>Level: </Text>\n              <TextInput \n                style={styles.levelInput}\n                defaultValue={this.state.weaponLevel} \n                onChangeText={text => {\n                  this.setState({weaponLevel: parseInt(text)});\n                }}\n              />\n            </View>\n\n            <View style={styles.ascensionCheckRow}>\n              <Text>Ascended? </Text>\n              <Checkbox\n                onValueChange={value => this.setState({isWeaponAscended: value})}\n                value={this.state.isWeaponAscended}\n              />\n            </View>\n\n          </View>\n\n          <View style={styles.resultColumn}>\n            {this.renderCharacterStats()}\n          </View>\n\n        </View>\n      )\n    } else {\n      return (\n        <View style={styles.container}>\n          <Text>Loading...</Text>\n        </View>\n      )\n    }\n  }\n}\n\n\n"],"sourceRoot":""}