{"version":3,"sources":["data/Data.ts","talent/types.ts","option/Option.ts","option/artifactSetOptions/ArtifactSetOption.ts","option/artifactSetOptions/ArchaicPetraOption.ts","option/artifactSetOptions/BerserkerOption.ts","option/artifactSetOptions/BlizzardStrayerOption.ts","option/artifactSetOptions/BloodstainedChivalryOption.ts","option/artifactSetOptions/BraveHeartOption.ts","option/artifactSetOptions/CrimsonWitchOption.ts","option/artifactSetOptions/HeartOfDepthOption.ts","option/artifactSetOptions/InstructorOption.ts","option/artifactSetOptions/LavawalkerOption.ts","option/artifactSetOptions/MaidenBelovedOption.ts","option/artifactSetOptions/MartialArtistOption.ts","option/artifactSetOptions/NoblesseObligeOption.ts","option/artifactSetOptions/PaleFlameOption.ts","option/artifactSetOptions/RetracingBolideOption.ts","option/artifactSetOptions/ShimenawaOption.ts","option/artifactSetOptions/TenacityOption.ts","option/artifactSetOptions/ThundersootherOption.ts","option/artifactSetOptions/ViridescentVenererOption.ts","option/characterOptions/CharacterOption.ts","option/characterOptions/AloyOption.ts","option/characterOptions/AyakaOption.ts","option/characterOptions/ChongyunOption.ts","option/characterOptions/DilucOption.ts","option/characterOptions/HuTaoOption.ts","option/characterOptions/ElementalAbsorptionOption.ts","option/characterOptions/KazuhaOption.ts","option/characterOptions/KokomiOption.ts","option/characterOptions/NoelleOption.ts","option/characterOptions/RaidenOption.ts","option/characterOptions/SayuOption.ts","option/characterOptions/SucroseOption.ts","option/characterOptions/index.ts","option/characterOptions/VentiOption.ts","option/characterOptions/XiaoOption.ts","option/characterOptions/YanfeiOption.ts","option/characterOptions/YoimiyaOption.ts","option/characterOptions/MonaOption.ts","option/OptionUtils.ts","option/index.ts","option/Mixin.ts","passive/characterPassives/CharacterPassive.ts","passive/characterPassives/BeidouPassive.ts","passive/characterPassives/HuTaoPassive.ts","passive/characterPassives/YoimiyaPassive.ts","passive/characterPassives/RaidenPassive.ts","passive/characterPassives/KokomiPassive.ts","passive/characterPassives/AloyPassive.ts","modifier/Reaction.ts","stat/Resistance.ts","modifier/CritType.ts","talent/TalentUtil.ts","character/albedo/AlbedoTalent.ts","character/aloy/AloyTalent.ts","character/amber/AmberTalent.ts","character/ayaka/AyakaTalent.ts","character/barbara/BarbaraTalent.ts","character/beidou/BeidouTalent.ts","character/bennett/BennettTalent.ts","character/chongyun/ChongyunTalent.ts","character/diluc/DilucTalent.ts","character/diona/DionaTalent.ts","character/eula/EulaTalent.ts","character/fischl/FischlTalent.ts","character/ganyu/GanyuTalent.ts","character/hutao/HutaoTalent.ts","character/jean/JeanTalent.ts","character/kaeya/KaeyaTalent.ts","character/kazuha/KazuhaTalent.ts","character/keqing/KeqingTalent.ts","character/klee/KleeTalent.ts","character/kokomi/KokomiTalent.ts","character/lisa/LisaTalent.ts","character/mona/MonaTalent.ts","character/ningguang/NingguangTalent.ts","character/noelle/NoelleTalent.ts","character/qiqi/QiqiTalent.ts","character/raiden/RaidenTalent.ts","character/razor/RazorTalent.ts","character/rosaria/RosariaTalent.ts","character/sara/SaraTalent.ts","character/sayu/SayuTalent.ts","character/sucrose/SucroseTalent.ts","character/tartaglia/TartagliaTalent.ts","character/venti/VentiTalent.ts","character/xiangling/XianglingTalent.ts","character/xiao/XiaoTalent.ts","character/xingqiu/XingqiuTalent.ts","character/xinyan/XinyanTalent.ts","character/yanfei/YanfeiTalent.ts","character/yoimiya/YoimiyaTalent.ts","character/zhongli/ZhongliTalent.ts","talent/Talent.ts","character/Character.ts","stat/Stat.ts","artifact/types.ts","artifact/Artifact.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/IntInput.tsx","component/Picker.tsx","component/ArtifactBlock.tsx","optimization/Optimization.ts","component/Checkbox.tsx","component/OptimizerBlock.tsx","component/ArtifactColumn.tsx","component/ArtifactSetPicker.tsx","component/InputBlock.tsx","component/OptionInput.tsx","component/ArtifactSetInputBlock.tsx","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","artifact/ArtifactSetBonus.ts","artifact/ArtifactSet.ts","option/weaponOptions/WeaponOption.ts","passive/weaponPassives/WeaponPassive.ts","passive/weaponPassives/DragonsBanePassive.ts","passive/weaponPassives/StaffOfHomaPassive.ts","passive/weaponPassives/TheCatchPassive.ts","passive/weaponPassives/EngulfingLightningPassive.ts","passive/weaponPassives/LuxuriousSeaLordPassive.ts","passive/weaponPassives/SolarPearlPassive.ts","passive/weaponPassives/EverlastingMoonglowPassive.ts","weapon/Weapon.ts","component/SaveBlock.tsx","save/Save.ts","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","weaponPassiveData","weaponPassiveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","getWeaponPassiveAt","refinement","passive","TalentType","Element","AttackType","ScalingType","Option","this","ArtifactSetOption","threshold","archaicPetraOptions","value","choices","statMixin","apply","stats","berserkerOptions","critRate","blizzardStrayerOptions","bloodstainedChivalryOptions","chargedDmgBonus","braveHeartOptions","dmgBonus","crimsonWitchOptions","param","bonuses","find","stat","stacks","pyroDmgBonus","heartOfDepthOptions","normalDmgBonus","instructorOptions","elementalMastery","lavawalkerOptions","maidenBelovedOptions","healedBonus","martialArtistOptions","noblesseObligeOptions","atkBonus","paleFlameOptions","physicalDmgBonus","retracingBolideOptions","shimenawaOptions","plungeDmgBonus","tenacityOptions","shieldStrength","thundersootherOptions","viridescentVenererOptions","Cryo","Electro","Hydro","Pyro","modifierMixin","modifier","enemyResReduction","add","CharacterOption","aloyOptions","_talentAttackLevel","talentSkillLevel","_talentBurstLevel","skillParams","Skill","infusionNormal","ayakaOptions","infusion","chongyunOptions","dilucOptions","_talentSkillLevel","ascensionLevel","passiveData","hutaoOptions","flatAtkBonus","baseHp","hpBonus","flatHp","baseAtk","flatAtk","ElementalAbsoprtionOption","elementalAbsorption","kazuhaOptions","infusionPlunge","Anemo","kokomiOptions","kokomiBurst","noelleOptions","talentBurstLevel","burstParams","Burst","totalDef","baseDef","defBonus","flatDef","Geo","raidenOptions","burstDmgBonus","resolveStacks","sayuOptions","sucroseOptions","characterOptions","ayaka","diluc","venti","xiao","noelle","chongyun","sucrose","hutao","kazuha","yanfei","yoimiya","yoimiyaSkill","raiden","sayu","kokomi","aloy","mona","defaultOptions","isBooleanOption","option","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","includes","Priority","characterPassives","Beidou_PermanentSkill_2","options","Hutao_PermanentSkill_2","Yoimiya_PermanentSkill_1","Shougun_PermanentSkill_2","priority","Last","energyRecharge","electroDmgBonus","Kokomi_ProudSkill_SwimStamina_Reduction","_params","healingBonus","Kokomi_PermanentSkill_2","kokomiHealingBonusDmg","Aloy_PermanentSkill_1","Aloy_PermanentSkill_2","cryoDmgBonus","defaultPassiveFn","Reaction","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","Map","set","Physical","element","get","isNaN","prevValue","CritType","calculateBaseDamage","multiplier","scalingType","flatDmg","Attack","Defense","Hp","calculateAmplifyingReactionMultiplier","reaction","amplifyingStrength","triggerElement","Melt","Vaporize","calculateAmplifyingStrengthMultiplier","reactionBonus","vaporizeDmgBonus","meltDmgBonus","calculateTotalDamage","attackType","Normal","normalAttackFlatDmg","Charged","chargedAttackFlatDmg","skillFlatDmg","baseDmg","getDamageBonus","crit","critType","Crit","critDmg","Average","chargedCritRate","burstCritRate","Math","min","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","calculateHp","flatBonus","normalAttackSingle","damage","normalAttackMulti","hits","damages","i","push","chargedAttackSingle","chargedAttackMulti","aimShot","aimShotCharged","plungeAttack","Plunge","skillSingle","skillMulti","burstSingle","burstMulti","typelessAttack","None","healingValue","flatHealing","calculateHealing","hpValue","shieldHpValue","dmgAbsorption","dionaHoldSkill","calculateDmgAbsorption","atkBuffValue","attackParams","albedoTalents","talentAttackLevel","chargedDmg","slice","plungeDmg","lowPlungeDmg","highPlungeDmg","skillDmg","transientBlossomDmg","burstDmg","fatalBlossomDmg","aloyTalents","aimShotDmg","chargedAimShotDmg","freezeBombDmg","chillwaterBombletDmg","amberTalents","explosionDmg","baronBunnyHp","dmgPerWave","totalDmg","talentValue","ayakaTalents","cuttingDmg","bloomDmg","barbaraTalents","hpRegenContinuous","hpRegenOnHit","dropletDmg","hpRegen","beidouTalents","chargedSpinDmg","chargedFinalDmg","shieldHp","dmgBonusOnHitTaken","lightningDmg","bennettTalents","pressDmg","chargeLevel1Dmg","chargeLevel2Dmg","hpRegenContinuousPerSecond","chongyunTalents","dilucTalents","slashingDmg","dot","dionaTalents","icyPawDmgPerPaw","shieldHpPress","shieldHpHold","continuousFieldDmg","hpRegenContinuousTime","eulaTalents","holdDmg","icewhirlBrandDmg","lightfallSwordBaseDmg","lightfallSwordStackDmg","fischlTalents","ozDmg","summoningDmg","fallingThunderDmg","ganyuTalents","aimShotChargeLevel1","frostflakeArrowDmg","frostflakeArrowBloomDmg","iceLotusHp","iceShardDmg","hutaoTalents","bloodBlossomDmg","burstDmgLowHp","hpRegenLowHp","jeanTalents","fieldEnterExitDmg","fieldActivationHealing","kaeyaTalents","kazuhaTalents","dotElementalAbsorption","keqingTalents","lightningStilettoDmg","thunderclapSlashDmg","burstInitDmg","consecutiveSlashDmg","lastAttackDmg","kleeTalents","jumpyDumptyDmg","mineDmg","sparksNSplashDmg","kokomiTalents","getKokomiNormalAttackModifier","getKokomiChargedAttackModifier","rippleDmg","getKokomiSkillModifier","newModifier","normalAttackBonusDmg","chargedAttackBonusDmg","skillBonusDmg","lisaTalents","holdDmgStack0","holdDmgStack1","holdDmgStack2","holdDmgStack3","monaTalents","ningguangTalents","normalAtkDmg","starJadeDmg","jadeScreenHp","dmgPerGem","noelleTalents","healing","firstSwingDmg","qiqiTalents","heraldOfFrostDmg","raidenTalents","coordinatedAtkDmg","musouNoHitotachiDmg","getInitialResolveBonus","getAttackResolveBonus","razorTalents","rosariaTalents","iceLanceDot","saraTalents","tenguJuuraiAmbushDmg","tenguJuuraiTitanbreakerDmg","tenguJuuraiStormclusterDmg","sayuTalents","fuufuuWindwheelDmg","fuufuuWhirlwindKickPressDmg","fuufuuWhirlwindKickHoldDmg","fuufuuWindwheelElementalDmg","fuufuuWhirlwindKickElementalDmg","activationDmg","activationHealing","mujimujiDarumaDmg","mujimujiDarumaHealing","sucroseTalents","tartagliaTalents","riptideFlashDmg","riptideBurstDmg","stanceChangeDmg","riptideSlashDmg","burstDmgMelee","burstDmgRanged","riptideBlastDmg","ventiTalents","xianglingTalents","guobaDmg","swing1HitDmg","swing2HitDmg","swing3HitDmg","pyronadoDmg","xiaoTalents","xingqiuTalents","swordRainDmg","xinyanTalents","swingDmg","shieldHpLevel1","shieldHpLevel2","shieldHpLevel3","pyroDot","yanfeiTalents","chargedDmgSeal0","chargedDmgSeal1","chargedDmgSeal2","chargedDmgSeal3","chargedDmgSeal4","yoimiyaTalents","getYoimiyaNormalAttackMultiplier","kindlingArrowDmg","aurousBlazeExplosionDmg","albedo","amber","barbara","beidou","bennett","diona","eula","fischl","ganyu","jean","kaeya","keqing","klee","lisa","ningguang","qiqi","razor","rosaria","sara","tartaglia","xiangling","xingqiu","xinyan","zhongli","stoneSteeleDmg","resonanceDmg","Character","hasAscended","_id","name","baseStats","statCurveMapping","talentFns","_level","_hasAscended","innateStats","passiveOptions","data","getTalentFns","getInnateStatsAt","getCharacterOptions","getAscensionLevel","getPassives","getPassiveOptions","prevAscensionLevel","Object","keys","obj","charStatCurves","entries","forEach","curve","bonus","getAllTalentFns","filter","flatMap","passiveId","getCharacterPassiveFn","oldOptionIds","newOptions","concat","keptOptionIds","mixin","getStatDisplayValue","prop","isPercentage","toFixed","round","toString","getDamageDisplayValue","values","str","length","every","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","statMixins","characterStats","weaponStats","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","totalStats","anemoDmgBonus","geoDmgBonus","hydroDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","skillDmgBonus","overloadDmgBonus","burningDmgBonus","capitalize","toUpperCase","ArtifactType","InputStat","rawValue","convertStatToDisplayValue","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","setMainStatValue","getArtifactMainStatValue","setProp","setInputValue","setValue","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","Form","Label","htmlFor","srOnly","label","Control","size","className","React","Component","FloatInput","parseFloat","InputRow","Row","children","IntInput","Picker","selectedValue","target","handleChange","onChange","as","Item","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactRarity","setArtifactLevel","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatInputValue","statObj","substats","optimizeSubstats","possibleStats","maxRolls","erThreshold","optimizeTalentType","optimizeTalentId","appState","damageModifier","maxDmg","optimalSubstatRolls","optimalArtifacts","baseArtifacts","generateBaseArtifacts","baseEr","baseErRolls","ceil","erMainStatCount","generateRollCombinationsKqm","combination","erDistribution","rolls","inputStat","sIndex","setSubStatValue","addRollsToArtifacts","talentDmg","subStatRolls","mainStats","sameMainStatCount","currentMaxRolls","combinations","current","backCombinations","prevArtifacts","iArtifact","jArtifact","Checkbox","checked","Check","Input","OptimizerBlock","substatRolls","selectedSubstats","targetTalentId","setMaxRolls","setSelectedSubstats","selected","substat","setErThreshold","setTargetTalentType","targetTalentType","setTargetTalentId","onOptimizeClick","result","updateTotalStats","setAppState","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","talentValues","Button","variant","onClick","ArtifactColumn","Col","md","xs","ArtifactSetPicker","setArtifactSetId","index","artifactSetId","sort","name1","name2","localeCompare","InputBlock","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","choice","ArtifactSetInputBlock","artifactSets","artifactSetOptions","artifactSet","updateArtifactSetBonuses","setArtifactSetPieces","CharacterPicker","setCharacterId","CharacterInputBlock","getOptions","setCharacterLevel","setIsCharacterAscended","isAscended","ModifierInputBlock","setEnemyLevel","updateTalentValues","setEnemyRes","setCritType","setReaction","ToggleButtonGroup","ToggleButton","defaultSetBonus","Relic_ReactionWindEnhance","Relic_ReactionFireEnhance","extraStatsFn","Relic_ExtraAtkCritUp","Relic_AllElemResistUp","Relic_AtkAndExtraAtkUp","Relic_SkillDamageUp","Relic_MeleeAttackUp","Relci_RangerAttackUp","Relic_ElementalBurstUp","Relic_ElementalBurstUpByChargeEfficiency","Relic_GiantKiller","Relic_LowHPGainExtraCritRate","Relic_SkillEnhanceNormalAtkAndExtraAtk","Relic_ReactionGainExtraElemMasteryForTeam","Relic_CriticUpAgainstIceAndFrozen","Relic_DamageUpAgainstElectric","Relic_DamageUpAgainstFireAndBurning","Relic_SkillEnhanceCured","Relic_TeamAtkupAfterElementalBurst","Relic_KillEnhanceExtraAtk","Relic_ElementDmgUpAfterCrystalShield","Relic_ShieldEnhanceAtk","Relic_WaterSkillEnhanceNormalAtkAndExtraAtk","Relic_ShieldCostUpWhenElementalArtHit","Relic_AttackUpWhenNormalAtkAndExtraAtkHit","Relic_NormalDamageUpIfCostEnergy","Relic_ReactionElectricEnhance","Relic_AbsorbTeamElemResist","Relic_ElemDmgEnhanceElemResist","Relic_KillingRefreshSkill","Relic_UltGainEnergyForTeam","Relic_RestoreEnergyGainExtraEnergyForTeam","Relic_ChestHealSelf","Relic_CoinHealSelf","Relic_UltHealSelf","Relic_FireResistance","Relic_WaterResistance","Relic_ElectricResistance","Relic_IceResistance","ArtifactSet","bonusThresholds","setBonusData","_pieces","setBonusSets","setBonuses","getSetBonusSetsAt","getSetBonuses","prevPieces","setBonus","statBonus","extraBonus","extraBonusSet","extraBonuses","setBonusType","WeaponOption","weaponPassives","Weapon_Pole_DamageUpToWaterEnemy","Weapon_Pole_Homa","totalHp","Weapon_Pole_Mori","Weapon_Pole_Narukami","Weapon_Claymore_MillenniaTuna","Weapon_Catalyst_NormalAttackAndSkillAttack","Weapon_Catalyst_Kaleido","getWeaponPassiveFn","Weapon","rank","passiveDataSet","_weaponLevel","_refinement","getWeaponPassiveData","getPassive","getStatsAt","weaponLevel","weaponStatCurves","passiveParams","shouldKeepValue","newOption","statBonuses","SaveBlock","onSaveClick","saveInputName","save","characterHasAscended","weaponHasAscended","weaponRefinement","artifactSetPieces","weaponOptions","saves","window","localStorage","setItem","JSON","stringify","addSave","onSaveInputChange","onLoadClick","selectedSave","refreshApp","savedArtifact","artifactType","characterOption","weaponOption","artifactSetOption","loadSave","onLoadInputChange","onDeleteClick","showDeleteWarning","onModalConfirm","deleteSave","onModalHide","getItem","parse","placeholder","Modal","show","onHide","Footer","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","setIsWeaponAscended","setWeaponRefinement","InputColumn","ArtifactSetStatBlock","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","TalentColumn","App","modifierMixins","callback","newArtifactSets","getStatMixins","newChar","getModifierMixins","getDamageModifier","fns","fn","characterPassiveMixins","getPassiveModifierMixins","weaponPassiveMixins","artifactSetMixins","characterOptionMixins","weaponOptionMixins","artifactSetOptionMixins","unarrangedMixins","groupedMixins","array","getPassiveStatMixins","Container","fluid","Navbar","sticky","bg","Nav","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kj2qBA4DIA,EACAC,EACAC,E,6PA1CSC,EAAcC,EACdC,EAAoBC,EACpBC,EAAgBC,EAGvBC,EACJC,EAwCeC,QAAO,SAACC,EAAKC,GAE1B,OADAD,EAAIC,EAASC,IAAMD,EACZD,IACN,IAzCCG,EA4CN,SACEC,GAEA,OAAOA,EAAQL,QAAO,SAACC,EAAKC,GAI1B,OAHAD,EAAIC,EAASI,aAAeJ,EAASK,kBAAkBC,KACrD,SAACC,GAAD,OAAeA,EAAUC,oBAEpBT,IACN,IApD+BU,CAClCC,GAEIC,EAoDN,SAAuCR,GACrC,OAAOA,EAAQL,QAAO,SAACC,EAAKa,GAE1B,OADAb,EAAIa,EAAUC,OAASD,EAAUE,WAC1Bf,IACN,IAxD0BgB,CAC7BC,GAEIC,EAwDN,SAA2Bd,GACzB,OAAOA,EAAQL,QAAO,SAACC,EAAKkB,GAE1B,OADAlB,EAAIkB,EAAWhB,IAAMgB,EACdlB,IACN,IA5DcmB,CACjBC,GAEIC,EA4DN,SACEjB,GAEA,OAAOA,EAAQL,QAAO,SAACC,EAAKkB,GAI1B,OAHAlB,EAAIkB,EAAWI,UAAYJ,EAAWZ,kBAAkBC,KACtD,SAACC,GAAD,OAAeA,EAAUC,oBAEpBT,IACN,IApE4BuB,CAC/BC,GAEIC,EAoEN,SAAoCrB,GAClC,OAAOA,EAAQL,QAAO,SAACC,EAAKa,GAE1B,OADAb,EAAIa,EAAUC,OAASD,EAAUE,WAC1Bf,IACN,IAxEuB0B,CAC1BC,GAEIC,EAwEN,SAA2BxB,GACzB,OAAOA,EAAQL,QAAO,SAACC,EAAK6B,GAC1B,IAAMC,EAAmBD,EAAcE,QAEnCH,EAAiC,CACnCI,OAAQF,EAAiBE,OAAOjC,QAAO,SAACkC,EAAUpB,GAEhD,OADAoB,EAASpB,EAAUC,OAASD,EAAUqB,OAC/BD,IACN,IAEHE,MAAOL,EAAiBK,MAAMpC,QAAO,SAACkC,EAAUpB,GAE9C,OADAoB,EAASpB,EAAUC,OAASD,EAAUqB,OAC/BD,IACN,IAEHG,MAAON,EAAiBM,MAAMrC,QAAO,SAACkC,EAAUpB,GAE9C,OADAoB,EAASpB,EAAUC,OAASD,EAAUqB,OAC/BD,IACN,IAEHI,SAAUP,EAAiBO,UAI7B,OADArC,EAAI6B,EAAcxB,aAAeuB,EAC1B5B,IACN,IAjGcsC,CACjBT,GAEIU,EAiGN,SAAgCnC,GAC9B,OAAOA,EAAQL,QAAO,SAACC,EAAKwC,GAE1B,OADAxC,EAAIwC,EAAQtC,IAAMsC,EACXxC,IACN,IArGmByC,CACtBC,GAEIC,EAqGN,SAAqCvC,GACnC,OAAOA,EAAQL,QAAO,SAACC,EAAKwC,GAK1B,OAJAxC,EAAIwC,EAAQI,OAASJ,EAAQK,YAAY9C,QAAO,SAAC+C,EAAUtC,GAEzD,OADAsC,EAAStC,EAAUuC,gBAAkBvC,EAC9BsC,IACN,IACI9C,IACN,IA5GwBgD,CAC3BC,GAEIC,EACJC,EACIC,EAAoBC,EA2G1B,SAASC,EAAWpD,EAAYqD,GAC9B,OAAOA,EAAQrD,GAGjB,SAASsD,EACPtD,EACAqD,GAEA,OAAOA,EAAQrD,GAGjB,SAASuD,EACP3C,EACAC,GAEA,OAAOA,EAAWD,GAIb,SAAS4C,EAAiBxD,GAC/B,OAAOoD,EAAQpD,EAAIL,GAWd,SAAS8D,GAAczD,GAC5B,OAAOoD,EAAQpD,EAAIgB,GAed,SAAS0C,GACd9C,EACAL,GAEA,OAAOA,EAAiBK,GAGnB,SAAS+C,GAAc3D,GAC5B,OAAO0B,EAAW1B,GAGpB,IAAM4D,GAA8BC,MAAM,IAAIC,KAAKC,KAE5C,SAASC,GACdC,EACArD,EACAiB,GAEA,IAAMqC,EAAcrC,EAAQoC,GAAMrD,GAClC,YAAoBuD,IAAhBD,EACKA,EAEAN,GAIJ,SAASQ,GAAmBpE,GACjC,OAAOoD,EAAQpD,EAAIqC,GAGd,SAASgC,GAAwBrE,GACtC,OAAOoD,EAAQpD,EAAIyC,GAGd,SAAS6B,GAA0BtE,EAAYuE,GAAiB,IAAD,MAC9DvC,EAAM,UAAGqC,GAAwBrE,UAA3B,iBAAG,EAA8BuE,UAAjC,iBAAG,EAAuCC,kBAA1C,aAAG,EAAmDxC,OAClE,cAAOA,QAAP,IAAOA,IAAU4B,GAWZ,SAASa,GACdC,EACAvC,GAEA,OAAOA,EAASwC,QAAQD,G,IChPdE,GAMAC,GAUAC,GASAC,GC1CSC,GAGnB,WAAYhF,GAAa,yBAFzBA,QAEwB,EACtBiF,KAAKjF,GAAKA,GCJOkF,G,kDAGnB,aAAqD,IAAD,EAAxClF,EAAwC,uDAA3B,GAAImF,EAAuB,uDAAH,EAAG,4BAClD,cAAMnF,IAHRmF,eAEoD,EAElD,EAAKA,UAAYA,EAFiC,E,UAHPH,IC0BhCI,GADa,C,kDAf1B,aAAe,IAAD,8BACZ,cAAM,kBAAmB,IAJ3BC,MAAQ,GAGM,EAFdC,QAAU,CAAC,OAAQ,UAAW,QAAS,QAEzB,EAIdC,UAAY,CACVC,MAAO,SAACC,GACN,GAAmB,KAAf,EAAKJ,MAAc,CAAC,IAAD,EACfrD,EAASsC,GAA0B,eAAgB,GACzDmB,EAAM,GAAD,OAAI,EAAKJ,MAAT,aACHrD,EAAO,IAAP,UAAayD,EAAM,GAAD,OAAI,EAAKJ,MAAT,oBAAlB,QAA+C,MATzC,E,UANNH,KCoBKQ,GADU,C,kDAdvB,aAAe,IAAD,8BACZ,cAAM,eAAgB,IAHxBL,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,EACRrD,EAASsC,GAA0B,YAAa,GACtDmB,EAAME,SAAW3D,EAAO,IAAP,UAAayD,EAAME,gBAAnB,QAA+B,MARxC,E,UALNT,KC2CKU,GAJgB,C,kDAlC7B,aAAe,IAAD,8BACZ,cAAM,yBAA0B,IAHlCP,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,EACRrD,EAASsC,GAA0B,kBAAmB,GAC5DmB,EAAME,SAAW3D,EAAO,IAAP,UAAayD,EAAME,gBAAnB,QAA+B,MARxC,E,UALNT,I,kDAyBR,aAAe,IAAD,8BACZ,cAAM,2BAA4B,IAHpCG,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,EACRrD,EAASsC,GAA0B,kBAAmB,GAC5DmB,EAAME,SAAW3D,EAAO,IAAP,UAAayD,EAAME,gBAAnB,QAA+B,MARxC,E,UALNT,KCAKW,GADqB,C,kDAdlC,aAAe,IAAD,8BACZ,cAAM,0BAA2B,IAHnCR,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,EACRrD,EAASsC,GAA0B,uBAAwB,GACjEmB,EAAMK,gBAAkB9D,EAAO,IAAP,UAAayD,EAAMK,uBAAnB,QAAsC,MARtD,E,UALNZ,KCoBKa,GADW,C,kDAdxB,aAAe,IAAD,8BACZ,cAAM,gBAAiB,IAHzBV,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,EACRrD,EAASsC,GAA0B,aAAc,GACvDmB,EAAMO,SAAWhE,EAAO,IAAP,UAAayD,EAAMO,gBAAnB,QAA+B,MARxC,E,UALNd,KC0BKe,GADa,C,kDApB1B,aAAe,IAAD,8BACZ,cAAM,wBAAyB,IAHjCZ,MAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAQ,EAAG,CAAC,IAAD,IAEZa,EAAK,UADU7B,GAAwB,wBAClB,GAAG8B,QAAQC,MACpC,kBAAuB,iBAAvB,EAAGC,eADM,aAAG,EAEXhB,MAECiB,EAAS,EAAKjB,MACdiB,EAAS,IAAGA,EAAS,GACzBb,EAAMc,aAAeD,GAAUJ,EAAQ,IAAlB,UAAwBT,EAAMc,oBAA9B,QAA8C,MAd3D,E,UALNrB,KCqBKsB,GADa,C,kDAf1B,aAAe,IAAD,8BACZ,cAAM,kBAAmB,IAH3BnB,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,IACRrD,EAASsC,GAA0B,eAAgB,GACzDmB,EAAMgB,eAAiBzE,EAAO,IAAP,UAAayD,EAAMgB,sBAAnB,QAAqC,GAC5DhB,EAAMK,gBAAkB9D,EAAO,IAAP,UAAayD,EAAMK,uBAAnB,QAAsC,MATtD,E,UALNZ,KCoBKwB,GADW,C,kDAdxB,aAAe,IAAD,8BACZ,cAAM,gBAAiB,IAHzBrB,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,EACRrD,EAASsC,GAA0B,aAAc,GACvDmB,EAAMkB,iBAAmB3E,EAAO,IAAP,UAAayD,EAAMkB,wBAAnB,QAAuC,MARxD,E,UALNzB,KCoBK0B,GADW,C,kDAdxB,aAAe,IAAD,8BACZ,cAAM,gBAAiB,IAHzBvB,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,EACRrD,EAASsC,GAA0B,aAAc,GACvDmB,EAAMO,SAAWhE,EAAO,IAAP,UAAayD,EAAMO,gBAAnB,QAA+B,MARxC,E,UALNd,KCoBK2B,GADc,C,kDAd3B,aAAe,IAAD,8BACZ,cAAM,mBAAoB,IAH5BxB,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,EACRrD,EAASsC,GAA0B,gBAAiB,GAC1DmB,EAAMqB,YAAc9E,EAAO,IAAP,UAAayD,EAAMqB,mBAAnB,QAAkC,MAR9C,E,UALN5B,KCqBK6B,GADc,C,kDAf3B,aAAe,IAAD,8BACZ,cAAM,mBAAoB,IAH5B1B,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,IACRrD,EAASsC,GAA0B,gBAAiB,GAC1DmB,EAAMgB,eAAiBzE,EAAO,IAAP,UAAayD,EAAMgB,sBAAnB,QAAqC,GAC5DhB,EAAMK,gBAAkB9D,EAAO,IAAP,UAAayD,EAAMK,uBAAnB,QAAsC,MATtD,E,UALNZ,KCoBK8B,GADe,C,kDAd5B,aAAe,IAAD,8BACZ,cAAM,oBAAqB,IAH7B3B,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,EACRrD,EAASsC,GAA0B,iBAAkB,GAC3DmB,EAAMwB,SAAWjF,EAAO,IAAP,UAAayD,EAAMwB,gBAAnB,QAA+B,MARxC,E,UALN/B,KC0BKgC,GADU,C,kDApBvB,aAAe,IAAD,8BACZ,cAAM,eAAgB,IAHxB7B,MAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,IAEqB,EAIA,IANfzD,EAASsC,GAA0B,YAAa,GAElD,EAAKe,OAAS,IAChBI,EAAMwB,SAAWjF,EAAO,IAAP,UAAayD,EAAMwB,gBAAnB,QAA+B,IAG9C,EAAK5B,OAAS,IAChBI,EAAMwB,SAAWjF,EAAO,IAAP,UAAayD,EAAMwB,gBAAnB,QAA+B,GAChDxB,EAAM0B,iBAAmBnF,EAAO,IAAP,UAAayD,EAAM0B,wBAAnB,QAAuC,MAdxD,E,UALNjC,KCqBKkC,GADgB,C,kDAf7B,aAAe,IAAD,8BACZ,cAAM,qBAAsB,IAH9B/B,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,IACRrD,EAASsC,GAA0B,kBAAmB,GAC5DmB,EAAMgB,eAAiBzE,EAAO,IAAP,UAAayD,EAAMgB,sBAAnB,QAAqC,GAC5DhB,EAAMK,gBAAkB9D,EAAO,IAAP,UAAayD,EAAMK,uBAAnB,QAAsC,MATtD,E,UALNZ,KCuBKmC,GADU,C,kDAjBvB,aAAe,IAAD,8BACZ,cAAM,eAAgB,IAHxBhC,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,MAERa,EADe7B,GAAwB,0BAClB,GAAGG,WAAWxC,OAAO,GAChDyD,EAAMgB,eAAiBP,GAAK,UAAIT,EAAMgB,sBAAV,QAA4B,GACxDhB,EAAMK,gBAAkBI,GAAK,UAAIT,EAAMK,uBAAV,QAA6B,GAC1DL,EAAM6B,eAAiBpB,GAAK,UAAIT,EAAM6B,sBAAV,QAA4B,MAXhD,E,UALNpC,KCqBKqC,GADS,C,kDAftB,aAAe,IAAD,8BACZ,cAAM,cAAe,IAHvBlC,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,IACRrD,EAASsC,GAA0B,yBAA0B,GACnEmB,EAAMwB,SAAWjF,EAAO,IAAP,UAAayD,EAAMwB,gBAAnB,QAA+B,GAChDxB,EAAM+B,eAAiBxF,EAAO,IAAP,UAAayD,EAAM+B,sBAAnB,QAAqC,MATpD,E,UALNtC,KCoBKuC,GADe,C,kDAd5B,aAAe,IAAD,8BACZ,cAAM,oBAAqB,IAH7BpC,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAO,CAAC,IAAD,EACRrD,EAASsC,GAA0B,iBAAkB,GAC3DmB,EAAMO,SAAWhE,EAAO,IAAP,UAAayD,EAAMO,gBAAnB,QAA+B,MARxC,E,UALNd,M,SnBaEN,K,gBAAAA,E,cAAAA,E,eAAAA,Q,cAMAC,K,cAAAA,E,YAAAA,E,kBAAAA,E,UAAAA,E,cAAAA,E,YAAAA,E,qBAAAA,Q,cAUAC,K,YAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,cAAAA,E,eAAAA,Q,cASAC,K,gBAAAA,E,kBAAAA,E,SAAAA,Q,SoBhBG2C,GADmB,C,kDAdhC,aAAe,IAAD,8BACZ,cAAM,wBAAyB,IAJjCrC,MAAQ,GAGM,EAFdC,QAAU,CAACT,GAAQ8C,KAAM9C,GAAQ+C,QAAS/C,GAAQgD,MAAOhD,GAAQiD,MAEnD,EAIdC,cAAgB,CACdvC,MAAO,SAACwC,GACN,GAAmB,KAAf,EAAK3C,MAAc,CACrB,IAAMrD,EAASsC,GAA0B,qBAAsB,GAC/D0D,EAASC,kBAAkBC,IAAI,EAAK7C,MAAkBrD,EAAO,OARrD,E,UANNkD,KCLWiD,G,kDACnB,aAA8B,IAAlBnI,EAAiB,uDAAJ,GAAI,uCACrBA,G,UAFmCgF,ICsD9BoD,GADK,C,kDAtClB,aAAe,IAAD,8BACZ,cAAM,SAHR/C,MAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SACLC,EACA4C,EACAC,EACAC,GAEA,GAAI,EAAKlD,MAAQ,EAAG,CAClB,IAMqB,EAGd,EATDmD,EAAcxE,GAClBY,GAAW6D,MACXH,EACA3E,GAAc,SAGhB,GAAI,EAAK0B,OAAS,EAEhBI,EAAMgB,eAAiB+B,EAAY,IAAZ,UAAkB/C,EAAMgB,sBAAxB,QAA0C,QAEjEhB,EAAMgB,eACJ+B,EAAY,EAAKnD,MAAQ,IAAzB,UAA+BI,EAAMgB,sBAArC,QAAuD,MAvBnD,EA6BdsB,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,OAAS,IAChB2C,EAASU,eAAiB7D,GAAQ8C,QAhC1B,E,UALNQ,KCaKQ,GADM,C,kDAbnB,aAAe,IAAD,8BACZ,cAAM,iBAHRtD,OAAQ,EAEM,EAId0C,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,QACP2C,EAASY,SAAW/D,GAAQ8C,QAPpB,E,UALNQ,KCmBKU,GADmC,C,kDAbhD,aAAe,IAAD,8BACZ,cAAM,iBAHRxD,OAAQ,EAEM,EAId0C,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,QACP2C,EAASY,SAAW/D,GAAQ8C,QAPpB,E,UALNQ,KC4CKW,GADgC,C,kDAhC7C,aAAe,IAAD,8BACZ,cAAM,eAHRzD,OAAQ,EAEM,EAId0C,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,QACP2C,EAASY,SAAW/D,GAAQiD,QAPpB,EAYdvC,UAAY,CACVC,MAAO,SACLC,EACA4C,EACAU,EACAR,EACAS,GAEA,GAAI,EAAK3D,OAAS2D,GAAkB,EAAG,CAAC,IAAD,MAC/BhH,EAAM,UAAG2B,GAAc,SAASxB,SAASiE,MAC7C,SAAC6C,GAAD,MAAoC,2BAAnBA,EAAYjJ,aADnB,aAAG,EAEZgC,OACGuE,EAAY,iBAAGvE,QAAH,IAAGA,OAAH,EAAGA,EAAS,UAAZ,QAAkB+B,IAEpC0B,EAAMc,aAAeA,GAAY,UAAId,EAAMc,oBAAV,QAA0B,MA1BnD,E,UALN4B,KC8CKe,GADM,C,kDAxCnB,aAAe,IAAD,8BACZ,cAAM,yBAHR7D,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SACLC,EACA4C,EACAC,EACAC,GAEA,GAAI,EAAKlD,MAAO,CAAC,IAAD,QACVmD,EAAcxE,GAChBY,GAAW6D,MACXH,EACA3E,GAAc,UAMZwF,IAFF,UAAC1D,EAAM2D,cAAP,QAAiB,IAAM,aAAK3D,EAAM4D,eAAX,QAAsB,KAA7C,UACC5D,EAAM6D,cADP,QACiB,IACUd,EAAY,GACrCW,EAAe1D,EAAM8D,QAAUf,EAAY,KAC7CW,EAAe1D,EAAM8D,QAAUf,EAAY,IAG7C/C,EAAM+D,QAAUL,GAAY,UAAI1D,EAAM+D,eAAV,QAAqB,MA1BzC,EA+BdzB,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,QACP2C,EAASY,SAAW/D,GAAQiD,QAlCpB,E,UALNK,KCaKsB,G,kDAbb,aAAe,IAAD,8BACZ,cAAM,wBAJRpE,MAAQ,GAGM,EAFdC,QAAU,CAACT,GAAQ8C,KAAM9C,GAAQ+C,QAAS/C,GAAQgD,MAAOhD,GAAQiD,MAEnD,EAIdC,cAAgB,CACdvC,MAAO,SAACwC,GACa,KAAf,EAAK3C,QACP2C,EAAS0B,oBAAsB,EAAKrE,SAP5B,E,UANN8C,ICoBKwB,GADO,C,kDAbpB,aAAe,IAAD,8BACZ,cAAM,wBAHRtE,OAAQ,EAEM,EAId0C,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,QACP2C,EAAS4B,eAAiB/E,GAAQgF,SAP1B,E,UALN1B,IAkBmCsB,ICD9BK,GADO,C,kDAbpB,aAAe,IAAD,8BACZ,cAAM,gBAHRzE,OAAQ,EAEM,EAId0C,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,QACP2C,EAAS+B,aAAc,KAPf,E,UALN5B,KCiDK6B,GADO,C,kDApCpB,aAAe,IAAD,8BACZ,cAAM,gBAHR3E,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SACLC,EACA4C,EACAU,EACAkB,GAEA,GAAI,EAAK5E,MAAO,CAAC,IAAD,QACV6E,EAAclG,GAChBY,GAAWuF,MACXF,EACAtG,GAAc,WAGVyG,GACJ,UAAC3E,EAAM4E,eAAP,QAAkB,IAAM,aAAK5E,EAAM6E,gBAAX,QAAuB,KAA/C,UACC7E,EAAM8E,eADP,QACkB,GAEpB9E,EAAM+D,SAAU,UAAC/D,EAAM+D,eAAP,QAAkB,GAAKY,EAAWF,EAAY,MAtBtD,EA2BdnC,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,QACP2C,EAASY,SAAW/D,GAAQ2F,OA9BpB,E,UALNrC,KCmDKsC,GADO,C,kDA5CpB,aAAe,IAAD,8BACZ,cAAM,gBAHRpF,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SACLC,EACA4C,EACAC,EACAC,GAEA,GAAI,EAAKlD,MAAO,CAAC,IAAD,EAORqF,EAA4B,GANnB1G,GACbY,GAAW6D,MACXH,EACA3E,GAAc,WAGa,GAC7B8B,EAAMiF,cAAgBA,GAAa,UAAIjF,EAAMiF,qBAAV,QAA2B,MAnBtD,E,UALNvC,I,kDAoCR,aAAe,IAAD,8BACZ,cAAM,YAHR9C,MAAQ,EAEM,EAId0C,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,MAAQ,EAAG2C,EAAS2C,cAAgB,EACpC,EAAKtF,MAAQ,GAAI2C,EAAS2C,cAAgB,GAC9C3C,EAAS2C,cAAgB,EAAKtF,QARzB,E,UALN8C,KCzCKyC,GADK,CAACnB,ICCNoB,GADQ,CAACpB,ICkBXqB,GAA6D,CACxEC,MAAOpC,GACPqC,MAAOlC,GACPmC,MCrBmB,CAACxB,IDsBpByB,KE2BkB,C,kDAlClB,aAAe,IAAD,8BACZ,cAAM,cAHR7F,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SACLC,EACA4C,EACAU,EACAkB,GAEA,GAAI,EAAK5E,MAAO,CAAC,IAAD,MACV6E,EAAclG,GAChBY,GAAWuF,MACXF,EACAtG,GAAc,SAGhB8B,EAAMgB,eAAiByD,EAAY,IAAZ,UAAkBzE,EAAMgB,sBAAxB,QAA0C,GACjEhB,EAAMK,gBAAkBoE,EAAY,IAAZ,UAAkBzE,EAAMK,uBAAxB,QAA2C,GACnEL,EAAM6B,eAAiB4C,EAAY,IAAZ,UAAkBzE,EAAM6B,sBAAxB,QAA0C,MApBzD,EAyBdS,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,QACP2C,EAASY,SAAW/D,GAAQgF,SA5BpB,E,UALN1B,KFaRgD,OAAQnB,GACRoB,SAAUvC,GACVwC,QAASR,GACTS,MAAOpC,GACPqC,OAAQ5B,GACR6B,OGKoB,C,kDAvBpB,aAAe,IAAD,8BACZ,cAAM,eAHRnG,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SACLC,EACA4C,EACAU,EACAkB,GAEA,GAAI,EAAK5E,MAAO,CAAC,IAAD,EACR6E,EAAclG,GAClBY,GAAWuF,MACXF,EACAtG,GAAc,WAEhB8B,EAAMK,gBAAkBoE,EAAY,IAAZ,UAAkBzE,EAAMK,uBAAxB,QAA2C,MAjB3D,E,UALNqC,KHwBRsD,QINqB,C,kDAdrB,aAAe,IAAD,8BACZ,cAAM,iBAHRpG,OAAQ,EAEM,EAId0C,cAAgB,CACdvC,MAAO,SAACwC,GACF,EAAK3C,QACP2C,EAASU,eAAiB7D,GAAQiD,KAClCE,EAAS0D,cAAe,KARhB,E,UALNvD,KJ0BRwD,OAAQlB,GACRmB,KAAMhB,GACNiB,OAAQ/B,GACRgC,KAAM1D,GACN2D,KKAkB,C,kDAxBlB,aAAe,IAAD,8BACZ,cAAM,SAHR1G,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SACLC,EACA4C,EACAU,EACAkB,GAEA,GAAI,EAAK5E,MAAO,CAAC,IAAD,EACR6E,EAAclG,GAClBY,GAAWuF,MACXF,EACAtG,GAAc,SAGhB8B,EAAMO,SAAWkE,EAAY,IAAZ,UAAkBzE,EAAMO,gBAAxB,QAAoC,MAlB7C,E,UALNmC,MCGJ6D,GAAkC,GAUjC,SAASC,GACdC,GAEA,MAA8D,mBAA/CA,EAAqC7G,MAG/C,SAAS8G,GACdD,GAEA,YAAwD/H,IAAhD+H,EAAoC5G,QAGvC,SAAS8G,GACdF,GAEA,MAA6D,kBAA9CA,EAAoC7G,MAG9C,SAASgH,GACdH,GAEA,YAA6D/H,IAArD+H,EAAuC3G,UAG1C,SAAS+G,GACdJ,GAEA,YAAoE/H,IAA5D+H,EAA0CnE,cAG7C,SAASwE,GAAeL,GAC7B,GACED,GAAgBC,IAChBC,GAAeD,IACfE,GAAeF,GAEf,OAAOA,EAAO7G,MAIX,SAASmH,GAAeN,EAAgB7G,IAE1C4G,GAAgBC,IAA4B,mBAAV7G,GAClC8G,GAAeD,IACG,kBAAV7G,IACI,KAAVA,GAAgB6G,EAAO5G,QAAQmH,SAASpH,KAC1C+G,GAAeF,IAA4B,kBAAV7G,KAElC6G,EAAO7G,MAAQA,GClEJL,ICCH0H,I,SAAAA,O,mBAAAA,I,gBAAAA,Q,KCKZ,IAAMC,GAAwD,CAC5DC,wBCJK,SAA0B5K,GAqB/B,MAAO,CACLhC,GAAI,mBACJ6M,QAAS,CAvB4D,kDAOrE,aAAe,IAAD,8BACZ,cAAM,qBAHRxH,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACW,IAAD,IAAZ,EAAKJ,QACPI,EAAMgB,eAAiBzE,EAAO,IAAP,UAAayD,EAAMgB,sBAAnB,QAAqC,GAC5DhB,EAAMK,gBAAkB9D,EAAO,IAAP,UAAayD,EAAMK,uBAAnB,QAAsC,MARtD,EAPuD,UAE7DqC,ODGV2E,uBELK,SAAyB9K,GAoB9B,MAAO,CACLhC,GAAI,kBACJ6M,QAAS,CAtB2D,kDAOpE,aAAe,IAAD,8BACZ,cAAM,oBAHRxH,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACW,IAAD,EAAZ,EAAKJ,QACPI,EAAMc,aAAevE,EAAO,IAAP,UAAayD,EAAMc,oBAAnB,QAAmC,MAPhD,EAPsD,UAE5D4B,OFIV4E,yBGNK,SAA2B/K,GAuBhC,MAAO,CACLhC,GAAI,oBACJ6M,QAAS,CAzB6D,kDAOtE,aAAe,IAAD,8BACZ,cAAM,sBAHRxH,MAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GAAkB,IAAD,EACnBc,EAAe,EAAKlB,MAAQrD,EAAO,IACnC,EAAKqD,MAAQ,GAAK,EAAKA,MAAQ,MACjCkB,EAAexC,KAGjB0B,EAAMc,aAAeA,GAAY,UAAId,EAAMc,oBAAV,QAA0B,KAXjD,EAPwD,UAE9D4B,OHKV6E,yBIRK,SAA0BhL,GAC/B,MAAO,CACLhC,GAAI,mBACJ6M,QAAS,GACTtH,UAAW,CACT0H,SAAUP,GAASQ,KACnB1H,MAAO,SAACC,GAAkB,IAAD,IACjB0H,EAAc,UAAG1H,EAAM0H,sBAAT,QAA2B,EACzCC,EAAkBpL,EAAO,IAAMmL,EAAiB,GAAK,IAC3D1H,EAAM2H,gBAAkBA,GAAe,UAAI3H,EAAM2H,uBAAV,QAA6B,OJC1EC,wCKVK,SAA0BC,GAC/B,MAAO,CACLtN,GAAI,mBACJ6M,QAAS,GACTtH,UAAW,CACTC,MAAO,SAACC,GAAkB,IAAD,IACvBA,EAAME,UAAW,UAACF,EAAME,gBAAP,QAAmB,GAAK,EACrCF,EAAME,SAAW,IACnBF,EAAME,SAAW,GAGnBF,EAAM8H,aAAe,eAAQ9H,EAAM8H,oBAAd,QAA8B,OLAzDC,wBKMK,SAA0BxL,GAC/B,MAAO,CACLhC,GAAI,mBACJ6M,QAAS,GACT9E,cAAe,CACbvC,MAAO,SAACwC,GACNA,EAASyF,sBAAwBzL,EAAO,OLX9C0L,sBMPK,SAAwB1L,GAoB7B,MAAO,CACLhC,GAAI,iBACJ6M,QAAS,CAtB0D,kDAOnE,aAAe,IAAD,8BACZ,cAAM,mBAHRxH,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACW,IAAD,EAAZ,EAAKJ,QACPI,EAAMwB,SAAuB,EAAZjF,EAAO,IAAP,UAAiByD,EAAMwB,gBAAvB,QAAmC,MAP5C,EAPqD,UAE3DkB,ONMVwF,sBMkBK,SAAwB3L,GA0B7B,MAAO,CACLhC,GAAI,iBACJ6M,QAAS,CA5B0D,kDAOnE,aAAe,IAAD,8BACZ,cAAM,mBAHRxH,MAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACN,GAAI,EAAKJ,MAAQ,EAAG,CAAC,IAAD,EACdiB,EAAS,EAAKjB,MACdiB,EAAS,KACXA,EAAS,IAGX,IAAMsH,EAAe5L,EAAO,GAAKsE,EACjCb,EAAMmI,aAAeA,GAAY,UAAInI,EAAMmI,oBAAV,QAA0B,MAbnD,EAPqD,UAE3DzF,QNjBZ,SAAS0F,KACP,MAAO,G,IOrBJC,GCEgBC,G,WAGnB,aAQS,IAAD,yDAAJ,GAAI,IAPNC,aAOM,MAPE,EAOF,MANNC,YAMM,MANC,EAMD,MALNC,eAKM,MALI,EAKJ,MAJNC,WAIM,MAJA,EAIA,MAHNC,aAGM,MAHE,EAGF,MAFNC,YAEM,MAFC,EAED,MADNC,gBACM,MADK,EACL,2BAVAC,iBAUA,EACNtJ,KAAKsJ,YAAc,IAAIC,IACvBvJ,KAAKsJ,YAAYE,IAAI5J,GAAQgF,MAAOmE,GACpC/I,KAAKsJ,YAAYE,IAAI5J,GAAQ8C,KAAMsG,GACnChJ,KAAKsJ,YAAYE,IAAI5J,GAAQ+C,QAASsG,GACtCjJ,KAAKsJ,YAAYE,IAAI5J,GAAQ2F,IAAK2D,GAClClJ,KAAKsJ,YAAYE,IAAI5J,GAAQgD,MAAOuG,GACpCnJ,KAAKsJ,YAAYE,IAAI5J,GAAQiD,KAAMuG,GACnCpJ,KAAKsJ,YAAYE,IAAI5J,GAAQ6J,SAAUJ,G,uCAGzC,SAAIK,GAAmB,IAAD,EACpB,iBAAO1J,KAAKsJ,YAAYK,IAAID,UAA5B,QAAwC5K,M,iBAG1C,SAAI4K,EAAkBtJ,GACpBJ,KAAKsJ,YAAYE,IAAIE,EAAStJ,K,iBAGhC,SAAIsJ,EAAkBtJ,GACpB,IAAKwJ,MAAMxJ,GAAQ,CAAC,IAAD,EACXyJ,EAAS,UAAG7J,KAAKsJ,YAAYK,IAAID,UAAxB,QAAoC,EACnD1J,KAAKsJ,YAAYE,IAAIE,EAASG,EAAYzJ,Q,eDnC3CyI,K,YAAAA,E,cAAAA,E,0BAAAA,E,YAAAA,E,oBAAAA,E,oBAAAA,E,4BAAAA,E,gCAAAA,E,iBAAAA,Q,KAYUA,IEZViB,GFYUjB,O,SEZViB,K,YAAAA,E,YAAAA,E,mBAAAA,Q,KAMUA,UCoBf,SAASC,GAAT,GAUI,IATFvJ,EASC,EATDA,MACAwJ,EAQC,EARDA,WACAC,EAOC,EAPDA,YAOC,IANDC,eAMC,MANS,EAMT,EACD,OAAID,IAAgBnK,GAAYqK,OACvB3J,EAAM+D,QAAUyF,EAAaE,EAC3BD,IAAgBnK,GAAYsK,QAC9B5J,EAAM8E,QAAU0E,EAAaE,EAC3BD,IAAgBnK,GAAYuK,GAC9B7J,EAAM6D,OAAS2F,EAAaE,EAE5BpL,IA2CX,SAASwL,GAAT,GAQI,IAAD,IAPDC,EAOC,EAPDA,SACA/J,EAMC,EANDA,MAOMgK,EA5BR,SACED,EACAE,GAEA,OAAIF,IAAa1B,GAAS6B,KACpBD,IAAmB7K,GAAQiD,KACtB,EACE4H,IAAmB7K,GAAQ8C,KAC7B,IACK,EACL6H,IAAa1B,GAAS8B,SAC3BF,IAAmB7K,GAAQgD,MACtB,EACE6H,IAAmB7K,GAAQiD,KAC7B,IACK,EACF,EAYa+H,CACzBL,EAFD,EALDb,SAWA,GAAIc,EAAqB,EAAG,CAAC,IAAD,EAEtBK,EAAgB,EACpB,OAAQN,GACN,KAAK1B,GAAS8B,SACZE,EAAa,UAAGrK,EAAMsK,wBAAT,QAA6B,EAC1C,MACF,KAAKjC,GAAS6B,KACZG,EAAa,UAAGrK,EAAMuK,oBAAT,QAAyB,EAO1C,IAAMrJ,EAAgB,UAAGlB,EAAMkB,wBAAT,QAA6B,EAGnD,OAAO8I,GADL,EAAK,KAAO9I,GAAqB,KAAOA,GAAoBmJ,GAG9D,OAAO,EAIJ,SAASG,GAAT,GAcH,IAEoC,EAftCxK,EAaC,EAbDA,MACAwJ,EAYC,EAZDA,WACAN,EAWC,EAXDA,QAWC,IAVDO,mBAUC,MAVanK,GAAYqK,OAUzB,EATDc,EASC,EATDA,WACAlI,EAQC,EARDA,SASImH,EAAUnH,EAASmH,QACvB,GAAIe,IAAepL,GAAWqL,OAC5BhB,GAAO,UAAInH,EAASoI,2BAAb,QAAoC,OACtC,GAAIF,IAAepL,GAAWuL,QAAS,CAAC,IAAD,EAC5ClB,GAAO,UAAInH,EAASsI,4BAAb,QAAqC,OACvC,GAAIJ,IAAepL,GAAW2D,MAAO,CAAC,IAAD,EAC1C0G,GAAO,UAAInH,EAASuI,oBAAb,QAA6B,EAGtC,IAAIC,EAAUxB,GAAoB,CAChCvJ,QACAwJ,aACAC,cACAC,YAEEnJ,EAlJN,YAQI,IAAD,MAPDP,EAOC,EAPDA,MACAkJ,EAMC,EANDA,QACAuB,EAKC,EALDA,WAMIlK,EAAW,EAKf,OAJAA,GAAQ,UAAIP,EAAMO,gBAAV,QAAsB,EAC9BA,GAAQ,UAAIP,EAAM,GAAD,OAAIkJ,EAAJ,oBAAT,QAAmC,EAC3C3I,GAAQ,UAAIP,EAAM,GAAD,OAAIyK,EAAJ,oBAAT,QAAsC,GAsI/BO,CAAe,CAAEhL,QAAOkJ,UAASuB,eAE5CQ,EAAO,EACX,GAAI1I,EAAS2I,WAAa5B,GAAS6B,KACjCF,GAAQjL,EAAMoL,aACT,GAAI7I,EAAS2I,WAAa5B,GAAS+B,QAAS,CACjD,IACuC,EADnCnL,EAAWF,EAAME,SACrB,GAAIuK,IAAepL,GAAWuL,QAC5B1K,GAAQ,UAAIF,EAAMsL,uBAAV,QAA6B,OAChC,GAAIb,IAAepL,GAAWqF,MAAO,CAAC,IAAD,EAC1CxE,GAAQ,UAAIF,EAAMuL,qBAAV,QAA2B,EAErCN,GAAQO,KAAKC,IAAI,EAAGvL,GAAYF,EAAMoL,QAoBxC,OACEL,EACAxK,EACA0K,IAnBC1I,EAASmJ,eAAiB,MAC1BnJ,EAASmJ,eACR,KACCnJ,EAASoJ,WAAa,MAAQ,EAAIpJ,EAASqJ,qBA9HlD,YAQI,IAPF1C,EAOC,EAPDA,QAOC,IAND2C,WAMC,MANK,IAAIvD,GAMT,MALDwD,oBAKC,MALc,IAAIxD,GAKlB,EACGyD,EAAWF,EAAI1C,IAAID,GAAW4C,EAAa3C,IAAID,GAEnD,OAAI6C,EAAW,EACN,EAAIA,EAAW,EACbA,EAAW,IACb,EAAIA,EAEJ,GAAK,EAAIA,EAAW,GA+GJC,CAAuB,CAC9C9C,UACA2C,IAAKtJ,EAAS0J,SACdH,aAAcvJ,EAASC,oBAGEsH,GAAsC,CAC/DC,SAAUxH,EAASwH,SACnB/J,QACAkJ,YAsCJ,SAASgD,GAAT,GAUI,IATFlM,EASC,EATDA,MACAwJ,EAQC,EARDA,WACA2C,EAOC,EAPDA,UAOC,IAND1C,mBAMC,MANanK,GAAYuK,GAMzB,EACD,OAAIJ,IAAgBnK,GAAYqK,OACvB3J,EAAM+D,QAAUyF,EAAa2C,EAC3B1C,IAAgBnK,GAAYsK,QAC9B5J,EAAM8E,QAAU0E,EAAa2C,EAC3B1C,IAAgBnK,GAAYuK,GAC9B7J,EAAM6D,OAAS2F,EAAa2C,EAE5B7N,IA4CJ,SAAS8N,GAAT,GAUU,IAAD,MATdlD,EASc,EATdA,QACAM,EAQc,EARdA,WACAxJ,EAOc,EAPdA,MACAuC,EAMc,EANdA,SAkBA,MAAO,CACL8J,OAAQ,CATK7B,GAAqB,CAClCxK,QACAwJ,aACAN,QANFA,EAAO,8BACLA,SADK,QACM3G,EAASU,sBADf,QACiCV,EAASY,gBAD1C,QACsD/D,GAAQ6J,SAMnEwB,WAAYpL,GAAWqL,OACvBnI,cAKA2G,WAKG,SAASoD,GAAT,GAYU,IAAD,MAXdC,EAWc,EAXdA,KACArD,EAUc,EAVdA,QACA3M,EASc,EATdA,OACAyD,EAQc,EARdA,MACAuC,EAOc,EAPdA,SAQA2G,EAAO,8BACLA,SADK,QACM3G,EAASU,sBADf,QACiCV,EAASY,gBAD1C,QACsD/D,GAAQ6J,SAGrE,IADA,IAAMuD,EAAU,GACPC,EAAI,EAAGA,EAAIF,EAAME,IAAK,CAC7B,IAAMJ,EAAS7B,GAAqB,CAClCxK,QACAwJ,WAAYjN,EAAOkQ,GACnBvD,UACAuB,WAAYpL,GAAWqL,OACvBnI,aAEFiK,EAAQE,KAAKL,GAGf,MAAO,CACLA,OAAQG,EACRtD,WAKG,SAASyD,GAAT,GAUU,IAAD,IATdzD,EASc,EATdA,QACAM,EAQc,EARdA,WACAxJ,EAOc,EAPdA,MACAuC,EAMc,EANdA,SAiBA,MAAO,CACL8J,OAAQ,CATK7B,GAAqB,CAClCxK,QACAwJ,aACAN,QALFA,EAAO,oBAAGA,SAAH,QAAc3G,EAASY,gBAAvB,QAAmC/D,GAAQ6J,SAMhDwB,WAAYpL,GAAWuL,QACvBrI,cAKA2G,WAKG,SAAS0D,GAAT,GAYU,IAAD,IAXdL,EAWc,EAXdA,KACArD,EAUc,EAVdA,QACA3M,EASc,EATdA,OACAyD,EAQc,EARdA,MACAuC,EAOc,EAPdA,SAQA2G,EAAO,oBAAGA,SAAH,QAAc3G,EAASY,gBAAvB,QAAmC/D,GAAQ6J,SAGlD,IADA,IAAMuD,EAAU,GACPC,EAAI,EAAGA,EAAIF,EAAME,IAAK,CAC7B,IAAMJ,EAAS7B,GAAqB,CAClCxK,QACAwJ,WAAYjN,EAAOkQ,GACnBvD,UACAuB,WAAYpL,GAAWuL,QACvBrI,aAEFiK,EAAQE,KAAKL,GAGf,MAAO,CACLA,OAAQG,EACRtD,WAKG,SAAS2D,GAAT,GAQU,IAAD,EAPdrD,EAOc,EAPdA,WACAxJ,EAMc,EANdA,MACAuC,EAKc,EALdA,SAMM2G,EAAO,UAAG3G,EAASY,gBAAZ,QAAwB/D,GAAQ6J,SAU7C,MAAO,CACLoD,OAAQ,CATK7B,GAAqB,CAClCxK,QACAwJ,aACAN,UACAuB,WAAYpL,GAAWuL,QACvBrI,cAKA2G,WAKG,SAAS4D,GAAT,GAUU,IATf5D,EASc,EATdA,QACAM,EAQc,EARdA,WACAxJ,EAOc,EAPdA,MACAuC,EAMc,EANdA,SAeA,MAAO,CACL8J,OAAQ,CATK7B,GAAqB,CAClCxK,QACAwJ,WAAYA,EACZN,UACAuB,WAAYpL,GAAWuL,QACvBrI,cAKA2G,WAKG,SAAS6D,GAAT,GAUU,IAAD,MATd7D,EASc,EATdA,QACAM,EAQc,EARdA,WACAxJ,EAOc,EAPdA,MACAuC,EAMc,EANdA,SAkBA,MAAO,CACL8J,OAAQ,CATK7B,GAAqB,CAClCxK,QACAwJ,aACAN,QANFA,EAAO,8BACLA,SADK,QACM3G,EAAS4B,sBADf,QACiC5B,EAASY,gBAD1C,QACsD/D,GAAQ6J,SAMnEwB,WAAYpL,GAAW2N,OACvBzK,cAKA2G,WAKG,SAAS+D,GAAT,GAYU,IAXf/D,EAWc,EAXdA,QACAM,EAUc,EAVdA,WACAC,EASc,EATdA,YACAzJ,EAQc,EARdA,MACAuC,EAOc,EAPdA,SAiBA,MAAO,CACL8J,OAAQ,CAVK7B,GAAqB,CAClCxK,QACAwJ,aACAN,UACAO,cACAgB,WAAYpL,GAAW2D,MACvBT,cAKA2G,WAKG,SAASgE,GAAT,GAeL,IAHE,IAXFX,EAWC,EAXDA,KACArD,EAUC,EAVDA,QACA3M,EASC,EATDA,OACAyD,EAQC,EARDA,MACAuC,EAOC,EAPDA,SAQMiK,EAAU,GAEPC,EAAI,EAAGA,EAAIF,EAAME,IACxBD,EAAQE,KACNlC,GAAqB,CACnBtB,UACAM,WAAYjN,EAAOkQ,GACnBhC,WAAYpL,GAAW2D,MACvBhD,QACAuC,cAKN,MAAO,CACL8J,OAAQG,EACRtD,WAKG,SAASiE,GAAT,GAYU,IAXfjE,EAWc,EAXdA,QACAM,EAUc,EAVdA,WACAC,EASc,EATdA,YACAzJ,EAQc,EARdA,MACAuC,EAOc,EAPdA,SAiBA,MAAO,CACL8J,OAAQ,CAVK7B,GAAqB,CAClCtB,UACAM,aACAC,cACAgB,WAAYpL,GAAWqF,MACvB1E,QACAuC,cAKA2G,WAKG,SAASkE,GAAT,GAeL,IAHE,IAXFb,EAWC,EAXDA,KACArD,EAUC,EAVDA,QACA3M,EASC,EATDA,OACAyD,EAQC,EARDA,MACAuC,EAOC,EAPDA,SAQMiK,EAAU,GAEPC,EAAI,EAAGA,EAAIF,EAAME,IACxBD,EAAQE,KACNlC,GAAqB,CACnBtB,UACAM,WAAYjN,EAAOkQ,GACnBhC,WAAYpL,GAAWqF,MACvB1E,QACAuC,cAKN,MAAO,CACL8J,OAAQG,EACRtD,WAKG,SAASmE,GAAT,GAUU,IATfnE,EASc,EATdA,QACAM,EAQc,EARdA,WACAxJ,EAOc,EAPdA,MACAuC,EAMc,EANdA,SAeA,MAAO,CACL8J,OAAQ,CATK7B,GAAqB,CAClCxK,QACAwJ,aACAN,UACAuB,WAAYpL,GAAWiO,KACvB/K,cAKA2G,WAKG,SAASqE,GAAT,GAYU,IAXf/D,EAWc,EAXdA,WACAgE,EAUc,EAVdA,YAUc,IATd/D,mBASc,MATAnK,GAAYuK,GASZ,EARd7J,EAQc,EARdA,MAQc,EAPduC,SAeA,MAAO,CACL8J,OAAQ,CAndZ,YAUI,IAAD,EATDrM,EASC,EATDA,MACAwJ,EAQC,EARDA,WACAgE,EAOC,EAPDA,YAOC,IAND/D,YAiBA,OAVoBF,GAAoB,CACtCvJ,QACAwJ,aACAC,iBAJD,MANanK,GAAYuK,GAMzB,EAKCH,QAAS8D,KAMW,aAAKxN,EAAM8H,oBAAX,QAA2B,IAsbjC2F,CAAiB,CAC/BzN,QACAwJ,aACAgE,cACA/D,kBASG,SAASiE,GAAT,GAYU,IAXflE,EAWc,EAXdA,WACA2C,EAUc,EAVdA,UAUc,IATd1C,mBASc,MATAnK,GAAYuK,GASZ,EARd7J,EAQc,EARdA,MAQc,EAPduC,SAeA,MAAO,CACL8J,OAAQ,CARCH,GAAY,CACrBlM,QACAwJ,aACA2C,YACA1C,kBASG,SAASkE,GAAT,GAcU,IAbfnE,EAac,EAbdA,WACA2C,EAYc,EAZdA,UACAjD,EAWc,EAXdA,QAWc,IAVdO,mBAUc,MAVAnK,GAAYuK,GAUZ,EAUd,MAAO,CACLwC,OAAQ,CA3dZ,YAcI,IAbFrM,EAaC,EAbDA,MACAwJ,EAYC,EAZDA,WACA2C,EAWC,EAXDA,UACAjD,EAUC,EAVDA,QAUC,IATDO,mBASC,MATanK,GAAYuK,GASzB,EARDtH,EAQC,EARDA,SASIqL,EAAgB1B,GAAY,CAC9BlM,QACAwJ,aACA2C,YACA1C,gBAcF,OAVIP,IAAY9J,GAAQ2F,MAAK6I,GAAiB,UAGjBlP,IAAzBsB,EAAM+B,iBACR6L,GAAiB,EAAI5N,EAAM+B,gBAIzBQ,EAASsL,iBAAgBD,GAAiB,MAEvCA,EAgbeE,CAAuB,CAC3C9N,MAFY,EATdA,MAYEwJ,aACA2C,YACAjD,UACAO,cACAlH,SAPY,EARdA,aAwBK,SAASwL,GAAT,GAQU,IAPfvE,EAOc,EAPdA,WACAxJ,EAMc,EANdA,MAMc,EALduC,SAOA,MAAO,CACL8J,OAAQ,CAFOrM,EAAM8D,QAAU0F,IC9sBnC,OAIItL,GAAc,UAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAgHawR,GANgB,CAC7B5R,OAxG6C,CAC7C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVqK,GAAmB,CACjBL,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eA2CJ/F,MAvC4C,CAC5CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ2F,IACjByE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJkM,oBAAqB,gBAAGzO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACnB0K,GAAY,CACV/D,QAAS9J,GAAQ2F,IACjByE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD4G,YAAanK,GAAYsK,QACzB5J,QACAuC,eAyBJ9F,MArB4C,CAC5CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ2F,IACjByE,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJoM,gBAAiB,gBAAG3O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACf4K,GAAY,CACVjE,QAAS9J,GAAQ2F,IACjByE,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBC7GN,GAIIrE,GAAc,QAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAwGamS,GANc,CAC3BvS,OAhG2C,CAC3C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJsM,WAAY,gBAAG7O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVsK,GAAQ,CACNrD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJuM,kBAAmB,gBAAG9O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBuK,GAAe,CACb5D,QAAS9J,GAAQ8C,KACjBsH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eAkCJ/F,MA9B0C,CAC1CuS,cAAe,gBAAG/O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJyM,qBAAsB,gBAAGhP,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACpB0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiBJ9F,MAb0C,CAC1CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCjGN,GAIIrE,GAAc,SAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAyHawS,GANe,CAC5B5S,OAjH4C,CAC5C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJsM,WAAY,gBAAG7O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVsK,GAAQ,CACNrD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJuM,kBAAmB,gBAAG9O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBuK,GAAe,CACb5D,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eA6CJ/F,MAzC2C,CAC3C0S,aAAc,gBAAGlP,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ4M,aAAc,gBAAGnP,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZmL,GAAQ,CACNlE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAW,EACXnM,QACAuC,eA4BJ9F,MAxB2C,CAC3C2S,WAAY,gBAAGpP,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACV4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ8M,SAAU,YAAuC,IAApCrP,EAAmC,EAAnCA,MAAOuC,EAA4B,EAA5BA,SACZ+M,EAAcnC,GAAY,CAC9BjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,aAGF,OADA+M,EAAYjD,OAAO,IAAM,GAClBiD,KCnHX,GAIIpR,GAAc,SAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAwGa8S,GANe,CAC5BlT,OAhG4C,CAC5C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVqK,GAAmB,CACjBL,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAkCJ/F,MA9B2C,CAC3CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAyBJ9F,MArB2C,CAC3C+S,WAAY,gBAAGxP,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACV4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJkN,SAAU,gBAAGzP,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBClGN,GAIIrE,GAAc,WAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA+GaiT,GANiB,CAC9BrT,OAvG8C,CAC9C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBzD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACX7D,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACX7D,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACX7D,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eA0CJ/F,MAtC6C,CAC7CmT,kBAAmB,gBAAG3P,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBgL,GAAa,CACX/D,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD2K,YAAazK,GAAYR,EAASM,kBAAkB,GACpD7C,QACAuC,cAGJqN,aAAc,gBAAG5P,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZgL,GAAa,CACX/D,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD2K,YAAazK,GAAYR,EAASM,kBAAkB,GACpD7C,QACAuC,cAGJsN,WAAY,gBAAG7P,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACV0K,GAAY,CACV/D,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiBJ9F,MAb6C,CAC7CqT,QAAS,gBAAG9P,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACPgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa/I,GAAYlC,EAASiC,kBAAkB,GACpDxE,QACAuC,gBCvGN,GAIIrE,GAAc,UAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA8HasT,GANgB,CAC7B1T,OAtH6C,CAC7C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJyN,eAAgB,gBAAGhQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ0N,gBAAiB,gBAAGjQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAmDJ/F,MA/C4C,CAC5C0T,SAAU,gBAAGlQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACRoL,GAAc,CACZnE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAWpJ,GAAYR,EAASM,kBAAkB,GAClDqG,QAAS9J,GAAQ+C,QACjBnC,QACAuC,cAGJwI,QAAS,gBAAG/K,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACP0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ4N,mBAAoB,gBAAGnQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAClB0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAyBJ9F,MArB4C,CAC5C+R,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ6N,aAAc,gBAAGpQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCrHN,GAIIrE,GAAc,WAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAwIa4T,GANiB,CAC9BhU,OAhI8C,CAC9C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVqK,GAAmB,CACjBL,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAmEJ/F,MA/D6C,CAC7C8T,SAAU,gBAAGtQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJgO,gBAAiB,gBAAGvQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACf2K,GAAW,CACTX,KAAM,EACNrD,QAAS9J,GAAQiD,KACjB9F,OAAQwG,GAAYR,EAASM,kBAAkBuL,MAAM,EAAG,GACxDpO,QACAuC,cAGJiO,gBAAiB,gBAAGxQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACf2K,GAAW,CACTX,KAAM,EACNrD,QAAS9J,GAAQiD,KACjB9F,OAAQwG,GAAYR,EAASM,kBAAkBuL,MAAM,EAAG,GACxDpO,QACAuC,cAGJ2M,aAAc,gBAAGlP,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAgCJ9F,MA5B6C,CAC7CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJkO,2BAA4B,gBAAGzQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAC1BgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa/I,GAAYlC,EAASiC,kBAAkB,GACpDxE,QACAuC,cAGJf,SAAU,gBAAGxB,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACRwL,GAAa,CACXvE,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCpIN,GAIIrE,GAAc,YAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA8FaiU,GANkB,CAC/BrU,OAtF+C,CAC/C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJyN,eAAgB,gBAAGhQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ0N,gBAAiB,gBAAGjQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eA0BJ/F,MAtB8C,CAC9CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiBJ9F,MAb8C,CAC9CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCvFN,GAIIrE,GAAc,SAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA8HakU,GANe,CAC5BtU,OAtH4C,CAC5C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJyN,eAAgB,gBAAGhQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ0N,gBAAiB,gBAAGjQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eA0DJ/F,MAtD2C,CAC3C,UAAW,gBAAGwD,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiCJ9F,MA7B2C,CAC3CmU,YAAa,gBAAG5Q,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACX4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJsO,IAAK,gBAAG7Q,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACH4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ2M,aAAc,gBAAGlP,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCpHN,GAIIrE,GAAc,SAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAwIaqU,GANe,CAC5BzU,OAhI4C,CAC5C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJsM,WAAY,gBAAG7O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVsK,GAAQ,CACNrD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJuM,kBAAmB,gBAAG9O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBuK,GAAe,CACb5D,QAAS9J,GAAQ8C,KACjBsH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eA4DJ/F,MAxD2C,CAC3CuU,gBAAiB,gBAAG/Q,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACf0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJyO,cAAe,gBAAGhR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACboL,GAAc,CACZnE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAWpJ,GAAYR,EAASM,kBAAkB,GAClDqG,QAAS9J,GAAQ8C,KACjBlC,QACAuC,cAGJ0O,aAAc,gBAAGjR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZoL,GAAc,CACZnE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAWpJ,GAAYR,EAASM,kBAAkB,GAClDqG,QAAS9J,GAAQ8C,KACjBlC,QACAuC,SAAS,2BAAMA,GAAP,IAAiBsL,gBAAgB,QAiC7CpR,MA7B2C,CAC3CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ2O,mBAAoB,gBAAGlR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAClB4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ4O,sBAAuB,gBAAGnR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACrBgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa/I,GAAYlC,EAASiC,kBAAkB,GACpDxE,QACAuC,gBCnIN,GAIIrE,GAAc,QAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAuIa2U,GANc,CAC3B/U,OA/H2C,CAC3C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJyN,eAAgB,gBAAGhQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ0N,gBAAiB,gBAAGjQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eA0DJ/F,MAtD0C,CAC1C8T,SAAU,gBAAGtQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ8O,QAAS,gBAAGrR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACP0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ+O,iBAAkB,gBAAGtR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAChB0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiCJ9F,MA7B0C,CAC1CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJgP,sBAAuB,gBAAGvR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACrB4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJiP,uBAAwB,gBAAGxR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACtB4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBChIN,GAIIrE,GAAc,UAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA8GagV,GANgB,CAC7BpV,OAtG6C,CAC7C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJsM,WAAY,gBAAG7O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVsK,GAAQ,CACNrD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJuM,kBAAmB,gBAAG9O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBuK,GAAe,CACb5D,QAAS9J,GAAQ+C,QACjBqH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eAkCJ/F,MA9B4C,CAC5CkV,MAAO,gBAAG1R,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACL0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJoP,aAAc,gBAAG3R,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiBJ9F,MAb4C,CAC5CmV,kBAAmB,gBAAG5R,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjB4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCtGN,GAIIrE,GAAc,SAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAqIaoV,GANe,CAC5BxV,OA7H4C,CAC5C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJsM,WAAY,gBAAG7O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVsK,GAAQ,CACNrD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJuP,oBAAqB,gBAAG9R,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACnBuK,GAAe,CACb5D,QAAS9J,GAAQ8C,KACjBsH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJwP,mBAAoB,gBAAG/R,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAClBuK,GAAe,CACb5D,QAAS9J,GAAQ8C,KACjBsH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJyP,wBAAyB,gBAAGhS,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACvBuK,GAAe,CACb5D,QAAS9J,GAAQ8C,KACjBsH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAkCJ/F,MA9B2C,CAC3CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ0P,WAAY,gBAAGjS,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVmL,GAAQ,CACNlE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAW,EACXnM,QACAuC,eAiBJ9F,MAb2C,CAC3CyV,YAAa,gBAAGlS,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACX4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBC9HN,GAIIrE,GAAc,SAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA8Ha0V,GANe,CAC5B9V,OAtH4C,CAC5C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAkDJ/F,MA9C2C,CAC3C4V,gBAAiB,gBAAGpS,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACf0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAyCJ9F,MArC2C,CAC3CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ8P,cAAe,gBAAGrS,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJuN,QAAS,gBAAG9P,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACPgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa,EACbxN,QACAuC,cAGJ+P,aAAc,gBAAGtS,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa,EACbxN,QACAuC,gBClHN,GAIIrE,GAAc,QAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAwHa8V,GANc,CAC3BlW,OAhH2C,CAC3C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eAoDJ/F,MAhD0C,CAC1CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQgF,MACjBoF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eA2CJ9F,MAvC0C,CAC1CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQgF,MACjBoF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJiQ,kBAAmB,gBAAGxS,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjB4K,GAAY,CACVjE,QAAS9J,GAAQgF,MACjBoF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJkQ,uBAAwB,gBAAGzS,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACtBgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa/I,GAAYlC,EAASiC,kBAAkB,GACpDiF,YAAanK,GAAYqK,OACzB3J,QACAuC,cAGJoN,kBAAmB,gBAAG3P,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa/I,GAAYlC,EAASiC,kBAAkB,GACpDiF,YAAanK,GAAYqK,OACzB3J,QACAuC,gBCxHN,GAIIrE,GAAc,SAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA+FaiW,GANe,CAC5BrW,OAvF4C,CAC5C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVqK,GAAmB,CACjBL,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eA0BJ/F,MAtB2C,CAC3CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiBJ9F,MAb2C,CAC3CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCvFN,GAIIrE,GAAc,UAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAgIakW,GANgB,CAC7BtW,OAxH6C,CAC7C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVqK,GAAmB,CACjBL,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAyDJ/F,MArD4C,CAC5C8T,SAAU,gBAAGtQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQgF,MACjBoF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ8O,QAAS,gBAAGrR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACP0K,GAAY,CACV/D,QAAS9J,GAAQgF,MACjBoF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAwCJ9F,MApC4C,CAC5CmU,YAAa,gBAAG5Q,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACX4K,GAAY,CACVjE,QAAS9J,GAAQgF,MACjBoF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJsO,IAAK,gBAAG7Q,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACH4K,GAAY,CACVjE,QAAS9J,GAAQgF,MACjBoF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJqQ,uBAAwB,YAAuC,IAApC5S,EAAmC,EAAnCA,MAAOuC,EAA4B,EAA5BA,SAChC,YAAqC7D,IAAjC6D,EAAS0B,oBACJkJ,GAAY,CACjBjE,QAAS3G,EAAS0B,oBAClBuF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,aAGK,CACL8J,OAAQ,CAAC/N,SCrHjB,GAIIJ,GAAc,UAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAkIaoW,GANgB,CAC7BxW,OA1H6C,CAC7C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVqK,GAAmB,CACjBL,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eA4DJ/F,MAxD4C,CAC5CsW,qBAAsB,gBAAG9S,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACpB0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJqO,YAAa,gBAAG5Q,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACX0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJwQ,oBAAqB,gBAAG/S,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACnB2K,GAAW,CACTX,KAAM,EACNrD,QAAS9J,GAAQ+C,QACjB5F,OAAQ6B,MAAM,GAAGC,KAAK0E,GAAYR,EAASM,kBAAkB,IAC7D7C,QACAuC,eAkCJ9F,MA9B4C,CAC5CuW,aAAc,gBAAGhT,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ0Q,oBAAqB,gBAAGjT,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACnB6K,GAAW,CACTb,KAAM,EACNrD,QAAS9J,GAAQ+C,QACjB5F,OAAQ6B,MAAM,GAAGC,KAAKoG,GAAYlC,EAASiC,kBAAkB,IAC7DxE,QACAuC,cAGJ2Q,cAAe,gBAAGlT,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBC9HN,GAIIrE,GAAc,QAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA+Fa0W,GANc,CAC3B9W,OAvF2C,CAC3C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBzD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACX7D,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACX7D,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACX7D,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eAkCJ/F,MA9B0C,CAC1C4W,eAAgB,gBAAGpT,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACd0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ8Q,QAAS,gBAAGrT,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACP0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiBJ9F,MAb0C,CAC1C6W,iBAAkB,gBAAGtT,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAChB4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBC/EN,GAIIrE,GAAc,UAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAwGa8W,GANgB,CAC7BlX,OAhG6C,CAC7C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,SAAUiR,GAA8BxT,EAAOuC,MAGnD,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,SAAUiR,GAA8BxT,EAAOuC,MAGnD,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,SAAUiR,GAA8BxT,EAAOuC,MAGnD4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBzD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,SAAUkR,GAA+BzT,EAAOuC,MAGpD8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACX7D,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACX7D,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACX7D,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eA2CJ/F,MAvC4C,CAC5CsT,QAAS,gBAAG9P,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACPgL,GAAa,CACX/D,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD2K,YAAazK,GAAYR,EAASM,kBAAkB,GACpD7C,QACAuC,cAGJmR,UAAW,gBAAG1T,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT0K,GAAY,CACV/D,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,SAAUoR,GAAuB3T,EAAOuC,OA0B5C9F,MAtB4C,CAC5CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQgD,MACjBoH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDiF,YAAanK,GAAYuK,GACzB7J,QACAuC,cAGJqN,aAAc,gBAAG5P,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa/I,GAAYlC,EAASiC,kBAAkB,GACpDxE,QACAuC,gBAcN,SAASiR,GACPxT,EACAuC,GACiB,IAAD,MAChB,IAAKA,EAAS+B,YACZ,OAAO/B,EAGT,IAAMqR,EAAW,eAAQrR,GACnBsR,GACHpP,GAAYmP,EAAYpP,kBAAkB,IACzC,UAACoP,EAAY5L,6BAAb,QAAsC,IAAtC,UAA4ChI,EAAM8H,oBAAlD,QAAkE,IACpE9H,EAAM6D,OAKR,OAHA+P,EAAYjJ,oBACVkJ,GAAoB,UAAID,EAAYjJ,2BAAhB,QAAuC,GAEtDiJ,EAGT,SAASH,GACPzT,EACAuC,GACiB,IAAD,MAChB,IAAKA,EAAS+B,YACZ,OAAO/B,EAGT,IAAMqR,EAAW,eAAQrR,GACnBuR,GACHrP,GAAYmP,EAAYpP,kBAAkB,IACzC,UAACoP,EAAY5L,6BAAb,QAAsC,IAAtC,UAA4ChI,EAAM8H,oBAAlD,QAAkE,IACpE9H,EAAM6D,OAKR,OAHA+P,EAAY/I,qBACViJ,GAAqB,UAAIF,EAAY/I,4BAAhB,QAAwC,GAExD+I,EAGT,SAASD,GACP3T,EACAuC,GACiB,IAAD,EAChB,IAAKA,EAAS+B,YACZ,OAAO/B,EAGT,IAAMqR,EAAW,eAAQrR,GACnBwR,EACJtP,GAAYmP,EAAYpP,kBAAkB,GAAKxE,EAAM6D,OAGvD,OAFA+P,EAAY9I,aAAeiJ,GAAa,UAAIH,EAAY9I,oBAAhB,QAAgC,GAEjE8I,EC7KT,OAII1V,GAAc,QAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA+HauX,GANc,CAC3B3X,OAvH2C,CAC3C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQ+C,QACjBqH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQ+C,QACjBqH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQ+C,QACjBqH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQ+C,QACjBqH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBzD,QAAS9J,GAAQ+C,QACjBqH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACX7D,QAAS9J,GAAQ+C,QACjBqH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACX7D,QAAS9J,GAAQ+C,QACjBqH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACX7D,QAAS9J,GAAQ+C,QACjBqH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eA0DJ/F,MAtD0C,CAC1C8T,SAAU,gBAAGtQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ0R,cAAe,gBAAGjU,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ2R,cAAe,gBAAGlU,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ4R,cAAe,gBAAGnU,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ6R,cAAe,gBAAGpU,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiBJ9F,MAb0C,CAC1CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCxHN,GAIIrE,GAAc,QAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAuGa4X,GANc,CAC3BhY,OA/F2C,CAC3C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBzD,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACX7D,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACX7D,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACX7D,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eAkCJ/F,MA9B0C,CAC1CqU,IAAK,gBAAG7Q,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACH0K,GAAY,CACV/D,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ2M,aAAc,gBAAGlP,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ0K,GAAY,CACV/D,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiBJ9F,MAb0C,CAC1CyS,aAAc,gBAAGlP,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ4K,GAAY,CACVjE,QAAS9J,GAAQgD,MACjBoH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBC/FN,GAIIrE,GAAc,aAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAuFa6X,GANmB,CAChCjY,OA/EgD,CAChDkY,aAAc,gBAAGvU,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ6J,GAAmB,CACjBlD,QAAS9J,GAAQ2F,IACjByE,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBzD,QAAS9J,GAAQ2F,IACjByE,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJiS,YAAa,gBAAGxU,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACXoK,GAAoB,CAClBzD,QAAS9J,GAAQ2F,IACjByE,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACX7D,QAAS9J,GAAQ2F,IACjByE,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACX7D,QAAS9J,GAAQ2F,IACjByE,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACX7D,QAAS9J,GAAQ2F,IACjByE,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eAkCJ/F,MA9B+C,CAC/CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ2F,IACjByE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJkS,aAAc,gBAAGzU,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZmL,GAAQ,CACNlE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAW,EACXnM,QACAuC,eAiBJ9F,MAb+C,CAC/CiY,UAAW,gBAAG1U,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT4K,GAAY,CACVjE,QAAS9J,GAAQ2F,IACjByE,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCzEN,GAIIrE,GAAc,UAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA0HakY,GANgB,CAC7BtY,OAlH6C,CAC7C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJyN,eAAgB,gBAAGhQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ0N,gBAAiB,gBAAGjQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAsDJ/F,MAlD4C,CAC5CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ2F,IACjByE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD4G,YAAanK,GAAYsK,QACzB5J,QACAuC,cAGJ2N,SAAU,gBAAGlQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACRoL,GAAc,CACZzE,QAAS9J,GAAQ2F,IACjByE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAWpJ,GAAYR,EAASM,kBAAkB,GAClD4G,YAAanK,GAAYsK,QACzB5J,QACAuC,cAGJqS,QAAS,gBAAG5U,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACPgL,GAAa,CACX/D,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD2K,YAAazK,GAAYR,EAASM,kBAAkB,GACpD4G,YAAanK,GAAYsK,QACzB5J,QACAuC,eAyBJ9F,MArB4C,CAC5CuW,aAAc,gBAAGhT,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ4K,GAAY,CACVjE,QAAS9J,GAAQ2F,IACjByE,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJsS,cAAe,gBAAG7U,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb4K,GAAY,CACVjE,QAAS9J,GAAQ2F,IACjByE,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCnHN,GAIIrE,GAAc,QAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAoIaqY,GANc,CAC3BzY,OA5H2C,CAC3C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVqK,GAAmB,CACjBL,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eA6DJ/F,MAzD0C,CAC1CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJwS,iBAAkB,gBAAG/U,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAChB0K,GAAY,CACV/D,QAAS9J,GAAQ8C,KACjBsH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJqN,aAAc,gBAAG5P,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZgL,GAAa,CACX/D,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD2K,YAAazK,GAAYR,EAASM,kBAAkB,GACpD4G,YAAanK,GAAYqK,OACzB3J,QACAuC,cAGJoN,kBAAmB,gBAAG3P,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBgL,GAAa,CACX/D,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD2K,YAAazK,GAAYR,EAASM,kBAAkB,GACpD4G,YAAanK,GAAYqK,OACzB3J,QACAuC,eA0BJ9F,MAtB0C,CAC1CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJqS,QAAS,gBAAG5U,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACPgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa/I,GAAYlC,EAASiC,kBAAkB,GACpDiF,YAAanK,GAAYqK,OACzB3J,QACAuC,gBClIN,GAIIrE,GAAc,UAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAqMauY,GANgB,CAC7B3Y,OA7L6C,CAC7C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAgIJ/F,MA5H4C,CAC5CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ0S,kBAAmB,gBAAGjV,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjB0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eA+GJ9F,MA3G4C,CAC5CyY,oBAAqB,gBAAGlV,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACnB4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACE/E,GAAYlC,EAASiC,kBAAkB,GACvC2Q,GAAuB5S,GACzBvC,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACE/E,GAAYlC,EAASiC,kBAAkB,GACvC4Q,GAAsB7S,GACxBvC,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACE/E,GAAYlC,EAASiC,kBAAkB,GACvC4Q,GAAsB7S,GACxBvC,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACE/E,GAAYlC,EAASiC,kBAAkB,GACvC4Q,GAAsB7S,GACxBvC,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6K,GAAW,CACTb,KAAM,EACNrD,QAAS9J,GAAQ+C,QACjB5F,OAAQkI,GAAYlC,EAASiC,kBAC1B4J,MAAM,EAAG,GACTxT,KAAI,SAAC4O,GAAD,OAAgBA,EAAa4L,GAAsB7S,MAC1DvC,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACE/E,GAAYlC,EAASiC,kBAAkB,GACvC4Q,GAAsB7S,GACxBvC,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACV6K,GAAW,CACTb,KAAM,EACNrD,QAAS9J,GAAQ+C,QACjB5F,OAAQkI,GAAYlC,EAASiC,kBAC1B4J,MAAM,GAAI,IACVxT,KAAI,SAAC4O,GAAD,OAAgBA,EAAa4L,GAAsB7S,MAC1DvC,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACE/E,GAAYlC,EAASiC,kBAAkB,IACvC4Q,GAAsB7S,GACxBvC,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACE/E,GAAYlC,EAASiC,kBAAkB,IACvC4Q,GAAsB7S,GACxBvC,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACE/E,GAAYlC,EAASiC,kBAAkB,IACvC4Q,GAAsB7S,GACxBvC,QACAuC,gBAcN,SAAS4S,GAAuB5S,GAAmC,IAAD,EAChE,OACEkC,GAAYlC,EAASiC,kBAAkB,IAAvC,UAA6CjC,EAAS2C,qBAAtD,QAAuE,GAI3E,SAASkQ,GAAsB7S,GAAmC,IAAD,EAC/D,OACEkC,GAAYlC,EAASiC,kBAAkB,IAAvC,UAA6CjC,EAAS2C,qBAAtD,QAAuE,GCvN3E,OAIIhH,GAAc,SAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA8Ia4Y,GANe,CAC5BhZ,OAtI4C,CAC5C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJyN,eAAgB,gBAAGhQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ0N,gBAAiB,gBAAGjQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eA0EJ/F,MAtE2C,CAC3C8T,SAAU,gBAAGtQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ8O,QAAS,gBAAGrR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACP0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAyDJ9F,MArD2C,CAC3CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ,uBAAwB,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACtB4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACEwE,GAAazL,EAAS2L,mBAAmB,GACzCzJ,GAAYlC,EAASiC,kBAAkB,GACzCxE,QACAuC,cAGJ,uBAAwB,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACtB4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACEwE,GAAazL,EAAS2L,mBAAmB,GACzCzJ,GAAYlC,EAASiC,kBAAkB,GACzCxE,QACAuC,cAGJ,uBAAwB,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACtB4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACEwE,GAAazL,EAAS2L,mBAAmB,GACzCzJ,GAAYlC,EAASiC,kBAAkB,GACzCxE,QACAuC,cAGJ,uBAAwB,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACtB4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WACEwE,GAAazL,EAAS2L,mBAAmB,GACzCzJ,GAAYlC,EAASiC,kBAAkB,GACzCxE,QACAuC,gBCrIN,GAIIrE,GAAc,WAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA0Ga6Y,GANiB,CAC9BjZ,OAlG8C,CAC9C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAoCJ/F,MAhC6C,CAC7CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR2K,GAAW,CACTX,KAAM,EACNrD,QAAS9J,GAAQ8C,KACjB3F,OAAQwG,GAAYR,EAASM,kBAAkBuL,MAAM,EAAG,GACxDpO,QACAuC,eA0BJ9F,MAtB6C,CAC7CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR6K,GAAW,CACTb,KAAM,EACNrD,QAAS9J,GAAQ8C,KACjB3F,OAAQkI,GAAYlC,EAASiC,kBAAkB4J,MAAM,EAAG,GACxDpO,QACAuC,cAGJgT,YAAa,gBAAGvV,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACX4K,GAAY,CACVjE,QAAS9J,GAAQ8C,KACjBsH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCnGN,GAIIrE,GAAc,QAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAqHa+Y,GANc,CAC3BnZ,OA7G2C,CAC3C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJsM,WAAY,gBAAG7O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVsK,GAAQ,CACNrD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJuM,kBAAmB,gBAAG9O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBuK,GAAe,CACb5D,QAAS9J,GAAQ+C,QACjBqH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eAyCJ/F,MArC0C,CAC1CiZ,qBAAsB,gBAAGzV,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACpB0K,GAAY,CACV/D,QAAS9J,GAAQ+C,QACjBqH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJf,SAAU,gBAAGxB,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACRwL,GAAa,CACXvE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAyBJ9F,MArB0C,CAC1CiZ,2BAA4B,gBAAG1V,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAC1B4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJoT,2BAA4B,gBAAG3V,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAC1B4K,GAAY,CACVjE,QAAS9J,GAAQ+C,QACjBqH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCxGN,GAIIrE,GAAc,QAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAuKamZ,GANc,CAC3BvZ,OA/J2C,CAC3C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJyN,eAAgB,gBAAGhQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ0N,gBAAiB,gBAAGjQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAkGJ/F,MA9F0C,CAC1CqZ,mBAAoB,gBAAG7V,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAClB0K,GAAY,CACV/D,QAAS9J,GAAQgF,MACjBoF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJuT,4BAA6B,gBAAG9V,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAC3B0K,GAAY,CACV/D,QAAS9J,GAAQgF,MACjBoF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJwT,2BAA4B,gBAAG/V,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAC1B0K,GAAY,CACV/D,QAAS9J,GAAQgF,MACjBoF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJyT,4BAA6B,YAAuC,IAApChW,EAAmC,EAAnCA,MAAOuC,EAA4B,EAA5BA,SACrC,YAAqC7D,IAAjC6D,EAAS0B,oBACJgJ,GAAY,CACjB/D,QAAS3G,EAAS0B,oBAClBuF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,aAGK,CACL8J,OAAQ,CAAC/N,OAKf2X,gCAAiC,YAAuC,IAApCjW,EAAmC,EAAnCA,MAAOuC,EAA4B,EAA5BA,SACzC,YAAqC7D,IAAjC6D,EAAS0B,oBACJgJ,GAAY,CACjB/D,QAAS3G,EAAS0B,oBAClBuF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,aAGK,CACL8J,OAAQ,CAAC/N,QA6Cf7B,MAvC0C,CAC1CyZ,cAAe,gBAAGlW,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb4K,GAAY,CACVjE,QAAS9J,GAAQgF,MACjBoF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ4T,kBAAmB,gBAAGnW,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa/I,GAAYlC,EAASiC,kBAAkB,GACpDiF,YAAanK,GAAYqK,OACzB3J,QACAuC,cAGJ6T,kBAAmB,gBAAGpW,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjB4K,GAAY,CACVjE,QAAS9J,GAAQgF,MACjBoF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ8T,sBAAuB,gBAAGrW,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACrBgL,GAAa,CACX/D,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDgJ,YAAa/I,GAAYlC,EAASiC,kBAAkB,GACpDiF,YAAanK,GAAYqK,OACzB3J,QACAuC,gBCxKN,GAIIrE,GAAc,WAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA8Ga6Z,GANiB,CAC9Bja,OAtG8C,CAC9C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgF,MACjBoF,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgF,MACjBoF,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgF,MACjBoF,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgF,MACjBoF,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBzD,QAAS9J,GAAQgF,MACjBoF,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACX7D,QAAS9J,GAAQgF,MACjBoF,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACX7D,QAAS9J,GAAQgF,MACjBoF,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACX7D,QAAS9J,GAAQgF,MACjBoF,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eAyCJ/F,MArC6C,CAC7CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQgF,MACjBoF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAgCJ9F,MA5B6C,CAC7CoU,IAAK,gBAAG7Q,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACH4K,GAAY,CACVjE,QAAS9J,GAAQgF,MACjBoF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJqQ,uBAAwB,YAAuC,IAApC5S,EAAmC,EAAnCA,MAAOuC,EAA4B,EAA5BA,SAChC,YAAqC7D,IAAjC6D,EAAS0B,oBACJkJ,GAAY,CACjBjE,QAAS3G,EAAS0B,oBAClBuF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,aAGK,CACL8J,OAAQ,CAAC/N,SCjGjB,GAIIJ,GAAc,aAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA+Ma8Z,GANmB,CAChCla,OAvMgD,CAChD,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJsM,WAAY,gBAAG7O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVsK,GAAQ,CACNrD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJuM,kBAAmB,gBAAG9O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBuK,GAAe,CACb5D,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJiU,gBAAiB,gBAAGxW,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACf8K,GAAe,CACbnE,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJkU,gBAAiB,gBAAGzW,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACf8K,GAAe,CACbnE,QAAS9J,GAAQgD,MACjBoH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eA4GJ/F,MAxG+C,CAC/Cka,gBAAiB,gBAAG1W,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACf0K,GAAY,CACV/D,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNrD,QAAS9J,GAAQgD,MACjB7F,OAAQwG,GAAYR,EAASM,kBAAkBuL,MAAM,EAAG,GACxDpO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVqK,GAAmB,CACjBL,KAAM,EACNrD,QAAS9J,GAAQgD,MACjB7F,OAAQwG,GAAYR,EAASM,kBAAkBuL,MAAM,EAAG,IACxDpO,QACAuC,cAGJoU,gBAAiB,gBAAG3W,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACf0K,GAAY,CACV/D,QAAS9J,GAAQgD,MACjBoH,WAAYzG,GAAYR,EAASM,kBAAkB,IACnD7C,QACAuC,eAiCJ9F,MA7B+C,CAC/Cma,cAAe,gBAAG5W,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACb4K,GAAY,CACVjE,QAAS9J,GAAQgD,MACjBoH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJsU,eAAgB,gBAAG7W,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACd4K,GAAY,CACVjE,QAAS9J,GAAQgD,MACjBoH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJuU,gBAAiB,gBAAG9W,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACf4K,GAAY,CACVjE,QAAS9J,GAAQgD,MACjBoH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBC3MN,GAIIrE,GAAc,SAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAoIasa,GANe,CAC5B1a,OA5H4C,CAC5C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJsM,WAAY,gBAAG7O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVsK,GAAQ,CACNrD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJuM,kBAAmB,gBAAG9O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBuK,GAAe,CACb5D,QAAS9J,GAAQgF,MACjBoF,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAiDJ/F,MA7C2C,CAC3C8T,SAAU,gBAAGtQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQgF,MACjBoF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ8O,QAAS,gBAAGrR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACP0K,GAAY,CACV/D,QAAS9J,GAAQgF,MACjBoF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAgCJ9F,MA5B2C,CAC3CoU,IAAK,gBAAG7Q,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACH4K,GAAY,CACVjE,QAAS9J,GAAQgF,MACjBoF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJqQ,uBAAwB,YAAuC,IAApC5S,EAAmC,EAAnCA,MAAOuC,EAA4B,EAA5BA,SAChC,YAAqC7D,IAAjC6D,EAAS0B,oBACJkJ,GAAY,CACjBjE,QAAS3G,EAAS0B,oBAClBuF,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,aAGK,CACL8J,OAAQ,CAAC/N,SC3HjB,GAIIJ,GAAc,aAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAwHaua,GANmB,CAChC3a,OAhHgD,CAChD,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,eAkDJ/F,MA9C+C,CAC/Cya,SAAU,gBAAGjX,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAyCJ9F,MArC+C,CAC/Cya,aAAc,gBAAGlX,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ4U,aAAc,gBAAGnX,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ6U,aAAc,gBAAGpX,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJ8U,YAAa,gBAAGrX,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACX4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBClHN,GAAqDrE,GAAc,QAAnD8P,GAAhB,GAAQ3R,OAA6B0G,GAArC,GAA8BvG,MA2Ff8a,GALc,CAC3Bjb,OArF2C,CAC3C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAgBJ/F,MAZ0C,CAC1CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQgF,MACjBoF,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,gBCjFN,GAIIrE,GAAc,WAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAkGa8a,GANiB,CAC9Blb,OA1F8C,CAC9C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVqK,GAAmB,CACjBL,KAAM,EACNhQ,OAAQyR,GAAazL,EAAS2L,mBAAmBE,MAAM,EAAG,GAC1DpO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eA2BJ/F,MAvB6C,CAC7CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR2K,GAAW,CACTX,KAAM,EACNrD,QAAS9J,GAAQgD,MACjB7F,OAAQwG,GAAYR,EAASM,kBAAkBuL,MAAM,EAAG,GACxDpO,QACAuC,eAiBJ9F,MAb6C,CAC7C+a,aAAc,gBAAGxX,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ4K,GAAY,CACVjE,QAAS9J,GAAQgD,MACjBoH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBCrFN,GAIIrE,GAAc,UAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MA4Iagb,GANgB,CAC7Bpb,OApI6C,CAC7C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJyN,eAAgB,gBAAGhQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ0N,gBAAiB,gBAAGjQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAwEJ/F,MApE4C,CAC5Ckb,SAAU,gBAAG1X,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJoV,eAAgB,gBAAG3X,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoL,GAAc,CACZnE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAWpJ,GAAYR,EAASM,kBAAkB,GAClDqG,QAAS9J,GAAQiD,KACjBoH,YAAanK,GAAYsK,QACzB5J,QACAuC,cAGJqV,eAAgB,gBAAG5X,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoL,GAAc,CACZnE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAWpJ,GAAYR,EAASM,kBAAkB,GAClDqG,QAAS9J,GAAQiD,KACjBoH,YAAanK,GAAYsK,QACzB5J,QACAuC,cAGJsV,eAAgB,gBAAG7X,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACdoL,GAAc,CACZnE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAWpJ,GAAYR,EAASM,kBAAkB,GAClDqG,QAAS9J,GAAQiD,KACjBoH,YAAanK,GAAYsK,QACzB5J,QACAuC,cAGJsO,IAAK,gBAAG7Q,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACH0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAyBJ9F,MArB4C,CAC5CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ6J,SACjBO,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJuV,QAAS,gBAAG9X,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACP4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBC5IN,GAIIrE,GAAc,UAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAuHasb,GANgB,CAC7B1b,OA/G6C,CAC7C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjBlD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJyV,gBAAiB,gBAAGhY,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBzD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ0V,gBAAiB,gBAAGjY,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBzD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ2V,gBAAiB,gBAAGlY,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBzD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4V,gBAAiB,gBAAGnY,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBzD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ6V,gBAAiB,gBAAGpY,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACfoK,GAAoB,CAClBzD,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACX7D,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACX7D,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACX7D,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eA0BJ/F,MAtB4C,CAC5CgS,SAAU,gBAAGxO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR0K,GAAY,CACV/D,QAAS9J,GAAQiD,KACjBmH,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,eAiBJ9F,MAb4C,CAC5CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBC9GN,GAIIrE,GAAc,WAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MAgIa4b,GALiB,CAC9Bhc,OAzH8C,CAC9C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KACfia,GACEtK,GAAazL,EAAS2L,mBAAmB,GACzC3L,IAGJvC,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAY8O,GACVtK,GAAazL,EAAS2L,mBAAmB,GACzC3L,GAEFvC,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAY8O,GACVtK,GAAazL,EAAS2L,mBAAmB,GACzC3L,GAEFvC,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KACfia,GACEtK,GAAazL,EAAS2L,mBAAmB,GACzC3L,IAGJvC,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAY8O,GACVtK,GAAazL,EAAS2L,mBAAmB,GACzC3L,GAEFvC,QACAuC,cAGJsM,WAAY,gBAAG7O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVsK,GAAQ,CACNrD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJuM,kBAAmB,gBAAG9O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACjBuK,GAAe,CACb5D,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgW,iBAAkB,gBAAGvY,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OAChBuK,GAAe,CACb5D,QAAS9J,GAAQiD,KACjBmH,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAwBJ9F,MApB6C,CAC7CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,cAGJiW,wBAAyB,gBAAGxY,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACvB4K,GAAY,CACVjE,QAAS9J,GAAQiD,KACjBmH,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,gBAaN,SAAS+V,GACP9O,EACAjH,GAEA,OAAKA,EAAS0D,aAIPuD,EAAazG,GAAYR,EAASM,kBAAkB,GAHlD2G,EC5IX,OAIItL,GAAc,WAHR8P,GADV,GACE3R,OACO0G,GAFT,GAEEvG,MACOiI,GAHT,GAGEhI,MC4BIL,GAAmC,CACvCqc,OAAQxK,GACR5H,KAAMuI,GACN8J,MAAOzJ,GACP3J,MAAOiK,GACPoJ,QAASjJ,GACTkJ,OAAQ7I,GACR8I,QAASxI,GACT1K,SAAU+K,GACVnL,MAAOoL,GACPmI,MAAOhI,GACPiI,KAAM3H,GACN4H,OAAQvH,GACRwH,MAAOpH,GACPhM,MAAOsM,GACP+G,KAAM3G,GACN4G,MAAOzG,GACP5M,OAAQ6M,GACRyG,OAAQvG,GACRwG,KAAMlG,GACN/M,OAAQmN,GACR+F,KAAMtF,GACN1N,KAAM+N,GACNkF,UAAWjF,GACX5O,OAAQiP,GACR6E,KAAM1E,GACN5O,OAAQ8O,GACRyE,MAAOpE,GACPqE,QAASpE,GACTqE,KAAMnE,GACNrP,KAAMyP,GACNhQ,QAAS0Q,GACTsD,UAAWrD,GACX/Q,MAAOuR,GACP8C,UAAW7C,GACXvR,KAAM6R,GACNwC,QAASvC,GACTwC,OAAQtC,GACR1R,OAAQgS,GACR/R,QAASqS,GACT2B,QDqD8B,CAC9B3d,OAvH8C,CAC9C,UAAW,gBAAG2D,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT+J,GAAkB,CAChBC,KAAM,EACNhQ,OAAQ6B,MAAM,GAAGC,KAAK2P,GAAazL,EAAS2L,mBAAmB,IAC/DlO,QACAuC,cAGJ,UAAW,gBAAGvC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACT6J,GAAmB,CACjB5C,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ4L,WAAY,gBAAGnO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACVoK,GAAoB,CAClBnD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ8L,UAAW,gBAAGrO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACTwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJ+L,aAAc,gBAAGtO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,GACrDlO,QACAuC,cAGJgM,cAAe,gBAAGvO,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACbwK,GAAa,CACXvD,WAAYwE,GAAazL,EAAS2L,mBAAmB,IACrDlO,QACAuC,eAmDJ/F,MA/C6C,CAC7Cyd,eAAgB,gBAAGja,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACd0K,GAAY,CACV/D,QAAS9J,GAAQ2F,IACjByE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ2X,aAAc,gBAAGla,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACZ0K,GAAY,CACV/D,QAAS9J,GAAQ2F,IACjByE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ8O,QAAS,gBAAGrR,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACP0K,GAAY,CACV/D,QAAS9J,GAAQ2F,IACjByE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnD7C,QACAuC,cAGJ2N,SAAU,gBAAGlQ,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACRoL,GAAc,CACZzE,QAAS9J,GAAQ2F,IACjByE,WAAYzG,GAAYR,EAASM,kBAAkB,GACnDsJ,UAAWpJ,GAAYR,EAASM,kBAAkB,GAClD7C,QACAuC,eAiBJ9F,MAb6C,CAC7CiS,SAAU,gBAAG1O,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,SAAV,OACR4K,GAAY,CACVjE,QAAS9J,GAAQ2F,IACjByE,WAAY/E,GAAYlC,EAASiC,kBAAkB,GACnDxE,QACAuC,iB,IE7Ge4X,G,WACnB,WAAY5f,EAAYY,EAAeif,GAAuB,yBAOtDC,IAAc,GAPuC,KAgC7DC,UAhC6D,OAiC7DC,eAjC6D,OAkC7DC,sBAlC6D,OAmC7D1f,sBAnC6D,OAoC7DsB,aApC6D,OAqC7Dqe,eArC6D,OAuCrDC,OAAiB,EAvCoC,KAwDrDC,cAAwB,EAxD6B,KAyE7DC,YAAqB,GAzEwC,KA0E7Dle,SAA+B,GA1E8B,KA2E7D2I,iBAAsC,GA3EuB,KA4E7DwV,eAAoC,GA3ElCrb,KAAKkb,OAASvf,EACdqE,KAAKmb,aAAeP,EAEpB5a,KAAKjF,GAAKA,E,oCAIZ,WACE,OAAOiF,KAAK6a,K,IAEd,SAAOza,GAELJ,KAAK6a,IAAMza,EAEX,IAAMkb,EAAOnd,EAAQiC,GAErBJ,KAAK8a,KAAL,OAAYQ,QAAZ,IAAYA,OAAZ,EAAYA,EAAMR,KAClB9a,KAAK+a,UAAL,OAAiBO,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMP,UACvB/a,KAAKgb,iBAAL,OAAwBM,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAM1f,WAC9BoE,KAAK1E,iBhG6IA+C,EgG7IyC+B,EhG6IfpF,GgG3I/BgF,KAAKpD,QAAU8B,GAAc0B,GAC7BJ,KAAKib,UAAYjb,KAAKub,aAAanb,GAEnCJ,KAAKob,YAAcpb,KAAKwb,iBAAiBxb,KAAKrE,MAAOqE,KAAK4a,aAC1D5a,KAAK6F,iBAAmB7F,KAAKyb,sBAC7B,IAAM1X,EAAiB2X,GAAkB1b,KAAKrE,MAAOqE,KAAK4a,aAC1D5a,KAAK9C,SAAW8C,KAAK2b,YAAY5X,GACjC/D,KAAKqb,eAAiBrb,KAAK4b,kBAAkB7X,K,iBAW/C,WACE,OAAO/D,KAAKkb,Q,IAEd,SAAU9a,GACR,IAAMyb,EAAqBH,GAAkB1b,KAAKrE,MAAOqE,KAAK4a,aAC9D5a,KAAKkb,OAAS9a,EACd,IAAM2D,EAAiB2X,GAAkB1b,KAAKrE,MAAOqE,KAAK4a,aAE1D5a,KAAKob,YAAcpb,KAAKwb,iBAAiBpb,EAAOJ,KAAK4a,aACrD5a,KAAK9C,SAAW8C,KAAK2b,YAAY5X,GACjC/D,KAAKqb,eAAiBrb,KAAK4b,kBACzB7X,EACA8X,K,uBAKJ,WACE,OAAO7b,KAAKmb,c,IAEd,SAAgB/a,GACd,IAAMyb,EAAqBH,GAAkB1b,KAAKrE,MAAOqE,KAAK4a,aAC9D5a,KAAKmb,aAAe/a,EACpB,IAAM2D,EAAiB2X,GAAkB1b,KAAKrE,MAAOqE,KAAK4a,aAE1D5a,KAAKob,YAAcpb,KAAKwb,iBAAiBxb,KAAKrE,MAAOyE,GACrDJ,KAAK9C,SAAW8C,KAAK2b,YAAY5X,GACjC/D,KAAKqb,eAAiBrb,KAAK4b,kBACzB7X,EACA8X,K,uBASJ,WACE,MAAmB,KAAZ7b,KAAKjF,K,8BAId,SAAiBY,EAAeif,GAC9B,QACqB1b,IAAnBc,KAAK+a,gBACqB7b,IAA1Bc,KAAKgb,uBACqB9b,IAA1Bc,KAAK1E,iBAGL,MAAO,GAGT,GAAIsO,MAAMjO,IAAUA,EAAQ,GAAKA,EAAQ,GAavC,YAVyBuD,IAArBc,KAAKob,YAEOU,OAAOC,KAAK/b,KAAKob,aAAaxgB,QAAO,SAACohB,EAAK5a,GAEvD,OADA4a,EAAI5a,GAAQtC,IACLkd,IACN,IAEW,GAQlB,IAAIZ,EAAW,eAAQpb,KAAK+a,WAExBkB,EhGmDD,SAAiCtgB,GACtC,OAAO2C,EAAe3C,EAAOF,GgGpDN6C,CAAe3C,GAGpCmgB,OAAOI,QAAQlc,KAAKgb,kBAAkBmB,SAAQ,YAAoB,IAAD,mBAAjB/a,EAAiB,KAAXgb,EAAW,KAC3DpS,EAAaiS,EAAeG,GAChChB,EAAYha,IAAS4I,KAIvB,IAEI1O,EAAmBmD,GAFFid,GAAkB/f,EAAOif,GAI5C5a,KAAK1E,kBAaP,YAVyB4D,IAArB5D,GACFwgB,OAAOI,QAAQ5gB,GAAkB6gB,SAAQ,YAAoB,IAAD,mBAAjB/a,EAAiB,KAAXib,EAAW,KACtDjb,KAAQga,EACVA,EAAYha,IAASib,EAErBjB,EAAYha,GAAQib,KAKnBjB,I,0BAGT,SAAalgB,GACX,ODjFG,SAAyBA,GAC9B,OAAO0B,GAAQ1B,GCgFNohB,CAAgBphB,K,iCAGzB,WACE,OvD/JG,SAA6BH,GAAa,IAAD,EAC9C,iBAAO8K,GAAiB9K,UAAxB,QAA+BgM,GuD8JtB0U,CAAoBzb,KAAKjF,IAAIK,KAAI,SAAC2E,GAAD,OAAY,IAAIA,O,yBAG1D,SAAYgE,GACV,YAAqB7E,IAAjBc,KAAKpD,QACA,GAGYoD,KAAKpD,QAAQM,SAG/Bqf,QAAO,SAACvY,GAAD,OAAiBD,GAAkBC,EAAYD,kBACtDyY,SAAQ,SAACxY,GAAD,OpD/JR,SAA+ByY,GAAoB,IAAD,EACvD,iBAAO/U,GAAkB+U,UAAzB,QAAuC7T,GoD+JjC8T,CAAsB1Y,EAAYjJ,GAAlC2hB,CAAsC1Y,EAAYjH,a,+BAKxD,SAAkBgH,EAAwB8X,GACxC,QAA2B3c,IAAvB2c,GAAoCjS,MAAMiS,GAC5C,OAAO7b,KAAK9C,SACTsf,SAAQ,qBAAG5U,WACXxM,KAAI,SAAC2E,GAAD,OAAY,IAAIA,KAGzB,GAAIgE,EAAiB8X,EAAoB,CACvC,IAAMc,EAAe3c,KAAKqb,eAAejgB,KAAI,qBAAGL,MAC1C6hB,EAAa5c,KAAK9C,SACrBsf,SAAQ,qBAAG5U,WACXxM,KAAI,SAAC2E,GAAD,OAAY,IAAIA,KACpBwc,QAAO,gBAAGxhB,EAAH,EAAGA,GAAH,OAAa4hB,EAAanV,SAASzM,MAE7C,OAAOiF,KAAKqb,eAAewB,OAAOD,GAGpC,GAAI7Y,EAAiB8X,EAAoB,CACvC,IAAMiB,EAAgB9c,KAAK9C,SACxBsf,SAAQ,qBAAG5U,WACXxM,KAAI,SAAC2E,GAAD,OAAY,IAAIA,KACpB3E,KAAI,SAAC6L,GAAD,OAAYA,EAAOlM,MAE1B,OAAOiF,KAAKqb,eAAekB,QAAO,SAACtV,GAAD,OAChC6V,EAActV,SAASP,EAAOlM,OAKlC,OAAOiF,KAAKqb,iB,wBAGd,WACE,IAAMxV,EAAmB7F,KAAK6F,iBACxBwV,EAAiBrb,KAAKqb,eAE5B,OAAOxV,EAAiBgX,OAAOxB,K,kCAGjC,WACE,OAAOrb,KAAK9C,SACT9B,KAAI,qBAAGkF,aACPic,QAAO,SAACQ,GAAD,YAAyC7d,IAAV6d,O,sCAG3C,WACE,OAAO/c,KAAK9C,SACT9B,KAAI,qBAAG0H,iBACPyZ,QAAO,SAACQ,GAAD,YAA6C7d,IAAV6d,S,KAK1C,SAASrB,GAAkB/f,EAAeif,GAkB/C,OAhBIjf,EAAQ,IAAiB,KAAVA,GAAgBif,EAChB,EACRjf,EAAQ,IAAiB,KAAVA,GAAgBif,EACvB,EACRjf,EAAQ,IAAiB,KAAVA,GAAgBif,EACvB,EACRjf,EAAQ,IAAiB,KAAVA,GAAgBif,EACvB,EACRjf,EAAQ,IAAiB,KAAVA,GAAgBif,EACvB,EACRjf,EAAQ,IAAiB,KAAVA,GAAgBif,EACvB,EAEA,ECzPd,SAASoC,GAAoBC,EAAc7c,GAAgB,IAAD,EACzD8c,EAAY,UAAG9iB,EAAY6iB,UAAf,aAAG,EAAmBC,aACxC,OAAa,MAAT9c,GAAkBwJ,MAAMxJ,GAOnB,IANH8c,GACc,IAAR9c,GAAa+c,QAAQ,GAAK,IAE3BnR,KAAKoR,MAAMhd,GAAOid,WAQxB,SAASC,GAAsBC,GACpC,IAAIC,EAAM,GAEV,OAAsB,IAAlBD,EAAOE,OACFD,EAGL5T,MAAM2T,EAAO,IACR,KAEPC,GAAOxR,KAAKoR,MAAMG,EAAO,IAGvBA,EAAOE,QAAU,GAAKF,EAAOG,OAAM,SAACtd,GAAD,OAAWA,IAAUmd,EAAO,MAEjEC,GAAO,MAAQD,EAAOE,OAGtBF,EAAO3O,MAAM,GAAGuN,SAAQ,SAAC/b,GACvB,GAAIwJ,MAAMxJ,GACR,MAAO,IAEPod,GAAO,MAAQxR,KAAKoR,MAAMhd,MAKzBod,GAIF,SAASG,GAAc5iB,GAC5B,OAAOP,EAAcO,GAIhB,SAAS6iB,GAAiBxd,EAAe8c,GAC9C,OAAIA,EACK9c,EAAQ,IAERA,EAoDJ,SAASyd,GACdC,EACAC,EACAC,EACAC,EACAvP,EACArL,EACA2B,EACAkZ,GACC,IAAD,8BACInD,EAxCN,SAAwB+C,EAAsBC,GAC5C,IAAII,EAOAC,EALFD,OADgBjf,IAAd4e,EACeA,EAAU1C,YAEV,GAKjBgD,OADalf,IAAX6e,EACYA,EAAOvd,MAEP,GAIhB,IAAIua,EAAS,eAAQqD,GASrB,OARAtC,OAAOI,QAAQiC,GAAgBhC,SAAQ,YAAoB,IAAD,mBAAjB/a,EAAiB,KAAXhB,EAAW,UAChClB,IAApB6b,EAAU3Z,GACZ2Z,EAAU3Z,GAAQhB,EAElB2a,EAAU3Z,IAAShB,KAIhB2a,EAeSsD,CAAeP,EAAWC,GACtCO,EAAa,eAAQvD,GAGrBwD,EAAuB,GAC3BN,EAAU9B,SAAQ,SAACqC,GACjB1C,OAAOI,QAAQsC,EAASC,YAAYtC,SAAQ,YAAoB,IAAD,mBAAjB/a,EAAiB,KAAXhB,EAAW,UACjClB,IAAxBqf,EAAcnd,GAChBmd,EAAcnd,GAAQhB,EAEtBme,EAAcnd,IAAShB,QAM7B0b,OAAOI,QAAQqC,GAAepC,SAAQ,YAAoB,IAAD,mBAAjB/a,EAAiB,KAAXhB,EAAW,UAC3BlB,IAAxBof,EAAcld,GAChBkd,EAAcld,GAAQhB,EAEtBke,EAAcld,IAAShB,UAKAlB,IAAvB8e,GACFlC,OAAOI,QAAQ8B,GAAoB7B,SAAQ,YAAoB,IAAD,mBAAjB/a,EAAiB,KAAXhB,EAAW,UAChClB,IAAxBof,EAAcld,GAChBkd,EAAcld,GAAQhB,EAEtBke,EAAcld,IAAShB,KAM7Bke,EAAcpW,eAAiB,aAAKoW,EAAcpW,sBAAnB,QAAqC,GAGpEgW,EAAW/B,SAAQ,SAACY,GAAD,OACjBA,EAAMxc,MACJ+d,EACA5P,EACArL,EACA2B,EACA0W,GAAkBoC,EAAUniB,MAAOmiB,EAAUlD,iBAKjD,IAAI8D,EAAoB,GA2GxB,OAzGAA,EAAWpa,QAAX,UAAqBga,EAAcha,eAAnC,QAA8C,EAE9Coa,EAAWna,SACT,UAAC+Z,EAAcha,eAAf,QAA0B,IAAM,aAAKga,EAActc,gBAAnB,QAA+B,KAA/D,UACCsc,EAAc/Z,eADf,QAC0B,GAC5Bma,EAAWpZ,SACT,UAACgZ,EAAclZ,eAAf,QAA0B,IAAM,aAAKkZ,EAAcjZ,gBAAnB,QAA+B,KAA/D,UACCiZ,EAAchZ,eADf,QAC0B,GAC5BoZ,EAAWra,QACT,UAACia,EAAcna,cAAf,QAAyB,IAAM,aAAKma,EAAcla,eAAnB,QAA8B,KAA7D,UACCka,EAAcja,cADf,QACyB,GAC3Bqa,EAAWhe,SAAX,UAAsB4d,EAAc5d,gBAApC,QAAgD,EAChDge,EAAW9S,QAAX,UAAqB0S,EAAc1S,eAAnC,QAA8C,EAC9C8S,EAAWhd,iBAAX,UAA8B4c,EAAc5c,wBAA5C,QAAgE,EAChEgd,EAAWxW,eAAX,UAA4BoW,EAAcpW,sBAA1C,QAA4D,OAExBhJ,IAAhCof,EAAcK,gBAChBD,EAAWC,cAAgBL,EAAcK,oBAERzf,IAA/Bof,EAAc3V,eAChB+V,EAAW/V,aAAe2V,EAAc3V,mBAEJzJ,IAAlCof,EAAcnW,kBAChBuW,EAAWvW,gBAAkBmW,EAAcnW,sBAEXjJ,IAA9Bof,EAAcM,cAChBF,EAAWE,YAAcN,EAAcM,kBAEL1f,IAAhCof,EAAcO,gBAChBH,EAAWG,cAAgBP,EAAcO,oBAER3f,IAA/Bof,EAAchd,eAChBod,EAAWpd,aAAegd,EAAchd,mBAEHpC,IAAnCof,EAAcpc,mBAChBwc,EAAWxc,iBAAmBoc,EAAcpc,uBAGfhD,IAA3Bof,EAAcQ,WAChBJ,EAAWI,SAAWR,EAAcQ,eAER5f,IAA1Bof,EAAcS,UAChBL,EAAWK,QAAUT,EAAcS,cAEJ7f,IAA7Bof,EAAcU,aAChBN,EAAWM,WAAaV,EAAcU,iBAEX9f,IAAzBof,EAAcW,SAChBP,EAAWO,OAASX,EAAcW,aAEL/f,IAA3Bof,EAAcY,WAChBR,EAAWQ,SAAWZ,EAAcY,eAERhgB,IAA1Bof,EAAca,UAChBT,EAAWS,QAAUb,EAAca,cAEHjgB,IAA9Bof,EAAcc,cAChBV,EAAWU,YAAcd,EAAcc,kBAGNlgB,IAA/Bof,EAAchW,eAChBoW,EAAWpW,aAAegW,EAAchW,mBAGLpJ,IAAjCof,EAAc/b,iBAChBmc,EAAWnc,eAAiB+b,EAAc/b,qBAEbrD,IAA3Bof,EAAcvd,WAChB2d,EAAW3d,SAAWud,EAAcvd,eAED7B,IAAjCof,EAAc9c,iBAChBkd,EAAWld,eAAiB8c,EAAc9c,qBAENtC,IAAlCof,EAAczd,kBAChB6d,EAAW7d,gBAAkByd,EAAczd,sBAER3B,IAAjCof,EAAcjc,iBAChBqc,EAAWrc,eAAiBic,EAAcjc,qBAERnD,IAAhCof,EAAce,gBAChBX,EAAWW,cAAgBf,EAAce,oBAEPngB,IAAhCof,EAAc7Y,gBAChBiZ,EAAWjZ,cAAgB6Y,EAAc7Y,oBAELvG,IAAlCof,EAAcxS,kBAChB4S,EAAW5S,gBAAkBwS,EAAcxS,sBAET5M,IAAhCof,EAAcvS,gBAChB2S,EAAW3S,cAAgBuS,EAAcvS,oBAGJ7M,IAAnCof,EAAcgB,mBAChBZ,EAAWY,iBAAmBhB,EAAcgB,uBAERpgB,IAAlCof,EAAciB,kBAChBb,EAAWa,gBAAkBjB,EAAciB,sBAENrgB,IAAnCof,EAAcxT,mBAChB4T,EAAW5T,iBAAmBwT,EAAcxT,uBAEX5L,IAA/Bof,EAAcvT,eAChB2T,EAAW3T,aAAeuT,EAAcvT,cAGnC2T,EAGF,SAASc,GAAWhC,GACzB,OAAIA,EAAIC,OAAS,EACRD,EAAI,GAAGiC,cAAc5C,OAAOW,EAAI5O,MAAM,IAEtC4O,EC1RJ,IAuCKkC,GAvCCC,GAAb,WAKE,aAA6E,IAAjEve,EAAgE,uDAAjD,GAAIhB,EAA6C,uDAA7BtB,IAAK8gB,EAAwB,uDAAL9gB,IAAK,yBAJ5EsC,UAI4E,OAH5EhB,WAG4E,OAF5Ewf,cAE4E,EAC1E5f,KAAKoB,KAAOA,EACZpB,KAAKI,MAAQA,EACbJ,KAAK4f,SAAWA,EARpB,2CAWE,SAAQxe,GACNpB,KAAKoB,KAAOA,EACC,KAATA,IACFpB,KAAKI,MAAQwd,GACX5d,KAAK4f,SACLxlB,EAAYgH,GAAM8b,iBAhB1B,2BAqBE,SAAc9c,GACZJ,KAAK4f,SAAWxf,EACE,KAAdJ,KAAKoB,OACPpB,KAAKI,MAAQwd,GAAiBxd,EAAOhG,EAAY4F,KAAKoB,MAAM8b,iBAxBlE,sBA4BE,SAAS9c,GACPJ,KAAKI,MAAQA,EACK,KAAdJ,KAAKoB,OACPpB,KAAK4f,SD8BJ,SACLxf,EACA8c,GAEA,OAAIA,EACa,IAAR9c,EAEAA,ECrCWyf,CACdzf,EACAhG,EAAY4F,KAAKoB,MAAM8b,mBAjC/B,M,SAuCYwC,K,gBAAAA,E,kBAAAA,E,cAAAA,E,gBAAAA,E,mBAAAA,Q,SCzCSI,G,WA8BnB,WACE9gB,EACA+gB,EACApkB,EACAqkB,GACC,yBAlCHhhB,UAkCE,OAhCMihB,aAgCN,OAvBM/E,YAuBN,OAdFgF,SAAiB,CAAE9e,KAAM,GAAIhB,MAAOtB,KAclC,KAZFqhB,SAAwB,CACtB,IAAIR,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IASJ3f,KAAKhB,KAAOA,EACZgB,KAAKigB,QAAUF,EACf/f,KAAKkb,OAASvf,EACdqE,KAAKkgB,SAAS9e,KAAO4e,EAErBhgB,KAAKogB,eAAeL,EAAQpkB,EAAOqkB,G,wCArCrC,WACE,OAAOhgB,KAAKigB,S,IAEd,SAAW7f,GACTJ,KAAKigB,QAAU7f,EACfJ,KAAKogB,eAAepgB,KAAK+f,OAAQ/f,KAAKrE,MAAOqE,KAAKkgB,SAAS9e,Q,iBAI7D,WACE,OAAOpB,KAAKkb,Q,IAEd,SAAU9a,GACRJ,KAAKkb,OAAS9a,EACdJ,KAAKogB,eAAepgB,KAAK+f,OAAQ/f,KAAKrE,MAAOqE,KAAKkgB,SAAS9e,Q,4BA0B7D,SAAe2e,EAAgBpkB,EAAeshB,GAC5Cjd,KAAKqgB,iBnGsMF,SACLN,EACApkB,EACAshB,GACC,IAAD,MACA,2BAAOlf,EAAqBgiB,UAA5B,iBAAO,EAA+BpkB,UAAtC,aAAO,EAAwCshB,UAA/C,QAAwDne,ImG3MhCwhB,CAAyBP,EAAQpkB,EAAOshB,M,6BAGhE,SAAgBA,GACdjd,KAAKkgB,SAAS9e,KAAO6b,EACrBjd,KAAKogB,eAAepgB,KAAK+f,OAAQ/f,KAAKrE,MAAOshB,K,8BAG/C,SAAiB7c,GACfJ,KAAKkgB,SAAS9f,MAAQA,I,4BAGxB,SAAe6M,EAAWgQ,GACxBjd,KAAKmgB,SAASlT,GAAGsT,QAAQtD,K,kCAG3B,SAAqBhQ,EAAW7M,GAC9BJ,KAAKmgB,SAASlT,GAAGuT,cAAcpgB,K,6BAGjC,SAAgB6M,EAAW7M,GACzBJ,KAAKmgB,SAASlT,GAAGwT,SAASrgB,K,sBAsC5B,WACE,IAAII,EAAe,GAkBnB,MAhB2B,KAAvBR,KAAKkgB,SAAS9e,OACXwI,MAAM5J,KAAKkgB,SAAS9f,OAGvBI,EAAMR,KAAKkgB,SAAS9e,MAAQtC,IAF5B0B,EAAMR,KAAKkgB,SAAS9e,MAAQpB,KAAKkgB,SAAS9f,OAM9CJ,KAAKmgB,SAAShE,SAAQ,SAACuE,GAES,IAAD,EADR,KAAjBA,EAAQtf,OACLwI,MAAM8W,EAAQtgB,SACjBI,EAAMkgB,EAAQtf,MAAQsf,EAAQtgB,OAAR,UAAiBI,EAAMkgB,EAAQtf,aAA/B,QAAwC,QAK7DZ,M,KAIEmgB,GAAgB,CAC3BC,OAAQ,CAAC,UAETC,QAAS,CAAC,WAEVC,MAAO,CACL,UACA,WACA,WACA,mBACA,kBAGFC,OAAQ,CACN,UACA,WACA,WACA,mBACA,gBACA,eACA,kBACA,cACA,gBACA,eACA,oBAGFC,QAAS,CACP,UACA,WACA,WACA,mBACA,WACA,UACA,iBAISC,GAAe,CAC1B,SACA,UACA,UACA,UACA,WACA,WACA,mBACA,iBACA,WACA,W,iBCxGaC,G,4MAvDbC,MAA0B,CACxB/gB,MAAO,EAAKghB,MAAMC,c,EAGpBC,aAAe,uBAA2BpiB,IAArB,EAAKkiB,MAAMhhB,O,EAEhCmhB,aAAe,kCAAM,EAAKH,MAAMG,oBAAjB,U,EAEfC,gBAAkB,SAACC,GACjB,IAAMrhB,EAAQshB,SAASD,EAAEE,cAAcvhB,OACvC,EAAKwhB,SAAS,CAAExhB,W,EAGlByhB,WAAa,SAACzhB,GACZ,OAAO0hB,OAAO1hB,I,EAGhB2hB,YAAc,SAACN,GACb,IAAMrhB,EAAQ,EAAKyhB,WAAWJ,EAAEE,cAAcvhB,OAE1C,EAAKkhB,oBACoBpiB,IAAvB,EAAKkiB,MAAMY,SACb,EAAKZ,MAAMY,QAAQ5hB,GAGrB,EAAKwhB,SAAS,CAAExhB,UAAS,WAEnB,EAAKghB,MAAMY,SAAS,EAAKZ,MAAMY,QAAQ5hB,O,4CAKjD,WAAU,IAAD,EAEDA,EAAQJ,KAAKshB,eAAiBthB,KAAKohB,MAAMhhB,MAASJ,KAAKmhB,MAAM/gB,MAC7D6hB,EAAgBrY,MAAMxJ,GAAS,GAAKA,EAAMid,WAEhD,OACE,uCACE,eAAC6E,GAAA,EAAKC,MAAN,CAAYC,QAASpiB,KAAKohB,MAAMrmB,GAAIsnB,QAASriB,KAAKuhB,eAAlD,SACGvhB,KAAKohB,MAAMkB,QAEd,eAACJ,GAAA,EAAKK,QAAN,CACEvjB,KAAK,SACLwjB,KAAK,KACLpiB,MAAO6hB,EACPD,QAAShiB,KAAK+hB,YACdU,UAAS,iCAAkBziB,KAAKohB,MAAMqB,iBAA7B,QAA0C,IACnD1nB,GAAIiF,KAAKohB,MAAMrmB,Y,GAnDC2nB,IAAMC,WCTjBC,G,4MALJf,WAAa,SAACzhB,GACrB,OAAOyiB,WAAWziB,I,YAFG8gB,ICOV4B,G,4JALb,WACE,OAAO,eAACC,EAAA,EAAD,CAAKN,UAAU,uBAAf,SAAuCziB,KAAKohB,MAAM4B,e,GAFtCN,IAAMC,WCKdM,G,4MALJpB,WAAa,SAACzhB,GACrB,OAAOshB,SAASthB,I,YAFG8gB,ICoBjBgC,G,4MAGJ/B,MAAqB,CACnB/gB,MAAO,EAAKghB,MAAMC,c,EAGpBC,aAAe,uBAA2BpiB,IAArB,EAAKkiB,MAAMhhB,O,EAEhCmhB,aAAe,kCAAM,EAAKH,MAAMG,oBAAjB,U,EAEfC,gBAAkB,SAACC,GACjB,IAAM0B,EAAgB1B,EAAE2B,OAAOhjB,MAC/B,EAAKwhB,SAAS,CAAExhB,MAAO+iB,K,EAGzBE,aAAe,SAAC5B,GACd,IAAM0B,EAAgB1B,EAAE2B,OAAOhjB,MAE3B,EAAKkhB,oBACqBpiB,IAAxB,EAAKkiB,MAAMkC,UACb,EAAKlC,MAAMkC,SAASH,GAGtB,EAAKvB,SAAS,CAAExhB,MAAO+iB,IAAiB,WAElC,EAAK/B,MAAMkC,UAAU,EAAKlC,MAAMkC,SAASH,O,4CAKnD,WAAU,IAAD,EACDA,EAAgBnjB,KAAKshB,eACvBthB,KAAKohB,MAAMhhB,MACXJ,KAAKmhB,MAAM/gB,MAEf,OACE,uCACE,eAAC8hB,GAAA,EAAKC,MAAN,CAAYC,QAASpiB,KAAKohB,MAAMrmB,GAAIsnB,QAASriB,KAAKuhB,eAAlD,SACGvhB,KAAKohB,MAAMkB,QAEd,eAACJ,GAAA,EAAKK,QAAN,CACEgB,GAAG,SACHf,KAAK,KACLpiB,MAAO+iB,EACPG,SAAUtjB,KAAKqjB,aACfZ,UAAS,2BAAYziB,KAAKohB,MAAMqB,iBAAvB,QAAoC,IAC7C1nB,GAAIiF,KAAKohB,MAAMrmB,GANjB,SAQGiF,KAAKohB,MAAM4B,kB,GAjDDN,IAAMC,WAArBO,GAuDGM,K,4JACL,WACE,OAAO,yBAAQpjB,MAAOJ,KAAKohB,MAAMhhB,MAA1B,SAAkCJ,KAAKohB,MAAMkB,Y,GAFvBI,IAAMC,WAO1BO,UCoDAO,G,4MAzHbC,wBAA0B,SAACzG,GACzB,EAAKmE,MAAM5C,SAASmF,gBAAgB1G,GACpC,EAAKmE,MAAMwC,uB,EAGbC,kBAAoB,SAAC9D,GACnB,EAAKqB,MAAM5C,SAASuB,OAASA,EAC7B,EAAKqB,MAAMwC,uB,EAGbE,iBAAmB,SAACnoB,GAClB,EAAKylB,MAAM5C,SAAS7iB,MAAQA,EAC5B,EAAKylB,MAAMwC,uB,EAGbG,uBAAyB,SAAC9W,GAAD,OAAe,SAACgQ,GACvC,EAAKmE,MAAM5C,SAASwF,eAAe/W,EAAGgQ,GACtC,EAAKmE,MAAMwC,wB,EAGbK,wBAA0B,SAAChX,GAAD,OAAe,SAAC7M,GACxC,EAAKghB,MAAM5C,SAAS0F,qBAAqBjX,EAAG7M,GAC5C,EAAKghB,MAAMwC,wB,4CAGb,WAAU,IAAD,OACCpF,EAAaxe,KAAKohB,MAAlB5C,SAER,OACE,uBAAKiE,UAAU,YAAf,UACE,8BAAKjD,GAAWhB,EAASxf,QAEzB,eAAC,GAAD,UACE,eAAC,GAAD,CACEyjB,UAAU,cACV1nB,GAAE,mBAAcyjB,EAASxf,KAAvB,WACFsjB,MAAM,UACNjB,aAAc,EACdjhB,MAAOoe,EAASuB,OAChBiC,QAAShiB,KAAK6jB,sBAIlB,eAAC,GAAD,UACE,eAAC,GAAD,CACEpB,UAAU,cACV1nB,GAAE,mBAAcyjB,EAASxf,KAAvB,UACFsjB,MAAM,SACNjB,aAAc,EACdjhB,MAAOoe,EAAS7iB,MAChBqmB,QAAShiB,KAAK8jB,qBAIlB,gBAAC,GAAD,WACE,gBAAC,GAAD,CACE/oB,GAAE,mBAAcyjB,EAASxf,KAAvB,cACFsjB,MAAM,aACNjB,aAAa,GACbjhB,MAAOoe,EAAS0B,SAAS9e,KACzBkiB,SAAUtjB,KAAK0jB,wBALjB,UAOE,eAAC,GAAOF,KAAR,CAAalB,MAAM,GAAGliB,MAAM,KAC3BugB,GAAcnC,EAASxf,MAAM5D,KAAI,SAAC6hB,GAAD,OAChC,eAAC,GAAOuG,KAAR,CACElB,MAAOloB,EAAY6iB,GAAMnC,KACzB1a,MAAO6c,GACFA,SAKX,mCAEA,6BACGD,GACCwB,EAAS0B,SAAS9e,KAClBod,EAAS0B,SAAS9f,YAKxB,0CACCoe,EAAS2B,SAAS/kB,KAAI,SAAC+oB,EAASlX,GAAV,OACrB,gBAAC,GAAD,WACE,gBAAC,GAAD,CACElS,GAAE,mBAAcyjB,EAASxf,KAAvB,qBAAwCiO,GAC1CqV,MAAM,GACNjB,aAAa,GACbjhB,MAAO+jB,EAAQ/iB,KACfkiB,SAAU,EAAKS,uBAAuB9W,GACtCsU,cAAc,EANhB,UAQE,eAAC,GAAOiC,KAAR,CAAalB,MAAM,GAAGliB,MAAM,KAC3B6gB,GAAa7lB,KAAI,SAAC6hB,GAAD,OAChB,eAAC,GAAOuG,KAAR,CACElB,MAAOloB,EAAY6iB,GAAMnC,KACzB1a,MAAO6c,GACFA,SAKX,mCAEA,eAAC,GAAD,CACEliB,GAAE,mBAAcyjB,EAASxf,KAAvB,qBAAwCiO,EAAxC,UACFqV,MAAM,GACNjB,aAAcviB,IACdsB,MAAO+jB,EAAQvE,SACfoC,QAAS,EAAKiC,wBAAwBhX,GACtCsU,cAAc,EACdkB,UAAU,iBA5BCxV,a,GArFGyV,IAAMC,W,2BCKrByB,GAAmC,CAC9ChgB,QAAS,MACTC,OAAQ,OACRrC,SAAU,MACVuC,QAAS,MACTc,SAAU,KACVC,QAAS,MACT5D,iBAAkB,MAClBwG,eAAgB,MAChBxH,SAAU,MACVkL,QAAS,OAOJ,SAASyY,GACdC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3G,EACA4G,EACA1G,GACwB,IAAD,EACnB2G,EAAS,EACTC,EAA0C,GAC1CC,EAA+BJ,EAAS1G,UAGtC+G,EAAgBC,GAAsBN,EAAS1G,WAW/CiH,EAAM,UAVWrH,GACrB8G,EAAS7G,UACT6G,EAAS5G,OACTC,EACAgH,EACAL,EAASjW,kBACTiW,EAASthB,iBACTshB,EAAS3f,iBACTkZ,GAE4BhW,sBAAlB,QAAoC,EAE5Cid,EAAcnZ,KAAKoZ,MAAMZ,EAAcU,GAAUd,GAASlc,gBAExDmd,EAAkBL,EACrB5pB,KAAI,SAACojB,GAAD,OAAcA,EAAS0B,SAAS9e,QACpCmb,QAAO,SAAC2D,GAAD,MAA2B,mBAAbA,KAA+BzC,OA2DvD,OAzDI0H,EAAc,EAChBA,EAAc,EACLA,EAAc,GAAK,EAAIE,KAChCF,EAAc,GAAK,EAAIE,IAIJC,GACnBhB,EACAC,EAAWY,EACXR,EAAS1G,UAAU7iB,KAAI,SAACojB,GAAD,OAAcA,EAAS0B,SAAS9e,QACvD+jB,GAGWhJ,SAAQ,SAACoJ,GAAiB,IAAD,YAEpC,GAAIJ,EAAc,EAAG,CACnB,IAAMK,EAAiBD,EAAYpkB,MACjC,kBAAuB,mBAAvB,EAAGC,aAEkBlC,IAAnBsmB,EACFD,EAAYrY,KAAK,CAAE9L,KAAM,iBAAkBqkB,MAAON,IAElDK,EAAeC,OAASN,EAI5B,IAAMlH,EAAYgH,GAAsBN,EAAS1G,YA+IrD,SACEsH,EACAtH,GAEA,IAAMkC,EAAWlC,EAAUzB,SAAQ,SAACgC,GAAD,OAAcA,EAAS2B,YAC1DoF,EAAYpJ,SAAQ,YAAsB,IAAnB/a,EAAkB,EAAlBA,KAAMqkB,EAAY,EAAZA,MACrB/E,EAAUP,EAAShf,MAAK,SAACukB,GAAD,OAAeA,EAAUtkB,OAASA,KAChE,QAAgBlC,IAAZwhB,EAAuB,CAAC,IAAD,EACrBiF,EAAS,EACb,UAAA1H,EACG9c,MAAK,SAACqd,GAAD,OACJA,EAAS2B,SAAShf,MAAK,SAACukB,EAAWzY,GAEjC,OADA0Y,EAAS1Y,EACFrD,MAAM8b,EAAUtlB,oBAJ7B,SAOIwlB,gBAAgBD,EAAQvB,GAAShjB,GAAQqkB,QAE7C/E,EAAQD,SAASC,EAAQtgB,MAAQgkB,GAAShjB,GAAQqkB,MA/JpDI,CAAoBN,EAAatH,GAEjC,IAAMS,EAAab,GACjB8G,EAAS7G,UACT6G,EAAS5G,OACTC,EACAC,EACA0G,EAASjW,kBACTiW,EAASthB,iBACTshB,EAAS3f,iBACTkZ,GAII4H,EAAS,oBACbnB,EAAS7G,UAAU7C,iBADN,iBACb,EAA+BwJ,UADlB,iBACb,EAAqDC,UADxC,iBACb,SAAyE,CACvElkB,MAAOke,EACP3b,SAAU6hB,WAHC,iBACb,EAGI/X,cAJS,aACb,EAGa,UAJA,QAIM,EAGjBiZ,EAAYjB,IACdC,EAAsBS,EACtBR,EAAmB9G,EACnB4G,EAASiB,MAIN,CACLC,aAAcjB,EACd7G,UAAW8G,GAKf,SAASO,GACPhB,EACAC,EACAyB,EACAb,GAEA,GAA6B,IAAzBb,EAAc7G,QAA6B,IAAb8G,EAChC,MAAO,GAGT,IAAM0B,EAAoBD,EAAUzJ,QAClC,SAAC2D,GAAD,OAAcoE,EAAc,KAAOpE,KACnCzC,OACEyI,EAAkBla,KAAKC,IAA8B,GAAzB,EAAIga,GAAwB1B,GACnC,mBAArBD,EAAc,KAChB4B,GAAmBf,GAKrB,IAFA,IAAMgB,EAAqC,GAbrB,WAeblZ,GACP,IAAMmZ,EAA8B,CAAC,CAAEhlB,KAAMkjB,EAAc,GAAImB,MAAOxY,IAEhEoZ,EAAmBf,GACvBhB,EAAc1V,MAAM,GACpB2V,EAAWtX,EACX+Y,EACAb,GAG8B,IAA5BkB,EAAiB5I,OACnB0I,EAAajZ,KAAKkZ,GAElBD,EAAajZ,KAAb,MAAAiZ,EAAY,YACPE,EAAiBjrB,KAAI,SAACmqB,GAAD,OAAiBa,EAAQvJ,OAAO0I,SAdrDtY,EAAIiZ,EAAiBjZ,GAAK,EAAGA,IAAM,EAAnCA,GAmBT,OAAOkZ,EAsCT,SAASlB,GAAsBqB,GAC7B,IAAMrI,EAAYqI,EAAclrB,KAAI,SAACojB,GACnC,OAAO,IAAIsB,GACTtB,EAASxf,KACTwf,EAASuB,OACTvB,EAAS7iB,MACT6iB,EAAS0B,SAAS9e,SAKlBmlB,EAAY,EACZC,EAAY,EAahB,OAZA1K,OAAOI,QAAQkI,IAAUjI,SAAQ,YAAoB,IAAD,mBAAjB/a,EAAiB,KAAXhB,EAAW,KAClD6d,EAAUsI,GAAWvC,eAAewC,EAAWplB,GAC/C6c,EAAUsI,GAAWX,gBAAgBY,EAAmB,EAARpmB,KAC1ComB,GAAa,IACjBA,EAAY,IACND,GAAa,IAEjBA,EAAY,OAKXtI,E,ICxKMwI,G,4MAjDbtF,MAAuB,CACrB/gB,MAAO,EAAKghB,MAAMC,c,EAGpBC,aAAe,uBAA2BpiB,IAArB,EAAKkiB,MAAMhhB,O,EAEhCmhB,aAAe,kCAAM,EAAKH,MAAMG,oBAAjB,U,EAEfC,gBAAkB,SAACC,GACjB,IAAMrhB,EAAQqhB,EAAE2B,OAAOsD,QACvB,EAAK9E,SAAS,CAAExhB,W,EAGlBijB,aAAe,SAAC5B,GACd,IAAMrhB,EAAQqhB,EAAE2B,OAAOsD,QAEnB,EAAKpF,oBACqBpiB,IAAxB,EAAKkiB,MAAMkC,UACb,EAAKlC,MAAMkC,SAASljB,GAGtB,EAAKwhB,SAAS,CAAExhB,UAAS,WAEnB,EAAKghB,MAAMkC,UAAU,EAAKlC,MAAMkC,SAASljB,O,4CAKnD,WAAU,IAAD,EACDA,EAAQJ,KAAKshB,eAAiBthB,KAAKohB,MAAMhhB,MAAQJ,KAAKmhB,MAAM/gB,MAClE,OACE,+BACE,gBAAC8hB,GAAA,EAAKyE,MAAN,CACE3nB,KAAK,WACLyjB,UAAS,6BAAcziB,KAAKohB,MAAMqB,iBAAzB,QAAsC,IAC/C1nB,GAAIiF,KAAKohB,MAAMrmB,GAHjB,UAKE,eAACmnB,GAAA,EAAKyE,MAAMxE,MAAZ,UAAmBniB,KAAKohB,MAAMkB,QAC9B,eAACJ,GAAA,EAAKyE,MAAMC,MAAZ,CACE5nB,KAAK,WACL0nB,QAAStmB,EACTkjB,SAAUtjB,KAAKqjB,wB,GA5CJX,IAAMC,WCkPdkE,G,4MAlNb1F,MAA6B,CAC3B2F,aAAc,GACdC,iBAAkB,GAClBvC,YAAa,IACbwC,eAAgB,GAChBzC,SAAU,I,EAGZ0C,YAAc,SAAC1C,GACb,EAAK3C,SAAS,CAAE2C,c,EAGlB2C,oBAAsB,SAAC9lB,GAAD,OAAkB,SAAC+lB,GACnCA,EACG,EAAKhG,MAAM4F,iBAAiBvf,SAASpG,IACxC,EAAKwgB,SAAS,CACZmF,iBAAiB,GAAD,mBAAM,EAAK5F,MAAM4F,kBAAjB,CAAmC3lB,MAInD,EAAK+f,MAAM4F,iBAAiBvf,SAASpG,IACvC,EAAKwgB,SAAS,CACZmF,iBAAkB,EAAK5F,MAAM4F,iBAAiBxK,QAC5C,SAAC6K,GAAD,OAAaA,IAAYhmB,S,EAOnCimB,eAAiB,SAACjnB,GACZwJ,MAAMxJ,GACR,EAAKwhB,SAAS,CAAE4C,YAAa,IAE7B,EAAK5C,SAAS,CAAE4C,YAAapkB,K,EAIjCknB,oBAAsB,SAAClnB,GACP,KAAVA,EACF,EAAKwhB,SAAS,CAAE2F,sBAAkBroB,IAElC,EAAK0iB,SAAS,CAAE2F,iBAAkBnnB,K,EAItConB,kBAAoB,SAACpnB,GACnB,EAAKwhB,SAAS,CAAEoF,eAAgB5mB,K,EAGlCqnB,gBAAkB,WAChB,QACkCvoB,IAAhC,EAAKiiB,MAAMoG,kBACmB,KAA9B,EAAKpG,MAAM6F,eACX,CACA,IAAMU,EAASrD,GACb,EAAKlD,MAAM4F,iBACX,EAAK5F,MAAMoD,SACX,EAAKpD,MAAMqD,YAAc,IACzB,EAAKrD,MAAMoG,iBACX,EAAKpG,MAAM6F,eACX,EAAK5F,MAAMuD,SACX,EAAKvD,MAAMpD,mBACX,EAAKoD,MAAMwD,eACX,EAAKxD,MAAMlD,YAGb,EAAKkD,MAAMuG,iBAAiB,CAAE1J,UAAWyJ,EAAOzJ,YAChD,EAAKmD,MAAMwG,YAAY,CAAE3J,UAAWyJ,EAAOzJ,YAC3C,EAAK2D,SAAS,CAAEkF,aAAcY,EAAO3B,iB,4CAIzC,WAAU,IAAD,WACP,OACE,eAAC8B,GAAA,EAAD,UACE,gBAACC,GAAA,EAAD,CAAMrF,UAAU,oFAAhB,UACE,gBAACoF,GAAA,EAAUE,OAAX,CACExE,GAAIuE,KAAKE,OACTC,SAAS,IACTxF,UAAU,0BAHZ,UAKE,oDACA,6DAEF,eAACoF,GAAA,EAAUK,SAAX,CAAoBD,SAAS,IAA7B,SACE,gBAACH,GAAA,EAAKK,KAAN,WACE,uBAAK1F,UAAU,cAAf,UACE,oDAEA,eAAC,GAAD,UACE,eAAC,GAAD,CACEA,UAAU,cACV1nB,GAAI,4BACJunB,MAAM,mBACNjB,aAAc,GACdjhB,MAAOJ,KAAKmhB,MAAMoD,SAClBvC,QAAShiB,KAAKinB,mBAKpB,uBAAKxE,UAAU,cAAf,UACE,8DACC3G,OAAOC,KAAKqI,IAAUhpB,KAAI,SAACgG,GAAD,OACzB,eAAC,GAAD,UACE,eAAC,GAAD,CACErG,GAAE,sCAAiCqG,GACnCkhB,MAAK,UAAKloB,EAAYgH,GAAM0Z,MAC5BuG,cAAc,EACdjhB,MAAO,EAAK+gB,MAAM4F,iBAAiBvf,SAASpG,GAC5CkiB,SAAU,EAAK4D,oBAAoB9lB,MANxBA,SAYnB,sBAAKqhB,UAAU,cAAf,SACE,eAAC,GAAD,UACE,eAAC,GAAD,CACEA,UAAU,aACV1nB,GAAI,yBACJunB,MAAM,gBACNjB,aAAc,IACdjhB,MAAOJ,KAAKmhB,MAAMqD,YAClBxC,QAAShiB,KAAKqnB,qBAKpB,uBAAK5E,UAAU,cAAf,UACE,eAAC,GAAD,UACE,gBAAC,GAAD,CACE1nB,GAAE,+BACFunB,MAAM,sBACNjB,aAAa,GACbjhB,MAAK,UAAEJ,KAAKmhB,MAAMoG,wBAAb,QAAiC,GACtCjE,SAAUtjB,KAAKsnB,oBALjB,UAOE,eAAC,GAAO9D,KAAR,CAAapjB,MAAM,GAAGkiB,MAAM,KAC5B,eAAC,GAAOkB,KAAR,CACEpjB,MAAOT,GAAWwK,OAClBmY,MAAO9C,GAAW7f,GAAWwK,UAE/B,eAAC,GAAOqZ,KAAR,CACEpjB,MAAOT,GAAW6D,MAClB8e,MAAO9C,GAAW7f,GAAW6D,SAE/B,eAAC,GAAOggB,KAAR,CACEpjB,MAAOT,GAAWuF,MAClBod,MAAO9C,GAAW7f,GAAWuF,cAKnC,eAAC,GAAD,UACE,gBAAC,GAAD,CACEnK,GAAE,6BACFunB,MAAM,sBACNjB,aAAa,GACbjhB,MAAK,UAAEJ,KAAKmhB,MAAM6F,sBAAb,QAA+B,GACpC1D,SAAUtjB,KAAKwnB,kBALjB,UAOE,eAAC,GAAOhE,KAAR,CAAapjB,MAAM,GAAGkiB,MAAM,KAC3BtiB,KAAKmhB,MAAMoG,iBACRzL,OAAOC,KACL/b,KAAKohB,MAAMgH,aAAapoB,KAAKmhB,MAAMoG,mBACnCnsB,KAAI,SAACL,GAAD,OACJ,eAAC,GAAOyoB,KAAR,CAEEpjB,MAAOrF,EACPunB,MAAOhoB,EAAkBS,IAFpBA,MAKT,aAKV,sBAAK0nB,UAAU,cAAf,SACE,eAAC,GAAD,UACE,eAAC4F,GAAA,EAAD,CACEC,QAAQ,YACR9F,KAAK,KACL+F,QAASvoB,KAAKynB,gBAHhB,0BAUJ,uBAAKhF,UAAU,cAAf,UACGziB,KAAKmhB,MAAM2F,aAAarJ,OAAS,GAChC,2DAGDzd,KAAKmhB,MAAM2F,aAAa1rB,KAAI,gBAAGgG,EAAH,EAAGA,KAAMqkB,EAAT,EAASA,MAAT,OAC3B,+BACGrrB,EAAYgH,GAAM0Z,KADrB,KAC6B2K,IADrBrkB,uB,GAzMGshB,IAAMC,WCcpB6F,G,4MAlCb5E,oBAAsB,WACpB,IAAM3F,EAAS,YAAO,EAAKmD,MAAMuD,SAAS1G,WAC1C,EAAKmD,MAAMuG,iBAAiB,CAAE1J,cAC9B,EAAKmD,MAAMwG,YAAY,CAAE3J,e,4CAG3B,WAAU,IAAD,OACD0G,EAAW3kB,KAAKohB,MAAMuD,SAE5B,OACE,gBAAC8D,EAAA,EAAD,CACE1tB,GAAG,kBACH0nB,UAAU,sDACViG,GAAG,OACHC,GAAI,GAJN,UAME,sBAAKlG,UAAU,mBAAf,SACE,8CAEF,eAAC,GAAD,eAAoBziB,KAAKohB,QACzB,sBAAKqB,UAAU,eAAf,SACGkC,EAAS1G,UAAU7iB,KAAI,SAACojB,GAAD,OACtB,eAAC,GAAD,CACEA,SAAUA,EACVoF,oBAAqB,EAAKA,qBACrBpF,EAASxf,kB,GA1BC0jB,IAAMC,WCepBiG,G,4MA3BbtF,SAAW,SAACljB,GACV,EAAKghB,MAAMyH,iBAAiBzoB,I,4CAG9B,WACE,OACE,gBAAC,GAAD,CACErF,GAAE,uBAAkBiF,KAAKohB,MAAM0H,OAC/BxG,MAAM,GACNjB,aAAa,GACbjhB,MAAOJ,KAAKohB,MAAM2H,cAClBzF,SAAUtjB,KAAKsjB,SACf/B,cAAc,EANhB,UAQE,eAAC,GAAOiC,KAAR,CAAalB,MAAM,GAAGliB,MAAM,W9GsQJlB,IAA1B/E,IACFA,EAAwB2hB,OAAOI,QAAQ9e,GACpC4rB,MAAK,qCAAcC,GAAd,UAAQnO,MAAR,mBAAqCoO,GAArC,UAA+BpO,MAA/B,OACJmO,EAAME,cAAcD,MAErB9tB,KAAI,mCAAEL,EAAF,iBAAaA,MAGfZ,G8G7QgCiB,KAAI,SAAC2tB,GAAD,OACnC,eAAC,GAAOvF,KAAR,CACElB,MAAOhH,GAAwByN,GAAejO,KAC9C1a,MAAO2oB,GACFA,a,GApBerG,IAAMC,WCFvByG,G,4JALb,WACE,OAAO,eAACrG,EAAA,EAAD,CAAKN,UAAU,yBAAf,SAAyCziB,KAAKohB,MAAM4B,e,GAFtCN,IAAMC,WC6EhB0G,G,4MA9DbC,oBAAsB,SAACriB,GAAD,OAA4B,SAAC7G,GACjD6G,EAAO7G,MAAQA,EACf,EAAKghB,MAAMmI,kB,EAGbC,mBAAqB,SAACviB,GAAD,OAA2B,SAAC7G,GAC/C6G,EAAO7G,MAAQA,EACf,EAAKghB,MAAMmI,kB,EAGbE,mBAAqB,SAACxiB,GAAD,OAA2B,SAAC7G,GAC/C6G,EAAO7G,MAAQA,EACf,EAAKghB,MAAMmI,kB,4CAGb,WACE,IAAQtiB,EAAWjH,KAAKohB,MAAhBna,OAER,OAAID,GAAgBC,GAEhB,eAAC,GAAD,CACElM,GAAE,UAAKkM,EAAOlM,GAAZ,UACFunB,MAAO3E,GAAc1W,EAAOlM,IAC5BsmB,aAAcpa,EAAO7G,MACrBA,MAAO6G,EAAO7G,MACdkjB,SAAUtjB,KAAKspB,oBAAoBriB,KAG9BC,GAAeD,GAEtB,gBAAC,GAAD,CACElM,GAAE,UAAKkM,EAAOlM,GAAZ,UACFunB,MAAO3E,GAAc1W,EAAOlM,IAC5BsmB,aAAcpa,EAAO7G,MACrBA,MAAO6G,EAAO7G,MACdkjB,SAAUtjB,KAAKwpB,mBAAmBviB,GALpC,UAOE,eAAC,GAAOuc,KAAR,CAAalB,MAAM,GAAGliB,MAAM,KAC3B6G,EAAO5G,QAAQjF,KAAI,SAACsuB,GAAD,OAClB,eAAC,GAAOlG,KAAR,CACElB,MAAO9C,GAAWkK,GAClBtpB,MAAOspB,GACFA,SAKJviB,GAAeF,GAEtB,eAAC,GAAD,CACElM,GAAE,UAAKkM,EAAOlM,GAAZ,UACFunB,MAAO3E,GAAc1W,EAAOlM,IAC5BsmB,aAAcpa,EAAO7G,MACrBA,MAAO6G,EAAO7G,MACd4hB,QAAShiB,KAAKypB,mBAAmBxiB,GACjCwb,UAAU,qBART,M,GAhDeC,IAAMC,WCyFjBgH,G,4MAhFbd,iBAAmB,SAAC5b,GAAD,OAAe,SAAClS,GACjC,IAAQ6uB,EAAiB,EAAKxI,MAAMuD,SAA5BiF,aACRA,EAAa3c,GAAGlS,GAAKA,EACrB,IAAM8uB,EAAqBD,EAAapN,SACtC,SAACsN,GAAD,OAAiBA,EAAYliB,WAE/B,EAAKwZ,MAAM2I,yBAAyB,CAClCH,eACAC,uBAEF,EAAKzI,MAAMwG,YAAY,CACrBgC,aAAa,YAAKA,GAClBC,yB,EAIJG,qBAAuB,SAAC/c,GAAD,OAAe,SAAC3N,GACrC,IAAQsqB,EAAiB,EAAKxI,MAAMuD,SAA5BiF,aACRA,EAAa3c,GAAG3N,OAASA,EACzB,IAAMuqB,EAAqBD,EAAapN,SACtC,SAACsN,GAAD,OAAiBA,EAAYliB,WAE/B,EAAKwZ,MAAM2I,yBAAyB,CAClCH,eACAC,uBAEF,EAAKzI,MAAMwG,YAAY,CACrBgC,aAAa,YAAKA,GAClBC,yB,EAIJN,cAAgB,WACd,IAAQM,EAAuB,EAAKzI,MAAMuD,SAAlCkF,mBACR,EAAKzI,MAAM2I,yBAAyB,CAAEF,uBACtC,EAAKzI,MAAMwG,YAAY,CAAEiC,mBAAmB,YAAKA,M,4CAGnD,WAAU,IAAD,OACP,EAA6C7pB,KAAKohB,MAAMuD,SAAhDiF,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,mBAEtB,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,UACE,iDAED,CAAC,EAAG,EAAG,GAAGzuB,KAAI,SAAC6R,GAAD,OACb,gBAAC,GAAD,WACE,eAAC,GAAD,CACE6b,MAAO7b,EACP8b,cAAea,EAAa3c,GAAGlS,GAC/B8tB,iBAAkB,EAAKA,iBAAiB5b,KAG1C,mCAEA,eAAC,GAAD,CACElS,GAAE,uBAAkBkS,EAAlB,QACFqV,MAAM,GACNjB,aAAcviB,IACdsB,MAAOwpB,EAAa3c,GAAG3N,OACvB0iB,QAAS,EAAKgI,qBAAqB/c,GACnCsU,cAAc,EACdkB,UAAU,gBAGZ,sCAnBaxV,MAuBhB4c,EAAmBzuB,KAAI,SAAC6L,GAAD,OACtB,eAAC,GAAD,UACE,eAAC,GAAD,CAAaA,OAAQA,EAAQsiB,cAAe,EAAKA,iBADpCtiB,EAAOlM,c,GAxEI2nB,IAAMC,WCY3BsH,G,4MA1Bb3G,SAAW,SAACljB,GACV,EAAKghB,MAAM8I,eAAe9pB,I,4CAG5B,WACE,OACE,gBAAC,GAAD,CACErF,GAAG,mBACHunB,MAAM,aACNjB,aAAa,GACbjhB,MAAOJ,KAAKohB,MAAMlmB,YAClBooB,SAAUtjB,KAAKsjB,SALjB,UAOE,eAAC,GAAOE,KAAR,CAAalB,MAAM,GAAGliB,MAAM,WlHgPNlB,IAAxBjF,IACFA,EAAsB6hB,OAAOI,QAAQxhB,GAClCsuB,MAAK,qCAAcC,GAAd,UAAQnO,MAAR,mBAAqCoO,GAArC,UAA+BpO,MAA/B,OACJmO,EAAME,cAAcD,MAErB9tB,KAAI,mCAAEL,EAAF,iBAAaA,MAGfd,GkHvP8BmB,KAAI,SAACL,GAAD,OACjC,eAAC,GAAOyoB,KAAR,CACElB,MAAOhH,EAAsBvgB,GAAI+f,KACjC1a,MAAOrF,GACFA,a,GAnBa2nB,IAAMC,WC4FrBwH,G,4MA3EbD,eAAiB,SAACnvB,GAChB,IAAM+iB,EAAY,EAAKsD,MAAMuD,SAAS7G,UACtCA,EAAU/iB,GAAKA,EACf,IAAM8K,EAAmBiY,EAAUsM,aACnC,EAAKhJ,MAAMuG,iBAAiB,CAAE7J,YAAWjY,qBACzC,EAAKub,MAAMwG,YAAY,CAAE9J,YAAWjY,sB,EAGtCwkB,kBAAoB,SAAC1uB,GACnB,IAAMmiB,EAAY,EAAKsD,MAAMuD,SAAS7G,UACtCA,EAAUniB,MAAQA,EAClB,IAAMkK,EAAmBiY,EAAUsM,aACnC,EAAKhJ,MAAMuG,iBAAiB,CAAE7J,YAAWjY,qBACzC,EAAKub,MAAMwG,YAAY,CAAE9J,YAAWjY,sB,EAGtCykB,uBAAyB,SAACC,GACxB,IAAMzM,EAAY,EAAKsD,MAAMuD,SAAS7G,UACtCA,EAAUlD,YAAc2P,EACxB,IAAM1kB,EAAmBiY,EAAUsM,aACnC,EAAKhJ,MAAMuG,iBAAiB,CAAE7J,YAAWjY,qBACzC,EAAKub,MAAMwG,YAAY,CAAE9J,YAAWjY,sB,EAGtC0jB,cAAgB,WACd,IAAQ1jB,EAAqB,EAAKub,MAAMuD,SAAhC9e,iBACR,EAAKub,MAAMuG,iBAAiB,CAAE9hB,qBAC9B,EAAKub,MAAMwG,YAAY,CAAE/hB,iBAAiB,YAAKA,M,4CAGjD,WAAU,IAAD,OACC8e,EAAa3kB,KAAKohB,MAAlBuD,SAER,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,UACE,eAAC,GAAD,CACEzpB,YAAaypB,EAAS7G,UAAU/iB,GAChCmvB,eAAgBlqB,KAAKkqB,mBAIzB,eAAC,GAAD,UACE,eAAC,GAAD,CACEnvB,GAAG,wBACHunB,MAAM,SACNjB,aAAc,EACdjhB,MAAOukB,EAAS7G,UAAUniB,MAC1BqmB,QAAShiB,KAAKqqB,kBACd5H,UAAU,kBAId,eAAC,GAAD,UACE,eAAC,GAAD,CACE1nB,GAAG,+BACHunB,MAAM,YACNjB,cAAc,EACdjhB,MAAOukB,EAAS7G,UAAUlD,YAC1B0I,SAAUtjB,KAAKsqB,2BAIlB3F,EAAS9e,iBAAiBzK,KAAI,SAAC6L,GAC9B,OACE,eAAC,GAAD,UACE,eAAC,GAAD,CAAaA,OAAQA,EAAQsiB,cAAe,EAAKA,iBADpCtiB,EAAOlM,c,GAlEA2nB,IAAMC,W,kBC0GzB6H,G,4MAlGbC,cAAgB,SAAC9uB,GACf,EAAKylB,MAAMsJ,mBAAmB,CAAEve,WAAYxQ,IAC5C,EAAKylB,MAAMwG,YAAY,CAAEzb,WAAYxQ,K,EAGvCgvB,YAAc,SAAC3rB,GAAD,OAAmB,SAACoB,GAChC,IAAMqM,EAAW,EAAK2U,MAAMuD,SAASlY,SACrCA,EAASjD,IAAIxK,EAAMoB,EAAQ,KAC3B,EAAKghB,MAAMsJ,mBAAmB,CAAEje,aAChC,EAAK2U,MAAMwG,YAAY,CAAEnb,e,EAG3Bme,YAAc,SAAClf,GACb,EAAK0V,MAAMsJ,mBAAmB,CAAEhf,aAChC,EAAK0V,MAAMwG,YAAY,CAAElc,c,EAG3Bmf,YAAc,SAACtgB,GACb,EAAK6W,MAAMsJ,mBAAmB,CAC5BngB,SAAU1B,GAAS0B,KAErB,EAAK6W,MAAMwG,YAAY,CACrBrd,SAAU1B,GAAS0B,M,4CAIvB,WAAU,IAAD,OACP,EAAqDvK,KAAKohB,MAAMuD,SAAxDxY,EAAR,EAAQA,WAAYM,EAApB,EAAoBA,SAAUf,EAA9B,EAA8BA,SAAUnB,EAAxC,EAAwCA,SACxC,OACE,gBAAC,GAAD,WACE,gBAAC,GAAD,mBAEE,gBAACugB,GAAA,EAAD,CACEhQ,KAAK,kBACL9b,KAAK,QACLwjB,KAAK,KACLpiB,MAAOsL,EACP4X,SAAUtjB,KAAK4qB,YALjB,UAOE,eAACG,GAAA,EAAD,CAAc3qB,MAAM,OAAOkoB,QAAQ,oBAAnC,kBAGA,eAACyC,GAAA,EAAD,CAAc3qB,MAAM,OAAOkoB,QAAQ,oBAAnC,kBAGA,eAACyC,GAAA,EAAD,CAAc3qB,MAAM,UAAUkoB,QAAQ,oBAAtC,2BAMJ,eAAC,GAAD,UACE,eAAC,GAAD,CACEvtB,GAAG,oBACHunB,MAAM,eACNjB,aAAc,EACdjhB,MAAO+L,EACP6V,QAAShiB,KAAKyqB,cACdhI,UAAU,kBAIb3G,OAAOyB,OAAO3d,IAASxE,KAAI,SAACsO,GAAD,OAC1B,gBAAC,GAAD,WACE,eAAC,GAAD,CACE3O,GAAE,oBAAe2O,EAAf,UACF4Y,MAAK,gBAAW9C,GAAW9V,GAAtB,SACL2X,aAAc,EACdjhB,MAA+B,IAAxBqM,EAAS9C,IAAID,GACpBsY,QAAS,EAAK2I,YAAYjhB,GAC1B+Y,UAAU,gBAEZ,qCATa/Y,MAajB,eAAC,GAAD,UACE,eAAC,GAAD,CACE3O,GAAG,kBACHunB,MAAM,YACNjB,aAAcxY,GAASiF,KACvB1N,MAAOmK,EACP+Y,SAAUtjB,KAAK6qB,YALjB,SAOG/O,OAAOyB,OAAO1U,IAAUzN,KAAI,SAACmP,GAAD,OAC3B,eAAC,GAAOiZ,KAAR,CAEElB,MAAO9C,GAAWjV,GAClBnK,MAAOmK,GAFFA,iB,GAvFYmY,IAAMC,W,SCTjCqI,GAAoC,CAAEpjB,QAAS,IA+E/CqjB,GAA8C,CAClDrjB,QAASnF,IAsBLyoB,GAA8C,CAClDtjB,QAAS5G,GAETmqB,aAAc,SAACpuB,GACb,MAAO,CACL,CACEqE,KAAM,mBACNhB,MAAOrD,EAAO,IAEhB,CACEqE,KAAM,kBACNhB,MAAOrD,EAAO,IAEhB,CACEqE,KAAM,mBACNhB,MAAOrD,EAAO,IAEhB,CACEqE,KAAM,eACNhB,MAAOrD,EAAO,OAoGTihB,GAAuD,CAClEgN,mBACAI,qBA7N6C,CAC7CxjB,QAAS,GAETujB,aAAc,SAACpuB,GACb,MAAO,CACL,CACEqE,KAAM,kBACNhB,MAAOrD,EAAO,OAuNpBsuB,sBAjN8C,CAC9CzjB,QAAS,GAETujB,aAAc,SAACpuB,GAEb,MADiB,CAAC,QAAS,OAAQ,UAAW,MAAO,QAAS,QAC9C3B,KAAI,SAACsO,GACnB,MAAO,CACLtI,KAAK,GAAD,OAAKsI,EAAL,OACJtJ,MAAOrD,EAAO,SA0MpBuuB,uBApM+C,CAC/C1jB,QAAS,GAETujB,aAAc,SAACpuB,GACb,MAAO,CACL,CACEqE,KAAM,iBACNhB,MAAOrD,EAAO,IAEhB,CACEqE,KAAM,kBACNhB,MAAOrD,EAAO,OA0LpBwuB,oBApL4C,CAC5C3jB,QAAS,GAETujB,aAAc,SAACpuB,GACb,MAAO,CACL,CACEqE,KAAM,gBACNhB,MAAOrD,EAAO,OA8KpByuB,oBAxK4C,CAC5C5jB,QAAS,GAETujB,aAAc,SAACpuB,GAKb,MAAO,CACL,CACEqE,KAAM,iBACNhB,MAAOrD,EAAO,OA8JpB0uB,qBAjJ6C,CAC7C7jB,QAAS,GAETujB,aAAc,SAACpuB,GAIb,MAAO,CACL,CACEqE,KAAM,kBACNhB,MAAOrD,EAAO,OAwIpB2uB,uBAtG+C,CAC/C9jB,QAAS,GAETujB,aAAc,SAACpuB,GACb,MAAO,CACL,CACEqE,KAAM,gBACNhB,MAAOrD,EAAO,OAgGpB4uB,yCA1FiE,CACjE/jB,QAAS,GAETtH,UAAW,CACT0H,SAAUP,GAASQ,KACnB1H,MAAO,SAACC,GAAkB,IAAD,EACjBzD,EAASsC,GAA0B,sBAAuB,GAC5DoG,EAAgB1I,EAAO,GAAKyD,EAAM0H,eAClCzC,EAAgB1I,EAAO,KACzB0I,EAAgB1I,EAAO,IAGzByD,EAAMiF,cAAgBA,GAAa,UAAIjF,EAAMiF,qBAAV,QAA2B,MAiFlEmmB,kBA5E0C,CAC1ChkB,QAAS9G,IA4ET+qB,6BAzEqD,CACrDjkB,QAASnH,IAyETqrB,uCAtE+D,CAC/DlkB,QAAS9F,IAsETiqB,0CAnEkE,CAClEnkB,QAASnG,IAmETuqB,kCAhE0D,CAC1DpkB,QAASjH,IAgETsrB,8BA7DsD,CACtDrkB,QAASpF,IA6DT0pB,oCA1D4D,CAC5DtkB,QAASjG,IA0DTwqB,wBAvDgD,CAChDvkB,QAAShG,IAuDTwqB,mCApD2D,CAC3DxkB,QAAS7F,IAoDTsqB,0BAjDkD,CAClDzkB,QAAShH,IAiDT0rB,qCA9C6D,CAC7D1kB,QAASzH,IA8CTosB,uBA3C+C,CAC/C3kB,QAASzF,IA2CTqqB,4CAxCoE,CACpE5kB,QAASrG,IAwCTkrB,sCArC8D,CAC9D7kB,QAAStF,IAqCToqB,0CAlCkE,CAClE9kB,QAAS3F,IAkCT0qB,iCA/ByD,CACzD/kB,QAASxF,IAkCT6oB,6BAIAC,6BAIA0B,8BAA+B5B,GAI/B6B,2BAA4B7B,GAI5B8B,+BAAgC9B,GAGhC+B,0BAA2B/B,GAG3BgC,2BAA4BhC,GAC5BiC,0CAA2CjC,GAG3CkC,oBAAqBlC,GAGrBmC,mBAAoBnC,GAGpBoC,kBAAmBpC,GAGnBqC,qBAAsBrC,GACtBsC,sBAAuBtC,GACvBuC,yBAA0BvC,GAC1BwC,oBAAqBxC,IC/SFyC,G,WACnB,WAAY1yB,EAAYuE,GAAkB,yBAKlCub,IAAc,GALmB,KAyBzCC,UAzByC,OA0BzC4S,qBA1ByC,OA2BzCC,kBA3ByC,OA6BjCC,QAAkB,EA7Be,KA2CzChmB,QAA+B,GA3CU,KA4CzCpH,MAAe,GA5C0B,KA6CzCqtB,aAAsC,GA7CG,KA8CzCC,WAAiC,QA7ChB5uB,IAAXI,IAAsBU,KAAK4tB,QAAUtuB,GACzCU,KAAKjF,GAAKA,E,oCAIZ,WACE,OAAOiF,KAAK6a,K,IAEd,SAAOza,GAELJ,KAAK6a,IAAMza,EAEX,IAAMkb,EAAOnc,GAAmBiB,GAChCJ,KAAK8a,KAAL,OAAYQ,QAAZ,IAAYA,OAAZ,EAAYA,EAAMR,KAClB9a,KAAK0tB,gBAAL,OAAuBpS,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAMoS,gBAE7B1tB,KAAK2tB,aAAevuB,GAAwBgB,GAE5CJ,KAAK6tB,aAAe7tB,KAAK+tB,kBAAkB/tB,KAAKV,QAChDU,KAAKQ,MAAQR,KAAKye,WAClBze,KAAK8tB,WAAa9tB,KAAKguB,gBACvBhuB,KAAK4H,QAAU5H,KAAKoqB,WAAWpqB,KAAKV,U,kBAQtC,WACE,OAAOU,KAAK4tB,S,IAEd,SAAWxtB,GACT,IAAM6tB,EAAajuB,KAAKV,OACxBU,KAAK4tB,QAAUxtB,EAEfJ,KAAK6tB,aAAe7tB,KAAK+tB,kBAAkB/tB,KAAKV,QAChDU,KAAKQ,MAAQR,KAAKye,WAClBze,KAAK8tB,WAAa9tB,KAAKguB,gBACvBhuB,KAAK4H,QAAU5H,KAAKoqB,WAAWpqB,KAAKV,OAAQ2uB,K,+BAQ9C,SAAkB3uB,GAAwC,IAAD,OACvD,YAA6BJ,IAAzBc,KAAK0tB,gBAAsC,GAExC1tB,KAAK0tB,gBACTnR,QAAO,SAACrc,GAAD,OAAeZ,GAAUY,KAChC9E,KAAI,SAAC8E,GAAD,uBAAe,EAAKytB,oBAApB,aAAe,EAAoBztB,MACvCqc,QAAO,SAACF,GAAD,YAAmDnd,IAAVmd,O,sBAGrD,WACE,IAAI7b,EAAe,GAEfstB,EAAa9tB,KAAK6tB,aA+BtB,OA9BU,OAAVC,QAAU,IAAVA,KAAY3R,SAAQ,SAAC+R,GAEX,OAARA,QAAQ,IAARA,KAAUhtB,QAAQib,SAAQ,SAACgS,QACKjvB,IAA1BsB,EAAM2tB,EAAU/sB,MAClBZ,EAAM2tB,EAAU/sB,OAAS+sB,EAAU/tB,MAEnCI,EAAM2tB,EAAU/sB,MAAQ+sB,EAAU/tB,SAKtC,IAAIguB,EAAU,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAU3uB,WAC3B,QAAmBL,IAAfkvB,GAAgD,KAApBA,EAAWpvB,KAAa,CAAC,IAAD,MAClDqvB,EAAa,UACfC,GAAaF,EAAWpvB,aADT,QACkBsvB,GAAY,gBAE3CvxB,EAASqxB,EAAWrxB,QAEV,oBAAGsxB,EAAclD,oBAAjB,aAAG,OAAAkD,EAA6BtxB,UAAhC,QAA2C,IAE9Cof,SAAQ,SAACgS,QACYjvB,IAA1BsB,EAAM2tB,EAAU/sB,MAClBZ,EAAM2tB,EAAU/sB,OAAS+sB,EAAU/tB,MAEnCI,EAAM2tB,EAAU/sB,MAAQ+sB,EAAU/tB,aAMnCI,I,wBAGT,SAAWlB,EAAgB2uB,GACzB,QAAmB/uB,IAAf+uB,GAA4BrkB,MAAMqkB,GAEpC,OADgBjuB,KAAK8tB,WAAWtR,SAAQ,SAAC0R,GAAD,OAAcA,EAAStmB,WAChDxM,KAAI,SAAC2E,GAAD,OAAY,IAAIA,KAC9B,GAAIT,IAAW2uB,EACpB,OAAOjuB,KAAK4H,QACP,GAAItI,EAAS2uB,EAAY,CAC9B,IAAMtR,EAAe3c,KAAK4H,QAAQxM,KAAI,qBAAGL,MACnC6hB,EAAa5c,KAAK8tB,WACrBtR,SAAQ,SAAC0R,GAAD,OAAcA,EAAStmB,WAC/BxM,KAAI,SAAC2E,GAAD,OAAY,IAAIA,KACpBwc,QAAO,gBAAGxhB,EAAH,EAAGA,GAAH,OAAa4hB,EAAanV,SAASzM,MAC7C,OAAOiF,KAAK4H,QAAQiV,OAAOD,GAE3B,IAAME,EAAgB9c,KAAK8tB,WACxBtR,SAAQ,SAAC0R,GAAD,OAAcA,EAAStmB,WAC/BxM,KAAI,SAAC2E,GAAD,OAAY,IAAIA,GAAShF,MAChC,OAAOiF,KAAK4H,QAAQ2U,QAAO,gBAAGxhB,EAAH,EAAGA,GAAH,OAAY+hB,EAActV,SAASzM,Q,2BAIlE,WAEE,OADqBiF,KAAK6tB,aACNzyB,KAAI,SAACsC,GAAiB,IAAD,EACjC6wB,EAAY,OAAG7wB,QAAH,IAAGA,OAAH,EAAGA,EAAa6B,WAAWP,KAC7C,iBAAOsvB,GAAaC,UAApB,QAAqCD,GAAY,qB,2BAIrD,WACE,OAAOtuB,KAAK8tB,WACT1yB,KAAI,qBAAGkF,aACPic,QAAO,SAACQ,GAAD,YAAyC7d,IAAV6d,O,+BAG3C,WACE,OAAO/c,KAAK8tB,WACT1yB,KAAI,qBAAG0H,iBACPyZ,QAAO,SAACQ,GAAD,YAA6C7d,IAAV6d,S,KC9I5ByR,G,kDACnB,aAA8B,IAAlBzzB,EAAiB,uDAAJ,GAAI,uCACrBA,G,UAFgCgF,ICO1C,IAAM0uB,GAAkD,CAEtDC,iCCNK,SAA4B3xB,GAoBjC,MAAO,CACLhC,GAAI,cACJ6M,QAAS,CAtB2D,kDAOpE,aAAe,IAAD,8BACZ,cAAM,uBAHRxH,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACW,IAAD,EAAZ,EAAKJ,QACPI,EAAMO,SAAWhE,EAAO,IAAP,UAAayD,EAAMO,gBAAnB,QAA+B,MAPxC,EAPsD,UAE5DytB,ODKVG,iBENK,SAA4B5xB,GA4BjC,MAAO,CACLhC,GAAI,cACJ6M,QAAS,CA9B2D,kDAOpE,aAAe,IAAD,8BACZ,cAAM,wBAHRxH,OAAQ,EAEM,EAIdE,UAAY,CACV0H,SAAUP,GAASQ,KACnB1H,MAAO,SAACC,GAAkB,IAAD,QACjBouB,GACJ,UAACpuB,EAAM2D,cAAP,QAAiB,IAAM,aAAK3D,EAAM4D,eAAX,QAAsB,KAA7C,UACC5D,EAAM6D,cADP,QACiB,GAEfH,EAAe0qB,EAAU7xB,EAAO,GAChC,EAAKqD,QACP8D,GAAgB0qB,EAAU7xB,EAAO,IAGnCyD,EAAM+D,QAAUL,GAAY,UAAI1D,EAAM+D,eAAV,QAAqB,KAhBvC,EAPsD,UAE5DiqB,OFKVK,iBGVK,SAAyB9xB,GAC9B,MAAO,CACLhC,GAAI,WACJ6M,QAAS,GACTtH,UAAW,CACTC,MAAO,SAACC,GAAkB,IAAD,IACvBA,EAAMiF,cAAgB1I,EAAO,IAAP,UAAayD,EAAMiF,qBAAnB,QAAoC,GAC1DjF,EAAMuL,cAAgBhP,EAAO,IAAP,UAAayD,EAAMuL,qBAAnB,QAAoC,OHIhE+iB,qBIRK,SAAmC/xB,GAoBxC,MAAO,CACLhC,GAAI,qBACJ6M,QAAS,CAtBkE,kDAO3E,aAAe,IAAD,8BACZ,cAAM,qCAHRxH,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACW,IAAD,EAAZ,EAAKJ,QACPI,EAAM0H,eAAiBnL,EAAO,IAAP,UAAayD,EAAM0H,sBAAnB,QAAqC,MAPpD,EAP6D,UAEnEsmB,KAsBRluB,UAAW,CACT0H,SAAUP,GAASQ,KACnB1H,MAAO,SAACC,GAAkB,IAAD,EACnBwB,GAAYxB,EAAM0H,eAAiB,GAAKnL,EAAO,GAC/CiF,EAAWjF,EAAO,KACpBiF,EAAWjF,EAAO,IAGpByD,EAAMwB,SAAWA,GAAQ,UAAIxB,EAAMwB,gBAAV,QAAsB,OJrBrD+sB,8BKdK,SAAiChyB,GACtC,MAAO,CACLhC,GAAI,mBACJ6M,QAAS,GAETtH,UAAW,CACTC,MAAO,SAACC,GAAkB,IAAD,EACvBA,EAAMiF,cAAgB1I,EAAO,IAAP,UAAayD,EAAMiF,qBAAnB,QAAoC,OLUhEupB,2CMfK,SAA2BjyB,GAwChC,MAAO,CACLhC,GAAI,aACJ6M,QAAS,CA1C0D,kDAOnE,aAAe,IAAD,8BACZ,cAAM,2BAHRxH,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACW,IAAD,IAAZ,EAAKJ,QACPI,EAAM6e,cAAgBtiB,EAAO,IAAP,UAAayD,EAAM6e,qBAAnB,QAAoC,GAC1D7e,EAAMiF,cAAgB1I,EAAO,IAAP,UAAayD,EAAMiF,qBAAnB,QAAoC,MARlD,EAPqD,UAE3D+oB,IAF2D,kDA2BnE,aAAe,IAAD,8BACZ,cAAM,yBAHRpuB,OAAQ,EAEM,EAIdE,UAAY,CACVC,MAAO,SAACC,GACW,IAAD,EAAZ,EAAKJ,QACPI,EAAMgB,eAAiBzE,EAAO,IAAP,UAAayD,EAAMgB,sBAAnB,QAAqC,MAPpD,EA3BqD,UAsB3DgtB,ONNVS,wBOjBK,SACLlyB,GAEA,MAAO,CACLhC,GAAI,sBACJ6M,QAAS,GACT9E,cAAe,CACbvC,MAAO,SAACwC,EAA0BvC,GAAkB,IAAD,IACjDuC,EAASoI,oBACPpO,EAAO,IAAP,UAAayD,EAAM6D,cAAnB,QAA6B,IAA7B,UAAmCtB,EAASoI,2BAA5C,QAAmE,QPW7E,SAASvC,KACP,MAAO,GAGF,SAASsmB,GAAmBzS,GAAoB,IAAD,EACpD,iBAAOgS,GAAehS,UAAtB,QAAoC7T,G,IQPjBumB,G,WACnB,WACEp0B,EACAY,EACAif,EACAnb,GACC,yBAQKob,IAAc,GARpB,KAqCFC,UArCE,OAsCF9b,UAtCE,OAuCFowB,UAvCE,OAwCFrU,eAxCE,OAyCFC,sBAzCE,OA0CF1f,sBA1CE,OA2CF+zB,oBA3CE,OA6CMC,aAAuB,EA7C7B,KAsDMnU,cAAwB,EAtD9B,KA+DMoU,YAAsB,EA/D5B,KA4EF/uB,MAAe,GA5Eb,KA6EFwD,iBA7EE,OA8EFtE,aA9EE,OA+EF2b,eAAiC,GA9E/Brb,KAAKsvB,aAAe3zB,EACpBqE,KAAKmb,aAAeP,EACpB5a,KAAKuvB,YAAc9vB,EAEnBO,KAAKjF,GAAKA,E,oCAIZ,WACE,OAAOiF,KAAK6a,K,IAEd,SAAOza,GAELJ,KAAK6a,IAAMza,EAEX,IAAMkb,EAAOnd,GAAQiC,GACrBJ,KAAK8a,KAAL,OAAYQ,QAAZ,IAAYA,OAAZ,EAAYA,EAAMR,KAClB9a,KAAKhB,KAAL,OAAYsc,QAAZ,IAAYA,OAAZ,EAAYA,EAAMtc,KAClBgB,KAAKovB,KAAL,OAAY9T,QAAZ,IAAYA,OAAZ,EAAYA,EAAM8T,KAClBpvB,KAAK+a,UAAL,OAAiBO,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMP,UACvB/a,KAAKgb,iBAAL,OAAwBM,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAM1f,WAC9BoE,KAAK1E,iBhImJA+C,EgInJyC+B,EhImJflE,GgIjJ/B8D,KAAKqvB,ehIwJF,SAA8Bt0B,GACnC,OAAOoD,EAAQpD,EAAIkD,GgIzJKuxB,CAAqBpvB,QACflB,IAAxBc,KAAKqvB,iBACPrvB,KAAKgE,YAAcxE,GACjBQ,KAAKP,WACLO,KAAKqvB,gBAEPrvB,KAAKN,QAAUM,KAAKyvB,WAAWzvB,KAAKgE,aACpChE,KAAKqb,eAAiBrb,KAAK4b,qBAG7B5b,KAAKQ,MAAQR,KAAK0vB,WAAW1vB,KAAK2vB,YAAa3vB,KAAK4a,e,uBAYtD,WACE,OAAO5a,KAAKsvB,c,IAEd,SAAgBlvB,GACdJ,KAAKsvB,aAAelvB,EACpBJ,KAAKQ,MAAQR,KAAK0vB,WAAWtvB,EAAOJ,KAAK4a,e,uBAI3C,WACE,OAAO5a,KAAKmb,c,IAEd,SAAgB/a,GACdJ,KAAKmb,aAAe/a,EACpBJ,KAAKQ,MAAQR,KAAK0vB,WAAW1vB,KAAK2vB,YAAavvB,K,sBAIjD,WACE,OAAOJ,KAAKuvB,a,IAEd,SAAenvB,GACbJ,KAAKuvB,YAAcnvB,OACSlB,IAAxBc,KAAKqvB,iBACPrvB,KAAKgE,YAAcxE,GAAmBY,EAAOJ,KAAKqvB,gBAClDrvB,KAAKN,QAAUM,KAAKyvB,WAAWzvB,KAAKgE,aACpChE,KAAKqb,eAAiBrb,KAAK4b,mBAAkB,M,uBASjD,WACE,MAAmB,KAAZ5b,KAAKjF,K,wBAId,SAAW40B,EAAqB/U,GAC9B,QACgB1b,IAAdc,KAAKovB,WACclwB,IAAnBc,KAAK+a,gBACqB7b,IAA1Bc,KAAKgb,uBACqB9b,IAA1Bc,KAAK1E,iBAGL,MAAO,GAGT,GACEsO,MAAM+lB,IACNA,EAAc,GACb3vB,KAAKovB,MAAQ,GAAKO,EAAc,IACjCA,EAAc,GAcd,YAVmBzwB,IAAfc,KAAKQ,MAEOsb,OAAOC,KAAK/b,KAAKQ,OAAO5F,QAAO,SAACohB,EAAK5a,GAEjD,OADA4a,EAAI5a,GAAQtC,IACLkd,IACN,IAEW,GAQlB,IAAIoC,EAAW,eAAQpe,KAAK+a,WAExB6U,EhImDCtxB,EgInDiCqxB,EhImDXrzB,GgIhD3Bwf,OAAOI,QAAQlc,KAAKgb,kBAAkBmB,SAAQ,YAAoB,IAAD,mBAAjB/a,EAAiB,KAAXgb,EAAW,KAC3DpS,EAAa4lB,EAAiBxT,GAClCgC,EAAYhd,IAAS4I,KA2BvB,IAAI1O,EAAmBmD,GApBrBuB,KAAKovB,KAAO,IACXO,EAAc,IAAuB,KAAhBA,GAAsB/U,GAE3B,EAEjB5a,KAAKovB,KAAO,IACXO,EAAc,IAAuB,KAAhBA,GAAsB/U,GAE3B,EACR+U,EAAc,IAAuB,KAAhBA,GAAsB/U,EACnC,EACR+U,EAAc,IAAuB,KAAhBA,GAAsB/U,EACnC,EACR+U,EAAc,IAAuB,KAAhBA,GAAsB/U,EACnC,EACR+U,EAAc,IAAuB,KAAhBA,GAAsB/U,EACnC,EAEA,EAIjB5a,KAAK1E,kBAaP,YAVyB4D,IAArB5D,GACFwgB,OAAOI,QAAQ5gB,GAAkB6gB,SAAQ,YAAoB,IAAD,mBAAjB/a,EAAiB,KAAXib,EAAW,KACtDjb,KAAQgd,EACVA,EAAYhd,IAASib,EAErB+B,EAAYhd,GAAQib,KAKnB+B,I,wBAKT,SAAWpa,GACT,YAAoB9E,IAAhB8E,EACKkrB,GAAmB,GAAnBA,CAAuB,IAGzBA,GAAmBlrB,EAAYyY,UAA/ByS,CAA0ClrB,EAAY6rB,iB,+BAI/D,WAAqD,IAAD,IAAlCC,EAAkC,wDAC9ClT,GAAa,oBAAC5c,KAAKN,eAAN,aAAC,EAAckI,eAAf,QAA0B,IAAIxM,KAC7C,SAAC2E,GAAD,OAAY,IAAIA,KAclB,OAXI+vB,GACF9vB,KAAKqb,eAAec,SAAQ,SAAClV,GAC3B,IAAI8oB,EAAYnT,EAAWzb,MACzB,SAAC4uB,GAAD,OAAeA,EAAUh1B,KAAOkM,EAAOlM,WAEvBmE,IAAd6wB,GACFxoB,GAAewoB,EAAWzoB,GAAeL,OAKxC2V,I,kCAGT,WAAqC,IAAD,IAC9BsB,EAAa,GAgBjB,YAdgChf,KAA5B,UAAAc,KAAKN,eAAL,eAAcY,YAChB4d,EAAWhR,KAAKlN,KAAKN,QAAQY,gBAGOpB,KAAlC,UAAAc,KAAKgE,mBAAL,eAAkBgsB,cACpBhwB,KAAKgE,YAAYgsB,YAAY7T,SAAQ,YAAsB,IAAnB/a,EAAkB,EAAlBA,KAAMhB,EAAY,EAAZA,MAC5C8d,EAAWhR,KAAK,CACd3M,MAAO,SAACC,GAAkB,IAAD,EACvBA,EAAMY,GAAQhB,GAAK,UAAII,EAAMY,UAAV,QAAmB,SAMvC8c,I,sCAGT,WAA6C,IAAD,EAC1C,YAAoChf,KAAhC,UAAAc,KAAKN,eAAL,eAAcoD,eACT,GAGF,CAAC9C,KAAKN,QAAQoD,mB,SCrFVmtB,G,kDArIb,WAAY7O,GAAwB,IAAD,yBACjC,cAAMA,IAHRD,WAEmC,IAmBnC+O,YAAc,WACZ,GAAiC,KAA7B,EAAK/O,MAAMgP,cAAsB,CACnC,IAAMC,GCgBe9N,EDhBG,EAAKnB,MAAMgP,cCgBCxL,EDhBc,EAAKvD,MAAMuD,SCiB9C,CACjBrC,QAEApnB,YAAaypB,EAAS7G,UAAU/iB,GAChCmR,eAAgByY,EAAS7G,UAAUniB,MACnC00B,qBAAsB1L,EAAS7G,UAAUlD,YAEzCze,SAAUwoB,EAAS5G,OAAOhjB,GAC1B40B,YAAahL,EAAS5G,OAAO4R,YAC7BW,kBAAmB3L,EAAS5G,OAAOnD,YACnC2V,iBAAkB5L,EAAS5G,OAAOte,WAElCwe,UAAW0G,EAAS1G,UAAU7iB,KAAI,SAACojB,GACjC,MAAO,CACLxf,KAAMwf,EAASxf,KACf+gB,OAAQvB,EAASuB,OACjBpkB,MAAO6iB,EAAS7iB,MAChBukB,SAAU1B,EAAS0B,SAAS9e,KAC5B+e,SAAU3B,EAAS2B,SAAS/kB,KAAI,SAACslB,GAAD,MAtB/B,CAAEtf,MALX,EA4B8Bsf,GA3B5Btf,KAIehB,MADY,EAF3BA,MAGsBwf,SADK,EAD3BA,UAHF,aAiCIgK,aAAcjF,EAASiF,aAAaxuB,KAAI,SAAC0uB,GACvC,MAAO,CACLf,cAAee,EAAY/uB,GAC3By1B,kBAAmB1G,EAAYxqB,WAInCoP,kBAAmBiW,EAASjW,kBAC5BrL,iBAAkBshB,EAASthB,iBAC3B2B,iBAAkB2f,EAAS3f,iBAE3B0G,SAAUiZ,EAASjZ,SACnBS,WAAYwY,EAASxY,WACrBM,SAAU,CACR1D,MAAO4b,EAASlY,SAAS9C,IAAI/J,GAAQgF,OACrCoE,KAAM2b,EAASlY,SAAS9C,IAAI/J,GAAQ8C,MACpCuG,QAAS0b,EAASlY,SAAS9C,IAAI/J,GAAQ+C,SACvCuG,IAAKyb,EAASlY,SAAS9C,IAAI/J,GAAQ2F,KACnC4D,MAAOwb,EAASlY,SAAS9C,IAAI/J,GAAQgD,OACrCwG,KAAMub,EAASlY,SAAS9C,IAAI/J,GAAQiD,MACpCwG,SAAUsb,EAASlY,SAAS9C,IAAI/J,GAAQ6J,WAE1Cc,SAAUoa,EAASpa,SAEnB1E,iBAAkB8e,EAAS9e,iBAAiBzK,KAAI,SAAC6L,GAC/C,MAAO,CAAElM,GAAIkM,EAAOlM,GAAIqF,MAAOkH,GAAeL,OAEhDwpB,cAAe9L,EAAS8L,cAAcr1B,KAAI,SAAC6L,GACzC,MAAO,CAAElM,GAAIkM,EAAOlM,GAAIqF,MAAOkH,GAAeL,OAEhD4iB,mBAAoBlF,EAASkF,mBAAmBzuB,KAAI,SAAC6L,GACnD,MAAO,CAAElM,GAAIkM,EAAOlM,GAAIqF,MAAOkH,GAAeL,SDvExCypB,EAAQ,EAAKvP,MAAMuP,OCmMxB,SAAiBN,EAAYM,GAClCA,EAAMN,EAAK9N,OAAS8N,EACpBO,OAAOC,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,IDpMhDM,CAAQZ,EAAMM,GACd,EAAK9O,SAAS,CAAE8O,UCaf,IAAoBpO,EAAeqC,GDrCL,EA4BnCsM,kBAAoB,SAACxP,GACnB,EAAKG,SAAS,CAAEuO,cAAe1O,EAAE2B,OAAOhjB,SA7BP,EAgCnC8wB,YAAc,WACZ,GAAgC,KAA5B,EAAK/P,MAAMgQ,aAAqB,CAClC,IAAMf,GC4LY9N,ED5LG,EAAKnB,MAAMgQ,aAAc,EAAKhQ,MAAMuP,MC6LhDpO,SD5LIpjB,IAATkxB,GCiEH,SACLA,EACAxI,EAIAwJ,GACC,IAAD,wCACMtT,EAAY,IAAInD,GAAJ,UAChByV,EAAKl1B,mBADW,QACI,GADJ,UAEhBk1B,EAAKlkB,sBAFW,QAEO,EAFP,UAGhBkkB,EAAKC,4BAHW,UAKZtS,EAAS,IAAIoR,GAAJ,UACbiB,EAAKj0B,gBADQ,QACI,GADJ,UAEbi0B,EAAKT,mBAFQ,QAEO,EAFP,UAGbS,EAAKE,yBAHQ,mBAIbF,EAAKG,wBAJQ,QAIY,GAGrBtS,EAAS,oBACbmS,EAAKnS,iBADQ,aACb,EAAgB7iB,KAAI,SAACi2B,EAAepkB,GAAO,IAAD,YAClCqkB,EAAY,UAAGD,EAAcryB,YAAjB,QAAyB8c,OAAOyB,OAAOmC,IAAczS,GACnEuR,EAAW,IAAIsB,GACjBwR,EADa,UAEbD,EAActR,cAFD,QAEW,EAFX,UAGbsR,EAAc11B,aAHD,QAGU,EAHV,UAIb01B,EAAcnR,gBAJD,QAIa,IAY5B,OAVA1B,EAAS2B,SAAT,oBACEkR,EAAclR,gBADhB,aACE,EAAwB/kB,KACtB,SAACslB,GAAD,iBACE,IAAIf,GAAJ,UACEe,EAAQtf,YADV,QACkB,GADlB,UAEEsf,EAAQtgB,aAFV,QAEmBtB,IAFnB,UAGE4hB,EAAQd,gBAHV,QAGsB9gB,eAN5B,QAQO0f,EAAS2B,SAET3B,YAnBI,QAqBb1C,OAAOyB,OAAOmC,IAActkB,KAAI,SAAC4D,GAAD,OAAU,IAAI8gB,GAAS9gB,EAAM,EAAG,EAAG,OAE/D4qB,EAAY,oBAAGwG,EAAKxG,oBAAR,aAAG,EAAmBxuB,KACtC,SAAC0uB,GAAD,eACE,IAAI2D,GAAJ,UACE3D,EAAYf,qBADd,QAC+B,GAD/B,UAEEe,EAAY0G,yBAFd,QAEmC,aAJrB,QAMb,CAAC,IAAI/C,GAAY,IAAK,IAAIA,GAAY,IAAK,IAAIA,GAAY,KAE1D/e,EAAiB,UAAG0hB,EAAK1hB,yBAAR,QAA6B,EAC9CrL,EAAgB,UAAG+sB,EAAK/sB,wBAAR,QAA4B,EAC5C2B,EAAgB,UAAGorB,EAAKprB,wBAAR,QAA4B,EAE5C0G,EAAQ,UAAG0kB,EAAK1kB,gBAAR,QAAoB5B,GAASgE,KACrC3B,EAAU,UAAGikB,EAAKjkB,kBAAR,QAAsB,EAChCM,EAAW2jB,EAAK3jB,SAClB,IAAI3D,GAAWsnB,EAAK3jB,UACpB,IAAI3D,GACFyB,EAAQ,UAAG6lB,EAAK7lB,gBAAR,QAAoB1B,GAASiF,KAErCjI,EAAmBiY,EAAUsM,aACnC,UAAAgG,EAAKvqB,wBAAL,SAAuBsW,SAAQ,SAAClV,GAC9B,IAAIsqB,EAAkB1rB,EAAiB1E,MACrC,SAACowB,GAAD,OAAqBA,EAAgBx2B,KAAOkM,EAAOlM,WAE7BmE,IAApBqyB,GACFhqB,GAAegqB,EAAiBtqB,EAAO7G,UAI3C,IAAMqwB,EAAgB1S,EAAO1C,eAC7B,UAAA+U,EAAKK,qBAAL,SAAoBtU,SAAQ,SAAClV,GAC3B,IAAIuqB,EAAef,EAActvB,MAC/B,SAACqwB,GAAD,OAAkBA,EAAaz2B,KAAOkM,EAAOlM,WAE1BmE,IAAjBsyB,GACFjqB,GAAeiqB,EAAcvqB,EAAO7G,UAIxC,IAAMypB,EAAqBD,EAAapN,SACtC,SAACsN,GAAD,OAAiBA,EAAYliB,WAE/B,UAAAwoB,EAAKvG,0BAAL,SAAyB1N,SAAQ,SAAClV,GAChC,IAAIwqB,EAAoB5H,EAAmB1oB,MACzC,SAACswB,GAAD,OAAuBA,EAAkB12B,KAAOkM,EAAOlM,WAE/BmE,IAAtBuyB,GACFlqB,GAAekqB,EAAmBxqB,EAAO7G,UAI7CwnB,EACE,CACE9J,YACAC,SACAE,YACA2L,eACAlb,oBACArL,mBACA2B,mBACA0G,WACAS,aACAM,WACAlC,WACA1E,mBACA4qB,gBACA5G,sBAIFuH,GDjLIM,CAAStB,EAAM,EAAKhP,MAAMwG,YAAa,EAAKxG,MAAMgQ,YC0LnD,IAAiB9O,GD9Na,EAyCnCqP,kBAAoB,SAACvxB,GACnB,EAAKwhB,SAAS,CAAEuP,aAAc/wB,KA1CG,EA6CnCwxB,cAAgB,WACkB,KAA5B,EAAKzQ,MAAMgQ,cACb,EAAKvP,SAAS,CAAEiQ,mBAAmB,KA/CJ,EAmDnCC,eAAiB,WACf,IAAMpB,EAAQ,EAAKvP,MAAMuP,OC8KtB,SAAoBpO,EAAeoO,UACjCA,EAAMpO,GACbqO,OAAOC,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,ID/KlDqB,CAAW,EAAK5Q,MAAMgQ,aAAcT,GACpC,EAAK9O,SAAS,CAAE8O,UAEhB,EAAK9O,SAAS,CAAEiQ,mBAAmB,KAxDF,EA2DnCG,YAAc,WACZ,EAAKpQ,SAAS,CAAEiQ,mBAAmB,KAxDU,OAAzClB,OAAOC,aAAaqB,QAAQ,UAC9BtB,OAAOC,aAAaC,QAAQ,QAAS,MAIvC,IAAMH,EAAQI,KAAKoB,MAAL,UAAWvB,OAAOC,aAAaqB,QAAQ,gBAAvC,QAAmD,MAThC,OAWjC,EAAK9Q,MAAQ,CACXuP,QACAP,cAAe,GACfgB,aAAc,GACdU,mBAAmB,GAfY,E,0CA+DnC,WACE,OACE,gBAAC,GAAD,WACE,gBAAC,GAAD,WACE,eAACxJ,GAAA,EAAD,CAAQC,QAAQ,YAAY9F,KAAK,KAAK+F,QAASvoB,KAAKkwB,YAApD,kBAIA,eAACzH,EAAA,EAAD,CAAKhG,UAAU,gBAAf,SACE,eAACP,GAAA,EAAKK,QAAN,CACEvjB,KAAK,OACLwjB,KAAK,KACL2P,YAAY,+BACZ7O,SAAUtjB,KAAKixB,yBAKrB,gBAAC,GAAD,WACE,eAAC5I,GAAA,EAAD,CAAQC,QAAQ,YAAY9F,KAAK,KAAK+F,QAASvoB,KAAKkxB,YAApD,kBAIA,gBAAC,GAAD,CACEn2B,GAAG,cACHunB,MAAM,GACNjB,aAAa,GACbjhB,MAAOJ,KAAKmhB,MAAMgQ,aAClB7N,SAAUtjB,KAAK2xB,kBACfpQ,cAAc,EANhB,UAQE,eAAC,GAAOiC,KAAR,CAAalB,MAAM,GAAGliB,MAAM,KAC3B0b,OAAOyB,OAAOvd,KAAKmhB,MAAMuP,OAAOt1B,KAAI,SAACg1B,GAAD,OACnC,eAAC,GAAO5M,KAAR,CACElB,MAAO8N,EAAK9N,MACZliB,MAAOgwB,EAAK9N,OACP8N,EAAK9N,aAKhB,uCACE,eAAC+F,GAAA,EAAD,CAAQC,QAAQ,SAAS9F,KAAK,KAAK+F,QAASvoB,KAAK4xB,cAAjD,oBAIA,gBAACQ,GAAA,EAAD,CACEC,KAAMryB,KAAKmhB,MAAM0Q,kBACjBS,OAAQtyB,KAAKgyB,YAFf,UAIE,eAACI,GAAA,EAAMjK,KAAP,mGAIA,gBAACiK,GAAA,EAAMG,OAAP,WACE,eAAClK,GAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASvoB,KAAKgyB,YAA1C,oBAGA,eAAC3J,GAAA,EAAD,CAAQC,QAAQ,SAASC,QAASvoB,KAAK8xB,eAAvC,uC,GA5HQpP,IAAMC,WE4Cf6P,G,4MAtDbC,qBAAuB,SAAC92B,GACtB,EAAKylB,MAAMuG,iBAAiB,CAAEjZ,kBAAmB/S,IACjD,EAAKylB,MAAMwG,YAAY,CAAElZ,kBAAmB/S,K,EAG9C+2B,oBAAsB,SAAC/2B,GACrB,EAAKylB,MAAMuG,iBAAiB,CAAEtkB,iBAAkB1H,IAChD,EAAKylB,MAAMwG,YAAY,CAAEvkB,iBAAkB1H,K,EAG7Cg3B,oBAAsB,SAACh3B,GACrB,EAAKylB,MAAMuG,iBAAiB,CAAE3iB,iBAAkBrJ,IAChD,EAAKylB,MAAMwG,YAAY,CAAE5iB,iBAAkBrJ,K,4CAG7C,WACE,IAAQgpB,EAAa3kB,KAAKohB,MAAlBuD,SACR,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,UACE,eAAC,GAAD,CACE5pB,GAAG,4BACHunB,MAAM,uBACNjB,aAAc,EACdjhB,MAAOukB,EAASjW,kBAChBsT,QAAShiB,KAAKyyB,qBACdhQ,UAAU,kBAGd,eAAC,GAAD,UACE,eAAC,GAAD,CACE1nB,GAAG,2BACHunB,MAAM,sBACNjB,aAAc,EACdjhB,MAAOukB,EAASthB,iBAChB2e,QAAShiB,KAAK0yB,oBACdjQ,UAAU,kBAGd,eAAC,GAAD,UACE,eAAC,GAAD,CACE1nB,GAAG,2BACHunB,MAAM,sBACNjB,aAAc,EACdjhB,MAAOukB,EAAS3f,iBAChBgd,QAAShiB,KAAK2yB,oBACdlQ,UAAU,yB,GA/CSC,IAAMC,WCctBiQ,G,4MA1BbtP,SAAW,SAACljB,GACV,EAAKghB,MAAMyR,YAAYzyB,I,4CAGzB,WACE,OACE,gBAAC,GAAD,CACErF,GAAG,gBACHunB,MAAM,UACNjB,aAAa,GACbjhB,MAAOJ,KAAKohB,MAAMjlB,SAClBmnB,SAAUtjB,KAAKsjB,SALjB,UAOE,eAAC,GAAOE,KAAR,CAAalB,MAAM,GAAGliB,MAAM,WpI4PTlB,IAArBhF,IACFA,EAAmB4hB,OAAOI,QAAQngB,GAC/BitB,MAAK,qCAAcC,GAAd,UAAQnO,MAAR,mBAAqCoO,GAArC,UAA+BpO,MAA/B,OACJmO,EAAME,cAAcD,MAErB9tB,KAAI,mCAAEL,EAAF,iBAAaA,MAGfb,GoInQ2BkB,KAAI,SAACL,GAAD,OAC9B,eAAC,GAAOyoB,KAAR,CACElB,MAAOhH,GAAmBvgB,GAAI+f,KAC9B1a,MAAOrF,GACFA,a,GAnBU2nB,IAAMC,WC4GlBmQ,G,4MA3FbD,YAAc,SAAC93B,GACb,IAAMgjB,EAAS,EAAKqD,MAAMuD,SAAS5G,OACnCA,EAAOhjB,GAAKA,EACZ,IAAM01B,EAAgB1S,EAAO1C,eAC7B,EAAK+F,MAAMuG,iBAAiB,CAAE5J,SAAQ0S,kBACtC,EAAKrP,MAAMwG,YAAY,CAAE7J,SAAQ0S,mB,EAGnCsC,eAAiB,SAACp3B,GAChB,IAAMoiB,EAAS,EAAKqD,MAAMuD,SAAS5G,OACnCA,EAAO4R,YAAch0B,EACrB,EAAKylB,MAAMuG,iBAAiB,CAAE5J,WAC9B,EAAKqD,MAAMwG,YAAY,CAAE7J,Y,EAG3BiV,oBAAsB,SAACzI,GACrB,IAAMxM,EAAS,EAAKqD,MAAMuD,SAAS5G,OACnCA,EAAOnD,YAAc2P,EACrB,EAAKnJ,MAAMuG,iBAAiB,CAAE5J,WAC9B,EAAKqD,MAAMwG,YAAY,CAAE7J,Y,EAG3BkV,oBAAsB,SAACxzB,GACrB,IAAMse,EAAS,EAAKqD,MAAMuD,SAAS5G,OACnCA,EAAOte,WAAaA,EACpB,IAAMgxB,EAAgB1S,EAAO1C,eAC7B,EAAK+F,MAAMuG,iBAAiB,CAAE5J,SAAQ0S,kBACtC,EAAKrP,MAAMwG,YAAY,CAAE7J,SAAQ0S,mB,EAGnClH,cAAgB,WACd,IAAQkH,EAAkB,EAAKrP,MAAMuD,SAA7B8L,cACR,EAAKrP,MAAMuG,iBAAiB,CAAE8I,kBAC9B,EAAKrP,MAAMwG,YAAY,CAAE6I,cAAc,YAAKA,M,4CAG9C,WAAU,IAAD,OACC9L,EAAa3kB,KAAKohB,MAAlBuD,SACR,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,UACE,eAAC,GAAD,CACExoB,SAAUwoB,EAAS5G,OAAOhjB,GAC1B83B,YAAa7yB,KAAK6yB,gBAItB,eAAC,GAAD,UACE,eAAC,GAAD,CACE93B,GAAG,qBACHunB,MAAM,SACNjB,aAAc,EACdjhB,MAAOukB,EAAS5G,OAAO4R,YACvB3N,QAAShiB,KAAK+yB,eACdtQ,UAAU,kBAId,eAAC,GAAD,UACE,eAAC,GAAD,CACE1nB,GAAG,4BACHunB,MAAM,YACNjB,cAAc,EACdjhB,MAAOukB,EAAS5G,OAAOnD,YACvB0I,SAAUtjB,KAAKgzB,wBAInB,eAAC,GAAD,UACE,eAAC,GAAD,CACEj4B,GAAG,0BACHunB,MAAM,cACNjB,aAAc,EACdjhB,MAAOukB,EAAS5G,OAAOte,WACvBuiB,QAAShiB,KAAKizB,oBACdxQ,UAAU,kBAIbkC,EAAS8L,cAAcr1B,KAAI,SAAC6L,GAC3B,OACE,eAAC,GAAD,UACE,eAAC,GAAD,CAAaA,OAAQA,EAAQsiB,cAAe,EAAKA,iBADpCtiB,EAAOlM,c,GAlFH2nB,IAAMC,WC2GtBuQ,G,4JAzDb,WACE,MAOIlzB,KAAKohB,MANPuD,EADF,EACEA,SACAiD,EAFF,EAEEA,YACAmC,EAHF,EAGEA,yBACApC,EAJF,EAIEA,iBACA+C,EALF,EAKEA,mBACA0G,EANF,EAMEA,WAGF,OACE,gBAAC3I,EAAA,EAAD,CACE1tB,GAAG,eACH0nB,UAAU,mDACViG,GAAG,OACHC,GAAI,GAJN,UAME,eAAC,GAAD,CACEhE,SAAUA,EACViD,YAAaA,EACbwJ,WAAYA,IAGd,eAAC,GAAD,CACEzM,SAAUA,EACViD,YAAaA,EACbD,iBAAkBA,IAGpB,eAAC,GAAD,CACEhD,SAAUA,EACViD,YAAaA,EACbD,iBAAkBA,IAGpB,eAAC,GAAD,CACEhD,SAAUA,EACViD,YAAaA,EACbmC,yBAA0BA,IAG5B,eAAC,GAAD,CACEpF,SAAUA,EACViD,YAAaA,EACbD,iBAAkBA,IAGpB,eAAC,GAAD,CACEhD,SAAUA,EACViD,YAAaA,EACb8C,mBAAoBA,W,GAnDJhI,IAAMC,WCrCjBwQ,G,4JA5Bb,WACE,IAAQnV,EAAuBhe,KAAKohB,MAA5BpD,mBAER,OAA+C,IAA3ClC,OAAOC,KAAKiC,GAAoBP,OAC3B,KAIP,uBAAKgF,UAAU,eAAf,UACE,gDACC3G,OAAOI,QAAQ8B,GACbzB,QACC,mCAAEU,EAAF,gBAEW,uCAATA,GACS,qCAATA,GACS,qBAATA,KAEH7hB,KAAI,mCAAE6hB,EAAF,KAAQ7c,EAAR,YACH,+BACGhG,EAAY6iB,GAAMnC,KADrB,KAC6BkC,GAAoBC,EAAM7c,KAD/C6c,a,GApBeyF,IAAMC,WC4B1ByQ,G,4JA3Bb,WAAU,IAAD,EACDtV,EAAY9d,KAAKohB,MAAMtD,UAE7B,OAAKA,EAAUuV,YAKb,uBAAK5Q,UAAU,eAAf,UACE,4CACA,sBACE6Q,IAAG,mDAA8CxV,EAAUhD,KAAxD,QACHyY,MAAO,GACPC,OAAQ,GACRC,IAAI,wBAEN,uCAAI3V,EAAUhD,YAAd,QAAsB,KACrBgB,OAAOI,QAAQ4B,EAAU1C,aAAahgB,KAAI,mCAAE6hB,EAAF,KAAQ7c,EAAR,YACzC,+BACGhG,EAAY6iB,GAAMnC,KADrB,KAC6BkC,GAAoBC,EAAM7c,KAD/C6c,SAdL,S,GALoByF,IAAMC,WCqBxB+Q,G,4JApBb,WACE,OACE,uBAAKjR,UAAU,eAAf,UACE,8CACC3G,OAAOI,QAAQlc,KAAKohB,MAAM1C,YAAYtjB,KACrC,mCAAE6hB,EAAF,KAAQ7c,EAAR,WAIW,YAAT6c,GACE,+BACG7iB,EAAY6iB,GAAMnC,KADrB,KAC6BkC,GAAoBC,EAAM7c,KAD/C6c,a,GAXOyF,IAAMC,WCsBpBgR,G,4JArBb,WAAU,IAAD,EACD5V,EAAS/d,KAAKohB,MAAMrD,OAE1B,OAAKA,EAAOsV,YAKV,uBAAK5Q,UAAU,eAAf,UACE,yCACA,uCAAI1E,EAAOjD,YAAX,QAAmB,KAClBgB,OAAOI,QAAQ6B,EAAOvd,OAAOpF,KAAI,mCAAE6hB,EAAF,KAAQ7c,EAAR,YAChC,+BACGhG,EAAY6iB,GAAMnC,KADrB,KAC6BkC,GAAoBC,EAAM7c,KAD/C6c,SARL,S,GALiByF,IAAMC,WC4BrBiR,G,4JArBb,WACE,MAA8B5zB,KAAKohB,MAAMuD,SAAjC7G,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAEnB,OACE,gBAAC0K,EAAA,EAAD,CACE1tB,GAAG,cACH0nB,UAAU,kDACViG,GAAG,OACHC,GAAI,GAJN,UAME,eAAC,GAAD,CAAgBjK,WAAY1e,KAAKohB,MAAM1C,aACvC,eAAC,GAAD,CAAoBZ,UAAWA,IAC/B,eAAC,GAAD,CAAiBC,OAAQA,IACzB,eAAC,GAAD,CACEC,mBAAoBhe,KAAKohB,MAAMpD,4B,GAfhB0E,IAAMC,WCShBkR,G,4JAbb,WACE,OACE,uBAAKpR,UAAU,YAAf,UACE,8BAAKnoB,EAAkB0F,KAAKohB,MAAMpiB,QACjC8c,OAAOI,QAAQlc,KAAKohB,MAAMgH,cAAchtB,KAAI,mCAAEL,EAAF,KAAQ8R,EAAR,KAAQA,OAAR,OAC3C,+BACGvS,EAAkBS,GADrB,KAC4BuiB,GAAsBzQ,KAD1C9R,a,GANQ2nB,IAAMC,WCqBjBmR,G,4JArBb,WACE,IAAM1L,EAAepoB,KAAKohB,MAAMgH,aAEhC,OACE,eAACK,EAAA,EAAD,CACE1tB,GAAG,gBACH0nB,UAAU,oDACViG,GAAG,OACHC,GAAI,GAJN,SAME,uBAAKlG,UAAU,eAAf,UACE,0CACC3G,OAAOI,QAAQkM,GAAchtB,KAAI,mCAAE4D,EAAF,KAAQue,EAAR,YAChC,eAAC,GAAD,CAAave,KAAMA,EAAMopB,aAAc7K,gB,GAdxBmF,IAAMC,WCmgBlBoR,G,4MAxdb5S,MAAkB,CAChBrD,UAAW,IAAInD,GAAU,GAAI,GAAG,GAChCoD,OAAQ,IAAIoR,GAAO,GAAI,GAAG,EAAO,GACjClR,UAAWnC,OAAOyB,OAAOmC,IAActkB,KACrC,SAAC4D,GAAD,OAAU,IAAI8gB,GAAS9gB,EAAM,EAAG,EAAG,OAGrC4qB,aAAc,CACZ,IAAI6D,GAAY,IAChB,IAAIA,GAAY,IAChB,IAAIA,GAAY,KAGlBthB,WAAY,EACZC,kBAAmB,EACnBK,SAAU,IAAI3D,GACd4C,SAAU5B,GAASgE,KACnB5D,QAAS,EACTK,SAAU1B,GAASiF,KACnBY,kBAAmB,EACnBrL,iBAAkB,EAClB2B,iBAAkB,EAElBa,iBAAkB,GAClB4qB,cAAe,GACf5G,mBAAoB,I,EAGtB7L,mBAA4B,G,EAC5BU,WAAoB,G,EACpB0J,aAA+B,G,EAE/B4L,eAAkC,G,EAClC9V,WAA0B,G,EAuN1B0J,YAAc,SACZzG,EACA8S,GAEA,EAAKrS,SAAST,EAAO8S,I,EAGvBlK,yBAA2B,YAMpB,IALLH,EAKI,EALJA,aACAC,EAII,EAJJA,mBAKMqK,EAAe,OAAGtK,QAAH,IAAGA,IAAgB,EAAKzI,MAAMyI,aACnD,EAAK5L,mBAAqBkW,EACvB94B,KAAI,SAAC0uB,GAAD,OAAiBA,EAAYtpB,SACjC5F,QAAO,SAACC,EAAK2F,GAIZ,OAHAsb,OAAOI,QAAQ1b,GAAO2b,SAAQ,YAAoB,IAAD,qBAAjB/a,EAAiB,KAAXhB,EAAW,KAC/CvF,EAAIuG,GAAQhB,GAAK,UAAIvF,EAAIuG,UAAR,QAAiB,MAE7BvG,IACN,IAEL,EAAK8sB,iBAAiB,CACpBiC,eACA5L,mBAAoB,EAAKA,mBACzB6L,wB,EAIJlC,iBAAmB,YAwBZ,IAvBL7J,EAuBI,EAvBJA,UACAC,EAsBI,EAtBJA,OACAE,EAqBI,EArBJA,UACA2L,EAoBI,EApBJA,aACA5L,EAmBI,EAnBJA,mBACAtP,EAkBI,EAlBJA,kBACArL,EAiBI,EAjBJA,iBACA2B,EAgBI,EAhBJA,iBACAa,EAeI,EAfJA,iBACA4qB,EAcI,EAdJA,cACA5G,EAaI,EAbJA,mBAcM3L,EAAa,EAAKiW,cAAc,CACpCrW,YACAjY,mBACAkY,SACA0S,gBACA7G,eACAC,uBAGF,EAAKnL,WAAab,GAAe,OAC/BC,QAD+B,IAC/BA,IAAa,EAAKqD,MAAMrD,UADO,OAE/BC,QAF+B,IAE/BA,IAAU,EAAKoD,MAAMpD,OAFU,OAG/BC,QAH+B,IAG/BA,IAAsB,EAAKA,mBAHI,OAI/BC,QAJ+B,IAI/BA,IAAa,EAAKkD,MAAMlD,UAJO,OAK/BvP,QAL+B,IAK/BA,IAAqB,EAAKyS,MAAMzS,kBALD,OAM/BrL,QAN+B,IAM/BA,IAAoB,EAAK8d,MAAM9d,iBANA,OAO/B2B,QAP+B,IAO/BA,IAAoB,EAAKmc,MAAMnc,iBAC/BkZ,GAGF,EAAKwM,mBAAmB,CACtB5M,YACApP,oBACArL,mBACA2B,mBACAa,mBACAgkB,wB,EAIJa,mBAAqB,YA4Bd,IA3BM0J,EA2BP,EA3BJtW,UACAC,EA0BI,EA1BJA,OACA6L,EAyBI,EAzBJA,aACAlb,EAwBI,EAxBJA,kBACArL,EAuBI,EAvBJA,iBACA2B,EAsBI,EAtBJA,iBACAmH,EAqBI,EArBJA,WACAM,EAoBI,EApBJA,SACAf,EAmBI,EAnBJA,SACAnB,EAkBI,EAlBJA,SACA1E,EAiBI,EAjBJA,iBACA4qB,EAgBI,EAhBJA,cACA5G,EAeI,EAfJA,mBAgBM/L,EAAS,OAAGsW,QAAH,IAAGA,IAAW,EAAKjT,MAAMrD,UAElCkW,EAAiB,EAAKK,kBAAkB,CAC5CvW,YACAjY,mBACAkY,SACA0S,gBACA7G,eACAC,uBAGIjF,EAAiB,EAAK0P,kBAAkB,CAC5CpoB,eAAc,OAAEkoB,QAAF,IAAEA,OAAF,EAAEA,EAASz4B,MACzBwQ,aACAM,WACAf,WACAnB,WACAmE,oBACArL,mBACA2B,mBACAgvB,mBAGF,EAAK5L,aAAe,QACQlpB,IAAxB4e,EAAU7C,WACZa,OAAOI,QAAQ4B,EAAU7C,WAAWkB,SAAQ,YAAkB,IAAD,mBAAfnd,EAAe,KAATu1B,EAAS,KAC3D,EAAKnM,aAAappB,GAAQ8c,OAAOI,QAAQqY,GAAK35B,QAC5C,SAACC,EAAD,GAAoB,IAAD,mBAAZE,EAAY,KAARy5B,EAAQ,KAEjB,OADA35B,EAAIE,GAAMy5B,EAAG,CAAEh0B,MAAO,EAAKke,WAAY3b,SAAU6hB,IAC1C/pB,IAET,Q,EAMRu2B,WAAa,WACX,EAAK+C,cAAc,CACjBrW,UAAW,EAAKqD,MAAMrD,UACtBjY,iBAAkB,EAAKsb,MAAMtb,iBAC7BkY,OAAQ,EAAKoD,MAAMpD,OACnB0S,cAAe,EAAKtP,MAAMsP,cAC1B7G,aAAc,EAAKzI,MAAMyI,aACzBC,mBAAoB,EAAK1I,MAAM0I,qBAEjC,EAAKwK,kBAAkB,CACrBvW,UAAW,EAAKqD,MAAMrD,UACtBjY,iBAAkB,EAAKsb,MAAMtb,iBAC7BkY,OAAQ,EAAKoD,MAAMpD,OACnB0S,cAAe,EAAKtP,MAAMsP,cAC1B7G,aAAc,EAAKzI,MAAMyI,aACzBC,mBAAoB,EAAK1I,MAAM0I,qBAGjC,EAAKE,yBAAyB,IAC9B,EAAKnI,SAAS,K,uDA/XhB,YAcI,IAAD,IAbD9D,EAaC,EAbDA,UACAjY,EAYC,EAZDA,iBACAkY,EAWC,EAXDA,OACA0S,EAUC,EAVDA,cACA7G,EASC,EATDA,aACAC,EAQC,EARDA,mBASA,QACgB3qB,IAAd4e,QACqB5e,IAArB2G,QACW3G,IAAX6e,QACkB7e,IAAlBuxB,QACiBvxB,IAAjB0qB,QACuB1qB,IAAvB2qB,EAEA,OAAO7pB,KAAKg0B,eAGd,IAAMS,GAAyB,OAC7B3W,QAD6B,IAC7BA,IAAa9d,KAAKmhB,MAAMrD,WACxB4W,2BAEIC,GAAsB,OAC1B5W,QAD0B,IAC1BA,IAAU/d,KAAKmhB,MAAMpD,QACrB2W,2BAEIE,GAAoB,OAAChL,QAAD,IAACA,IAAgB5pB,KAAKmhB,MAAMyI,cAAcpN,SAClE,SAACsN,GAAD,OAAiBA,EAAYuK,uBAGzBQ,GAAwB,OAC5BhvB,QAD4B,IAC5BA,IAAoB7F,KAAKmhB,MAAMtb,kBAE9B0W,QAAO,SAACtV,GAAD,OACNI,GAAqBJ,MAEtB7L,KAAI,SAAC6L,GAAD,OAAYA,EAAOnE,iBAEpBgyB,GAAqB,OAACrE,QAAD,IAACA,IAAiBzwB,KAAKmhB,MAAMsP,eACrDlU,QAAO,SAACtV,GAAD,OACNI,GAAqBJ,MAEtB7L,KAAI,SAAC6L,GAAD,OAAYA,EAAOnE,iBAEpBiyB,GAA0B,OAC9BlL,QAD8B,IAC9BA,IAAsB7pB,KAAKmhB,MAAM0I,oBAEhCtN,QAAO,SAACtV,GAAD,OACNI,GAAqBJ,MAEtB7L,KAAI,SAAC6L,GAAD,OAAYA,EAAOnE,iBAEpBkyB,EAAmBP,EACtB5X,OAAO8X,GACP9X,OAAO+X,GACP/X,OAAOgY,GACPhY,OAAOiY,GACPjY,OAAOkY,GACJE,EAAgB,IAAI1rB,IAe1B,OAdAyrB,EAAiB7Y,SAAQ,SAACY,GAAW,IAAD,EAC5B/U,EAAQ,UAAG+U,EAAM/U,gBAAT,QAAqBP,GAASyD,OACtCgqB,EAAQD,EAActrB,IAAI3B,GAC3BktB,EAGHA,EAAMhoB,KAAK6P,GAFXkY,EAAczrB,IAAIxB,EAAU,CAAC+U,OAMjC/c,KAAKg0B,gBAAiB,UAACiB,EAActrB,IAAIlC,GAASyD,eAA5B,QAAuC,IAAI2R,OAA3C,UACpBoY,EAActrB,IAAIlC,GAASQ,aADP,QACgB,IAG/BjI,KAAKg0B,iB,2BAId,YAcI,IAAD,IAbDlW,EAaC,EAbDA,UACAjY,EAYC,EAZDA,iBACAkY,EAWC,EAXDA,OACA0S,EAUC,EAVDA,cACA7G,EASC,EATDA,aACAC,EAQC,EARDA,mBASA,QACgB3qB,IAAd4e,QACqB5e,IAArB2G,QACW3G,IAAX6e,QACkB7e,IAAlBuxB,QACiBvxB,IAAjB0qB,QACuB1qB,IAAvB2qB,EAEA,OAAO7pB,KAAKke,WAGd,IAAMuW,GAAyB,OAC7B3W,QAD6B,IAC7BA,IAAa9d,KAAKmhB,MAAMrD,WACxBqX,uBAEIR,GAAsB,OAC1B5W,QAD0B,IAC1BA,IAAU/d,KAAKmhB,MAAMpD,QACrBoX,uBAEIP,GAAoB,OAAChL,QAAD,IAACA,IAAgB5pB,KAAKmhB,MAAMyI,cAAcpN,SAClE,SAACsN,GAAD,OAAiBA,EAAYqK,mBAGzBU,GAAwB,OAC5BhvB,QAD4B,IAC5BA,IAAoB7F,KAAKmhB,MAAMtb,kBAE9B0W,QAAO,SAACtV,GAAD,OACNG,GAAkBH,MAEnB7L,KAAI,SAAC6L,GAAD,OAAYA,EAAO3G,aAEpBw0B,GAAqB,OAACrE,QAAD,IAACA,IAAiBzwB,KAAKmhB,MAAMsP,eACrDlU,QAAO,SAACtV,GAAD,OACNG,GAAkBH,MAEnB7L,KAAI,SAAC6L,GAAD,OAAYA,EAAO3G,aAEpBy0B,GAA0B,OAC9BlL,QAD8B,IAC9BA,IAAsB7pB,KAAKmhB,MAAM0I,oBAEhCtN,QAAO,SAACtV,GAAD,OACNG,GAAkBH,MAEnB7L,KAAI,SAAC6L,GAAD,OAAYA,EAAO3G,aAEpB00B,EAAmBP,EACtB5X,OAAO8X,GACP9X,OAAO+X,GACP/X,OAAOgY,GACPhY,OAAOiY,GACPjY,OAAOkY,GACJE,EAAgB,IAAI1rB,IAe1B,OAdAyrB,EAAiB7Y,SAAQ,SAACY,GAAW,IAAD,EAC5B/U,EAAQ,UAAG+U,EAAM/U,gBAAT,QAAqBP,GAASyD,OACtCgqB,EAAQD,EAActrB,IAAI3B,GAC3BktB,EAGHA,EAAMhoB,KAAK6P,GAFXkY,EAAczrB,IAAIxB,EAAU,CAAC+U,OAMjC/c,KAAKke,YAAa,UAAC+W,EAActrB,IAAIlC,GAASyD,eAA5B,QAAuC,IAAI2R,OAA3C,UAChBoY,EAActrB,IAAIlC,GAASQ,aADX,QACoB,IAG/BjI,KAAKke,a,+BAGd,WAoByB,IAAD,gEAApB,GAnBFhS,EAmBsB,EAnBtBA,eACAC,EAkBsB,EAlBtBA,WACAM,EAiBsB,EAjBtBA,SACAf,EAgBsB,EAhBtBA,SACAnB,EAesB,EAftBA,SACAmE,EAcsB,EAdtBA,kBACArL,EAasB,EAbtBA,iBACA2B,EAYsB,EAZtBA,iBACAgvB,EAWsB,EAXtBA,eAYMjxB,EAA2B,CAC/BmJ,eAAc,OAAEA,QAAF,IAAEA,IAAkBlM,KAAKmhB,MAAMrD,UAAUniB,MACvDwQ,WAAU,OAAEA,QAAF,IAAEA,IAAcnM,KAAKmhB,MAAMhV,WACrCC,kBAAmBpM,KAAKmhB,MAAM/U,kBAC9BK,SAAQ,OAAEA,QAAF,IAAEA,IAAYzM,KAAKmhB,MAAM1U,SACjCzJ,kBAAmB,IAAI8F,GACvB4C,SAAQ,OAAEA,QAAF,IAAEA,IAAY1L,KAAKmhB,MAAMzV,SACjCxB,QAASlK,KAAKmhB,MAAMjX,QACpBK,SAAQ,OAAEA,QAAF,IAAEA,IAAYvK,KAAKmhB,MAAM5W,SACjCmE,kBAAiB,OAAEA,QAAF,IAAEA,IAAqB1O,KAAKmhB,MAAMzS,kBACnDrL,iBAAgB,OAAEA,QAAF,IAAEA,IAAoBrD,KAAKmhB,MAAM9d,iBACjD2B,iBAAgB,OAAEA,QAAF,IAAEA,IAAoBhF,KAAKmhB,MAAMnc,kBAQnD,OAJA,OAACgvB,QAAD,IAACA,IAAkBh0B,KAAKg0B,gBAAgB7X,SAAQ,SAACY,GAAD,OAC9CA,EAAMxc,MAAMwC,EAAU,EAAK2b,eAGtB3b,I,oBAiLT,WACE,OACE,gBAACqyB,EAAA,EAAD,CAAW3S,UAAU,WAAW4S,OAAK,EAArC,UACE,eAACC,EAAA,EAAD,CAAQC,OAAO,MAAMC,GAAG,QAAQ/S,UAAU,YAA1C,SACE,gBAACgT,EAAA,EAAD,WACE,eAACA,EAAA,EAAIjS,KAAL,UACE,eAACiS,EAAA,EAAIC,KAAL,CAAUC,KAAK,gBAAf,qBAEF,eAACF,EAAA,EAAIjS,KAAL,UACE,eAACiS,EAAA,EAAIC,KAAL,CAAUC,KAAK,mBAAf,yBAEF,eAACF,EAAA,EAAIjS,KAAL,UACE,eAACiS,EAAA,EAAIC,KAAL,CAAUC,KAAK,eAAf,qBAEF,eAACF,EAAA,EAAIjS,KAAL,UACE,eAACiS,EAAA,EAAIC,KAAL,CAAUC,KAAK,iBAAf,4BAKN,gBAAC5S,EAAA,EAAD,CAAKN,UAAU,OAAf,UACE,eAAC,GAAD,CACEkC,SAAU3kB,KAAKmhB,MACfyG,YAAa5nB,KAAK4nB,YAClBmC,yBAA0B/pB,KAAK+pB,yBAC/BpC,iBAAkB3nB,KAAK2nB,iBACvB+C,mBAAoB1qB,KAAK0qB,mBACzB0G,WAAYpxB,KAAKoxB,aAEnB,eAAC,GAAD,CACEzM,SAAU3kB,KAAKmhB,MACfyG,YAAa5nB,KAAK4nB,YAClBD,iBAAkB3nB,KAAK2nB,iBACvB3J,mBAAoBhe,KAAKge,mBACzB4G,eAAgB5kB,KAAKs0B,oBACrBpW,WAAYle,KAAKke,WACjBkK,aAAcpoB,KAAKooB,eAErB,eAAC,GAAD,CACEzD,SAAU3kB,KAAKmhB,MACfzC,WAAY1e,KAAK0e,WACjBV,mBAAoBhe,KAAKge,qBAE3B,eAAC,GAAD,CAAcoK,aAAcpoB,KAAKooB,yB,GAldzB1F,IAAMC,WCrCTiT,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.eaabf3a3.chunk.js","sourcesContent":["import type * as Data from './types';\nimport type { TalentType } from '../talent/types';\n\nimport characterDataRaw from './characterdata.json';\nimport characterAscensionBonusDataRaw from './characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from './characterstatcurvedata.json';\nimport weaponDataRaw from './weapondata.json';\nimport weaponAscensionBonusDataRaw from './weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from './weaponstatcurvedata.json';\nimport weaponPassiveDataRaw from './weaponpassivedata.json';\nimport talentDataRaw from './talentdata.json';\nimport artifactSetDataRaw from './artifactsetdata.json';\nimport artifactSetBonusDataRaw from './artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from './artifactmainstatdata.json';\n\nimport propMappingRaw from './propmapping.json';\nimport talentDescMappingRaw from './talentdescmapping.json';\nimport optionMappingRaw from './optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\nconst weaponPassiveData = weaponPassiveDataRaw as Record<\n  string,\n  Data.WeaponPassiveSetData\n>;\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getWeaponPassiveData(id: string) {\n  return getData(id, weaponPassiveData);\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\nexport function getWeaponPassiveAt(\n  refinement: number,\n  passives: Data.WeaponPassiveSetData\n): Data.WeaponPassiveData | undefined {\n  return passives.passive[refinement];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport type TalentFn = (props: TalentProps) => TalentValue;\n\nexport type Talents = Record<string, Record<string, TalentFn>>;\n\nexport type TalentValueSet = Record<string, Record<string, TalentValue>>;\n\nexport interface TalentValue {\n  damage: number[];\n  element?: Element;\n}\n\nexport interface TalentProps {\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  None = 'none',\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  statMixin: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  modifierMixin: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionPicker, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value !== '') {\n        const params = getArtifactSetBonusParams('archaicpetra', 4);\n        stats[`${this.value}DmgBonus`] =\n          params[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n      }\n    },\n  };\n}\n\nconst archaicPetraOptions = [ArchaicPetra4PcOption];\nexport default archaicPetraOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('berserker', 4);\n        stats.critRate = params[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst berserkerOptions = [Berserker4PcOption];\nexport default berserkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n        stats.critRate = params[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n        stats.critRate = params[1] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst blizzardStrayerOptions = [\n  BlizzardStrayer4PcCryoOption,\n  BlizzardStrayer4PcFrozenOption,\n];\nexport default blizzardStrayerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass BloodStainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n        stats.chargedDmgBonus = params[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst bloodstainedChivalryOptions = [BloodStainedChivalry4PcOption];\nexport default bloodstainedChivalryOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('braveheart', 4);\n        stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst braveHeartOptions = [BraveHeart4PcOption];\nexport default braveHeartOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusData } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n        const param = setBonusData[2].bonuses.find(\n          ({ stat }) => stat === 'pyroDmgBonus'\n        )?.value!!;\n\n        let stacks = this.value;\n        if (stacks > 3) stacks = 3;\n        stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst crimsonWitchOptions = [CrimsonWitch4PcOption];\nexport default crimsonWitchOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('heartofdepth', 4);\n        stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst heartOfDepthOptions = [HeartOfDepth4PcOption];\nexport default heartOfDepthOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('instructor', 4);\n        stats.elementalMastery = params[1] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst instructorOptions = [Instructor4PcOption];\nexport default instructorOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('lavawalker', 4);\n        stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst lavawalkerOptions = [Lavawalker4PcOption];\nexport default lavawalkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('maidenbeloved', 4);\n        stats.healedBonus = params[0] + (stats.healedBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst maidenBelovedOptions = [MaidenBeloved4PcOption];\nexport default maidenBelovedOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('martialartist', 4);\n        stats.normalDmgBonus = params[2] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params[2] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst martialArtistOptions = [MartialArtist4PcOption];\nexport default martialArtistOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('noblesseoblige', 4);\n        stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst noblesseObligeOptions = [NoblesseOblige4PcOption];\nexport default noblesseObligeOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      const params = getArtifactSetBonusParams('paleflame', 4);\n\n      if (this.value >= 1) {\n        stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      }\n\n      if (this.value >= 2) {\n        stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n        stats.physicalDmgBonus = params[3] + (stats.physicalDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst paleFlameOptions = [PaleFlame4PcOption];\nexport default paleFlameOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('retracingbolide', 4);\n        stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst retracingBolideOptions = [RetracingBolide4PcOption];\nexport default retracingBolideOptions;\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusData } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport ArtifactSetOption from './ArtifactSetOption';\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const setBonusData = getArtifactSetBonusData('shimenawasreminiscence');\n        const param = setBonusData[4].bonusExtra.params[1];\n        stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst shimenawaOptions = [Shimenawa4PcOption];\nexport default shimenawaOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n        stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n        stats.shieldStrength = params[1] + (stats.shieldStrength ?? 0);\n      }\n    },\n  };\n}\n\nconst tenacityOptions = [Tenacity4PcOption];\nexport default tenacityOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const params = getArtifactSetBonusParams('thundersoother', 4);\n        stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst thundersootherOptions = [Thundersoother4PcOption];\nexport default thundersootherOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\n\nclass ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        const params = getArtifactSetBonusParams('viridescentvenerer', 4);\n        modifier.enemyResReduction.add(this.value as Element, params[1]);\n      }\n    },\n  };\n}\n\nconst viridescentVenererOptions = [ViridescentVenerer4PcOption];\nexport default viridescentVenererOptions;\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import CharacterOption from './CharacterOption';\r\nimport { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentStatsAt } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { Element, TalentType } from '../../talent/types';\r\nimport {\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n  IModifierApplicable,\r\n} from '../Option';\r\n\r\nclass AloyOptionCoil\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('coil');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value > 0) {\r\n        const skillParams = getTalentStatsAt(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('aloy')\r\n        );\r\n\r\n        if (this.value >= 4) {\r\n          // Rushing Ice state\r\n          stats.normalDmgBonus = skillParams[7] + (stats.normalDmgBonus ?? 0);\r\n        } else {\r\n          stats.normalDmgBonus =\r\n            skillParams[this.value + 3] + (stats.normalDmgBonus ?? 0);\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value >= 4) {\r\n        modifier.infusionNormal = Element.Cryo;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyOptions = [AloyOptionCoil];\r\nexport default aloyOptions;\r\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { Stats } from '../../data/types';\nimport { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      _talentBurstLevel: number,\n      ascensionLevel: number\n    ) => {\n      if (this.value && ascensionLevel >= 4) {\n        const params = getTalentData('diluc').passives.find(\n          (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n        )?.params;\n        const pyroDmgBonus = params?.[1] ?? NaN;\n\n        stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../data/types';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      talentSkillLevel: number,\n      _talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let skillParams = getTalentStatsAt(\n          TalentType.Skill,\n          talentSkillLevel,\n          getTalentData('hutao')\n        );\n\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n        let flatAtkBonus = totalHp * skillParams[1];\n        if (flatAtkBonus > stats.baseAtk * skillParams[6]) {\n          flatAtkBonus = stats.baseAtk * skillParams[6];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.elementalAbsorption = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\nimport ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionPlunge = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\r\nimport CharacterOption from './CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value) {\r\n        modifier.kokomiBurst = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../data/types';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('noelle')\n        );\n\n        const totalDef =\n          (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n          (stats.flatDef ?? 0);\n\n        stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Geo;\n      }\n    },\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import { Stats } from '../../data/types';\r\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../Option';\r\nimport CharacterOption from './CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value) {\r\n        const params = getTalentStatsAt(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('raiden')\r\n        );\r\n\r\n        const burstDmgBonus = params[3] * 90;\r\n        stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value < 0) modifier.resolveStacks = 0;\r\n      else if (this.value > 60) modifier.resolveStacks = 60;\r\n      else modifier.resolveStacks = this.value;\r\n    },\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import aloyOptions from './AloyOption';\nimport ayakaOptions from './AyakaOption';\nimport CharacterOption from './CharacterOption';\nimport chongyunOptions from './ChongyunOption';\nimport dilucOptions from './DilucOption';\nimport hutaoOptions from './HuTaoOption';\nimport kazuhaOptions from './KazuhaOption';\nimport kokomiOptions from './KokomiOption';\nimport noelleOptions from './NoelleOption';\nimport raidenOptions from './RaidenOption';\nimport sayuOptions from './SayuOption';\nimport sucroseOptions from './SucroseOption';\nimport ventiOptions from './VentiOption';\nimport xiaoOptions from './XiaoOption';\nimport yanfeiOptions from './YanfeiOption';\nimport yoimiyaOptions from './YoimiyaOption';\nimport monaOptions from './MonaOption';\n\nexport { default as CharacterOption } from './CharacterOption';\n\nexport const characterOptions: Record<string, typeof CharacterOption[]> = {\n  ayaka: ayakaOptions,\n  diluc: dilucOptions,\n  venti: ventiOptions,\n  xiao: xiaoOptions,\n  noelle: noelleOptions,\n  chongyun: chongyunOptions,\n  sucrose: sucroseOptions,\n  hutao: hutaoOptions,\n  kazuha: kazuhaOptions,\n  yanfei: yanfeiOptions,\n  yoimiya: yoimiyaOptions,\n  raiden: raidenOptions,\n  sayu: sayuOptions,\n  kokomi: kokomiOptions,\n  aloy: aloyOptions,\n  mona: monaOptions,\n};\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport { Stats } from '../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('xiao')\n        );\n\n        stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('yanfei')\n        );\n        stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionNormal = Element.Pyro;\n        modifier.yoimiyaSkill = true;\n      }\n    },\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import CharacterOption from './CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../data/types';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport { TalentType } from '../../talent/types';\n\nclass MonaOptionOmen\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('omen');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('mona')\n        );\n\n        stats.dmgBonus = burstParams[9] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst monaOptions = [MonaOptionOmen];\nexport default monaOptions;\n","import { artifactSetOptions } from './artifactSetOptions';\nimport { characterOptions } from './characterOptions';\nimport Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nconst defaultOptions: typeof Option[] = [];\n\nexport function getCharacterOptions(id: string) {\n  return characterOptions[id] ?? defaultOptions;\n}\n\nexport function getArtifactSetOptions(id: string) {\n  return artifactSetOptions[id] ?? defaultOptions;\n}\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).statMixin !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (option as unknown as IModifierApplicable).modifierMixin !== undefined;\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import Option from './Option';\n\nexport default Option;\nexport * from './OptionUtils';\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport enum Priority {\n  Normal,\n  Last,\n}\n\ninterface Mixin {\n  priority?: Priority;\n}\n\nexport interface StatMixin extends Mixin {\n  apply: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number,\n    ascensionLevel: number\n  ) => void;\n}\n\n// Do not modify stats here, use StatMixin for that purpose\nexport interface ModifierMixin extends Mixin {\n  apply: (modifier: DamageModifier, stats: Stats) => void;\n}\n","import { CharacterPassive, CharacterPassiveFn } from '../types';\nimport { aloyAscension1, aloyAscension4 } from './AloyPassive';\nimport { beidouAscension4 } from './BeidouPassive';\nimport { hutaoAscension4 } from './HuTaoPassive';\nimport { kokomiAscension0, kokomiAscension4 } from './KokomiPassive';\nimport { raidenAscension4 } from './RaidenPassive';\nimport { yoimiyaAscension1 } from './YoimiyaPassive';\n\nconst characterPassives: Record<string, CharacterPassiveFn> = {\n  Beidou_PermanentSkill_2: beidouAscension4,\n  Hutao_PermanentSkill_2: hutaoAscension4,\n  Yoimiya_PermanentSkill_1: yoimiyaAscension1,\n  Shougun_PermanentSkill_2: raidenAscension4,\n  // Workaround because Kokomi's A0 passive has no associated id\n  Kokomi_ProudSkill_SwimStamina_Reduction: kokomiAscension0,\n  Kokomi_PermanentSkill_2: kokomiAscension4,\n  Aloy_PermanentSkill_1: aloyAscension1,\n  Aloy_PermanentSkill_2: aloyAscension4,\n};\n\nfunction defaultPassiveFn(): CharacterPassive[] {\n  return [];\n}\n\nexport function getCharacterPassiveFn(passiveId: string) {\n  return characterPassives[passiveId] ?? defaultPassiveFn;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport { CharacterOption } from '../../option/characterOptions';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../types';\n\nexport function beidouAscension4(params: TalentParams): CharacterPassive {\n  class BeidouOptionAscension4\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('beidouAscension4');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n          stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'beidouAscension4',\n    options: [BeidouOptionAscension4],\n  };\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport { CharacterOption } from '../../option/characterOptions';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../types';\n\nexport function hutaoAscension4(params: TalentParams): CharacterPassive {\n  class HuTaoOptionAscension4\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('hutaoAscension4');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.pyroDmgBonus = params[1] + (stats.pyroDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'hutaoAscension4',\n    options: [HuTaoOptionAscension4],\n  };\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport { CharacterOption } from '../../option/characterOptions';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../types';\n\nexport function yoimiyaAscension1(params: TalentParams): CharacterPassive {\n  class YoimiyaOptionAscension1\n    extends CharacterOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('yoimiyaAscension1');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        let pyroDmgBonus = this.value * params[0];\n        if (this.value < 0 || this.value > 10) {\n          pyroDmgBonus = NaN;\n        }\n\n        stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n      },\n    };\n  }\n\n  return {\n    id: 'yoimiyaAscension1',\n    options: [YoimiyaOptionAscension1],\n  };\n}\n","import { Stats, TalentParams } from '../../data/types';\r\nimport { Priority } from '../../option/Mixin';\r\nimport { CharacterPassive } from '../types';\r\n\r\nexport function raidenAscension4(params: TalentParams): CharacterPassive {\r\n  return {\r\n    id: 'raidenAscension4',\r\n    options: [],\r\n    statMixin: {\r\n      priority: Priority.Last,\r\n      apply: (stats: Stats) => {\r\n        const energyRecharge = stats.energyRecharge ?? 1;\r\n        const electroDmgBonus = params[2] * (energyRecharge - 1) * 100;\r\n        stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n      },\r\n    },\r\n  };\r\n}\r\n","import { Stats, TalentParams } from '../../data/types';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { CharacterPassive } from '../types';\r\n\r\nexport function kokomiAscension0(_params: TalentParams): CharacterPassive {\r\n  return {\r\n    id: 'kokomiAscension0',\r\n    options: [],\r\n    statMixin: {\r\n      apply: (stats: Stats) => {\r\n        stats.critRate = (stats.critRate ?? 0) - 1;\r\n        if (stats.critRate < 0) {\r\n          stats.critRate = 0;\r\n        }\r\n\r\n        stats.healingBonus = 0.25 + (stats.healingBonus ?? 0);\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport function kokomiAscension4(params: TalentParams): CharacterPassive {\r\n  return {\r\n    id: 'kokomiAscension4',\r\n    options: [],\r\n    modifierMixin: {\r\n      apply: (modifier: DamageModifier) => {\r\n        modifier.kokomiHealingBonusDmg = params[0];\r\n      },\r\n    },\r\n  };\r\n}\r\n","import { Stats, TalentParams } from '../../data/types';\r\nimport { CharacterOption } from '../../option/characterOptions';\r\nimport {\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport { CharacterPassive } from '../types';\r\n\r\nexport function aloyAscension1(params: TalentParams): CharacterPassive {\r\n  class AloyOptionAscension1\r\n    extends CharacterOption\r\n    implements IOptionBoolean, IStatsApplicable\r\n  {\r\n    value = false;\r\n\r\n    constructor() {\r\n      super('aloyAscension1');\r\n    }\r\n\r\n    statMixin = {\r\n      apply: (stats: Stats) => {\r\n        if (this.value) {\r\n          stats.atkBonus = params[0] * 2 + (stats.atkBonus ?? 0);\r\n        }\r\n      },\r\n    };\r\n  }\r\n\r\n  return {\r\n    id: 'aloyAscension1',\r\n    options: [AloyOptionAscension1],\r\n  };\r\n}\r\n\r\nexport function aloyAscension4(params: TalentParams): CharacterPassive {\r\n  class AloyOptionAscension4\r\n    extends CharacterOption\r\n    implements IOptionNumber, IStatsApplicable\r\n  {\r\n    value = 0;\r\n\r\n    constructor() {\r\n      super('aloyAscension4');\r\n    }\r\n\r\n    statMixin = {\r\n      apply: (stats: Stats) => {\r\n        if (this.value > 0) {\r\n          let stacks = this.value;\r\n          if (stacks > 10) {\r\n            stacks = 10;\r\n          }\r\n\r\n          const cryoDmgBonus = params[0] * stacks;\r\n          stats.cryoDmgBonus = cryoDmgBonus + (stats.cryoDmgBonus ?? 0);\r\n        }\r\n      },\r\n    };\r\n  }\r\n\r\n  return {\r\n    id: 'aloyAscension4',\r\n    options: [AloyOptionAscension4],\r\n  };\r\n}\r\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n}\r\n\r\nexport default Reaction;\r\n","import { Element } from '../talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import { Stats, TalentParams } from '../data/types';\nimport { AttackType, Element, ScalingType, TalentValue } from './types';\nimport Resistance from '../stat/Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport CritType from '../modifier/CritType';\n\n// Helper functions\n\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\n\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\n\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\n\nfunction calculateAmplifyingStrengthMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\n\nfunction calculateAmplifyingReactionMultiplier({\n  reaction,\n  stats,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  element: Element;\n}) {\n  const amplifyingStrength = calculateAmplifyingStrengthMultiplier(\n    reaction,\n    element\n  );\n\n  if (amplifyingStrength > 1) {\n    // Caulculate reactionbonus\n    let reactionBonus = 0;\n    switch (reaction) {\n      case Reaction.Vaporize:\n        reactionBonus = stats.vaporizeDmgBonus ?? 0;\n        break;\n      case Reaction.Melt:\n        reactionBonus = stats.meltDmgBonus ?? 0;\n        break;\n      default:\n        break;\n    }\n\n    // Calculate amplifying reaction multiplier\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingStrength * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\n\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let flatDmg = modifier.flatDmg;\n  if (attackType === AttackType.Normal) {\n    flatDmg += modifier.normalAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Charged) {\n    flatDmg += modifier.chargedAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Skill) {\n    flatDmg += modifier.skillFlatDmg ?? 0;\n  }\n\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === CritType.Crit) {\n    crit += stats.critDmg;\n  } else if (modifier.critType === CritType.Average) {\n    let critRate = stats.critRate;\n    if (attackType === AttackType.Charged) {\n      critRate += stats.chargedCritRate ?? 0;\n    } else if (attackType === AttackType.Burst) {\n      critRate += stats.burstCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateAmplifyingReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\n\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  const baseHealing = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n\n  // Incoming healing bonus is ignored because the healer's\n  // incoming healing bonus is not necessarily the same as the\n  // character being healed\n  return baseHealing * (1 + (stats.healingBonus ?? 0));\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n\n// Functions to calculate Talent Values\n\n// Used for all single-hit normal attacks\nexport function normalAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit normal attacks\nexport function normalAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: number[];\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for single-hit charged attacks\nexport function chargedAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for uncharged aim shots\nexport function aimShot({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const element = modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for charged aim shots\nexport function aimShotCharged({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier: multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all physical plunge attacks\nexport function plungeAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionPlunge ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Plunge,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all single-hit skill dmg\nexport function skillSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    scalingType,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit skills\nexport function skillMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for all single-hit burst dmg\nexport function burstSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    element,\n    multiplier,\n    scalingType,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit bursts\nexport function burstMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for damage that does not have an AttackType\nexport function typelessAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.None,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for healing skills/bursts\nexport function healingValue({\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const healing = calculateHealing({\n    stats,\n    multiplier,\n    flatHealing,\n    scalingType,\n  });\n\n  return {\n    damage: [healing],\n  };\n}\n\n// Used for all summons HP\nexport function hpValue({\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    damage: [hp],\n  };\n}\n\n// Used for all shields\nexport function shieldHpValue({\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    damage: [dmgAbsorption],\n  };\n}\n\n// Used for Bennett and Sara's ATK buffs\nexport function atkBuffValue({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const atkBonus = stats.baseAtk * multiplier;\n  return {\n    damage: [atkBonus],\n  };\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('albedo');\n\nconst albedoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  transientBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  fatalBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoTalents: Talents = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalents;\n","import { Element, TalentFn, TalentProps, Talents } from '../../talent/types';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { getTalentData } from '../../data/Data';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('aloy');\r\n\r\nconst aloyAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: attackParams[modifier.talentAttackLevel].slice(0, 2),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Cryo,\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloySkill: Record<string, TalentFn> = {\r\n  freezeBombDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chillwaterBombletDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Cryo,\r\n      multiplier: burstParams[modifier.talentBurstLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyTalents: Talents = {\r\n  attack: aloyAttack,\r\n  skill: aloySkill,\r\n  burst: aloyBurst,\r\n};\r\n\r\nexport default aloyTalents;\r\n","import { getTalentData } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, TalentFn, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('amber');\n\nconst amberAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst amberSkill: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  baronBunnyHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst amberBurst: Record<string, TalentFn> = {\n  dmgPerWave: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  totalDmg: ({ stats, modifier }: TalentProps) => {\n    const talentValue = burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    });\n    talentValue.damage[0] *= 18;\n    return talentValue;\n  },\n};\n\nconst amberTalents: Talents = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { Element, TalentFn, TalentProps, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('ayaka');\n\nconst ayakaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(attackParams[modifier.talentAttackLevel][3]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 3,\n      params: Array(3).fill(attackParams[modifier.talentAttackLevel][7]),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaBurst: Record<string, TalentFn> = {\n  cuttingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  bloomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaTalents: Talents = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('barbara');\n\nconst barbaraAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraSkill: Record<string, TalentFn> = {\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatHealing: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      flatHealing: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  dropletDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraBurst: Record<string, TalentFn> = {\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      flatHealing: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraTalents: Talents = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  chargedAttackSingle,\n  shieldHpValue,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('beidou');\n\nconst beidouAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouSkill: Record<string, TalentFn> = {\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: skillParams[modifier.talentSkillLevel][1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  baseDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  dmgBonusOnHitTaken: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouBurst: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  lightningDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouTalents: Talents = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  atkBuffValue,\n  burstSingle,\n  chargedAttackMulti,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillMulti,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('bennett');\n\nconst bennettAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  chargeLevel1Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: skillParams[modifier.talentSkillLevel].slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n  chargeLevel2Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: skillParams[modifier.talentSkillLevel].slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousPerSecond: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      flatHealing: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  atkBonus: ({ stats, modifier }: TalentProps) =>\n    atkBuffValue({\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettTalents: Talents = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('chongyun');\n\nconst chongyunAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunTalents: Talents = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('diluc');\n\nconst dilucAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucSkill: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucTalents: Talents = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  shieldHpValue,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('diona');\n\nconst dionaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaSkill: Record<string, TalentFn> = {\n  icyPawDmgPerPaw: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpPress: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatBonus: skillParams[modifier.talentSkillLevel][2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  shieldHpHold: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatBonus: skillParams[modifier.talentSkillLevel][2],\n      element: Element.Cryo,\n      stats,\n      modifier: { ...modifier, dionaHoldSkill: true },\n    }),\n};\n\nconst dionaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  continuousFieldDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousTime: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaTalents: Talents = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('eula');\n\nconst eulaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][4]),\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  icewhirlBrandDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordBaseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordStackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaTalents: Talents = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('fischl');\n\nconst fischlAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlSkill: Record<string, TalentFn> = {\n  ozDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  summoningDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlBurst: Record<string, TalentFn> = {\n  fallingThunderDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlTalents: Talents = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  hpValue,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('ganyu');\n\nconst ganyuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  aimShotChargeLevel1: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowBloomDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  iceLotusHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuBurst: Record<string, TalentFn> = {\n  iceShardDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuTalents: Talents = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('hutao');\n\nconst hutaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoSkill: Record<string, TalentFn> = {\n  bloodBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgLowHp: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n\n  hpRegenLowHp: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoTalents: Talents = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('jean');\n\nconst jeanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  fieldEnterExitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  fieldActivationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: burstParams[modifier.talentBurstLevel][3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][4],\n      flatHealing: burstParams[modifier.talentBurstLevel][5],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanTalents: Talents = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('kaeya');\n\nconst kaeyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaTalents: Talents = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport { Element, TalentFn, TalentProps, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('kazuha');\n\nconst kazuhaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(attackParams[modifier.talentAttackLevel][5]),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: burstParams[modifier.talentBurstLevel][2],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst kazuhaTalents: Talents = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('keqing');\n\nconst keqingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingSkill: Record<string, TalentFn> = {\n  lightningStilettoDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  thunderclapSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Electro,\n      params: Array(2).fill(skillParams[modifier.talentSkillLevel][2]),\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  consecutiveSlashDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 8,\n      element: Element.Electro,\n      params: Array(8).fill(burstParams[modifier.talentBurstLevel][1]),\n      stats,\n      modifier,\n    }),\n\n  lastAttackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingTalents: Talents = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('klee');\n\nconst kleeAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeSkill: Record<string, TalentFn> = {\n  jumpyDumptyDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  mineDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeBurst: Record<string, TalentFn> = {\n  sparksNSplashDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeTalents: Talents = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalents;\n","import { Stats } from '../../data/types';\r\nimport { getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  burstSingle,\r\n  chargedAttackSingle,\r\n  healingValue,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  ScalingType,\r\n} from '../../talent/types';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('kokomi');\r\n\r\nconst kokomiAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][0],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][1],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][3],\r\n      stats,\r\n      modifier: getKokomiChargedAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiSkill: Record<string, TalentFn> = {\r\n  hpRegen: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      flatHealing: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  rippleDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Hydro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][2],\r\n      stats,\r\n      modifier: getKokomiSkillModifier(stats, modifier),\r\n    }),\r\n};\r\n\r\nconst kokomiBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Hydro,\r\n      multiplier: burstParams[modifier.talentBurstLevel][0],\r\n      scalingType: ScalingType.Hp,\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: burstParams[modifier.talentBurstLevel][1],\r\n      flatHealing: burstParams[modifier.talentBurstLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiTalents: Talents = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getKokomiNormalAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const normalAttackBonusDmg =\r\n    (burstParams[newModifier.talentBurstLevel][3] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.normalAttackFlatDmg =\r\n    normalAttackBonusDmg + (newModifier.normalAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiChargedAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const chargedAttackBonusDmg =\r\n    (burstParams[newModifier.talentBurstLevel][4] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.chargedAttackFlatDmg =\r\n    chargedAttackBonusDmg + (newModifier.chargedAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiSkillModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const skillBonusDmg =\r\n    burstParams[newModifier.talentBurstLevel][8] * stats.flatHp;\r\n  newModifier.skillFlatDmg = skillBonusDmg + (newModifier.skillFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('lisa');\n\nconst lisaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack0: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack1: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack2: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack3: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaTalents: Talents = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('mona');\n\nconst monaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaSkill: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaBurst: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaTalents: Talents = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('ningguang');\n\nconst ningguangAttack: Record<string, TalentFn> = {\n  normalAtkDmg: ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  starJadeDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  jadeScreenHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangBurst: Record<string, TalentFn> = {\n  dmgPerGem: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangTalents: Talents = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  skillSingle,\n  shieldHpValue,\n  healingValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('noelle');\n\nconst noelleAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: skillParams[modifier.talentSkillLevel][6],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatHealing: skillParams[modifier.talentSkillLevel][7],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  firstSwingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleTalents: Talents = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  healingValue,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('qiqi');\n\nconst qiqiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][3]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][5]),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][7],\n      stats,\n      modifier,\n    }),\n\n  heraldOfFrostDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatHealing: skillParams[modifier.talentSkillLevel][1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      flatHealing: skillParams[modifier.talentSkillLevel][3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      flatHealing: burstParams[modifier.talentBurstLevel][1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiTalents: Talents = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalents;\n","import { getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  normalAttackSingle,\r\n  chargedAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  burstMulti,\r\n} from '../../talent/TalentUtil';\r\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('raiden');\r\n\r\nconst raidenAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: attackParams[modifier.talentAttackLevel].slice(3, 5),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][10],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenSkill: Record<string, TalentFn> = {\r\n  skillDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  coordinatedAtkDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenBurst: Record<string, TalentFn> = {\r\n  musouNoHitotachiDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][0] +\r\n        getInitialResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][4] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][5] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][6] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: burstParams[modifier.talentBurstLevel]\r\n        .slice(7, 9)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][9] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: burstParams[modifier.talentBurstLevel]\r\n        .slice(10, 12)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][13] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][14] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][15] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenTalents: Talents = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getInitialResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    burstParams[modifier.talentBurstLevel][1] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n\r\nfunction getAttackResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    burstParams[modifier.talentBurstLevel][2] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('razor');\n\nconst razorAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][0] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][1] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][2] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][3] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorTalents: Talents = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('rosaria');\n\nconst rosariaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: skillParams[modifier.talentSkillLevel].slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: burstParams[modifier.talentBurstLevel].slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n  iceLanceDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaTalents: Talents = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalents;\n","import { getTalentData } from '../../data/Data';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  atkBuffValue,\r\n  burstSingle,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { TalentProps, Element, TalentFn, Talents } from '../../talent/types';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('sara');\r\n\r\nconst saraAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Electro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraSkill: Record<string, TalentFn> = {\r\n  tenguJuuraiAmbushDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  atkBonus: ({ stats, modifier }: TalentProps) =>\r\n    atkBuffValue({\r\n      multiplier: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraBurst: Record<string, TalentFn> = {\r\n  tenguJuuraiTitanbreakerDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: burstParams[modifier.talentBurstLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  tenguJuuraiStormclusterDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: burstParams[modifier.talentBurstLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraTalents: Talents = {\r\n  attack: saraAttack,\r\n  skill: saraSkill,\r\n  burst: saraBurst,\r\n};\r\n\r\nexport default saraTalents;\r\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('sayu');\n\nconst sayuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuSkill: Record<string, TalentFn> = {\n  fuufuuWindwheelDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickPressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickHoldDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWindwheelElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: skillParams[modifier.talentSkillLevel][1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n\n  fuufuuWhirlwindKickElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: skillParams[modifier.talentSkillLevel][4],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sayuBurst: Record<string, TalentFn> = {\n  activationDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  activationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: burstParams[modifier.talentBurstLevel][1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][5],\n      flatHealing: burstParams[modifier.talentBurstLevel][4],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuTalents: Talents = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('sucrose');\n\nconst sucroseAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: burstParams[modifier.talentBurstLevel][1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sucroseTalents: Talents = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  typelessAttack,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('tartaglia');\n\nconst tartagliaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n\n  riptideFlashDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  riptideBurstDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaSkill: Record<string, TalentFn> = {\n  stanceChangeDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: skillParams[modifier.talentSkillLevel].slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: skillParams[modifier.talentSkillLevel].slice(8, 10),\n      stats,\n      modifier,\n    }),\n\n  riptideSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaBurst: Record<string, TalentFn> = {\n  burstDmgMelee: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgRanged: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  riptideBlastDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaTalents: Talents = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('venti');\n\nconst ventiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: burstParams[modifier.talentBurstLevel][1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst ventiTalents: Talents = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('xiangling');\n\nconst xianglingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(attackParams[modifier.talentAttackLevel][3]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingSkill: Record<string, TalentFn> = {\n  guobaDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingBurst: Record<string, TalentFn> = {\n  swing1HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  swing2HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  swing3HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  pyronadoDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingTalents: Talents = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst { attack: attackParams, skill: skillParams } = getTalentData('xiao');\n\nconst xiaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][0]),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][4]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoTalents: Talents = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n};\n\nexport default xiaoTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, TalentFn, Talents, Element } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('xingqiu');\n\nconst xingqiuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(7, 9),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: skillParams[modifier.talentSkillLevel].slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuBurst: Record<string, TalentFn> = {\n  swordRainDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuTalents: Talents = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('xinyan');\n\nconst xinyanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanSkill: Record<string, TalentFn> = {\n  swingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel1: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatBonus: skillParams[modifier.talentSkillLevel][2],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel2: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      flatBonus: skillParams[modifier.talentSkillLevel][4],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel3: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      flatBonus: skillParams[modifier.talentSkillLevel][6],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][7],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Physical,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  pyroDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanTalents: Talents = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalents;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('yanfei');\n\nconst yanfeiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal0: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal1: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal2: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal3: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal4: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][15],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][16],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][17],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiTalents: Talents = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalents;\n","import { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, TalentFn, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('yoimiya');\n\nconst yoimiyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          attackParams[modifier.talentAttackLevel][0],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        attackParams[modifier.talentAttackLevel][1],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        attackParams[modifier.talentAttackLevel][2],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          attackParams[modifier.talentAttackLevel][3],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        attackParams[modifier.talentAttackLevel][4],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  kindlingArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  aurousBlazeExplosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaTalents: Talents = {\n  attack: yoimiyaAttack,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalents;\n\n// Helper functions\n\nfunction getYoimiyaNormalAttackMultiplier(\n  multiplier: number,\n  modifier: DamageModifier\n): number {\n  if (!modifier.yoimiyaSkill) {\n    return multiplier;\n  }\n\n  return multiplier * skillParams[modifier.talentSkillLevel][3];\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('zhongli');\n\nconst zhongliAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(attackParams[modifier.talentAttackLevel][4]),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliSkill: Record<string, TalentFn> = {\n  stoneSteeleDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  resonanceDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      flatBonus: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliTalents: Talents = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalents;\n","import { Talents } from './types';\n\nimport albedoTalents from '../character/albedo/AlbedoTalent';\nimport aloyTalents from '../character/aloy/AloyTalent';\nimport amberTalents from '../character/amber/AmberTalent';\nimport ayakaTalents from '../character/ayaka/AyakaTalent';\nimport barbaraTalents from '../character/barbara/BarbaraTalent';\nimport beidouTalents from '../character/beidou/BeidouTalent';\nimport bennettTalents from '../character/bennett/BennettTalent';\nimport chongyunTalents from '../character/chongyun/ChongyunTalent';\nimport dilucTalents from '../character/diluc/DilucTalent';\nimport dionaTalents from '../character/diona/DionaTalent';\nimport eulaTalents from '../character/eula/EulaTalent';\nimport fischlTalents from '../character/fischl/FischlTalent';\nimport ganyuTalents from '../character/ganyu/GanyuTalent';\nimport hutaoTalents from '../character/hutao/HutaoTalent';\nimport jeanTalents from '../character/jean/JeanTalent';\nimport kaeyaTalents from '../character/kaeya/KaeyaTalent';\nimport kazuhaTalents from '../character/kazuha/KazuhaTalent';\nimport keqingTalents from '../character/keqing/KeqingTalent';\nimport kleeTalents from '../character/klee/KleeTalent';\nimport kokomiTalents from '../character/kokomi/KokomiTalent';\nimport lisaTalents from '../character/lisa/LisaTalent';\nimport monaTalents from '../character/mona/MonaTalent';\nimport ningguangTalents from '../character/ningguang/NingguangTalent';\nimport noelleTalents from '../character/noelle/NoelleTalent';\nimport qiqiTalents from '../character/qiqi/QiqiTalent';\nimport raidenTalents from '../character/raiden/RaidenTalent';\nimport razorTalents from '../character/razor/RazorTalent';\nimport rosariaTalents from '../character/rosaria/RosariaTalent';\nimport saraTalents from '../character/sara/SaraTalent';\nimport sayuTalents from '../character/sayu/SayuTalent';\nimport sucroseTalents from '../character/sucrose/SucroseTalent';\nimport tartagliaTalents from '../character/tartaglia/TartagliaTalent';\nimport ventiTalents from '../character/venti/VentiTalent';\nimport xianglingTalents from '../character/xiangling/XianglingTalent';\nimport xiaoTalents from '../character/xiao/XiaoTalent';\nimport xingqiuTalents from '../character/xingqiu/XingqiuTalent';\nimport xinyanTalents from '../character/xinyan/XinyanTalent';\nimport yanfeiTalents from '../character/yanfei/YanfeiTalent';\nimport yoimiyaTalents from '../character/yoimiya/YoimiyaTalent';\nimport zhongliTalents from '../character/zhongli/ZhongliTalent';\n\nconst talents: Record<string, Talents> = {\n  albedo: albedoTalents,\n  aloy: aloyTalents,\n  amber: amberTalents,\n  ayaka: ayakaTalents,\n  barbara: barbaraTalents,\n  beidou: beidouTalents,\n  bennett: bennettTalents,\n  chongyun: chongyunTalents,\n  diluc: dilucTalents,\n  diona: dionaTalents,\n  eula: eulaTalents,\n  fischl: fischlTalents,\n  ganyu: ganyuTalents,\n  hutao: hutaoTalents,\n  jean: jeanTalents,\n  kaeya: kaeyaTalents,\n  kazuha: kazuhaTalents,\n  keqing: keqingTalents,\n  klee: kleeTalents,\n  kokomi: kokomiTalents,\n  lisa: lisaTalents,\n  mona: monaTalents,\n  ningguang: ningguangTalents,\n  noelle: noelleTalents,\n  qiqi: qiqiTalents,\n  raiden: raidenTalents,\n  razor: razorTalents,\n  rosaria: rosariaTalents,\n  sara: saraTalents,\n  sayu: sayuTalents,\n  sucrose: sucroseTalents,\n  tartaglia: tartagliaTalents,\n  venti: ventiTalents,\n  xiangling: xianglingTalents,\n  xiao: xiaoTalents,\n  xingqiu: xingqiuTalents,\n  xinyan: xinyanTalents,\n  yanfei: yanfeiTalents,\n  yoimiya: yoimiyaTalents,\n  zhongli: zhongliTalents,\n};\n\nexport function getAllTalentFns(characterId: string): Talents | undefined {\n  return talents[characterId];\n}\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n} from '../data/Data';\n\nimport { getCharacterOptions } from '../option';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../data/types';\nimport type { Talents } from '../talent/types';\nimport { getCharacterPassiveFn } from '../passive/characterPassives/CharacterPassive';\nimport { CharacterOption } from '../option/characterOptions';\nimport { CharacterPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { getAllTalentFns } from '../talent/Talent';\n\nexport default class Character {\n  constructor(id: string, level: number, hasAscended: boolean) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n    this.talentFns = this.getTalentFns(value);\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n  talentFns?: Talents;\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  getTalentFns(characterId: string): Talents | undefined {\n    return getAllTalentFns(characterId);\n  }\n\n  getCharacterOptions() {\n    return getCharacterOptions(this.id).map((Option) => new Option());\n  }\n\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    if (this.talents === undefined) {\n      return [];\n    }\n\n    const passiveDatas = this.talents.passives;\n\n    return passiveDatas\n      .filter((passiveData) => ascensionLevel >= passiveData.ascensionLevel)\n      .flatMap((passiveData) =>\n        getCharacterPassiveFn(passiveData.id)(passiveData.params)\n      );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(ascensionLevel: number, prevAscensionLevel?: number) {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n\n    return characterOptions.concat(passiveOptions);\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from '../data/Data';\nimport { StatMixin } from '../option/Mixin';\nimport Weapon from '../weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputted value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\n// Returns a number representing the value to display (e.g. in stat inputs)\nexport function convertStatToDisplayValue(\n  value: number,\n  isPercentage: boolean\n) {\n  if (isPercentage) {\n    return value * 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin.apply(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n  if (combinedStats.burstCritRate !== undefined) {\n    totalStats.burstCritRate = combinedStats.burstCritRate;\n  }\n\n  if (combinedStats.overloadDmgBonus !== undefined) {\n    totalStats.overloadDmgBonus = combinedStats.overloadDmgBonus;\n  }\n  if (combinedStats.burningDmgBonus !== undefined) {\n    totalStats.burningDmgBonus = combinedStats.burningDmgBonus;\n  }\n  if (combinedStats.vaporizeDmgBonus !== undefined) {\n    totalStats.vaporizeDmgBonus = combinedStats.vaporizeDmgBonus;\n  }\n  if (combinedStats.meltDmgBonus !== undefined) {\n    totalStats.meltDmgBonus = combinedStats.meltDmgBonus;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatToDisplayValue, convertStatValue } from '../stat/Stat';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setInputValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n\n  setValue(value: number) {\n    this.value = value;\n    if (this.stat !== '') {\n      this.rawValue = convertStatToDisplayValue(\n        value,\n        propMapping[this.stat].isPercentage\n      );\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  options: typeof ArtifactSetOption[];\n  extraStatsFn?: ArtifactSetBonusFunction;\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stat, Stats } from '../data/types';\nimport { getArtifactMainStatValue } from '../data/Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatInputValue(i: number, value: number) {\n    this.subStats[i].setInputValue(value);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value + (stats[subStat.stat] ?? 0);\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          type='number'\n          size='sm'\n          value={displayString}\n          onInput={this.handleInput}\n          className={`number-input ${this.props.className ?? ''}`}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\nimport Row from 'react-bootstrap/esm/Row';\n\nclass InputRow extends React.Component {\n  render() {\n    return <Row className='input-row no-gutters'>{this.props.children}</Row>;\n  }\n}\n\nexport default InputRow;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          as='select'\n          size='sm'\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={`picker ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </Form.Control>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../artifact/Artifact';\nimport { propMapping } from '../data/Data';\nimport { capitalize, getStatDisplayValue } from '../stat/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactRarity = (rarity: number) => {\n    this.props.artifact.rarity = rarity;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactLevel = (level: number) => {\n    this.props.artifact.level = level;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatInputValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-rarity`}\n            label='Rarity:'\n            defaultValue={1}\n            value={artifact.rarity}\n            onInput={this.setArtifactRarity}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-level`}\n            label='Level:'\n            defaultValue={0}\n            value={artifact.level}\n            onInput={this.setArtifactLevel}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label='Main Stat:'\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <p>\n            {getStatDisplayValue(\n              artifact.mainStat.stat,\n              artifact.mainStat.value\n            )}\n          </p>\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { StatMixin } from '../option/Mixin';\nimport { getTotalStatsAt } from '../stat/Stat';\nimport { TalentType } from '../talent/types';\n\nexport type RollDistribution = {\n  stat: string;\n  rolls: number;\n};\n\ntype SubstatOptimzerResult = {\n  subStatRolls: RollDistribution[];\n  artifacts: Artifact[];\n};\n\n// Average substat rolls, as per KQM guidelines\nexport const substats: Record<string, number> = {\n  hpBonus: 0.0496,\n  flatHp: 253.94,\n  atkBonus: 0.0496,\n  flatAtk: 16.54,\n  defBonus: 0.062,\n  flatDef: 19.68,\n  elementalMastery: 19.82,\n  energyRecharge: 0.0551,\n  critRate: 0.0331,\n  critDmg: 0.0662,\n};\n\n// Optimize substats according to KQM standardized guidelines\n// 20 preallocated fixed subs (2 of each substat)\n// maxRolls liquid subs (default/max = 20)\n// each sub type can have maximum 2 rolls per different main stat type\nexport function optimizeSubstats(\n  possibleStats: string[],\n  maxRolls: number,\n  erThreshold: number,\n  optimizeTalentType: TalentType,\n  optimizeTalentId: string,\n  appState: AppState,\n  artifactSetBonuses: Stats,\n  damageModifier: DamageModifier,\n  statMixins: StatMixin[]\n): SubstatOptimzerResult {\n  let maxDmg = 0;\n  let optimalSubstatRolls: RollDistribution[] = [];\n  let optimalArtifacts: Artifact[] = appState.artifacts;\n\n  // Roll ER to reach threshold\n  const baseArtifacts = generateBaseArtifacts(appState.artifacts);\n  const baseTotalStats = getTotalStatsAt(\n    appState.character,\n    appState.weapon,\n    artifactSetBonuses,\n    baseArtifacts,\n    appState.talentAttackLevel,\n    appState.talentSkillLevel,\n    appState.talentBurstLevel,\n    statMixins\n  );\n  const baseEr = baseTotalStats.energyRecharge ?? 0;\n\n  let baseErRolls = Math.ceil((erThreshold - baseEr) / substats.energyRecharge);\n\n  const erMainStatCount = baseArtifacts\n    .map((artifact) => artifact.mainStat.stat)\n    .filter((mainStat) => mainStat === 'energyRecharge').length;\n\n  if (baseErRolls < 0) {\n    baseErRolls = 0;\n  } else if (baseErRolls > 2 * (5 - erMainStatCount)) {\n    baseErRolls = 2 * (5 - erMainStatCount);\n  }\n\n  // Generate all combinations\n  const combinations = generateRollCombinationsKqm(\n    possibleStats,\n    maxRolls - baseErRolls,\n    appState.artifacts.map((artifact) => artifact.mainStat.stat),\n    baseErRolls\n  );\n\n  combinations.forEach((combination) => {\n    // Add in ER threshold rolls\n    if (baseErRolls > 0) {\n      const erDistribution = combination.find(\n        ({ stat }) => stat === 'energyRecharge'\n      );\n      if (erDistribution === undefined) {\n        combination.push({ stat: 'energyRecharge', rolls: baseErRolls });\n      } else {\n        erDistribution.rolls += baseErRolls;\n      }\n    }\n\n    const artifacts = generateBaseArtifacts(appState.artifacts);\n\n    addRollsToArtifacts(combination, artifacts);\n\n    const totalStats = getTotalStatsAt(\n      appState.character,\n      appState.weapon,\n      artifactSetBonuses,\n      artifacts,\n      appState.talentAttackLevel,\n      appState.talentSkillLevel,\n      appState.talentBurstLevel,\n      statMixins\n    );\n\n    // Calculate talent damage\n    const talentDmg =\n      appState.character.talentFns?.[optimizeTalentType]?.[optimizeTalentId]?.({\n        stats: totalStats,\n        modifier: damageModifier,\n      })?.damage?.[0] ?? 0;\n\n    // Update optimal rolls\n    if (talentDmg > maxDmg) {\n      optimalSubstatRolls = combination;\n      optimalArtifacts = artifacts;\n      maxDmg = talentDmg;\n    }\n  });\n\n  return {\n    subStatRolls: optimalSubstatRolls,\n    artifacts: optimalArtifacts,\n  };\n}\n\n// Recursive function to generate all substat combinations according to KQM 2*n rule\nfunction generateRollCombinationsKqm(\n  possibleStats: string[],\n  maxRolls: number,\n  mainStats: string[],\n  baseErRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const sameMainStatCount = mainStats.filter(\n    (mainStat) => possibleStats[0] === mainStat\n  ).length;\n  let currentMaxRolls = Math.min((5 - sameMainStatCount) * 2, maxRolls);\n  if (possibleStats[0] === 'energyRecharge') {\n    currentMaxRolls -= baseErRolls;\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = currentMaxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinationsKqm(\n      possibleStats.slice(1),\n      maxRolls - i,\n      mainStats,\n      baseErRolls\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n\n// Recursive function to generate all combinations of possibleStats.length numbers that sum to maxRolls\n// Generated combinations are not guaranteed to be valid substat combinations\n/*\nfunction generateRollCombinations(\n  possibleStats: string[],\n  maxRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = maxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinations(\n      possibleStats.slice(1),\n      maxRolls - i\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n*/\n\n// Generate artifacts with 2 of each substat\nfunction generateBaseArtifacts(prevArtifacts: Artifact[]): Artifact[] {\n  const artifacts = prevArtifacts.map((artifact) => {\n    return new Artifact(\n      artifact.type,\n      artifact.rarity,\n      artifact.level,\n      artifact.mainStat.stat\n    );\n  });\n\n  // Set artifact substats according to currentSubstatRolls\n  let iArtifact = 0;\n  let jArtifact = 0;\n  Object.entries(substats).forEach(([stat, value]) => {\n    artifacts[iArtifact].setSubStatProp(jArtifact, stat);\n    artifacts[iArtifact].setSubStatValue(jArtifact, value * 2);\n    if (++jArtifact >= 4) {\n      jArtifact = 0;\n      if (++iArtifact >= 5) {\n        // This really should not happen\n        iArtifact = 0;\n      }\n    }\n  });\n\n  return artifacts;\n}\n\n// Add liquid subs to fixed subs without replacing any fixed subs\nfunction addRollsToArtifacts(\n  combination: RollDistribution[],\n  artifacts: Artifact[]\n) {\n  const subStats = artifacts.flatMap((artifact) => artifact.subStats);\n  combination.forEach(({ stat, rolls }) => {\n    const subStat = subStats.find((inputStat) => inputStat.stat === stat);\n    if (subStat === undefined) {\n      let sIndex = 0;\n      artifacts\n        .find((artifact) =>\n          artifact.subStats.find((inputStat, i) => {\n            sIndex = i;\n            return isNaN(inputStat.value);\n          })\n        )\n        ?.setSubStatValue(sIndex, substats[stat] * rolls);\n    } else {\n      subStat.setValue(subStat.value + substats[stat] * rolls);\n    }\n  });\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <div>\n        <Form.Check\n          type='checkbox'\n          className={`checkbox ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          <Form.Check.Label>{this.props.label}</Form.Check.Label>\n          <Form.Check.Input\n            type='checkbox'\n            checked={value}\n            onChange={this.handleChange}\n          />\n        </Form.Check>\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Button from 'react-bootstrap/esm/Button';\nimport Card from 'react-bootstrap/esm/Card';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport { propMapping, talentDescMapping } from '../data/Data';\nimport DamageModifier from '../modifier/DamageModifer';\nimport {\n  optimizeSubstats,\n  RollDistribution,\n  substats,\n} from '../optimization/Optimization';\nimport { StatMixin } from '../option/Mixin';\nimport { capitalize } from '../stat/Stat';\nimport { TalentType, TalentValueSet } from '../talent/types';\nimport Checkbox from './Checkbox';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptimizerBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  damageModifier: DamageModifier;\n  statMixins: StatMixin[];\n  talentValues: TalentValueSet;\n};\n\ntype OptimizerBlockState = {\n  maxRolls: number;\n  selectedSubstats: string[];\n  erThreshold: number;\n  targetTalentType?: TalentType;\n  targetTalentId: string;\n  substatRolls: RollDistribution[];\n};\n\nclass OptimizerBlock extends React.Component<\n  OptimizerBlockProps,\n  OptimizerBlockState\n> {\n  state: OptimizerBlockState = {\n    substatRolls: [],\n    selectedSubstats: [],\n    erThreshold: 100,\n    targetTalentId: '',\n    maxRolls: 20,\n  };\n\n  setMaxRolls = (maxRolls: number) => {\n    this.setState({ maxRolls });\n  };\n\n  setSelectedSubstats = (stat: string) => (selected: boolean) => {\n    if (selected) {\n      if (!this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: [...this.state.selectedSubstats, stat],\n        });\n      }\n    } else {\n      if (this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: this.state.selectedSubstats.filter(\n            (substat) => substat !== stat\n          ),\n        });\n      }\n    }\n  };\n\n  setErThreshold = (value: number) => {\n    if (isNaN(value)) {\n      this.setState({ erThreshold: 0 });\n    } else {\n      this.setState({ erThreshold: value });\n    }\n  };\n\n  setTargetTalentType = (value: string) => {\n    if (value === '') {\n      this.setState({ targetTalentType: undefined });\n    } else {\n      this.setState({ targetTalentType: value as TalentType });\n    }\n  };\n\n  setTargetTalentId = (value: string) => {\n    this.setState({ targetTalentId: value });\n  };\n\n  onOptimizeClick = () => {\n    if (\n      this.state.targetTalentType !== undefined &&\n      this.state.targetTalentId !== ''\n    ) {\n      const result = optimizeSubstats(\n        this.state.selectedSubstats,\n        this.state.maxRolls,\n        this.state.erThreshold / 100,\n        this.state.targetTalentType,\n        this.state.targetTalentId,\n        this.props.appState,\n        this.props.artifactSetBonuses,\n        this.props.damageModifier,\n        this.props.statMixins\n      );\n\n      this.props.updateTotalStats({ artifacts: result.artifacts });\n      this.props.setAppState({ artifacts: result.artifacts });\n      this.setState({ substatRolls: result.subStatRolls });\n    }\n  };\n\n  render() {\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='0'\n            className='bg-transparent border-0'\n          >\n            <h3>Substat Optimizer</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n          <Accordion.Collapse eventKey='0'>\n            <Card.Body>\n              <div className='input-block'>\n                <p>Fixed Substats: 20</p>\n\n                <InputRow>\n                  <IntInput\n                    className='level-input'\n                    id={'optimizer-liquid-substats'}\n                    label='Liquid Substats:'\n                    defaultValue={20}\n                    value={this.state.maxRolls}\n                    onInput={this.setMaxRolls}\n                  />\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <p>Select substats to optimize:</p>\n                {Object.keys(substats).map((stat) => (\n                  <InputRow key={stat}>\n                    <Checkbox\n                      id={`optimizer-selected-substats-${stat}`}\n                      label={`${propMapping[stat].name}`}\n                      defaultValue={false}\n                      value={this.state.selectedSubstats.includes(stat)}\n                      onChange={this.setSelectedSubstats(stat)}\n                    />\n                  </InputRow>\n                ))}\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <FloatInput\n                    className='stat-input'\n                    id={'optimizer-er-threshold'}\n                    label='ER Threshold:'\n                    defaultValue={100}\n                    value={this.state.erThreshold}\n                    onInput={this.setErThreshold}\n                  />\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <Picker\n                    id={`optimizer-target-talent-type`}\n                    label='Target Talent Type:'\n                    defaultValue=''\n                    value={this.state.targetTalentType ?? ''}\n                    onChange={this.setTargetTalentType}\n                  >\n                    <Picker.Item value='' label='' />\n                    <Picker.Item\n                      value={TalentType.Attack}\n                      label={capitalize(TalentType.Attack)}\n                    />\n                    <Picker.Item\n                      value={TalentType.Skill}\n                      label={capitalize(TalentType.Skill)}\n                    />\n                    <Picker.Item\n                      value={TalentType.Burst}\n                      label={capitalize(TalentType.Burst)}\n                    />\n                  </Picker>\n                </InputRow>\n\n                <InputRow>\n                  <Picker\n                    id={`optimizer-target-talent-id`}\n                    label='Target Talent Name:'\n                    defaultValue=''\n                    value={this.state.targetTalentId ?? ''}\n                    onChange={this.setTargetTalentId}\n                  >\n                    <Picker.Item value='' label='' />\n                    {this.state.targetTalentType\n                      ? Object.keys(\n                          this.props.talentValues[this.state.targetTalentType]\n                        ).map((id) => (\n                          <Picker.Item\n                            key={id}\n                            value={id}\n                            label={talentDescMapping[id]}\n                          />\n                        ))\n                      : null}\n                  </Picker>\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <Button\n                    variant='secondary'\n                    size='sm'\n                    onClick={this.onOptimizeClick}\n                  >\n                    Optimize\n                  </Button>\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                {this.state.substatRolls.length > 0 && (\n                  <p>Liquid roll distribution:</p>\n                )}\n\n                {this.state.substatRolls.map(({ stat, rolls }) => (\n                  <p key={stat}>\n                    {propMapping[stat].name}: {rolls}\n                  </p>\n                ))}\n              </div>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default OptimizerBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { StatMixin } from '../option/Mixin';\nimport { TalentValueSet } from '../talent/types';\nimport ArtifactBlock from './ArtifactBlock';\nimport OptimizerBlock from './OptimizerBlock';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  damageModifier: DamageModifier;\n  statMixins: StatMixin[];\n  talentValues: TalentValueSet;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Col\n        id='artifact-column'\n        className='artifact-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='artifact-heading'>\n          <h2>Artifacts</h2>\n        </div>\n        <OptimizerBlock {...this.props} />\n        <div className='result-block'>\n          {appState.artifacts.map((artifact) => (\n            <ArtifactBlock\n              artifact={artifact}\n              updateArtifactState={this.updateArtifactState}\n              key={artifact.type}\n            />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import React from 'react';\r\nimport Row from 'react-bootstrap/esm/Row';\r\n\r\nclass InputBlock extends React.Component {\r\n  render() {\r\n    return <Row className='input-block no-gutters'>{this.props.children}</Row>;\r\n  }\r\n}\r\n\r\nexport default InputBlock;\r\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../option';\nimport { IOptionBoolean, IOptionNumber, IOptionPicker } from '../option/Option';\nimport { capitalize, getOptionName } from '../stat/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].id = id;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </InputBlock>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { CharacterOption } from '../option/characterOptions';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const character = this.props.appState.character;\n    character.id = id;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport Resistance from '../stat/Resistance';\nimport { capitalize } from '../stat/Stat';\nimport { Element } from '../talent/types';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  setReaction = (reaction: string) => {\n    this.props.updateTalentValues({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n    this.props.setAppState({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType, reaction } = this.props.appState;\n    return (\n      <InputBlock>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n\n        <InputRow>\n          <Picker\n            id='reaction-picker'\n            label='Reaction:'\n            defaultValue={Reaction.None}\n            value={reaction}\n            onChange={this.setReaction}\n          >\n            {Object.values(Reaction).map((reaction) => (\n              <Picker.Item\n                key={reaction}\n                label={capitalize(reaction)}\n                value={reaction}\n              />\n            ))}\n          </Picker>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import { Stats } from '../data/types';\nimport { getArtifactSetBonusParams } from '../data/Data';\nimport archaicPetraOptions from '../option/artifactSetOptions/ArchaicPetraOption';\nimport berserkerOptions from '../option/artifactSetOptions/BerserkerOption';\nimport blizzardStrayerOptions from '../option/artifactSetOptions/BlizzardStrayerOption';\nimport bloodstainedChivalryOptions from '../option/artifactSetOptions/BloodstainedChivalryOption';\nimport braveHeartOptions from '../option/artifactSetOptions/BraveHeartOption';\nimport crimsonWitchOptions from '../option/artifactSetOptions/CrimsonWitchOption';\nimport heartOfDepthOptions from '../option/artifactSetOptions/HeartOfDepthOption';\nimport instructorOptions from '../option/artifactSetOptions/InstructorOption';\nimport lavawalkerOptions from '../option/artifactSetOptions/LavawalkerOption';\nimport maidenBelovedOptions from '../option/artifactSetOptions/MaidenBelovedOption';\nimport martialArtistOptions from '../option/artifactSetOptions/MartialArtistOption';\nimport noblesseObligeOptions from '../option/artifactSetOptions/NoblesseObligeOption';\nimport paleFlameOptions from '../option/artifactSetOptions/PaleFlameOption';\nimport retracingBolideOptions from '../option/artifactSetOptions/RetracingBolideOption';\nimport shimenawaOptions from '../option/artifactSetOptions/ShimenawaOption';\nimport tenacityOptions from '../option/artifactSetOptions/TenacityOption';\nimport thundersootherOptions from '../option/artifactSetOptions/ThundersootherOption';\nimport viridescentVenererOptions from '../option/artifactSetOptions/ViridescentVenererOption';\nimport { Priority } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\n\n// Placeholder function\nconst defaultSetBonus: ArtifactSetBonus = { options: [] };\n\nconst Relic_ExtraAtkCritUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'chargedCritRate',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_AllElemResistUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    const elements = ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'];\n    return elements.map((element) => {\n      return {\n        stat: `${element}Res`,\n        value: params[0],\n      };\n    });\n  },\n};\n\nconst Relic_AtkAndExtraAtkUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'normalDmgBonus',\n        value: params[0],\n      },\n      {\n        stat: 'chargedDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_SkillDamageUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'skillDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_MeleeAttackUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    // Only for sword, polearm, claymore characters\n    // Did not make this an Option because this would likely not want to be disabled\n    // Calculation will be wrong if used on a catalyst, bow character\n    // Checking for that would require character weapon type to be implemented first\n    return [\n      {\n        stat: 'normalDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\n// Elemental Res shred implemented through Options\nconst Relic_ReactionWindEnhance: ArtifactSetBonus = {\n  options: viridescentVenererOptions,\n};\n\nconst Relci_RangerAttackUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    // Typo is present in the game data\n    // Only for catalyst, bow characters\n    // See Relic_MeleeAttackUp for more details\n    return [\n      {\n        stat: 'chargedDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\n// Pyro Dmg Bonus implemented through Options\nconst Relic_ReactionFireEnhance: ArtifactSetBonus = {\n  options: crimsonWitchOptions,\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'overloadDmgBonus',\n        value: params[0],\n      },\n      {\n        stat: 'burningDmgBonus',\n        value: params[0],\n      },\n      {\n        stat: 'vaporizeDmgBonus',\n        value: params[1],\n      },\n      {\n        stat: 'meltDmgBonus',\n        value: params[2],\n      },\n    ];\n  },\n};\n\nconst Relic_ElementalBurstUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'burstDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_ElementalBurstUpByChargeEfficiency: ArtifactSetBonus = {\n  options: [],\n\n  statMixin: {\n    priority: Priority.Last,\n    apply: (stats: Stats) => {\n      const params = getArtifactSetBonusParams('emblemofseveredfate', 4);\n      let burstDmgBonus = params[0] * stats.energyRecharge;\n      if (burstDmgBonus > params[1]) {\n        burstDmgBonus = params[1];\n      }\n\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n    },\n  },\n};\n\nconst Relic_GiantKiller: ArtifactSetBonus = {\n  options: braveHeartOptions,\n};\n\nconst Relic_LowHPGainExtraCritRate: ArtifactSetBonus = {\n  options: berserkerOptions,\n};\n\nconst Relic_SkillEnhanceNormalAtkAndExtraAtk: ArtifactSetBonus = {\n  options: martialArtistOptions,\n};\n\nconst Relic_ReactionGainExtraElemMasteryForTeam: ArtifactSetBonus = {\n  options: instructorOptions,\n};\n\nconst Relic_CriticUpAgainstIceAndFrozen: ArtifactSetBonus = {\n  options: blizzardStrayerOptions,\n};\n\nconst Relic_DamageUpAgainstElectric: ArtifactSetBonus = {\n  options: thundersootherOptions,\n};\n\nconst Relic_DamageUpAgainstFireAndBurning: ArtifactSetBonus = {\n  options: lavawalkerOptions,\n};\n\nconst Relic_SkillEnhanceCured: ArtifactSetBonus = {\n  options: maidenBelovedOptions,\n};\n\nconst Relic_TeamAtkupAfterElementalBurst: ArtifactSetBonus = {\n  options: noblesseObligeOptions,\n};\n\nconst Relic_KillEnhanceExtraAtk: ArtifactSetBonus = {\n  options: bloodstainedChivalryOptions,\n};\n\nconst Relic_ElementDmgUpAfterCrystalShield: ArtifactSetBonus = {\n  options: archaicPetraOptions,\n};\n\nconst Relic_ShieldEnhanceAtk: ArtifactSetBonus = {\n  options: retracingBolideOptions,\n};\n\nconst Relic_WaterSkillEnhanceNormalAtkAndExtraAtk: ArtifactSetBonus = {\n  options: heartOfDepthOptions,\n};\n\nconst Relic_ShieldCostUpWhenElementalArtHit: ArtifactSetBonus = {\n  options: tenacityOptions,\n};\n\nconst Relic_AttackUpWhenNormalAtkAndExtraAtkHit: ArtifactSetBonus = {\n  options: paleFlameOptions,\n};\n\nconst Relic_NormalDamageUpIfCostEnergy: ArtifactSetBonus = {\n  options: shimenawaOptions,\n};\n\nexport const artifactSetBonuses: Record<string, ArtifactSetBonus> = {\n  defaultSetBonus,\n  Relic_ExtraAtkCritUp,\n  Relic_AllElemResistUp,\n  Relic_AtkAndExtraAtkUp,\n  Relic_SkillDamageUp,\n  Relic_MeleeAttackUp,\n  Relci_RangerAttackUp,\n  Relic_ElementalBurstUp,\n  Relic_ElementalBurstUpByChargeEfficiency,\n\n  // Options only\n  Relic_GiantKiller,\n  Relic_LowHPGainExtraCritRate,\n  Relic_SkillEnhanceNormalAtkAndExtraAtk,\n  Relic_ReactionGainExtraElemMasteryForTeam,\n  Relic_CriticUpAgainstIceAndFrozen,\n  Relic_DamageUpAgainstElectric,\n  Relic_DamageUpAgainstFireAndBurning,\n  Relic_SkillEnhanceCured,\n  Relic_TeamAtkupAfterElementalBurst,\n  Relic_KillEnhanceExtraAtk,\n  Relic_ElementDmgUpAfterCrystalShield,\n  Relic_ShieldEnhanceAtk,\n  Relic_WaterSkillEnhanceNormalAtkAndExtraAtk,\n  Relic_ShieldCostUpWhenElementalArtHit,\n  Relic_AttackUpWhenNormalAtkAndExtraAtkHit,\n  Relic_NormalDamageUpIfCostEnergy,\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n  Relic_ReactionWindEnhance,\n\n  // Reaction Dmg Up not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionFireEnhance,\n\n  // Not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionElectricEnhance: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Requires info about team composition\n  Relic_AbsorbTeamElemResist: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Probably can be implemented with a dropdown option for prev received elem dmg\n  Relic_ElemDmgEnhanceElemResist: defaultSetBonus,\n\n  // Not implemented. CD reduction effect.\n  Relic_KillingRefreshSkill: defaultSetBonus,\n\n  // Not implemented. Energy effect.\n  Relic_UltGainEnergyForTeam: defaultSetBonus,\n  Relic_RestoreEnergyGainExtraEnergyForTeam: defaultSetBonus,\n\n  // Not implemented. Healing effect when opening chests.\n  Relic_ChestHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when getting Mora.\n  Relic_CoinHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when burst.\n  Relic_UltHealSelf: defaultSetBonus,\n\n  // Not implemented. Element duration reduction.\n  Relic_FireResistance: defaultSetBonus,\n  Relic_WaterResistance: defaultSetBonus,\n  Relic_ElectricResistance: defaultSetBonus,\n  Relic_IceResistance: defaultSetBonus,\n};\n","import { getArtifactSetData, getArtifactSetBonusData } from '../data/Data';\nimport { artifactSetBonuses as extraBonuses } from './ArtifactSetBonus';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../data/types';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces?: number) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.stats = this.getStats();\n    this.setBonuses = this.getSetBonuses();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.stats = this.getStats();\n    this.setBonuses = this.getSetBonuses();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n\n      // Special bonuses, has to be handled individually\n      let extraBonus = setBonus?.bonusExtra;\n      if (extraBonus !== undefined && extraBonus.type !== '') {\n        let extraBonusSet =\n          extraBonuses[extraBonus.type] ?? extraBonuses['defaultSetBonus'];\n\n        let params = extraBonus.params;\n\n        let extraStats = extraBonusSet.extraStatsFn?.(params) ?? [];\n\n        extraStats.forEach((statBonus) => {\n          if (stats[statBonus.stat] !== undefined) {\n            stats[statBonus.stat] += statBonus.value;\n          } else {\n            stats[statBonus.stat] = statBonus.value;\n          }\n        });\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap((setBonus) => setBonus.options);\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options)\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getSetBonuses(): ArtifactSetBonus[] {\n    const setBonusSets = this.setBonusSets;\n    return setBonusSets.map((setBonusSet) => {\n      const setBonusType = setBonusSet?.bonusExtra.type;\n      return extraBonuses[setBonusType] ?? extraBonuses['defaultSetBonus'];\n    });\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","import Option from '../Option';\n\nexport default class WeaponOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import { WeaponPassive, WeaponPassiveFn } from '../types';\nimport { dragonsBanePassive } from './DragonsBanePassive';\nimport { engulfingLightningPassive } from './EngulfingLightningPassive';\nimport { everlastingMoonglowPassive } from './EverlastingMoonglowPassive';\nimport { luxuriousSeaLordPassive } from './LuxuriousSeaLordPassive';\nimport { solarPearlPassive } from './SolarPearlPassive';\nimport { staffOfHomaPassive } from './StaffOfHomaPassive';\nimport { theCatchPassive } from './TheCatchPassive';\n\nconst weaponPassives: Record<string, WeaponPassiveFn> = {\n  // Polearm\n  Weapon_Pole_DamageUpToWaterEnemy: dragonsBanePassive,\n  Weapon_Pole_Homa: staffOfHomaPassive,\n  Weapon_Pole_Mori: theCatchPassive,\n  Weapon_Pole_Narukami: engulfingLightningPassive,\n\n  // Claymore\n  Weapon_Claymore_MillenniaTuna: luxuriousSeaLordPassive,\n\n  // Catalyst\n  Weapon_Catalyst_NormalAttackAndSkillAttack: solarPearlPassive,\n  Weapon_Catalyst_Kaleido: everlastingMoonglowPassive,\n};\n\nfunction defaultPassiveFn(): WeaponPassive[] {\n  return [];\n}\n\nexport function getWeaponPassiveFn(passiveId: string) {\n  return weaponPassives[passiveId] ?? defaultPassiveFn;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../types';\n\nexport function dragonsBanePassive(params: TalentParams): WeaponPassive {\n  class DragonsBaneOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('dragonsBanePassive');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'dragonsBane',\n    options: [DragonsBaneOption],\n  };\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../types';\n\nexport function staffOfHomaPassive(params: TalentParams): WeaponPassive {\n  class StaffOfHomaOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('staffOfHomaAtkBonus');\n    }\n\n    statMixin = {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n\n        let flatAtkBonus = totalHp * params[1];\n        if (this.value) {\n          flatAtkBonus += totalHp * params[2];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      },\n    };\n  }\n\n  return {\n    id: 'staffOfHoma',\n    options: [StaffOfHomaOption],\n  };\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport { WeaponPassive } from '../types';\n\nexport function theCatchPassive(params: TalentParams): WeaponPassive {\n  return {\n    id: 'theCatch',\n    options: [],\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        stats.burstCritRate = params[1] + (stats.burstCritRate ?? 0);\n      },\n    },\n  };\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../types';\n\nexport function engulfingLightningPassive(params: TalentParams): WeaponPassive {\n  class EngulfingLightningOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('engulfingLightningEnergyRecharge');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.energyRecharge = params[2] + (stats.energyRecharge ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'engulfingLightning',\n    options: [EngulfingLightningOption],\n\n    statMixin: {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        let atkBonus = (stats.energyRecharge - 1) * params[0];\n        if (atkBonus > params[1]) {\n          atkBonus = params[1];\n        }\n\n        stats.atkBonus = atkBonus + (stats.atkBonus ?? 0);\n      },\n    },\n  };\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport { WeaponPassive } from '../types';\n\nexport function luxuriousSeaLordPassive(params: TalentParams): WeaponPassive {\n  return {\n    id: 'luxuriousSeaLord',\n    options: [],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../types';\n\nexport function solarPearlPassive(params: TalentParams): WeaponPassive {\n  class SolarPearlOptionNormalAttack\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlNormalAttack');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n          stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  class SolarPearlOptionSkillBurst\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlSkillBurst');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'solarPearl',\n    options: [SolarPearlOptionNormalAttack, SolarPearlOptionSkillBurst],\n  };\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { WeaponPassive } from '../types';\n\nexport function everlastingMoonglowPassive(\n  params: TalentParams\n): WeaponPassive {\n  return {\n    id: 'everlastingMoonglow',\n    options: [],\n    modifierMixin: {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        modifier.normalAttackFlatDmg =\n          params[1] * (stats.flatHp ?? 0) + (modifier.normalAttackFlatDmg ?? 0);\n      },\n    },\n  };\n}\n","import {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  WeaponPassiveData,\n  WeaponPassiveSetData,\n} from '../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getWeaponPassiveAt,\n  getWeaponPassiveData,\n} from '../data/Data';\nimport { getOptionValue, setOptionValue } from '../option';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../passive/types';\nimport { getWeaponPassiveFn } from '../passive/weaponPassives/WeaponPassive';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(\n    id: string,\n    level: number,\n    hasAscended: boolean,\n    refinement: number\n  ) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n    this._refinement = refinement;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.passiveDataSet = getWeaponPassiveData(value);\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(\n        this.refinement,\n        this.passiveDataSet\n      );\n      this.passive = this.getPassive(this.passiveData);\n      this.passiveOptions = this.getPassiveOptions();\n    }\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  passiveDataSet?: WeaponPassiveSetData;\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  private _refinement: number = 1;\n  get refinement(): number {\n    return this._refinement;\n  }\n  set refinement(value: number) {\n    this._refinement = value;\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(value, this.passiveDataSet);\n      this.passive = this.getPassive(this.passiveData);\n      this.passiveOptions = this.getPassiveOptions(true);\n    }\n  }\n\n  stats: Stats = {};\n  passiveData?: WeaponPassiveData;\n  passive?: WeaponPassive;\n  passiveOptions: WeaponOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n\n  // Only returns the extra passive bonuses, excluding the direct stat bonuses\n  // To be called when passive should update (e.g. id or refinement change)\n  getPassive(passiveData?: WeaponPassiveData) {\n    if (passiveData === undefined) {\n      return getWeaponPassiveFn('')([]);\n    }\n\n    return getWeaponPassiveFn(passiveData.passiveId)(passiveData.passiveParams);\n  }\n\n  // getPassive should be called before this if passives are updated\n  getPassiveOptions(shouldKeepValue: boolean = false) {\n    let newOptions = (this.passive?.options ?? []).map(\n      (Option) => new Option()\n    );\n\n    if (shouldKeepValue) {\n      this.passiveOptions.forEach((option) => {\n        let newOption = newOptions.find(\n          (newOption) => newOption.id === option.id\n        );\n        if (newOption !== undefined) {\n          setOptionValue(newOption, getOptionValue(option));\n        }\n      });\n    }\n\n    return newOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    let statMixins = [];\n\n    if (this.passive?.statMixin !== undefined) {\n      statMixins.push(this.passive.statMixin);\n    }\n\n    if (this.passiveData?.statBonuses !== undefined) {\n      this.passiveData.statBonuses.forEach(({ stat, value }) => {\n        statMixins.push({\n          apply: (stats: Stats) => {\n            stats[stat] = value + (stats[stat] ?? 0);\n          },\n        });\n      });\n    }\n\n    return statMixins;\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    if (this.passive?.modifierMixin === undefined) {\n      return [];\n    }\n\n    return [this.passive.modifierMixin];\n  }\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Col from 'react-bootstrap/esm/Col';\nimport Form from 'react-bootstrap/esm/Form';\nimport Modal from 'react-bootstrap/esm/Modal';\nimport { AppState } from '../App';\nimport {\n  createSave,\n  addSave,\n  getSave,\n  loadSave,\n  Saves,\n  deleteSave,\n} from '../save/Save';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype SaveBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  refreshApp: () => void;\n};\n\ntype SaveBlockState = {\n  saves: Saves;\n  saveInputName: string;\n  selectedSave: string;\n  showDeleteWarning: boolean;\n};\n\nclass SaveBlock extends React.Component<SaveBlockProps, SaveBlockState> {\n  state: SaveBlockState;\n\n  constructor(props: SaveBlockProps) {\n    super(props);\n\n    // Populate local storage if empty\n    if (window.localStorage.getItem('saves') === null) {\n      window.localStorage.setItem('saves', '{}');\n    }\n\n    // Initialize saves in memory\n    const saves = JSON.parse(window.localStorage.getItem('saves') ?? '{}');\n    // Initialize state\n    this.state = {\n      saves,\n      saveInputName: '',\n      selectedSave: '',\n      showDeleteWarning: false,\n    };\n  }\n\n  onSaveClick = () => {\n    if (this.state.saveInputName !== '') {\n      const save = createSave(this.state.saveInputName, this.props.appState);\n      const saves = this.state.saves;\n      addSave(save, saves);\n      this.setState({ saves });\n    }\n  };\n\n  onSaveInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveInputName: e.target.value });\n  };\n\n  onLoadClick = () => {\n    if (this.state.selectedSave !== '') {\n      const save = getSave(this.state.selectedSave, this.state.saves);\n      if (save !== undefined) {\n        loadSave(save, this.props.setAppState, this.props.refreshApp);\n      }\n    }\n  };\n\n  onLoadInputChange = (value: string) => {\n    this.setState({ selectedSave: value });\n  };\n\n  onDeleteClick = () => {\n    if (this.state.selectedSave !== '') {\n      this.setState({ showDeleteWarning: true });\n    }\n  };\n\n  onModalConfirm = () => {\n    const saves = this.state.saves;\n    deleteSave(this.state.selectedSave, saves);\n    this.setState({ saves });\n\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onModalHide = () => {\n    this.setState({ showDeleteWarning: false });\n  };\n\n  render() {\n    return (\n      <InputBlock>\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onSaveClick}>\n            Save\n          </Button>\n\n          <Col className='save-name-col'>\n            <Form.Control\n              type='text'\n              size='sm'\n              placeholder='Save label (cannot be empty)'\n              onChange={this.onSaveInputChange}\n            />\n          </Col>\n        </InputRow>\n\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onLoadClick}>\n            Load\n          </Button>\n\n          <Picker\n            id='save-picker'\n            label=''\n            defaultValue=''\n            value={this.state.selectedSave}\n            onChange={this.onLoadInputChange}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {Object.values(this.state.saves).map((save) => (\n              <Picker.Item\n                label={save.label}\n                value={save.label}\n                key={save.label}\n              />\n            ))}\n          </Picker>\n\n          <>\n            <Button variant='danger' size='sm' onClick={this.onDeleteClick}>\n              Delete\n            </Button>\n\n            <Modal\n              show={this.state.showDeleteWarning}\n              onHide={this.onModalHide}\n            >\n              <Modal.Body>\n                Are you sure you want to delete the save configuration? This\n                action is irreversible!\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={this.onModalHide}>\n                  Cancel\n                </Button>\n                <Button variant='danger' onClick={this.onModalConfirm}>\n                  Delete\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default SaveBlock;\n","import { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport { ArtifactType, InputStat } from '../artifact/types';\nimport Character from '../character/Character';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport Weapon from '../weapon/Weapon';\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n  weaponRefinement?: number;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  characterOptions?: { id?: string; value?: unknown }[];\n  weaponOptions?: { id?: string; value?: unknown }[];\n  artifactSetOptions?: { id?: string; value?: unknown }[];\n}\n\nexport type Saves = Record<string, Save>;\n\ninterface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n    weaponRefinement: appState.weapon.refinement,\n\n    artifacts: appState.artifacts.map((artifact) => {\n      return {\n        type: artifact.type,\n        rarity: artifact.rarity,\n        level: artifact.level,\n        mainStat: artifact.mainStat.stat,\n        subStats: artifact.subStats.map((subStat) =>\n          createInputStatSave(subStat)\n        ),\n      };\n    }),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    characterOptions: appState.characterOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    weaponOptions: appState.weaponOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactSetOptions: appState.artifactSetOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n  };\n\n  return save;\n}\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const character = new Character(\n    save.characterId ?? '',\n    save.characterLevel ?? 1,\n    save.characterHasAscended ?? false\n  );\n  const weapon = new Weapon(\n    save.weaponId ?? '',\n    save.weaponLevel ?? 1,\n    save.weaponHasAscended ?? false,\n    save.weaponRefinement ?? 1\n  );\n\n  const artifacts =\n    save.artifacts?.map((savedArtifact, i) => {\n      const artifactType = savedArtifact.type ?? Object.values(ArtifactType)[i];\n      let artifact = new Artifact(\n        artifactType,\n        savedArtifact.rarity ?? 1,\n        savedArtifact.level ?? 0,\n        savedArtifact.mainStat ?? ''\n      );\n      artifact.subStats =\n        savedArtifact.subStats?.map(\n          (subStat) =>\n            new InputStat(\n              subStat.stat ?? '',\n              subStat.value ?? NaN,\n              subStat.rawValue ?? NaN\n            )\n        ) ?? artifact.subStats;\n\n      return artifact;\n    }) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map(\n    (artifactSet) =>\n      new ArtifactSet(\n        artifactSet.artifactSetId ?? '',\n        artifactSet.artifactSetPieces ?? 0\n      )\n  ) ?? [new ArtifactSet(''), new ArtifactSet(''), new ArtifactSet('')];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, option.value);\n    }\n  });\n\n  const weaponOptions = weapon.passiveOptions;\n  save.weaponOptions?.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, option.value);\n    }\n  });\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, option.value);\n    }\n  });\n\n  setAppState(\n    {\n      character,\n      weapon,\n      artifacts,\n      artifactSets,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      critType,\n      enemyLevel,\n      enemyRes,\n      reaction,\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n    },\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Weapon from '../weapon/Weapon';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    weapon,\n    weaponOptions,\n  }: {\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n  }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const weapon = this.props.appState.weapon;\n    weapon.id = id;\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponRefinement = (refinement: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.refinement = refinement;\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  updateOptions = () => {\n    const { weaponOptions } = this.props.appState;\n    this.props.updateTotalStats({ weaponOptions });\n    this.props.setAppState({ weaponOptions: [...weaponOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-refinement-input'\n            label='Refinement:'\n            defaultValue={1}\n            value={appState.weapon.refinement}\n            onInput={this.setWeaponRefinement}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.weaponOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport CritType from '../modifier/CritType';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\nimport { CharacterOption } from '../option/characterOptions';\nimport Resistance from '../stat/Resistance';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport SaveBlock from './SaveBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  refreshApp: () => void;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n      refreshApp,\n    } = this.props;\n\n    return (\n      <Col\n        id='input-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <SaveBlock\n          appState={appState}\n          setAppState={setAppState}\n          refreshApp={refreshApp}\n        />\n\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../character/Character';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\nimport Weapon from '../weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Col\n        id='stat-column'\n        className='stat-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\n\ntype TalentBlockProps = {\n  type: string;\n  talentValues: Record<string, TalentValue>;\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{talentDescMapping[this.props.type]}</h3>\n        {Object.entries(this.props.talentValues).map(([id, { damage }]) => (\n          <p key={id}>\n            {talentDescMapping[id]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport { TalentValueSet } from '../talent/types';\nimport TalentBlock from './TalentBlock';\nimport Col from 'react-bootstrap/esm/Col';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const talentValues = this.props.talentValues;\n\n    return (\n      <Col\n        id='talent-column'\n        className='talent-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='result-block'>\n          <h2>Talents</h2>\n          {Object.entries(talentValues).map(([type, values]) => (\n            <TalentBlock type={type} talentValues={values} />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport Row from 'react-bootstrap/esm/Row';\nimport './App.css';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport { Stats } from './data/types';\nimport Artifact from './artifact/Artifact';\nimport ArtifactSet from './artifact/ArtifactSet';\nimport { ArtifactType } from './artifact/types';\nimport Character from './character/Character';\nimport CritType from './modifier/CritType';\nimport DamageModifier from './modifier/DamageModifer';\nimport Reaction from './modifier/Reaction';\nimport { isModifierApplicable, isStatsApplicable } from './option';\nimport { ArtifactSetOption } from './option/artifactSetOptions';\nimport { CharacterOption } from './option/characterOptions';\nimport { ModifierMixin, Priority, StatMixin } from './option/Mixin';\nimport { IModifierApplicable, IStatsApplicable } from './option/Option';\nimport WeaponOption from './option/weaponOptions/WeaponOption';\nimport Resistance from './stat/Resistance';\nimport { getTotalStatsAt } from './stat/Stat';\nimport { TalentValue, TalentValueSet } from './talent/types';\nimport Weapon from './weapon/Weapon';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: new Character('', 1, false),\n    weapon: new Weapon('', 1, false, 1),\n    artifacts: Object.values(ArtifactType).map(\n      (type) => new Artifact(type, 1, 0, '')\n    ),\n\n    artifactSets: [\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n    ],\n\n    enemyLevel: 1,\n    enemyDefReduction: 0,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    flatDmg: 0,\n    reaction: Reaction.None,\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    characterOptions: [],\n    weaponOptions: [],\n    artifactSetOptions: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = {};\n\n  modifierMixins: ModifierMixin[] = [];\n  statMixins: StatMixin[] = [];\n\n  // Gets all modifier mixins and updates cache (modifierMixins)\n  getModifierMixins({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined\n    ) {\n      return this.modifierMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveModifierMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveModifierMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getModifierMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const unarrangedMixins = characterPassiveMixins\n      .concat(weaponPassiveMixins)\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(weaponOptionMixins)\n      .concat(artifactSetOptionMixins);\n    const groupedMixins = new Map<Priority, ModifierMixin[]>();\n    unarrangedMixins.forEach((mixin) => {\n      const priority = mixin.priority ?? Priority.Normal;\n      const array = groupedMixins.get(priority);\n      if (!array) {\n        groupedMixins.set(priority, [mixin]);\n      } else {\n        array.push(mixin);\n      }\n    });\n\n    this.modifierMixins = (groupedMixins.get(Priority.Normal) ?? []).concat(\n      groupedMixins.get(Priority.Last) ?? []\n    );\n\n    return this.modifierMixins;\n  }\n\n  // Gets all stat mixins and updates cache (statMixins)\n  getStatMixins({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined\n    ) {\n      return this.statMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveStatMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveStatMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getStatMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const unarrangedMixins = characterPassiveMixins\n      .concat(weaponPassiveMixins)\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(weaponOptionMixins)\n      .concat(artifactSetOptionMixins);\n    const groupedMixins = new Map<Priority, StatMixin[]>();\n    unarrangedMixins.forEach((mixin) => {\n      const priority = mixin.priority ?? Priority.Normal;\n      const array = groupedMixins.get(priority);\n      if (!array) {\n        groupedMixins.set(priority, [mixin]);\n      } else {\n        array.push(mixin);\n      }\n    });\n\n    this.statMixins = (groupedMixins.get(Priority.Normal) ?? []).concat(\n      groupedMixins.get(Priority.Last) ?? []\n    );\n\n    return this.statMixins;\n  }\n\n  getDamageModifier({\n    characterLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n  }: {\n    characterLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    modifierMixins?: ModifierMixin[];\n  } = {}): DamageModifier {\n    const modifier: DamageModifier = {\n      characterLevel: characterLevel ?? this.state.character.level,\n      enemyLevel: enemyLevel ?? this.state.enemyLevel,\n      enemyDefReduction: this.state.enemyDefReduction,\n      enemyRes: enemyRes ?? this.state.enemyRes,\n      enemyResReduction: new Resistance(),\n      critType: critType ?? this.state.critType,\n      flatDmg: this.state.flatDmg,\n      reaction: reaction ?? this.state.reaction,\n      talentAttackLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n    };\n\n    // Apply modifier mixins\n    (modifierMixins ?? this.modifierMixins).forEach((mixin) =>\n      mixin.apply(modifier, this.totalStats)\n    );\n\n    return modifier;\n  }\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = newArtifactSets\n      .map((artifactSet) => artifactSet.stats)\n      .reduce((acc, stats) => {\n        Object.entries(stats).forEach(([stat, value]) => {\n          acc[stat] = value + (acc[stat] ?? 0);\n        });\n        return acc;\n      }, {} as Stats);\n\n    this.updateTotalStats({\n      artifactSets,\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSets?: ArtifactSet[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const statMixins = this.getStatMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n    });\n\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel,\n      statMixins\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      characterOptions,\n      artifactSetOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    weapon,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifactSets?: ArtifactSet[];\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n\n    const modifierMixins = this.getModifierMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n    });\n\n    const damageModifier = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n    });\n\n    this.talentValues = {};\n    if (character.talentFns !== undefined) {\n      Object.entries(character.talentFns).forEach(([type, fns]) => {\n        this.talentValues[type] = Object.entries(fns).reduce(\n          (acc, [id, fn]) => {\n            acc[id] = fn({ stats: this.totalStats, modifier: damageModifier });\n            return acc;\n          },\n          {} as Record<string, TalentValue>\n        );\n      });\n    }\n  };\n\n  refreshApp = () => {\n    this.getStatMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n    });\n    this.getModifierMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n    });\n\n    this.updateArtifactSetBonuses({});\n    this.setState({});\n  };\n\n  render() {\n    return (\n      <Container className='app px-0' fluid>\n        <Navbar sticky='top' bg='light' className='d-md-none'>\n          <Nav>\n            <Nav.Item>\n              <Nav.Link href='#input-column'>Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#artifact-column'>Artifacts</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#stat-column'>Stats</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#talent-column'>Talents</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar>\n\n        <Row className='mx-0'>\n          <InputColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n            updateTotalStats={this.updateTotalStats}\n            updateTalentValues={this.updateTalentValues}\n            refreshApp={this.refreshApp}\n          />\n          <ArtifactColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateTotalStats={this.updateTotalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n            damageModifier={this.getDamageModifier()}\n            statMixins={this.statMixins}\n            talentValues={this.talentValues}\n          />\n          <StatColumn\n            appState={this.state}\n            totalStats={this.totalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n          />\n          <TalentColumn talentValues={this.talentValues} />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}