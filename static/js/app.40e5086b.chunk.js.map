{"version":3,"sources":["js/Data.js","js/Talent.js","js/TalentOption.js","js/Character.js","js/Weapon.js","js/Stat.js","js/Artifact.js","js/DamageModifer.js","js/Styles.js","App.js"],"names":["sortedCharacterList","sortedWeaponList","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talents","attack","curveAcc","params","skill","burst","processTalentData","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getTalentData","getTalentStatsAt","type","defaultTalent","calculateBaseDamage","stats","multiplier","scalingType","flatDmg","flatAtk","flatDef","flatHp","NaN","calculateTotalDamage","element","modifier","baseDmg","dmgBonus","undefined","getDamageBonus","crit","critType","critDmg","Math","min","critRate","normalAttackDefault","hits","talentValues","i","damage","push","description","normalAttackMulti","hitCount","damages","hit","chargedAttackDefault","chargedAttackHeavy","plungeAttackDefault","attackLightDefault","normalHits","slice","attackLightMulti","chargedHits","length","chargedAttackMulti","attackHeavyDefault","attackBowDefault","chargedElement","aimShotDefault","skillBase","skillDefault","healingSkillBase","flatHealing","calculateHealing","lisaAttack","lisaSkill","talentDmg","lisaBurst","barbaraAttack","barbaraSkill","barbaraBurst","kaeyaAttack","kaeyaSkill","kaeyaBurst","dilucAttack","infusion","dilucSkill","talentDamage","dilucBurst","razorAttack","razorSkill","razorBurst","attackParams","talentAttackLevel","amberAttack","amberSkill","calculateHp","constructHpBase","amberBurst","ventiAttack","ventiSkill","ventiBurst","xianglingAttack","xianglingSkill","xianglingBurst","eulaAttack","attackHeavyMulti","eulaSkill","eulaBurst","lightfallSwordParams","lightfallSwordTalent","TalentOption","value","this","dilucTalentOptions","emptyTalentParams","Array","fill","Character","data","name","baseStats","statCurveMapping","hasAscended","innateStats","isNaN","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","bonus","talentLevel","totalStats","toLowerCase","damageFn","options","talentOptions","Weapon","rank","weaponLevel","weaponStats","weaponStatCurves","getStatDisplayValue","isPercentage","toFixed","round","getDamageDisplayValue","values","str","every","convertStatValue","getTalentDescription","desc","talentDescMapping","getTotalStatsAt","weapon","weaponHasAscended","character","characterLevel","characterHasAscended","artifacts","characterStats","getStatsAt","getInnateStatsAt","getBaseStatsAt","artifactStats","artifact","getStats","combinedStats","baseAtk","atkBonus","baseDef","defBonus","baseHp","hpBonus","elementalMastery","energyRecharge","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","Artifact","mainStat","rawValue","subStats","statObj","statUtils","subStat","mainStatProps","Flower","Feather","Sands","Goblet","Circlet","subStatProps","DamageModifier","enemyLevel","enemyRes","modifiers","reaction","talentSkillLevel","talentBurstLevel","StyleSheet","create","container","display","flexDirection","alignItems","fontSize","height","backgroundColor","inputColumn","padding","borderRightWidth","inputRow","marginVertical","levelInput","width","statInput","resultColumn","resultBlockNoBorder","resultBlock","borderBottomWidth","artifactBlockNoBorder","paddingTop","paddingBottom","artifactBlock","borderStyle","characterImage","titleText","fontWeight","artifactType","artifactStatType","resultText","fillerColumn","flexGrow","App","renderInputColumn","View","renderCharacterList","style","styles","Text","TextInput","defaultValue","state","onChangeText","text","setState","parseInt","setCharacterState","Checkbox","onValueChange","isCharacterAscended","renderWeaponList","setWeaponState","isWeaponAscended","setAllTalentState","characterSelect","selectedValue","_","getTalentOptions","Item","label","characters","key","weapons","renderCharacterImage","imageUrl","Image","source","uri","getDamageModifier","getTotalStats","talentAttackDamage","getTalentDamageAt","talentSkillDamage","talentBurstDamage","isweaponAscended","setArtifactState","setTalentState","artifactFlower","artifactFeather","artifactSands","artifactGoblet","artifactCirclet","renderCharacterStats","renderWeaponStats","renderArtifactMainStat","setStat","prop","parseFloat","renderArtifactSubStats","index","renderArtifactStat","isLast","renderAllArtifactStats","renderTotalStats","renderTalentDamage","renderTalentOptions","FlatList","keyExtractor","item","renderItem","talentOptionMapping","renderAllTalentDamage","sort","name1","name2","localeCompare","Component"],"mappings":"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","file":"static/js/app.40e5086b.chunk.js","sourcesContent":["import characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\n//import artifactSetDataRaw from '../data/artifactsetdata.json';\n//import artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\nimport talentDataRaw from '../data/talentdata.json';\nexport { default as propMapping } from '../data/propmapping.json';\nexport { default as talentDescMapping } from '../data/talentdescmapping.json';\nexport { default as talentOptionMapping } from '../data/talentoptionmapping.json';\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(characterDataRaw);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(characterAscensionBonusDataRaw);\nconst characterStatCurveData = processCharacterStatCurveData(characterStatCurveDataRaw);\nconst weaponData = processWeaponData(weaponDataRaw);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(weaponAscensionBonusDataRaw);\nconst weaponStatCurveData = processWeaponStatCurveData(weaponStatCurveDataRaw);\nconst talentData = processTalentData(talentDataRaw);\n\n// Pre-processed data, lists\nlet sortedCharacterList;    // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList;       // lazy loading implemented with getSortedWeaponList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.id] = charData;\n        return acc;\n    }, {});\n}\n\nfunction processCharacterAscensionBonusData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.characterId] = charData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processCharacterStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.id] = weaponData;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponAscensionBonusData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processWeaponStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processTalentData(rawData) {\n    return rawData.reduce((acc, talentDataRaw) => {\n        let talentData = {...talentDataRaw.talents};\n\n        talentData.attack = talentData.attack.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.skill = talentData.skill.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.burst = talentData.burst.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n\n        acc[talentDataRaw.characterId] = talentData;\n        return acc;\n    }, {});\n}\n\n// Helper functions for accessing data properties\nfunction getData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getAscensionBonusData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getStatCurveAt(level, statCurves) {\n    return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id) {\n    return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id) {\n    return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level) {\n    return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id) {\n    return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id) {\n    return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level) {\n    return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(level, ascensionBonuses) {\n    return ascensionBonuses[level];\n}\n\nexport function getTalentData(id) {\n    return talentData[id];\n}\n\nexport function getTalentStatsAt(type, level, talents) {\n    return talents[type][level];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n    if (sortedCharacterList === undefined) {\n        sortedCharacterList = Object.entries(characterData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n    if (sortedWeaponList === undefined) {\n        sortedWeaponList = Object.entries(weaponData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedWeaponList;\n}","import { getTalentData, getTalentStatsAt } from './Data.js';\n\n// Placeholder function\nexport function defaultTalent() {\n    return [];\n}\n\n// Internal functions\n\nfunction getDamageBonus({ stats, element }) {\n    let dmgBonus = stats[`${element}DmgBonus`];\n    if (dmgBonus !== undefined) {\n        return 1 + dmgBonus;\n    } else {\n        return 1;\n    }\n}\n\nfunction calculateBaseDamage({ stats, multiplier, scalingType, flatDmg = 0 }) {\n    if (scalingType == 'attack') {\n        return stats.flatAtk * multiplier + flatDmg;\n    } else if (scalingType == 'defense') {\n        return stats.flatDef * multiplier + flatDmg;\n    } else if (scalingType == 'hp') {\n        return stats.flatHp * multiplier + flatDmg;\n    } else {\n        return NaN;\n    }\n}\n\nfunction calculateTotalDamage({ stats, multiplier, element, scalingType = 'attack', modifier }) {\n    let baseDmg = calculateBaseDamage({ stats, multiplier, scalingType, flatDmg: modifier.flatDmg });\n    let dmgBonus = getDamageBonus({ stats, element });\n\n    let crit = 1;\n    if (modifier.critType === 'crit') {\n        crit += stats.critDmg;\n    } else if (modifier.critType === 'average') {\n        crit += Math.min(1, stats.critRate) * stats.critDmg;\n    }\n\n    // TODO: enemyDefMultiplier\n    // TODO: enemyResMultiplier\n    // TODO: reactionBonus\n\n    return baseDmg * dmgBonus * crit;\n} \n\nfunction calculateHealing({ stats, multiplier, flatHealing, scalingType = 'hp' }) {\n    // TODO: Add healing bonus\n    return calculateBaseDamage({ stats, multiplier, scalingType, flatDmg: flatHealing });\n}\n\n// Used for calculting hp of summons e.g. baron bunny\nfunction calculateHp({ stats, multiplier }) {\n    return stats.flatHp * multiplier;\n}\n\n// Used for all default normal attacks\nfunction normalAttackDefault({ hits, element, params, stats, modifier }) {\n    let talentValues = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            modifier,\n        });\n        \n        talentValues.push({\n            description: `${i+1}HitDmg`,\n            damage: [damage],\n        });\n    }\n\n    return talentValues;\n}\n\n// Used for all normal attacks with multiple damage instances in 1 hit e.g. polearms\n// doubledHits is an array containing all n where n-hit is 2 identical damage instances\nfunction normalAttackMulti({ hits = [], element, params, stats, modifier }) {\n    let talentValues = hits.map((hitCount, i) => {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element,\n            modifier,\n        });\n\n        let damages = [];\n        for (let hit = 0; hit < hitCount; hit++) {\n            damages.push(damage);\n        }\n\n        return {\n            description: `${i+1}HitDmg`,\n            damage: damages,\n        };\n    });\n\n    return talentValues;\n}\n\n// Used for all 1-hit charged attacks\nfunction chargedAttackDefault({ element, params, stats, modifier }) {\n    let damage = calculateTotalDamage({ \n        stats, \n        multiplier: params[0], \n        element, \n        modifier,\n     });\n\n    return [{\n        description: 'chargedDmg',\n        damage: [damage],\n    }];\n}\n\n// Used for multi-hit charged attacks\nfunction chargedAttackMulti({ hits, element, params, stats, modifier }) {\n    let damages = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            modifier,\n        });\n        damages.push(damage);\n    }\n\n    return [{\n        description: `chargedDmg`,\n        damage: damages,\n    }];\n}\n\n// Used for all default claymore charged attacks\nfunction chargedAttackHeavy({ element = 'physical', params, stats, modifier }) {\n    let descriptions = ['chargedSpinDmg', 'chargedFinalDmg'];\n    return descriptions.map((description, i) => {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            modifier,\n        });\n\n        return {\n            description: description,\n            damage: [damage],\n        };\n    });\n}\n\n// Used for all default plunge attacks\nfunction plungeAttackDefault({ element, params, stats, modifier }) {\n    let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n    return descriptions.map((description, i) => {\n        let damage = calculateTotalDamage({ \n            stats,\n            multiplier: params[i], \n            element,\n            modifier \n        });\n\n        return {\n            description: description,\n            damage: [damage],\n        };\n    });\n}\n\n// Used for all default sword/polearm/catalyst attacks\nfunction attackLightDefault({ normalHits, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault({ \n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits), \n        stats, \n        modifier \n    }));\n\n    talentValues.push(...chargedAttackDefault({\n        element,\n        params: params.slice(normalHits, normalHits + 1), \n        stats, \n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits + 1 + 1), \n        stats, \n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all default sword/polearm attacks with multi damage instances\nfunction attackLightMulti({ normalHits = [], chargedHits = 1, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackMulti({ \n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits.length), \n        stats, \n        modifier \n    }));\n\n    if (chargedHits === 1) {\n        talentValues.push(...chargedAttackDefault({\n            element,\n            params: params.slice(normalHits.length, normalHits.length + 1), \n            stats, \n            modifier,\n        }));\n    } else {\n        talentValues.push(...chargedAttackMulti({\n            hits: chargedHits,\n            element,\n            params: params.slice(normalHits.length, normalHits.length + chargedHits), \n            stats, \n            modifier,\n        }));\n    }\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits.length + chargedHits + 1), \n        stats, \n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all default claymore attacks\nfunction attackHeavyDefault({ normalHits, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault({\n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...chargedAttackHeavy({\n        element,\n        params: params.slice(normalHits, normalHits + 2),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits + 2 + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all claymore attacks with multi damage instances\nfunction attackHeavyMulti({ normalHits = [], element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackMulti({\n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits.length), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...chargedAttackHeavy({\n        params: params.slice(normalHits.length, normalHits.length + 2), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits.length + 2 + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all debault bow aim shots (include charged shots)\nfunction aimShotDefault({ chargedElement, params, stats, modifier }) {\n    let talentValues = [];\n\n    let damage = calculateTotalDamage({ \n        stats, \n        multiplier: params[0], \n        element: 'physical', \n        modifier,\n    });\n    talentValues.push({\n            description: 'aimShotDmg',\n            damage: [damage],\n    });\n\n    damage = calculateTotalDamage({\n        stats,\n        multiplier: params[1],\n        element: chargedElement,\n        modifier,\n    });\n    talentValues.push({\n        description: 'chargedAimShotDmg',\n        damage: [damage],\n    });\n\n    return talentValues;\n}\n\n// Used for all default bow attacks\nfunction attackBowDefault({ normalHits, chargedElement, params, stats, modifier }) {\n    let talentValues = [];\n    \n    talentValues.push(...normalAttackDefault({\n        hits: 5,\n        element: 'physical',\n        params: params.slice(0, normalHits),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...aimShotDefault({\n        chargedElement,\n        params: params.slice(normalHits, normalHits + 2),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(normalHits + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Base function for all damage skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction skillBase({ description, element, multiplier, stats, modifier }) {\n    let damage = calculateTotalDamage({\n        element,\n        multiplier,\n        stats, \n        modifier,\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Used for all default skill/burst that only does 1-hit elemental dmg\nfunction skillDefault({ element, params, stats, modifier }) {\n    return [skillBase({\n        description: 'skillDmg',\n        element,\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Base function for all healing skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction healingSkillBase({ description, params, stats, modifier }) {\n    let damage = calculateHealing({\n        stats,\n        multiplier: params[0],\n        flatHealing: params[1],\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Base function for all HP summons e.g. Baron Bunny HP\nfunction constructHpBase({ description, multiplier, stats, modifier }) {\n    let hp = calculateHp({\n        stats,\n        multiplier,\n    });\n\n    return {\n        description,\n        damage: [hp],\n    };\n}\n\n// Public functions\n// Access using talent[characterId + type]\n\n// Lisa\nexport function lisaAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function lisaSkill({ params, stats, modifier }) {\n    let talentDmg = [];\n\n    talentDmg.push(skillBase({\n        description: 'pressDmg',\n        element: 'electro',\n        multiplier: params[5],\n        stats,\n        modifier,\n    }));\n\n    for (let i = 0; i <= 3; i++) {\n        talentDmg.push(skillBase({\n            description: `holdDmgStack${i}`,\n            element: 'electro',\n            multiplier: params[i],\n            stats, \n            modifier,\n        }));\n    }\n\n    return talentDmg;\n}\n\nexport function lisaBurst({ params, stats, modifier }) {\n    return skillDefault({\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Barbara\nexport function barbaraAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'hydro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function barbaraSkill({ params, stats, modifier }) {\n    let talentDmg = [\n        healingSkillBase({\n            description: 'hpRegenContinuous',\n            params: params.slice(0, 2),\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenOnHit',\n            params: params.slice(2, 4),\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'dropletDmg',\n            element: 'hydro',\n            multiplier: params[4],\n            stats,\n            modifier,\n        }),\n    ];\n\n    return talentDmg;\n}\n\nexport function barbaraBurst({ params, stats, modifier }) {\n    return [\n        healingSkillBase({\n            description: 'hpRegen',\n            params,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Kaeya\nexport function kaeyaAttack({ params, stats, modifier }) {\n    return attackLightMulti({ \n        normalHits: [1, 1, 1, 1, 1], \n        chargedHits: 2, \n        params, \n        stats, \n        modifier,\n    });\n}\n\nexport function kaeyaSkill({ params, stats, modifier }) {\n    return skillDefault({ \n        element: 'cryo', \n        params, \n        stats, \n        modifier \n    });\n}\n\nexport function kaeyaBurst({ params, stats, modifier }) {\n    return skillDefault({ \n        element: 'cryo', \n        params, \n        stats, \n        modifier,\n    });\n}\n\n// Diluc\nexport function dilucAttack({ params, stats, modifier }) {\n    let element = modifier.infusion ? 'pyro' : 'physical';\n    return attackHeavyDefault({\n        normalHits: 4,\n        element,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function dilucSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n    for (let i = 0; i < 3; i++) {\n        talentDamage.push(skillBase({\n            description: `${i+1}HitDmg`,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    return talentDamage;\n}\n\nexport function dilucBurst({ params, stats, modifier }) {\n    let descriptions = ['slashingDmg', 'dot', 'explosionDmg'];\n    let talentDamage = descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n\n    return talentDamage;\n}\n\n// Razor\nexport function razorAttack({ params, stats, modifier }) {\n    return attackHeavyDefault({\n        normalHits: 4,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function razorSkill({ params, stats, modifier }) {\n    let descriptions = ['pressDmg', 'holdDmg'];\n    return descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'electro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n}\n\nexport function razorBurst({ params, stats, modifier }) {\n    let talentDamage = skillDefault({\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n\n    let attackParams = getTalentStatsAt('attack', modifier.talentAttackLevel, getTalentData('razor'));\n\n    for (let i = 0; i < 4; i++) {\n        talentDamage.push(skillBase({\n            description: `${i+1}HitDmgSoulCompanion`,\n            element: 'electro',\n            multiplier: params[1] * attackParams[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    return talentDamage;\n}\n\n// Amber\nexport function amberAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 5,\n        chargedElement: 'pyro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function amberSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'explosionDmg',\n        element: 'electro',\n        multiplier: params[1],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(constructHpBase({\n        description: 'baronBunnyHp',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function amberBurst({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'dmgPerWave',\n        element: 'pyro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push({\n        description: 'totalDmg',\n        damage: [talentDamage[0].damage[0] * 18],\n    });\n\n    return talentDamage;\n}\n\n// Venti\nexport function ventiAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 6,\n        chargedElement: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function ventiSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'pressDmg',\n            element: 'anemo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'holdDmg',\n            element: 'anemo',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function ventiBurst({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'dot',\n            element: 'anemo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        // Not sure how the elemental absorption dmg is calculated\n        skillBase({\n            description: 'dotElementalAbsorption',\n            element: 'none',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Xiangling\nexport function xianglingAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 2, 4, 1],\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function xianglingSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'guobaDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function xianglingBurst({ params, stats, modifier }) {\n    let talentDamage = []\n\n    for (let i = 0; i < 3; i++) {\n        talentDamage.push(skillBase({\n            description: `swing${i+1}HitDmg`,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    talentDamage.push(skillBase({\n        description: 'pyronadoDmg',\n        element: 'pyro',\n        multiplier: params[3],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\n// Eula\nexport function eulaAttack({ params, stats, modifier }) {\n    return attackHeavyMulti({ \n        normalHits: [1, 1, 2, 1, 2], \n        params, \n        stats, \n        modifier\n    });\n}\n\nexport function eulaSkill({ params, stats, modifier }) {\n    let descriptions = ['pressDmg', 'holdDmg', 'icewhirlBrandDmg'];\n    return descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'cryo',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n}\n\nexport function eulaBurst({ params, stats, modifier }) {\n    let talentDmg = [];\n    talentDmg.push(...skillDefault({\n        element: 'cryo', \n        params, \n        stats,\n        modifier,\n    }));\n    \n    let descriptions = ['lightfallSwordBaseDmg', 'lightfallSwordStackDmg'];\n    let lightfallSwordParams = params.slice(1, 3);\n    let lightfallSwordTalent = descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'physical',\n            multiplier: lightfallSwordParams[i],\n            stats,\n            modifier,\n        });\n    });\n\n    talentDmg.push(...lightfallSwordTalent);\n\n    return talentDmg;\n}\n","export default class TalentOption {\n    constructor(id, type = 'boolean', value) {\n        this.id = id;\n        this.type = type;\n        this.value = value;\n    }\n}\n\n// Diluc\nexport const dilucTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n","import { \n    getCharacterData as getData, \n    getCharacterAscensionBonusData as getAscensionBonusData, \n    getCharacterStatCurveAt as getStatCurveAt, \n    getAscensionBonusAt,\n    getTalentData,\n    getTalentStatsAt,\n} from './Data.js';\n\nimport * as talents from './Talent.js';\nconst emptyTalentParams = Array(19).fill(NaN);\n\nimport * as talentOptions from './TalentOption.js';\n\nexport default class Character {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n\n        this.talents = getTalentData(id);\n    }\n\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n    getInnateStatsAt(level, hasAscended) {\n        if (isNaN(level) || level < 1 || level > 90) {\n            // Return nulls if level is invalid\n            let innateStats;\n            if (this.innateStats !== undefined) {\n                // Copy all of innateStats' properties to a new object and initialize them to null\n                innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                innateStats = {};\n            }\n            \n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n            \n            return innateStats;\n        } \n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\n        else if (level === this.level && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.innateStats;\n        } else {\n\n            // Initialize stats with character level 1 base stats\n            let innateStats = {...this.baseStats};\n\n            let charStatCurves = getStatCurveAt(level);\n\n            // Calculate stats from character level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = charStatCurves[curve];\n                innateStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from character ascension\n            let ascensionLevel;\n            if (level > 80 || (level == 80 && hasAscended)) {\n                ascensionLevel = 6;\n            } else if (level > 70 || (level == 70 && hasAscended)) {\n                ascensionLevel = 5;\n            } else if (level > 60 || (level == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (level > 50 || (level == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (level > 40 || (level == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (level > 20 || (level == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n\n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in innateStats) {\n                        innateStats[stat] += bonus;\n                    } else {\n                        innateStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n\n            return innateStats;\n        }\n    }\n\n    // Return an Object with description and damage properties\n    getTalentDamageAt({ type, talentLevel, totalStats, modifier }) {\n        const params = getTalentStatsAt(type.toLowerCase(), talentLevel, this.talents);\n\n        let damageFn = talents[this.id + type];\n        if (damageFn === undefined) {\n            damageFn = talents['defaultTalent'];\n        }\n\n        let damage = damageFn({\n            params: params ? params : emptyTalentParams, \n            stats: totalStats, \n            modifier,\n        });\n\n        return damage;\n    }\n\n    getTalentOptions() {\n        let options = talentOptions[this.id + 'TalentOptions'];\n        if (options !== undefined) {\n            return options;\n        } else {\n            return [];\n        }\n    }\n}\n","import { getWeaponData as getData, getWeaponAscensionBonusData as getAscensionBonusData, getWeaponStatCurveAt as getStatCurveAt, getAscensionBonusAt } from './Data.js';\n\nexport default class Weapon {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.type = data.type;\n        this.rank = data.rank;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n    }\n\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n    getStatsAt(weaponLevel, hasAscended) {\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.rank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\n            // Return nulls if weapon level is invalid\n            let weaponStats;\n            if (this.stats !== undefined) {\n                // Copy all of stats' properties to a new object and initialize them to null\n                weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                weaponStats = {};\n            }\n            \n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n        // If getStatsAt has not been called before, this.weaponLevel, this.hasAscended, and this.stats will be undefined\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.stats;\n        } else {\n\n            // Level 1 weapon stats\n            let weaponStats = {...this.baseStats};\n\n            let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n            // Calculate stats from weapon level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = weaponStatCurves[curve];\n                weaponStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from weapon ascension\n            let ascensionLevel;\n            // Only 3-star and above weapons can be ascended beyond level 70\n            if (this.rank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\n                ascensionLevel = 6;\n            } else if (this.rank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\n                ascensionLevel = 5;\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n            \n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in weaponStats) {\n                        weaponStats[stat] += bonus;\n                    } else {\n                        weaponStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n    }\n}\n","import { talentDescMapping, talentOptionMapping } from './Data.js';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value, isPercentage) {\n    if (value != null) {\n        if (isPercentage) {\n            return (value * 100).toFixed(1) + \"%\";\n        } else {\n            return Math.round(value);\n        }\n    } else {\n        return \"-\";\n    }\n};\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values) {\n    let str = '';\n\n    if (values.length === 0) {\n        return str;\n    }\n\n    if (isNaN(values[0])) {\n        return '-';\n    } else {\n        str += Math.round(values[0]);\n    }\n\n    if (values.length >= 3 && values.every(value => value === values[0])) {\n        // All elements are the same, simplify to ${damage} x${count}\n        str += ' x ' + values.length;\n    } else {\n        // Less than 3 elements, or elements are different\n        values.slice(1).forEach(value => {\n            if (isNaN(value)) {\n                return '-';\n            } else {\n                str += ' + ' + Math.round(value);\n            }\n        });\n    }\n\n    return str;\n}\n\n// Returns the display name of a talent option\nexport function getTalentOptionName(id) {\n    return talentOptionMapping[id];\n}\n\n// Returns a Number representing the inputed value of a stat\n// Returns null if the input is not a valid stat value\nexport function convertStatValue(value, isPercentage) {\n    if (isPercentage) {\n        return value / 100;\n    } else {\n        return value;\n    }\n};\n\nexport function getTalentDescription(desc) {\n    return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended) {\n\n    let weaponStats;\n    if (weapon !== undefined) {\n        weaponStats = weapon.getStatsAt(weaponLevel, weaponHasAscended);\n    } else {\n        weaponStats = {};\n    }\n\n    let characterStats;\n    if (character !== undefined) {\n        characterStats = character.getInnateStatsAt(characterLevel, characterHasAscended);\n    } else {\n        characterStats = {};\n    }\n    \n    // Merges weaponStats and innateStats into a new baseStats object\n    let baseStats = {...weaponStats};\n    Object.entries(characterStats).map(([stat, value]) => {\n        if (baseStats[stat] === undefined) {\n            baseStats[stat] = value;\n        } else {\n            baseStats[stat] += value;\n        }\n    });\n    \n    return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended, artifacts) {\n    \n    let baseStats = getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended);\n    \n    // Merge artifact bonuses into separate object\n    let artifactStats = {};\n    artifacts.forEach(artifact => {\n        Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n            if (artifactStats[stat] === undefined) {\n                artifactStats[stat] = value;\n            } else {\n                artifactStats[stat] += value;\n            }\n        });\n    });\n\n    // Merge base stats and artifact bonuses\n    let combinedStats = {...baseStats};\n    Object.entries(artifactStats).forEach(([stat, value]) => {\n        if (combinedStats[stat] === undefined) {\n            combinedStats[stat] = value;\n        } else {\n            combinedStats[stat] += value;\n        }\n    });\n\n    // Calculate total stats\n    let totalStats = {};\n    totalStats.flatAtk = (combinedStats.baseAtk ? combinedStats.baseAtk : 0) \n        * (1 + (combinedStats.atkBonus ? combinedStats.atkBonus : 0))\n        + (combinedStats.flatAtk ? combinedStats.flatAtk : 0);\n    totalStats.flatDef = (combinedStats.baseDef ? combinedStats.baseDef : 0) \n        * (1 + (combinedStats.defBonus ? combinedStats.defBonus : 0))\n        + (combinedStats.flatDef ? combinedStats.flatDef : 0);\n    totalStats.flatHp = (combinedStats.baseHp ? combinedStats.baseHp : 0) \n        * (1 + (combinedStats.hpBonus ? combinedStats.hpBonus : 0))\n        + (combinedStats.flatHp ? combinedStats.flatHp : 0);\n    totalStats.critRate = combinedStats.critRate ? combinedStats.critRate : 0;\n    totalStats.critDmg = combinedStats.critDmg ? combinedStats.critDmg : 0;\n    totalStats.elementalMastery = combinedStats.elementalMastery ? combinedStats.elementalMastery : 0;\n    totalStats.energyRecharge = 1 + (combinedStats.energyRecharge ? combinedStats.energyRecharge : 0);\n    \n    combinedStats.anemoDmgBonus ? totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus : null;\n    combinedStats.cryoDmgBonus ? totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus : null;\n    combinedStats.electroDmgBonus ? totalStats.electroDmgBonus = combinedStats.electroDmgBonus : null;\n    combinedStats.geoDmgBonus ? totalStats.geoDmgBonus = combinedStats.geoDmgBonus : null;\n    combinedStats.hydroDmgBonus ? totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus : null;\n    combinedStats.pyroDmgBonus ? totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus : null;\n    combinedStats.physicalDmgBonus ? totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus : null;\n\n    combinedStats.anemoRes ? totalStats.anemoRes = combinedStats.anemoRes : null;\n    combinedStats.cryoRes ? totalStats.cryoRes = combinedStats.cryoRes : null;\n    combinedStats.electroRes ? totalStats.electroRes = combinedStats.electroRes : null;\n    combinedStats.geoRes ? totalStats.geoRes = combinedStats.geoRes : null;\n    combinedStats.hydroRes ? totalStats.hydroRes = combinedStats.hydroRes : null;\n    combinedStats.pyroRes ? totalStats.pyroRes = combinedStats.pyroRes : null;\n    combinedStats.physicalRes ? totalStats.physicalRes = combinedStats.physicalRes : null;\n\n    combinedStats.healingBonus ? totalStats.healingBonus = combinedStats.healingBonus : null;\n\n    return totalStats;\n}","import * as statUtils from './Stat.js';\n\nexport default class Artifact {\n    mainStat = {\n        stat: 0,\n        rawValue: NaN,\n        value: NaN,\n    };\n\n    subStats = [\n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }\n    ];\n\n    constructor(type) {\n        this.type = type;\n    }\n\n    // Can be called with one of the two of stat and value (the other will be undefined)\n    setStat(statObj, stat, value, isPercentage = false) {\n        if (stat == undefined && value != undefined) {\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        } else if (stat != undefined && value == undefined) {\n            statObj.stat = stat;\n            statObj.value = statUtils.convertStatValue(statObj.rawValue, isPercentage);\n        } else if (stat != undefined && value != undefined) {\n            statObj.stat = stat;\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        }\n    }\n\n    /*\n    setMainStat(stat, value, isPercentage = false) {\n        this.setStat(this.mainStat, stat, value, isPercentage);\n    }\n\n    // Set substat in a spefiic position\n    setSubStat(pos, stat, value, isPercentage = false) {\n        this.setStat(this.subStats[pos], stat, value, isPercentage);\n    }\n    */\n\n    // Returns object containing stat: value mapping, including both main stat and substats\n    getStats() {\n        let stats = {};\n\n        if (this.mainStat.stat != 0) {\n            if (!isNaN(this.mainStat.value)) {\n                stats[this.mainStat.stat] = this.mainStat.value;\n            } else {\n                stats[this.mainStat.stat] = null;\n            }\n        }\n        \n        this.subStats.forEach(subStat => {\n            if (subStat.stat != 0) {\n                if (!isNaN(subStat.value)) {\n                    stats[subStat.stat] = subStat.value;\n                } else {\n                    stats[subStat.stat] = null;\n                }\n            }\n        });\n\n        return stats;\n    }\n}\n\nexport const mainStatProps = {\n    Flower: [\n        'flatHp',\n    ],\n\n    Feather: [\n        'flatAtk',\n    ],\n\n    Sands: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'energyRecharge',\n    ],\n\n    Goblet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'anemoDmgBonus',\n        'cryoDmgBonus',\n        'electroDmgBonus',\n        'geoDmgBonus',\n        'hydroDmgBonus',\n        'pyroDmgBonus',\n        'physicalDmgBonus',\n    ],\n\n    Circlet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'critRate',\n        'critDmg',\n        'healingBonus',\n    ],\n}\n\nexport const subStatProps = [\n    'flatHp',\n    'flatAtk',\n    'flatDef',\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n    'critRate',\n    'critDmg',\n]","export default class DamageModifier {\n    constructor({\n        characterLevel,\n        enemyLevel = 1,\n        enemyRes = {},\n        modifiers = {},\n        critType = 'none',\n        flatDmg = 0,\n        reaction = 'none',\n        talentAttackLevel,\n        talentSkillLevel,\n        talentBurstLevel,\n        talentOptions = [] \n    }) {\n        this.characterLevel = characterLevel;\n        this.enemyLevel = enemyLevel;\n        this.enemyRes = enemyRes;\n        this.modifiers = modifiers;\n        this.critType = critType;\n        this.flatDmg = flatDmg;\n        this.reaction = reaction;\n        this.talentAttackLevel = talentAttackLevel;\n        this.talentSkillLevel = talentAttackLevel;\n        this.talentBurstLevel = talentAttackLevel;\n\n        talentOptions.forEach(({id, value}) => {\n            this[id] = value;\n        });\n    }\n}","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n\n        fontSize: 14,\n\n        height: '100%',\n\n        backgroundColor: '#fff',\n    },\n\n    inputColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '1%',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#ccc',\n    },\n\n    inputRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    levelInput: {\n        width: '2em',\n    },\n\n    statInput: {\n        width: '3em',\n    },\n\n    resultColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#eee',\n    },\n\n    resultBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n    },\n\n    resultBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n        borderBottomWidth: 1,\n    },\n\n    artifactBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n    },\n\n    artifactBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n\n        borderStyle: 'dashed',\n        borderBottomWidth: 1,  \n    },\n\n    characterImage: {\n        marginVertical: '0.25em',\n    },\n\n    titleText: {\n        fontSize: '1.5em',\n        fontWeight: '200',\n\n        marginVertical: '0.17em',\n    },\n\n    artifactType: {\n        fontSize: '1.2em',\n        fontWeight: '200',\n\n        marginVertical: '0.21em',\n    },\n\n    artifactStatType: {\n        marginVertical: '0.25em',\n    },\n\n    resultText: {\n        marginVertical: '0.25em',\n    },\n\n    fillerColumn: {\n        flexGrow: 1,\n\n        backgroundColor: '#eee',\n    },\n});\n","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { FlatList, Image, Text, TextInput, View } from 'react-native';\n\nimport Character from './js/Character.js';\nimport Weapon from './js/Weapon.js';\nimport Artifact, { mainStatProps, subStatProps } from './js/Artifact.js';\nimport DamageModifier from './js/DamageModifer.js';\nimport TalentOption from './js/TalentOption.js';\nimport * as statUtils from './js/Stat.js';\nimport * as data from './js/Data.js';\n\nimport styles from './js/Styles.js';\n\nexport default class App extends Component {\n\n  // Class properties\n  character;\n  weapon;\n  artifactFlower;\n  artifactFeather;\n  artifactSands;\n  artifactGoblet;\n  artifactCirclet;\n\n  constructor() {\n    super();  \n\n    // Initialize sorted list of characters and weapons\n    this.characters = data.getSortedCharacterList();\n    this.weapons = data.getSortedWeaponList();\n\n    this.artifactFlower = new Artifact('Flower');\n    this.artifactFeather = new Artifact('Feather');\n    this.artifactSands = new Artifact('Sands');\n    this.artifactGoblet = new Artifact('Goblet');\n    this.artifactCirclet = new Artifact('Circlet');\n\n    this.state = {\n      characterId: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n\n      weaponId: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n\n      talentAttackLevel: 1,\n      talentSkillLevel: 1,\n      talentBurstLevel: 1,\n\n      characterStats: undefined,\n      weaponStats: undefined,\n      totalStats: undefined,\n\n      talentAttackDamage: undefined,\n      talentSkillDamage: undefined,\n      talentBurstDamage: undefined,\n\n      talentOptions: [],\n    }\n  }\n\n  renderInputColumn = () => {\n    return (\n      <View>\n        {this.renderCharacterList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.characterLevel} \n            onChangeText={text => {\n              this.setState({ characterLevel: parseInt(text) }, this.setCharacterState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isCharacterAscended: value }, this.setCharacterState)}\n            value={this.state.isCharacterAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        {this.renderWeaponList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.weaponLevel} \n            onChangeText={text => {\n              this.setState({ weaponLevel: parseInt(text) }, this.setWeaponState)\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isWeaponAscended: value }, this.setWeaponState)}\n            value={this.state.isWeaponAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        <View style={styles.inputRow}>\n          <Text>Attack Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentAttackLevel} \n            onChangeText={text => {\n              this.setState({ talentAttackLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Skill Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentSkillLevel} \n            onChangeText={text => {\n              this.setState({ talentSkillLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Burst Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentBurstLevel} \n            onChangeText={text => {\n              this.setState({ talentBurstLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n      </View>\n    )\n  }\n\n  renderCharacterList = () => {    \n    return (\n      <View style={styles.inputRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.character = new Character(value);\n              this.setState({\n                characterId: value,\n                talentOptions: this.character.getTalentOptions()\n              }, this.setCharacterState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.characters.map(id => <Picker.Item label={data.getCharacterData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    return (\n      <View style={styles.inputRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.weapon = new Weapon(value);\n              this.setState({ weaponId: value }, this.setWeaponState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.weapons.map(id => <Picker.Item label={data.getWeaponData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  getDamageModifier = () => {\n    let modifier = new DamageModifier({ \n      characterLevel: this.state.characterLevel,\n      talentAttackLevel: this.state.talentAttackLevel,\n      talentSkillLevel: this.state.talentSkillLevel,\n      talentBurstLevel: this.state.talentBurstLevel,\n      talentOptions: this.state.talentOptions,\n    });\n\n    return modifier;\n  }\n\n  setCharacterState = () => {\n    if (this.character !== undefined) {\n      let stats = this.character.getInnateStatsAt(this.state.characterLevel, this.state.isCharacterAscended);\n      let totalStats = this.getTotalStats();\n      let modifier = this.getDamageModifier();\n\n      let talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats,\n        modifier,\n      });\n\n      let talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats,\n        modifier,\n      });\n      \n      let talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats,\n        modifier,\n      });\n\n      this.setState({ \n        characterStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setWeaponState = () => {\n    if (this.weapon !== undefined) {\n      let stats = this.weapon.getStatsAt(this.state.weaponLevel, this.state.isweaponAscended);\n      let totalStats = this.getTotalStats();\n      let modifier = this.getDamageModifier();\n\n      let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n      if (this.character !== undefined) {\n        talentAttackDamage = this.character.getTalentDamageAt({\n          type: 'Attack', \n          talentLevel: this.state.talentAttackLevel, \n          totalStats,\n          modifier,\n        });\n  \n        talentSkillDamage = this.character.getTalentDamageAt({\n          type: 'Skill', \n          talentLevel: this.state.talentSkillLevel, \n          totalStats,\n          modifier,\n        });\n        \n        talentBurstDamage = this.character.getTalentDamageAt({\n          type: 'Burst', \n          talentLevel: this.state.talentBurstLevel, \n          totalStats,\n          modifier,\n        });\n      }\n\n      this.setState({ \n        weaponStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setArtifactState = (type) => {\n    let totalStats = this.getTotalStats();\n    let modifier = this.getDamageModifier();\n\n    let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n    if (this.character !== undefined) {\n      talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats,\n        modifier,\n      });\n\n      talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats,\n        modifier,\n      });\n      \n      talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats,\n        modifier,\n      });\n    }\n\n    this.setState({\n      totalStats: totalStats,\n      talentAttackDamage: talentAttackDamage,\n      talentSkillDamage: talentSkillDamage,\n      talentBurstDamage: talentBurstDamage,\n    });\n  }\n\n  setTalentState = (type) => {\n    if (this.character !== undefined) {\n      let talentDmg = this.character.getTalentDamageAt({\n        type, \n        talentLevel: this.state[`talent${type}Level`], \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      this.setState({ [`talent${type}Damage`]: talentDmg });\n    }\n  }\n\n  // Not used in setCharacterState, setWeaponState, or setArtifactState to reduce number of setState calls\n  // Does not call setTalentState to reduce number of setState calls\n  setAllTalentState = () => {\n    if (this.character !== undefined) {\n      let talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      let talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n      \n      let talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      this.setState({\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  getTotalStats = () => {\n    let artifacts = [this.artifactFlower, this.artifactFeather, this.artifactSands, this.artifactGoblet, this.artifactCirclet];\n\n    let stats = statUtils.getTotalStatsAt(\n      this.weapon, \n      this.state.weaponLevel, \n      this.state.isWeaponAscended, \n      this.character,\n      this.state.characterLevel,\n      this.state.isCharacterAscended,\n      artifacts,\n    );\n\n    return stats;\n  }\n\n  renderCharacterStats = () => {\n    return (\n      this.character ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Character</Text>\n          {this.renderCharacterImage()}\n          <Text style={styles.resultText}>{this.character ? this.character.name : ''}</Text>\n          {\n            this.state.characterStats ? (\n              Object.entries(this.state.characterStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderWeaponStats = () => {\n    return (\n      this.weapon ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Weapon</Text>\n          <Text style={styles.resultText}>{this.weapon ? this.weapon.name : ''}</Text>\n          {\n            this.state.weaponStats ? (\n              Object.entries(this.state.weaponStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderArtifactMainStat = (type) => {\n    return (\n      <View style={styles.inputRow}>\n        <Picker\n          selectedValue={this['artifact' + type].mainStat.stat}\n          onValueChange={(stat, _) => {\n            if (stat != 0) {\n              let mainStat = this['artifact' + type].mainStat;\n              this['artifact' + type].setStat(mainStat, stat, undefined, data.propMapping[stat].isPercentage);\n              // Update total stats\n              this.setArtifactState(type);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {mainStatProps[type].map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n        </Picker>\n\n        <Text> : </Text>\n\n        <TextInput \n          style={styles.statInput} \n          onChangeText={text => {\n            let mainStat = this['artifact' + type].mainStat;\n            if (mainStat.stat) {\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), data.propMapping[mainStat.stat].isPercentage);\n            } else {\n              // If stat type is not yet set\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), false);\n            }\n\n            // Update total stats\n            this.setArtifactState(type);\n          }}\n        />\n      </View>\n    )\n  }\n\n  renderArtifactSubStats = (type) => {\n    return (\n      <View>\n        {\n          this['artifact' + type].subStats.map((subStat, index) => {\n            return (\n              <View style={styles.inputRow} key={index}>\n                <Picker\n                  selectedValue={subStat.stat}\n                  onValueChange={(stat, _) => {\n                    if (stat != 0) {\n                      this['artifact' + type].setStat(subStat, stat, undefined, data.propMapping[stat].isPercentage);     \n                      // Update total stats\n                      this.setArtifactState(type);\n                    }\n                  }}\n                >\n                  <Picker.Item label='' value={0} />\n                  {subStatProps.map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n                </Picker>\n\n                <Text> : </Text>\n\n                <TextInput \n                  style={styles.statInput} \n                  onChangeText={text => {\n                    let stat = subStat.stat;\n                    if (stat) {\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), data.propMapping[stat].isPercentage);\n                    } else {\n                      // If stat type is not yet set\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), false);\n                    }\n                    // Update total stats\n                    this.setArtifactState(type);\n                  }}\n                />\n              </View>\n            )\n          })\n        }\n      </View>\n    )\n  }\n\n  renderArtifactStat = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n\n        <Text style={styles.artifactStatType}>Main Stat</Text>\n        {this.renderArtifactMainStat(type)}\n\n        <Text style={styles.artifactStatType}>Substats</Text>\n        {this.renderArtifactSubStats(type)}\n      </View>\n    )\n  }\n\n  renderAllArtifactStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Artifacts</Text>\n        {this.renderArtifactStat('Flower')}\n        {this.renderArtifactStat('Feather')}\n        {this.renderArtifactStat('Sands')}\n        {this.renderArtifactStat('Goblet')}\n        {this.renderArtifactStat('Circlet', true)}\n      </View>\n    )\n  }\n\n  renderTotalStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Stat Total</Text>\n        {\n          this.state.totalStats ? (\n            Object.entries(this.state.totalStats).map(([stat, value]) => {\n              return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n            })\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  renderTalentDamage = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n        {\n          this.state['talent' + type + 'Damage'] ? (\n            this.state['talent' + type + 'Damage'].map(({description, damage}, index) => {\n              return (\n                <Text style={styles.resultText} key={index}>{statUtils.getTalentDescription(description)}: {statUtils.getDamageDisplayValue(damage)}</Text>\n              )\n            })\n          ) : null\n        }\n      </View>\n\n    )\n  }\n\n  renderTalentOptions = () => {\n    return (\n      <FlatList\n        data={this.state.talentOptions}\n        keyExtractor={item => item.id}\n        renderItem={({item, index}) => {\n          if (item.type === 'boolean') {\n            return (\n              <View style={styles.inputRow}>\n                <Text>{statUtils.getTalentOptionName(item.id)}: </Text>\n                <Checkbox\n                  onValueChange={value => {\n                    let talentOptions = [...this.state.talentOptions];\n                    talentOptions[index] = new TalentOption(item.id, item.type, value);\n                    this.setState({ talentOptions }, this.setAllTalentState);\n                  }}\n                  value={item.value}\n                />\n              </View>\n            );\n          } else {\n            return null;\n          }\n        }}\n      />\n    )\n  }\n\n  renderAllTalentDamage = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Talents</Text>\n\n        {this.renderTalentDamage('Attack')}\n        {this.renderTalentDamage('Skill')}\n        {this.renderTalentDamage('Burst', true)}\n        {this.renderTalentOptions()}\n      </View>\n    )\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.inputColumn}>\n          {this.renderInputColumn()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderCharacterStats()}\n          {this.renderWeaponStats()}\n          {this.renderAllArtifactStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderTotalStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderAllTalentDamage()}\n        </View>\n\n        <View style={styles.fillerColumn}>\n        </View>\n\n      </View>\n    )\n  }\n}\n"],"sourceRoot":""}