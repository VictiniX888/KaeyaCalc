{"version":3,"sources":["data/Data.ts","character/Character.ts","stat/Stat.ts","artifact/types.ts","talent/types.ts","artifact/Artifact.ts","artifact/ArtifactSet.ts","artifact/artifactSet/ResolutionOfSojourner.ts","artifact/artifactSet/TinyMiracle.ts","option/Option.ts","option/artifactSetOptions/ArtifactSetOption.ts","artifact/artifactSet/MartialArtist.ts","artifact/artifactSet/Gambler.ts","artifact/artifactSet/GladiatorsFinale.ts","option/Mixin.ts","artifact/artifactSet/ViridescentVenerer.ts","artifact/artifactSet/WanderersTroupe.ts","artifact/artifactSet/CrimsonWitch.ts","artifact/artifactSet/NoblesseOblige.ts","artifact/artifactSet/EmblemOfSeveredFate.ts","artifact/artifactSet/BraveHeart.ts","artifact/artifactSet/Berserker.ts","artifact/artifactSet/Instructor.ts","artifact/artifactSet/BlizzardStrayer.ts","artifact/artifactSet/Thundersoother.ts","artifact/artifactSet/Lavawalker.ts","artifact/artifactSet/MaidenBeloved.ts","artifact/artifactSet/BloodstainedChivalry.ts","artifact/artifactSet/ArchaicPetra.ts","artifact/artifactSet/RetracingBolide.ts","artifact/artifactSet/HeartOfDepth.ts","artifact/artifactSet/Tenacity.ts","artifact/artifactSet/PaleFlame.ts","artifact/artifactSet/Shimenawa.ts","artifact/ArtifactSetUtil.ts","modifier/Reaction.ts","stat/Resistance.ts","modifier/CritType.ts","talent/TalentUtil.ts","character/albedo/AlbedoTalent.ts","character/albedo/Albedo.ts","option/characterOptions/CharacterOption.ts","character/aloy/AloyOption.ts","character/aloy/AloyPassive.ts","character/aloy/AloyTalent.ts","character/aloy/Aloy.ts","character/amber/AmberTalent.ts","character/amber/Amber.ts","character/ayaka/AyakaOption.ts","character/ayaka/AyakaTalent.ts","character/ayaka/Ayaka.ts","character/barbara/BarbaraTalent.ts","character/barbara/Barbara.ts","character/beidou/BeidouPassive.ts","character/beidou/BeidouTalent.ts","character/beidou/Beidou.ts","character/bennett/BennettTalent.ts","option/OptionUtils.ts","character/bennett/BennettTeamPassive.ts","character/bennett/Bennett.ts","character/chongyun/ChongyunOption.ts","character/chongyun/ChongyunTalent.ts","character/chongyun/Chongyun.ts","character/diluc/DilucTalent.ts","character/diluc/DilucOption.ts","character/diluc/Diluc.ts","character/diona/DionaTalent.ts","character/diona/Diona.ts","character/eula/EulaTalent.ts","character/eula/Eula.ts","character/fischl/FischlTalent.ts","character/fischl/Fischl.ts","character/ganyu/GanyuTalent.ts","character/ganyu/Ganyu.ts","character/hutao/HutaoPassive.ts","character/hutao/HutaoTalent.ts","character/hutao/HutaoOption.ts","character/hutao/Hutao.ts","character/jean/JeanTalent.ts","character/jean/Jean.ts","character/kaeya/KaeyaTalent.ts","character/kaeya/Kaeya.ts","character/kazuha/KazuhaTalent.ts","option/characterOptions/ElementalAbsorptionOption.ts","character/kazuha/KazuhaOption.ts","character/kazuha/Kazuha.ts","character/keqing/KeqingTalent.ts","character/keqing/Keqing.ts","character/klee/KleeTalent.ts","character/klee/Klee.ts","character/kokomi/KokomiPassive.ts","character/kokomi/KokomiTalent.ts","character/kokomi/KokomiOption.ts","character/kokomi/Kokomi.ts","character/lisa/LisaTalent.ts","character/lisa/Lisa.ts","character/mona/MonaOption.ts","character/mona/MonaTalent.ts","character/mona/Mona.ts","character/ningguang/NingguangTalent.ts","character/ningguang/Ningguang.ts","character/noelle/NoelleTalent.ts","character/noelle/NoelleOption.ts","character/noelle/Noelle.ts","character/qiqi/QiqiTalent.ts","character/qiqi/Qiqi.ts","character/raiden/RaidenPassive.ts","character/raiden/RaidenTalent.ts","character/raiden/RaidenOption.ts","character/raiden/Raiden.ts","character/razor/RazorTalent.ts","character/razor/Razor.ts","character/rosaria/RosariaTalent.ts","character/rosaria/Rosaria.ts","character/sara/SaraTalent.ts","character/sara/Sara.ts","character/sayu/SayuTalent.ts","character/sayu/SayuOption.ts","character/sayu/Sayu.ts","character/sucrose/SucroseOption.ts","character/sucrose/SucroseTalent.ts","character/sucrose/Sucrose.ts","character/tartaglia/TartagliaTalent.ts","character/tartaglia/TartagliaPassive.ts","character/tartaglia/TartagliaTeamPassive.ts","character/tartaglia/Tartaglia.ts","character/thoma/ThomaTalent.ts","character/thoma/ThomaPassive.ts","character/thoma/ThomaConstellation.ts","constellation/Constellation.ts","character/thoma/ThomaTeamPassive.ts","character/thoma/Thoma.ts","character/venti/VentiTalent.ts","character/venti/VentiOption.ts","character/venti/Venti.ts","character/xiangling/XianglingTalent.ts","character/xiangling/Xiangling.ts","character/xiao/XiaoOption.ts","character/xiao/XiaoTalent.ts","character/xiao/Xiao.ts","character/xingqiu/XingqiuTalent.ts","character/xingqiu/Xingqiu.ts","character/xinyan/XinyanTalent.ts","character/xinyan/Xinyan.ts","character/yanfei/YanfeiOption.ts","character/yanfei/YanfeiTalent.ts","character/yanfei/Yanfei.ts","character/yoimiya/YoimiyaOption.ts","character/yoimiya/YoimiyaPassive.ts","character/yoimiya/YoimiyaTalent.ts","character/yoimiya/Yoimiya.ts","character/zhongli/ZhongliTalent.ts","character/zhongli/ZhongliTeamPassive.ts","character/CharacterUtil.ts","character/zhongli/Zhongli.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/IntInput.tsx","component/Picker.tsx","component/ArtifactBlock.tsx","teambuff/artifact/ArtifactTeamBuff.ts","dps/DPSCalculator.ts","optimization/Optimization.ts","component/Checkbox.tsx","component/InputBlock.tsx","component/OptimizerBlock.tsx","component/ArtifactColumn.tsx","component/OptionInput.tsx","option/characterOptions/ReactionOption.ts","component/DPSOptionInput.tsx","component/DPSAttackInput.tsx","component/DPSColumn.tsx","component/ArtifactSetPicker.tsx","component/ArtifactSetInputBlock.tsx","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","weapon/Weapon.ts","option/weaponOptions/WeaponOption.ts","weapon/watatsumi/WatatsumiWavewalker.ts","weapon/watatsumi/Akuoumaru.ts","weapon/dragonsbane/DragonsBane.ts","weapon/dragonsbane/DragonsBanePassive.ts","weapon/engulfinglightning/EngulfingLightning.ts","weapon/engulfinglightning/EngulfingLightningPassive.ts","weapon/everlastingmoonglow/EverlastingMoonglow.ts","weapon/everlastingmoonglow/EverlastingMoonglowPassive.ts","weapon/luxurioussealord/LuxuriousSeaLord.ts","weapon/luxurioussealord/LuxuriousSeaLordPassive.ts","weapon/watatsumi/MouunsMoon.ts","weapon/polarstar/PolarStar.ts","weapon/polarstar/PolarStarPassive.ts","weapon/solarpearl/SolarPearl.ts","weapon/solarpearl/SolarPearlPassive.ts","weapon/staffofhoma/StaffOfHoma.ts","weapon/staffofhoma/StaffOfHomaPassive.ts","weapon/thecatch/TheCatch.ts","weapon/thecatch/TheCatchPassive.ts","weapon/whiteblind/Whiteblind.ts","weapon/whiteblind/WhiteblindPassive.ts","weapon/WeaponUtil.ts","weapon/watatsumi/WavebreakersFin.ts","save/Save.ts","component/SaveBlock.tsx","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/TeamBuffOptionInput.tsx","component/TeamInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","constellations","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","weaponPassiveData","weaponPassiveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getWeaponPassiveData","getWeaponPassiveParams","refinement","passive","passiveParams","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentParams","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","getWeaponPassiveAt","Character","hasAscended","constellationLevel","_id","name","baseStats","statCurveMapping","talentFns","_level","_hasAscended","_constellationLevel","innateStats","characterOptions","passiveOptions","constellationOptions","teamOptions","this","value","data","getTalentFns","getInnateStatsAt","getCharacterOptions","ascensionLevel","getAscensionLevel","getPassives","getPassiveOptions","getConstellations","getConstellationsOptions","getTeamOptions","prevAscensionLevel","prevConstellationLevel","isNaN","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","multiplier","bonus","getCharacterOptionConstuctors","Option","getAllPassives","filter","flatMap","options","oldOptionIds","newOptions","includes","concat","keptOptionIds","option","statMixin","mixin","modifierMixin","getAllConstellations","constellation","getTeamPassive","teamPassive","unroll","getStatDisplayValue","prop","isPercentage","toFixed","Math","round","toString","getDamageDisplayValue","values","str","length","every","slice","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","talentAttackLevel","talentSkillLevel","talentBurstLevel","statMixins","characterStats","weaponStats","stats","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","energyRecharge","apply","totalStats","baseAtk","flatAtk","atkBonus","flatDef","baseDef","defBonus","flatHp","baseHp","hpBonus","critRate","critDmg","elementalMastery","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","shieldStrength","dmgBonus","normalDmgBonus","chargedDmgBonus","plungeDmgBonus","skillDmgBonus","burstDmgBonus","chargedCritRate","burstCritRate","overloadDmgBonus","burningDmgBonus","vaporizeDmgBonus","meltDmgBonus","capitalize","toUpperCase","ArtifactType","InputStat","rawValue","convertStatToDisplayValue","TalentType","Element","AttackType","ScalingType","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","setMainStatValue","getArtifactMainStatValue","i","setProp","setInputValue","setValue","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","ArtifactSet","bonusThresholds","setBonusData","_pieces","setBonusSets","setBonuses","getSetBonusSetsAt","getSetBonusesAt","getOptions","prevPieces","getAllSetBonuses","setBonus","threshold","bonuses","statBonus","extraStats","ResolutionOfSojourner","resolutionOfSojourner4Pc","TinyMiracle","tinyMiracle2Pc","params2Pc","element","ArtifactSetOption","MartialArtist","martialArtist2Pc","martialArtist4Pc","params4Pc","Gambler","gambler2Pc","GladiatorsFinale","gladiatorsFinale4Pc","Priority","ViridescentVenerer","viridescentVenerer4Pc","ViridescentVenerer4PcOption","choices","Cryo","Electro","Hydro","Pyro","modifier","enemyResReduction","add","WanderersTroupe","wanderersTroupe4Pc","CrimsonWitch","crimsonWitch4Pc","param","find","stacks","NoblesseOblige","noblesseOblige2Pc","noblesseOblige4Pc","NoblesseOblige4PcOption","EmblemOfSeveredFate","emblemOfSeveredFate4Pc","priority","Last","BraveHeart","braveHeart4Pc","Berserker","berserker4Pc","Instructor","instructor4Pc","Instructor4PcOption","BlizzardStrayer","blizzardStrayer4Pc","Thundersoother","thundersoother4Pc","Lavawalker","lavawalker4Pc","MaidenBeloved","maidenBeloved4Pc","healedBonus","BloodstainedChivalry","bloodstainedChivalry4Pc","ArchaicPetra","archaicPetra4Pc","ArchaicPetra4PcOption","RetracingBolide","retracingBolide4Pc","HeartOfDepth","heartOfDepth4Pc","Tenacity","tenacity4Pc","Tenacity4PcOption","PaleFlame","paleFlame4Pc","Shimenawa","shimenawa4Pc","artifactSets","resolutionofsojourner","tinymiracle","martialartist","gambler","gladiatorsfinale","viridescentvenerer","wandererstroupe","crimsonwitchofflames","noblesseoblige","emblemofseveredfate","braveheart","berserker","instructor","blizzardstrayer","thundersoother","lavawalker","maidenbeloved","bloodstainedchivalry","archaicpetra","retracingbolide","heartofdepth","tenacityofthemillelith","paleflame","shimenawasreminiscence","getArtifactSetConstructor","initArtifactSet","ArtifactSetConstructor","Reaction","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","Map","set","Anemo","Geo","Physical","get","prevValue","CritType","calculateBaseDamage","scalingType","flatDmg","Attack","Defense","Hp","calculateAmplifyingReactionMultiplier","reaction","amplifyingStrength","triggerElement","Melt","Vaporize","calculateAmplifyingStrengthMultiplier","reactionBonus","calculateTotalDamage","attackType","Normal","normalAttackFlatDmg","Charged","chargedAttackFlatDmg","Skill","skillFlatDmg","baseDmg","getDamageBonus","crit","critType","Crit","Average","Burst","min","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","calculateHp","flatBonus","normalAttackSingle","damage","infusionNormal","infusion","normalAttackMulti","hits","damages","push","chargedAttackSingle","chargedAttackMulti","aimShot","aimShotCharged","plungeAttack","infusionPlunge","Plunge","skillSingle","skillMulti","burstSingle","burstMulti","typelessAttack","None","healingValue","flatHealing","calculateHealing","hpValue","shieldHpValue","dmgAbsorption","dionaHoldSkill","calculateDmgAbsorption","atkBuffValue","albedoTalents","chargedDmg","plungeDmg","lowPlungeDmg","highPlungeDmg","skillDmg","transientBlossomDmg","burstDmg","fatalBlossomDmg","Albedo","CharacterOption","children","aloyOptions","_talentAttackLevel","_talentBurstLevel","skillParams","a1Data","a4Data","a1Params","a4Params","aloyPassives","aloyTalents","aimShotDmg","chargedAimShotDmg","freezeBombDmg","chillwaterBombletDmg","Aloy","amberTalents","explosionDmg","baronBunnyHp","dmgPerWave","totalDmg","talentValue","Amber","ayakaOptions","ayakaTalents","cuttingDmg","bloomDmg","Ayaka","barbaraTalents","hpRegenContinuous","hpRegenOnHit","dropletDmg","hpRegen","Barbara","beidouPassives","beidouTalents","chargedSpinDmg","chargedFinalDmg","shieldHp","dmgBonusOnHitTaken","lightningDmg","Beidou","bennettTalents","pressDmg","chargeLevel1Dmg","chargeLevel2Dmg","hpRegenContinuousPerSecond","isBooleanOption","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","BennettOptionAtkBuff","bennettTeamPassive","atkBuff","Bennett","chongyunOptions","chongyunTalents","Chongyun","dilucTalents","slashingDmg","dot","dilucOptions","_talentSkillLevel","passiveData","Diluc","dionaTalents","icyPawDmgPerPaw","shieldHpPress","shieldHpHold","continuousFieldDmg","hpRegenContinuousTime","Diona","eulaTalents","holdDmg","icewhirlBrandDmg","lightfallSwordBaseDmg","lightfallSwordStackDmg","Eula","fischlTalents","ozDmg","summoningDmg","fallingThunderDmg","Fischl","ganyuTalents","aimShotChargeLevel1","frostflakeArrowDmg","frostflakeArrowBloomDmg","iceLotusHp","iceShardDmg","Ganyu","hutaoPassives","hutaoTalents","bloodBlossomDmg","burstDmgLowHp","hpRegenLowHp","hutaoOptions","flatAtkBonus","Hutao","jeanTalents","fieldEnterExitDmg","fieldActivationHealing","Jean","kaeyaTalents","Kaeya","kazuhaTalents","dotElementalAbsorption","elementalAbsorption","ElementalAbsoprtionOption","kazuhaOptions","Kazuha","keqingTalents","lightningStilettoDmg","thunderclapSlashDmg","burstInitDmg","consecutiveSlashDmg","lastAttackDmg","Keqing","kleeTalents","jumpyDumptyDmg","mineDmg","sparksNSplashDmg","Klee","kokomiPassives","kokomiHealingBonusDmg","kokomiTalents","getKokomiNormalAttackModifier","getKokomiChargedAttackModifier","rippleDmg","getKokomiSkillModifier","kokomiBurst","newModifier","normalAttackBonusDmg","chargedAttackBonusDmg","skillBonusDmg","kokomiOptions","Kokomi","lisaTalents","holdDmgStack0","holdDmgStack1","holdDmgStack2","holdDmgStack3","Lisa","monaOptions","burstParams","monaTalents","Mona","ningguangTalents","normalAtkDmg","starJadeDmg","jadeScreenHp","dmgPerGem","Ningguang","noelleTalents","healing","firstSwingDmg","noelleOptions","totalDef","Noelle","qiqiTalents","heraldOfFrostDmg","Qiqi","raidenPassives","raidenTalents","coordinatedAtkDmg","musouNoHitotachiDmg","getInitialResolveBonus","getAttackResolveBonus","resolveStacks","raidenOptions","Raiden","razorTalents","Razor","rosariaTalents","iceLanceDot","Rosaria","saraTalents","tenguJuuraiAmbushDmg","tenguJuuraiTitanbreakerDmg","tenguJuuraiStormclusterDmg","Sara","sayuTalents","fuufuuWindwheelDmg","fuufuuWhirlwindKickPressDmg","fuufuuWhirlwindKickHoldDmg","fuufuuWindwheelElementalDmg","fuufuuWhirlwindKickElementalDmg","activationDmg","activationHealing","mujimujiDarumaDmg","mujimujiDarumaHealing","sayuOptions","Sayu","sucroseOptions","sucroseTalents","Sucrose","tartagliaTalents","riptideFlashDmg","riptideBurstDmg","stanceChangeDmg","riptideSlashDmg","burstDmgMelee","burstDmgRanged","riptideBlastDmg","tartagliaAscension0","tartagliaPassives","tartagliaTeamPassive","Tartaglia","thomaTalents","shieldHpMax","fieryCollapseDmg","getThomaFieryCollapseModifier","thomaHpBonusDmg","thomaPassives","c6Params","ThomaOptionConstellation6","thomaConstellations","ConstellationBurst","thomaTeamPassive","Thoma","ventiTalents","ventiOptions","Venti","xianglingTalents","guobaDmg","swing1HitDmg","swing2HitDmg","swing3HitDmg","pyronadoDmg","Xiangling","xiaoOptions","xiaoTalents","Xiao","xingqiuTalents","swordRainDmg","Xingqiu","xinyanTalents","swingDmg","shieldHpLevel1","shieldHpLevel2","shieldHpLevel3","pyroDot","Xinyan","yanfeiOptions","yanfeiTalents","chargedDmgSeal0","chargedDmgSeal1","chargedDmgSeal2","chargedDmgSeal3","chargedDmgSeal4","Yanfei","yoimiyaOptions","yoimiyaSkill","yoimiyaPassives","yoimiyaTalents","getYoimiyaNormalAttackMultiplier","kindlingArrowDmg","aurousBlazeExplosionDmg","Yoimiya","zhongliTalents","stoneSteeleDmg","resonanceDmg","zhongliTeamPassive","characters","albedo","aloy","amber","ayaka","barbara","beidou","bennett","chongyun","diluc","diona","eula","fischl","ganyu","hutao","jean","kaeya","kazuha","keqing","klee","kokomi","lisa","mona","ningguang","noelle","qiqi","raiden","razor","rosaria","sara","sayu","sucrose","tartaglia","thoma","venti","xiangling","xiao","xingqiu","xinyan","yanfei","yoimiya","zhongli","getCharacterConstructor","initCharacter","CharacterConstructor","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","Form","Label","htmlFor","srOnly","label","Control","size","className","React","Component","FloatInput","parseFloat","InputRow","Row","IntInput","Picker","selectedValue","target","handleChange","onChange","as","Item","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactRarity","setArtifactLevel","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatInputValue","statObj","artifactTeamBuffs","calculateTalentValue","talentType","talentId","appState","getDamageModifier","getStatMixins","getModifierMixins","overrideArtifacts","initializeAllOptions","weaponOptions","artifactSetOptions","artifactBuffOptions","allOptions","oldOption","updateCache","modifierMixins","talentFn","characterOption","weaponOption","artifactSet","artifactSetOption","teamCharacters","teamOption","OptionConstructor","artifactOption","substats","optimizeSubstats","possibleStats","maxRolls","erThreshold","maxDmg","optimalSubstatRolls","optimalArtifacts","baseArtifacts","generateBaseArtifacts","baseEr","baseErRolls","ceil","erMainStatCount","generateRollCombinationsKqm","combination","erDistribution","rolls","inputStat","sIndex","setSubStatValue","addRollsToArtifacts","rotation","dmg","subStatRolls","mainStats","sameMainStatCount","currentMaxRolls","combinations","current","backCombinations","prevArtifacts","iArtifact","jArtifact","Checkbox","checked","Check","Input","InputBlock","OptimizerBlock","selectedSubstats","substatRolls","setMaxRolls","setSelectedSubstats","selected","substat","setErThreshold","onOptimizeClick","result","updateTotalStats","setAppState","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","Button","variant","onClick","ArtifactColumn","Col","md","xs","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","choice","ReactionOption","DPSOptionInput","setOptionId","constructor","setOption","index","DPSAttackInput","setTalentType","setAttack","setTalentId","setMultiplier","splice","talentValues","defaultAttack","DPSColumn","dpr","dps","updateTalentValue","updateTalentValues","rotationTime","setRotationTime","time","isFinite","ArtifactSetPicker","setArtifactSetId","artifactSetId","sort","name1","name2","localeCompare","ArtifactSetInputBlock","updateArtifactSetBonuses","setArtifactSetPieces","CharacterPicker","setCharacterId","CharacterInputBlock","setCharacterLevel","setIsCharacterAscended","isAscended","setCharacterConstellationLevel","ModifierInputBlock","setEnemyLevel","setEnemyRes","setCritType","setReaction","ToggleButtonGroup","ToggleButton","Weapon","rank","passiveDataSet","_weaponLevel","_refinement","getPassive","getStatsAt","weaponLevel","weaponStatCurves","shouldKeepValue","newOption","statBonuses","WeaponOption","watatsumiWavewalkerPassive","Akuoumaru","DragonsBane","dragonsBanePassive","EngulfingLightning","engulfingLightningPassive","EverlastingMoonglow","everlastingMoonglowPassive","LuxuriousSeaLord","luxuriousSeaLordPassive","MouunsMoon","PolarStar","polarStarPassive","SolarPearl","solarPearlPassive","StaffOfHoma","totalHp","staffOfHomaPassive","TheCatch","theCatchPassive","Whiteblind","whiteblindPassive","weapons","dragonsbane","engulfinglightning","staffofhoma","thecatch","wavebreakersfin","everlastingmoonglow","solarpearl","luxurioussealord","whiteblind","akuoumaru","polarstar","mouunsmoon","getWeaponConstructor","initWeapon","WeaponConstructor","createSave","characterHasAscended","characterConstellationLevel","weaponHasAscended","weaponRefinement","artifactSetPieces","teamCharacterIds","loadSave","save","refreshApp","savedArtifact","artifactType","attackSave","SaveBlock","onSaveClick","saveInputName","saves","window","localStorage","setItem","JSON","stringify","addSave","onSaveInputChange","onLoadClick","selectedSave","onLoadInputChange","onDeleteClick","showDeleteWarning","onDeleteModalConfirm","deleteSave","onDeleteModalHide","onImportClick","showImportModal","onImportModalHide","saveJson","invalidJson","onImportTextChange","onImportSubmitClick","parse","onExportClick","showExportModal","onExportModalHide","hasCopied","onCopyClick","navigator","clipboard","writeText","getItem","placeholder","Modal","show","onHide","Footer","closeButton","rows","readOnly","disabled","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","talentAttackLevelExtra","talentSkillLevelExtra","talentBurstLevelExtra","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","setIsWeaponAscended","setWeaponRefinement","TeamBuffOptionInput","TeamInputBlock","updateTeamOptions","setArtifactBuffOption","InputColumn","ArtifactSetStatBlock","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","TalentColumn","App","characterPassiveMixins","getPassiveModifierMixins","characterConstellationMixins","getConstellationModifierMixins","weaponPassiveMixins","artifactSetMixins","teamPassiveMixins","getTeamModifierMixin","characterOptionMixins","weaponOptionMixins","artifactSetOptionMixins","teamOptionMixins","artifactBuffOptionMixins","unarrangedMixins","groupedMixins","array","getPassiveStatMixins","getConstellationStatMixins","getTeamStatMixin","callback","newArtifactSets","newChar","damageModifier","fns","fn","Container","fluid","Navbar","sticky","bg","Nav","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f232409a.chunk.js","sourcesContent":["import type * as Data from './types';\nimport type { TalentType } from '../talent/types';\n\nimport characterDataRaw from './characterdata.json';\nimport characterAscensionBonusDataRaw from './characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from './characterstatcurvedata.json';\nimport weaponDataRaw from './weapondata.json';\nimport weaponAscensionBonusDataRaw from './weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from './weaponstatcurvedata.json';\nimport weaponPassiveDataRaw from './weaponpassivedata.json';\nimport talentDataRaw from './talentdata.json';\nimport artifactSetDataRaw from './artifactsetdata.json';\nimport artifactSetBonusDataRaw from './artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from './artifactmainstatdata.json';\n\nimport propMappingRaw from './propmapping.json';\nimport talentDescMappingRaw from './talentdescmapping.json';\nimport optionMappingRaw from './optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\nconst weaponPassiveData = weaponPassiveDataRaw as Record<\n  string,\n  Data.WeaponPassiveSetData\n>;\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n\n      constellations: talentDataSetRaw.constellations,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getWeaponPassiveData(id: string) {\n  return getData(id, weaponPassiveData);\n}\n\nexport function getWeaponPassiveParams(id: string, refinement: number) {\n  return getWeaponPassiveData(id).passive[refinement]?.passiveParams ?? [];\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentParams(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\nexport function getWeaponPassiveAt(\n  refinement: number,\n  passives: Data.WeaponPassiveSetData\n): Data.WeaponPassiveData | undefined {\n  return passives.passive[refinement];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n} from '../data/Data';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../data/types';\nimport type { Talents } from '../talent/types';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { CharacterPassive, TeamPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport Constellation from '../constellation/Constellation';\n\nexport default class Character {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    constellationLevel = 0\n  ) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n    this._constellationLevel = constellationLevel;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n    this.talentFns = this.getTalentFns();\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n    this.constellations = this.getConstellations(this.constellationLevel);\n    this.constellationOptions = this.getConstellationsOptions(\n      this.constellationLevel\n    );\n    this.teamOptions = this.getTeamOptions();\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n  talentFns: Talents = {};\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _constellationLevel: number = 0;\n  get constellationLevel(): number {\n    return this._constellationLevel;\n  }\n  set constellationLevel(value: number) {\n    const prevConstellationLevel = this.constellationLevel;\n    this._constellationLevel = value;\n\n    this.constellations = this.getConstellations(value);\n    this.constellationOptions = this.getConstellationsOptions(\n      value,\n      prevConstellationLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  constellations: Constellation[] = [];\n\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n  constellationOptions: CharacterOption[] = [];\n  teamOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Override in derived classes\n  getTalentFns(): Talents {\n    return {};\n  }\n\n  // Override in derived classes if character has base options\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return [];\n  }\n\n  getCharacterOptions(): CharacterOption[] {\n    return this.getCharacterOptionConstuctors().map((Option) => new Option());\n  }\n\n  // Override in derived classes\n  getAllPassives(): CharacterPassive[] {\n    return [];\n  }\n\n  // Returns passives that character should have based on their current ascension\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    return this.getAllPassives().filter(\n      (passive) => ascensionLevel >= passive.ascensionLevel\n    );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(\n    ascensionLevel: number,\n    prevAscensionLevel?: number\n  ): CharacterOption[] {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  // Override in derived classes\n  getAllConstellations(): Constellation[] {\n    return [];\n  }\n\n  getConstellations(constellationLevel: number): Constellation[] {\n    return this.getAllConstellations().filter(\n      (constellation) => constellationLevel >= constellation.constellationLevel\n    );\n  }\n\n  // getConstellations should be called before this if passives are updated\n  getConstellationsOptions(\n    constellationLevel: number,\n    prevConstellationLevel?: number\n  ): CharacterOption[] {\n    if (prevConstellationLevel === undefined || isNaN(prevConstellationLevel)) {\n      return this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n    }\n\n    if (constellationLevel > prevConstellationLevel) {\n      const newOptions = this.constellations\n        .filter(\n          ({ constellationLevel }) =>\n            constellationLevel > prevConstellationLevel\n        )\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n\n      return this.constellationOptions.concat(newOptions);\n    }\n\n    if (constellationLevel < prevConstellationLevel) {\n      const keptOptionIds = this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.constellationOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (constellationLevel === prevConstellationLevel)\n    return this.constellationOptions;\n  }\n\n  getConstellationStatMixins(): StatMixin[] {\n    return this.constellations\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getConstellationModifierMixins(): ModifierMixin[] {\n    return this.constellations\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n    const constellationOptions = this.constellationOptions;\n\n    return [...characterOptions, ...passiveOptions, ...constellationOptions];\n  }\n\n  // Override in derived classes to implement team buffs\n  getTeamPassive(): TeamPassive | undefined {\n    return undefined;\n  }\n\n  getTeamStatMixin(): StatMixin | undefined {\n    return this.getTeamPassive()?.statMixin;\n  }\n\n  getTeamModifierMixin(): ModifierMixin | undefined {\n    return this.getTeamPassive()?.modifierMixin;\n  }\n\n  getTeamOptions(): CharacterOption[] {\n    const teamPassive = this.getTeamPassive();\n\n    return (\n      teamPassive?.options?.flatMap((Option) => new Option().unroll()) ?? []\n    );\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from '../data/Data';\nimport { StatMixin } from '../option/Mixin';\nimport Weapon from '../weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputted value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\n// Returns a number representing the value to display (e.g. in stat inputs)\nexport function convertStatToDisplayValue(\n  value: number,\n  isPercentage: boolean\n) {\n  if (isPercentage) {\n    return value * 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin.apply(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n  if (combinedStats.burstCritRate !== undefined) {\n    totalStats.burstCritRate = combinedStats.burstCritRate;\n  }\n\n  if (combinedStats.overloadDmgBonus !== undefined) {\n    totalStats.overloadDmgBonus = combinedStats.overloadDmgBonus;\n  }\n  if (combinedStats.burningDmgBonus !== undefined) {\n    totalStats.burningDmgBonus = combinedStats.burningDmgBonus;\n  }\n  if (combinedStats.vaporizeDmgBonus !== undefined) {\n    totalStats.vaporizeDmgBonus = combinedStats.vaporizeDmgBonus;\n  }\n  if (combinedStats.meltDmgBonus !== undefined) {\n    totalStats.meltDmgBonus = combinedStats.meltDmgBonus;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatToDisplayValue, convertStatValue } from '../stat/Stat';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setInputValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n\n  setValue(value: number) {\n    this.value = value;\n    if (this.stat !== '') {\n      this.rawValue = convertStatToDisplayValue(\n        value,\n        propMapping[this.stat].isPercentage\n      );\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  pieces: number;\n  options?: typeof ArtifactSetOption[];\n  extraStats?: Stat[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport type TalentFn = (props: TalentProps) => TalentValue;\n\nexport type Talents = Record<string, Record<string, TalentFn>>;\n\nexport type TalentValueSet = Record<string, Record<string, TalentValue>>;\n\nexport interface TalentValue {\n  damage: number[];\n  element?: Element;\n}\n\nexport interface TalentProps {\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  None = 'none',\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { Stat, Stats } from '../data/types';\nimport { getArtifactMainStatValue } from '../data/Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatInputValue(i: number, value: number) {\n    this.subStats[i].setInputValue(value);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value + (stats[subStat.stat] ?? 0);\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import { getArtifactSetData, getArtifactSetBonusData } from '../data/Data';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../data/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces: number = 0) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  // Override in derived classes to implement special set bonuses\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [];\n  }\n\n  // Returns all special set bonuses that are active for given pieces\n  getSetBonusesAt(pieces: number): ArtifactSetBonus[] {\n    return this.getAllSetBonuses().filter(\n      (setBonus) => pieces >= setBonus.pieces\n    );\n  }\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n    });\n\n    // Special bonus stats, has to be handled individually\n    let extraStats = this.setBonuses.flatMap(\n      (setBonus) => setBonus.extraStats ?? []\n    );\n\n    extraStats.forEach((statBonus) => {\n      if (stats[statBonus.stat] !== undefined) {\n        stats[statBonus.stat] += statBonus.value;\n      } else {\n        stats[statBonus.stat] = statBonus.value;\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap(\n        (setBonus) => setBonus.options ?? []\n      );\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class ResolutionOfSojourner extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [resolutionOfSojourner4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('resolutionofsojourner', 4);\n\nconst resolutionOfSojourner4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  extraStats: [\n    {\n      stat: 'chargedCritRate',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class TinyMiracle extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tinyMiracle2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('tinymiracle', 2);\n\nconst tinyMiracle2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'].map(\n    (element) => {\n      return {\n        stat: `${element}Res`,\n        value: params2Pc[0],\n      };\n    }\n  ),\n};\n","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  statMixin: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  modifierMixin: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MartialArtist extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [martialArtist2Pc, martialArtist4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('martialartist', 2);\n\nconst martialArtist2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params2Pc[0],\n    },\n    {\n      stat: 'chargedDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('martialartist', 4);\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[2] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[2] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst martialArtist4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MartialArtist4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Gambler extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gambler2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('gambler', 2);\n\nconst gambler2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'skillDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class GladiatorsFinale extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gladiatorsFinale4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('gladiatorsfinale', 4);\n\nconst gladiatorsFinale4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for sword, polearm, claymore characters\n  // Did not make this an Option because this would likely not want to be disabled\n  // Calculation will be wrong if used on a catalyst, bow character\n  // Checking for that would require character weapon type to be implemented first\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport enum Priority {\n  Normal,\n  Last,\n}\n\ninterface Mixin {\n  priority?: Priority;\n}\n\nexport interface StatMixin extends Mixin {\n  apply: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number,\n    ascensionLevel: number\n  ) => void;\n}\n\n// Do not modify stats here, use StatMixin for that purpose\nexport interface ModifierMixin extends Mixin {\n  apply: (modifier: DamageModifier, stats: Stats) => void;\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionPicker, IModifierApplicable } from '../../option/Option';\n\nexport default class ViridescentVenerer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [viridescentVenerer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('viridescentvenerer', 4);\n\nexport class ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.enemyResReduction.add(this.value as Element, params4Pc[1]);\n      }\n    },\n  };\n}\n\nconst viridescentVenerer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ViridescentVenerer4PcOption],\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class WanderersTroupe extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [wanderersTroupe4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('wandererstroupe', 4);\n\nconst wanderersTroupe4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for catalyst, bow characters\n  // See Gladiator's Finale for more details\n  extraStats: [\n    {\n      stat: 'chargedDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import {\n  getArtifactSetBonusData,\n  getArtifactSetBonusParams,\n} from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\n\nexport default class CrimsonWitch extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [crimsonWitch4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('crimsonwitchofflames', 4);\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n        const param = setBonusData[2].bonuses.find(\n          ({ stat }) => stat === 'pyroDmgBonus'\n        )?.value!!;\n\n        let stacks = this.value;\n        if (stacks > 3) stacks = 3;\n        stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst crimsonWitch4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [CrimsonWitch4PcOption],\n\n  extraStats: [\n    {\n      stat: 'overloadDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'burningDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'vaporizeDmgBonus',\n      value: params4Pc[1],\n    },\n    {\n      stat: 'meltDmgBonus',\n      value: params4Pc[2],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class NoblesseOblige extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [noblesseOblige2Pc, noblesseOblige4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('noblesseoblige', 2);\n\nconst noblesseOblige2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'burstDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('noblesseoblige', 4);\n\nexport class NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst noblesseOblige4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [NoblesseOblige4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class EmblemOfSeveredFate extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [emblemOfSeveredFate4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('emblemofseveredfate', 4);\n\nconst emblemOfSeveredFate4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  statMixin: {\n    priority: Priority.Last,\n    apply: (stats: Stats) => {\n      let burstDmgBonus = params4Pc[0] * stats.energyRecharge;\n      if (burstDmgBonus > params4Pc[1]) {\n        burstDmgBonus = params4Pc[1];\n      }\n\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n    },\n  },\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BraveHeart extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [braveHeart4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('braveheart', 4);\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst braveHeart4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BraveHeart4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Berserker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [berserker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('berserker', 4);\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst berserker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Berserker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Instructor extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [instructor4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('instructor', 4);\n\nexport class Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.elementalMastery = params4Pc[1] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst instructor4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Instructor4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BlizzardStrayer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [blizzardStrayer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('blizzardstrayer', 4);\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[1] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst blizzardStrayer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BlizzardStrayer4PcCryoOption, BlizzardStrayer4PcFrozenOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Thundersoother extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [thundersoother4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('thundersoother', 4);\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst thundersoother4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Thundersoother4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Lavawalker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [lavawalker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('lavawalker', 4);\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst lavawalker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Lavawalker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MaidenBeloved extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [maidenBeloved4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('maidenbeloved', 4);\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.healedBonus = params4Pc[0] + (stats.healedBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst maidenBeloved4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MaidenBeloved4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BloodstainedChivalry extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [bloodstainedChivalry4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n\nclass BloodstainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.chargedDmgBonus = params4Pc[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst bloodstainedChivalry4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BloodstainedChivalry4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionPicker, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class ArchaicPetra extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [archaicPetra4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('archaicpetra', 4);\n\nexport class ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value !== '') {\n        stats[`${this.value}DmgBonus`] =\n          params4Pc[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n      }\n    },\n  };\n}\n\nconst archaicPetra4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ArchaicPetra4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class RetracingBolide extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [retracingBolide4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('retracingbolide', 4);\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst retracingBolide4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [RetracingBolide4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class HeartOfDepth extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [heartOfDepth4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('heartofdepth', 4);\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst heartOfDepth4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [HeartOfDepth4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Tenacity extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tenacity4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n\nexport class Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.shieldStrength = params4Pc[1] + (stats.shieldStrength ?? 0);\n      }\n    },\n  };\n}\n\nconst tenacity4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Tenacity4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class PaleFlame extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [paleFlame4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('paleflame', 4);\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value >= 1) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n\n      if (this.value >= 2) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.physicalDmgBonus = params4Pc[3] + (stats.physicalDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst paleFlame4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [PaleFlame4PcOption],\n};\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Shimenawa extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [shimenawa4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('shimenawasreminiscence', 4);\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const param = params4Pc[1];\n        stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst shimenawa4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Shimenawa4PcOption],\n};\n","import ArtifactSet from './ArtifactSet';\nimport ResolutionOfSojourner from './artifactSet/ResolutionOfSojourner';\nimport TinyMiracle from './artifactSet/TinyMiracle';\nimport MartialArtist from './artifactSet/MartialArtist';\nimport Gambler from './artifactSet/Gambler';\nimport GladiatorsFinale from './artifactSet/GladiatorsFinale';\nimport ViridescentVenerer from './artifactSet/ViridescentVenerer';\nimport WanderersTroupe from './artifactSet/WanderersTroupe';\nimport CrimsonWitch from './artifactSet/CrimsonWitch';\nimport NoblesseOblige from './artifactSet/NoblesseOblige';\nimport EmblemOfSeveredFate from './artifactSet/EmblemOfSeveredFate';\nimport BraveHeart from './artifactSet/BraveHeart';\nimport Berserker from './artifactSet/Berserker';\nimport Instructor from './artifactSet/Instructor';\nimport BlizzardStrayer from './artifactSet/BlizzardStrayer';\nimport Thundersoother from './artifactSet/Thundersoother';\nimport Lavawalker from './artifactSet/Lavawalker';\nimport MaidenBeloved from './artifactSet/MaidenBeloved';\nimport BloodstainedChivalry from './artifactSet/BloodstainedChivalry';\nimport ArchaicPetra from './artifactSet/ArchaicPetra';\nimport RetracingBolide from './artifactSet/RetracingBolide';\nimport HeartOfDepth from './artifactSet/HeartOfDepth';\nimport Tenacity from './artifactSet/Tenacity';\nimport PaleFlame from './artifactSet/PaleFlame';\nimport Shimenawa from './artifactSet/Shimenawa';\n\nconst artifactSets: Record<string, typeof ArtifactSet> = {\n  resolutionofsojourner: ResolutionOfSojourner,\n  tinymiracle: TinyMiracle,\n  martialartist: MartialArtist,\n  gambler: Gambler,\n  gladiatorsfinale: GladiatorsFinale,\n  viridescentvenerer: ViridescentVenerer,\n  wandererstroupe: WanderersTroupe,\n  crimsonwitchofflames: CrimsonWitch,\n  noblesseoblige: NoblesseOblige,\n  emblemofseveredfate: EmblemOfSeveredFate,\n  braveheart: BraveHeart,\n  berserker: Berserker,\n  instructor: Instructor,\n  blizzardstrayer: BlizzardStrayer,\n  thundersoother: Thundersoother,\n  lavawalker: Lavawalker,\n  maidenbeloved: MaidenBeloved,\n  bloodstainedchivalry: BloodstainedChivalry,\n  archaicpetra: ArchaicPetra,\n  retracingbolide: RetracingBolide,\n  heartofdepth: HeartOfDepth,\n  tenacityofthemillelith: Tenacity,\n  paleflame: PaleFlame,\n  shimenawasreminiscence: Shimenawa,\n};\n\nfunction getArtifactSetConstructor(id: string): typeof ArtifactSet {\n  return artifactSets[id] ?? ArtifactSet;\n}\n\nexport function initArtifactSet(id: string = '', pieces?: number) {\n  const ArtifactSetConstructor = getArtifactSetConstructor(id);\n\n  return new ArtifactSetConstructor(id, pieces);\n}\n\n/* To be implemented\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\nRelic_ReactionWindEnhance,\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionFireEnhance,\n\n// Not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionElectricEnhance: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Requires info about team composition\nRelic_AbsorbTeamElemResist: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Probably can be implemented with a dropdown option for prev received elem dmg\nRelic_ElemDmgEnhanceElemResist: defaultSetBonus,\n*/\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n}\r\n\r\nexport default Reaction;\r\n","import { Element } from '../talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import { Stats, TalentParams } from '../data/types';\nimport { AttackType, Element, ScalingType, TalentValue } from './types';\nimport Resistance from '../stat/Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport CritType from '../modifier/CritType';\n\n// Helper functions\n\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\n\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\n\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\n\nfunction calculateAmplifyingStrengthMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\n\nfunction calculateAmplifyingReactionMultiplier({\n  reaction,\n  stats,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  element: Element;\n}) {\n  const amplifyingStrength = calculateAmplifyingStrengthMultiplier(\n    reaction,\n    element\n  );\n\n  if (amplifyingStrength > 1) {\n    // Caulculate reactionbonus\n    let reactionBonus = 0;\n    switch (reaction) {\n      case Reaction.Vaporize:\n        reactionBonus = stats.vaporizeDmgBonus ?? 0;\n        break;\n      case Reaction.Melt:\n        reactionBonus = stats.meltDmgBonus ?? 0;\n        break;\n      default:\n        break;\n    }\n\n    // Calculate amplifying reaction multiplier\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingStrength * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\n\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let flatDmg = modifier.flatDmg;\n  if (attackType === AttackType.Normal) {\n    flatDmg += modifier.normalAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Charged) {\n    flatDmg += modifier.chargedAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Skill) {\n    flatDmg += modifier.skillFlatDmg ?? 0;\n  }\n\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === CritType.Crit) {\n    crit += stats.critDmg;\n  } else if (modifier.critType === CritType.Average) {\n    let critRate = stats.critRate;\n    if (attackType === AttackType.Charged) {\n      critRate += stats.chargedCritRate ?? 0;\n    } else if (attackType === AttackType.Burst) {\n      critRate += stats.burstCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateAmplifyingReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\n\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  const baseHealing = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n\n  // Incoming healing bonus is ignored because the healer's\n  // incoming healing bonus is not necessarily the same as the\n  // character being healed\n  return baseHealing * (1 + (stats.healingBonus ?? 0));\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n\n// Functions to calculate Talent Values\n\n// Used for all single-hit normal attacks\nexport function normalAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit normal attacks\nexport function normalAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: number[];\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for single-hit charged attacks\nexport function chargedAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for uncharged aim shots\nexport function aimShot({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const element = modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for charged aim shots\nexport function aimShotCharged({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier: multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all physical plunge attacks\nexport function plungeAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionPlunge ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Plunge,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all single-hit skill dmg\nexport function skillSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    scalingType,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit skills\nexport function skillMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for all single-hit burst dmg\nexport function burstSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    element,\n    multiplier,\n    scalingType,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit bursts\nexport function burstMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for damage that does not have an AttackType\nexport function typelessAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.None,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for healing skills/bursts\nexport function healingValue({\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const healing = calculateHealing({\n    stats,\n    multiplier,\n    flatHealing,\n    scalingType,\n  });\n\n  return {\n    damage: [healing],\n  };\n}\n\n// Used for all summons HP\nexport function hpValue({\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    damage: [hp],\n  };\n}\n\n// Used for all shields\nexport function shieldHpValue({\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    damage: [dmgAbsorption],\n  };\n}\n\n// Used for Bennett and Sara's ATK buffs\nexport function atkBuffValue({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const atkBonus = stats.baseAtk * multiplier;\n  return {\n    damage: [atkBonus],\n  };\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('albedo');\n\nconst albedoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  transientBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fatalBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoTalents: Talents = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport albedoTalents from './AlbedoTalent';\n\nexport default class Albedo extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('albedo', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return albedoTalents;\n  }\n}\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  children: CharacterOption[];\n\n  constructor(id: string = '', children: typeof CharacterOption[] = []) {\n    super(id);\n    this.children = children.map((Option) => new Option());\n  }\n\n  unroll(): CharacterOption[] {\n    return [this, ...this.children.flatMap((option) => option.unroll())];\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { Element, TalentType } from '../../talent/types';\r\nimport {\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n  IModifierApplicable,\r\n} from '../../option/Option';\r\n\r\nclass AloyOptionCoil\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('coil');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value > 0) {\r\n        const skillParams = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('aloy')\r\n        );\r\n\r\n        if (this.value >= 4) {\r\n          // Rushing Ice state\r\n          stats.normalDmgBonus = skillParams[7] + (stats.normalDmgBonus ?? 0);\r\n        } else {\r\n          stats.normalDmgBonus =\r\n            skillParams[this.value + 3] + (stats.normalDmgBonus ?? 0);\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value >= 4) {\r\n        modifier.infusionNormal = Element.Cryo;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyOptions = [AloyOptionCoil];\r\nexport default aloyOptions;\r\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport {\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [a1Data, a4Data] = getTalentData('aloy').passives;\r\nconst a1Params = a1Data.params;\r\nconst a4Params = a4Data.params;\r\n\r\nclass AloyOptionAscension1\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('aloyAscension1');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value) {\r\n        stats.atkBonus = a1Params[0] * 2 + (stats.atkBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension1: CharacterPassive = {\r\n  id: 'aloyAscension1',\r\n  ascensionLevel: 1,\r\n  options: [AloyOptionAscension1],\r\n};\r\n\r\nclass AloyOptionAscension4\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('aloyAscension4');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value > 0) {\r\n        let stacks = this.value;\r\n        if (stacks > 10) {\r\n          stacks = 10;\r\n        }\r\n\r\n        const cryoDmgBonus = a4Params[0] * stacks;\r\n        stats.cryoDmgBonus = cryoDmgBonus + (stats.cryoDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension4: CharacterPassive = {\r\n  id: 'aloyAscension4',\r\n  ascensionLevel: 4,\r\n  options: [AloyOptionAscension4],\r\n};\r\n\r\nconst aloyPassives = [aloyAscension1, aloyAscension4];\r\nexport default aloyPassives;\r\n","import {\r\n  Element,\r\n  TalentFn,\r\n  TalentProps,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\n\r\nconst talentData = getTalentData('aloy');\r\n\r\nconst aloyAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(0, 2),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloySkill: Record<string, TalentFn> = {\r\n  freezeBombDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chillwaterBombletDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyTalents: Talents = {\r\n  attack: aloyAttack,\r\n  skill: aloySkill,\r\n  burst: aloyBurst,\r\n};\r\n\r\nexport default aloyTalents;\r\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport aloyOptions from './AloyOption';\nimport aloyPassives from './AloyPassive';\nimport aloyTalents from './AloyTalent';\n\nexport default class Aloy extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('aloy', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return aloyTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return aloyOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return aloyPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('amber');\n\nconst amberAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst amberSkill: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  baronBunnyHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst amberBurst: Record<string, TalentFn> = {\n  dmgPerWave: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  totalDmg: ({ stats, modifier }: TalentProps) => {\n    const talentValue = burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    });\n    talentValue.damage[0] *= 18;\n    return talentValue;\n  },\n};\n\nconst amberTalents: Talents = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport amberTalents from './AmberTalent';\n\nexport default class Amber extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('amber', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return amberTalents;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ayaka');\n\nconst ayakaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[7]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaBurst: Record<string, TalentFn> = {\n  cuttingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  bloomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaTalents: Talents = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ayakaOptions from './AyakaOption';\nimport ayakaTalents from './AyakaTalent';\n\nexport default class Ayaka extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ayaka', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ayakaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ayakaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('barbara');\n\nconst barbaraAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraSkill: Record<string, TalentFn> = {\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  dropletDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraBurst: Record<string, TalentFn> = {\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraTalents: Talents = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport barbaraTalents from './BarbaraTalent';\n\nexport default class Barbara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('barbara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return barbaraTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('beidou').passives;\nconst a4Params = a4Data.params;\n\nclass BeidouOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('beidouAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = a4Params[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = a4Params[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst beidouAscension4: CharacterPassive = {\n  id: 'beidouAscension4',\n  ascensionLevel: 4,\n  options: [BeidouOptionAscension4],\n};\n\nconst beidouPassives = [beidouAscension4];\nexport default beidouPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  chargedAttackSingle,\n  shieldHpValue,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('beidou');\n\nconst beidouAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouSkill: Record<string, TalentFn> = {\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  baseDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  dmgBonusOnHitTaken: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouBurst: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightningDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouTalents: Talents = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalents;\n","import { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport beidouPassives from './BeidouPassive';\nimport beidouTalents from './BeidouTalent';\n\nexport default class Beidou extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('beidou', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return beidouTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return beidouPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  atkBuffValue,\n  burstSingle,\n  chargedAttackMulti,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillMulti,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('bennett');\n\nconst bennettAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargeLevel1Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n  chargeLevel2Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousPerSecond: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  atkBonus: ({ stats, modifier }: TalentProps) =>\n    atkBuffValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettTalents: Talents = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalents;\n","import Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).statMixin !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (option as unknown as IModifierApplicable).modifierMixin !== undefined;\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import {\n  IOptionBoolean,\n  IOptionNumber,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Stats } from '../../data/types';\nimport { getOptionValue } from '../../option/OptionUtils';\nimport { TeamPassive } from '../../passive/types';\n\nclass BennettOptionAtkBuff extends CharacterOption implements IOptionNumber {\n  value = 0;\n\n  constructor() {\n    super('bennettAtkBuff');\n  }\n}\n\nclass BennettOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('bennettBurst', [BennettOptionAtkBuff]);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const atkBuff = getOptionValue(this.children[0]) as number;\n        stats.flatAtk = atkBuff + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n}\n\nconst bennettTeamPassive: TeamPassive = {\n  id: 'bennettTeamPassive',\n  options: [BennettOptionBurst],\n};\nexport default bennettTeamPassive;\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport bennettTalents from './BennettTalent';\nimport bennettTeamPassive from './BennettTeamPassive';\n\nexport default class Bennett extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('bennett', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return bennettTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return bennettTeamPassive;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('chongyun');\n\nconst chongyunAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunTalents: Talents = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport chongyunOptions from './ChongyunOption';\nimport chongyunTalents from './ChongyunTalent';\n\nexport default class Chongyun extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('chongyun', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return chongyunTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return chongyunOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diluc');\n\nconst dilucAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucSkill: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucTalents: Talents = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalents;\n","import { Stats } from '../../data/types';\nimport { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      _talentBurstLevel: number,\n      ascensionLevel: number\n    ) => {\n      if (this.value && ascensionLevel >= 4) {\n        const params = getTalentData('diluc').passives.find(\n          (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n        )?.params;\n        const pyroDmgBonus = params?.[1] ?? NaN;\n\n        stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dilucTalents from './DilucTalent';\nimport dilucOptions from './DilucOption';\n\nexport default class Diluc extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diluc', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dilucTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return dilucOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  shieldHpValue,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diona');\n\nconst dionaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaSkill: Record<string, TalentFn> = {\n  icyPawDmgPerPaw: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpPress: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  shieldHpHold: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier: { ...modifier, dionaHoldSkill: true },\n    }),\n};\n\nconst dionaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  continuousFieldDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousTime: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaTalents: Talents = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dionaTalents from './DionaTalent';\n\nexport default class Diona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dionaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('eula');\n\nconst eulaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  icewhirlBrandDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordBaseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordStackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaTalents: Talents = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport eulaTalents from './EulaTalent';\n\nexport default class Eula extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('eula', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return eulaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('fischl');\n\nconst fischlAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlSkill: Record<string, TalentFn> = {\n  ozDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  summoningDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlBurst: Record<string, TalentFn> = {\n  fallingThunderDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlTalents: Talents = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport fischlTalents from './FischlTalent';\n\nexport default class Fischl extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('fischl', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return fischlTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  hpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ganyu');\n\nconst ganyuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  aimShotChargeLevel1: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowBloomDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  iceLotusHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuBurst: Record<string, TalentFn> = {\n  iceShardDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuTalents: Talents = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ganyuTalents from './GanyuTalent';\n\nexport default class Ganyu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ganyu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ganyuTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('hutao').passives;\nconst a4Params = a4Data.params;\n\nclass HuTaoOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('hutaoAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.pyroDmgBonus = a4Params[1] + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst hutaoAscension4: CharacterPassive = {\n  id: 'hutaoAscension4',\n  ascensionLevel: 4,\n  options: [HuTaoOptionAscension4],\n};\n\nconst hutaoPassives = [hutaoAscension4];\nexport default hutaoPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('hutao');\n\nconst hutaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoSkill: Record<string, TalentFn> = {\n  bloodBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgLowHp: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n\n  hpRegenLowHp: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoTalents: Talents = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      talentSkillLevel: number,\n      _talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let skillParams = getTalentParams(\n          TalentType.Skill,\n          talentSkillLevel,\n          getTalentData('hutao')\n        );\n\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n        let flatAtkBonus = totalHp * skillParams[1];\n        if (flatAtkBonus > stats.baseAtk * skillParams[6]) {\n          flatAtkBonus = stats.baseAtk * skillParams[6];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport hutaoPassives from './HutaoPassive';\nimport hutaoTalents from './HutaoTalent';\nimport hutaoOptions from './HutaoOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Hutao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('hutao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return hutaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return hutaoOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return hutaoPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('jean');\n\nconst jeanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieldEnterExitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  fieldActivationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanTalents: Talents = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport jeanTalents from './JeanTalent';\n\nexport default class Jean extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('jean', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return jeanTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kaeya');\n\nconst kaeyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaTalents: Talents = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kaeyaTalents from './KaeyaTalent';\n\nexport default class Kaeya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kaeya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kaeyaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kazuha');\n\nconst kazuhaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[2],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst kazuhaTalents: Talents = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.elementalAbsorption = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionPlunge = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kazuhaTalents from './KazuhaTalent';\nimport kazuhaOptions from './KazuhaOption';\n\nexport default class Kazuha extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kazuha', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kazuhaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kazuhaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('keqing');\n\nconst keqingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingSkill: Record<string, TalentFn> = {\n  lightningStilettoDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  thunderclapSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Electro,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  consecutiveSlashDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 8,\n      element: Element.Electro,\n      params: Array(8).fill(\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1]\n      ),\n      stats,\n      modifier,\n    }),\n\n  lastAttackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingTalents: Talents = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport keqingTalents from './KeqingTalent';\n\nexport default class Keqing extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('keqing', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return keqingTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('klee');\n\nconst kleeAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeSkill: Record<string, TalentFn> = {\n  jumpyDumptyDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  mineDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeBurst: Record<string, TalentFn> = {\n  sparksNSplashDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeTalents: Talents = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kleeTalents from './KleeTalent';\n\nexport default class Klee extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('klee', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kleeTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('kokomi').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst kokomiAscension0: CharacterPassive = {\r\n  id: 'kokomiAscension0',\r\n  ascensionLevel: 0,\r\n  options: [],\r\n  statMixin: {\r\n    apply: (stats: Stats) => {\r\n      stats.critRate = (stats.critRate ?? 0) - 1;\r\n      if (stats.critRate < 0) {\r\n        stats.critRate = 0;\r\n      }\r\n\r\n      stats.healingBonus = 0.25 + (stats.healingBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiAscension4: CharacterPassive = {\r\n  id: 'kokomiAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  modifierMixin: {\r\n    apply: (modifier: DamageModifier) => {\r\n      modifier.kokomiHealingBonusDmg = a4Params[0];\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiPassives = [kokomiAscension0, kokomiAscension4];\r\nexport default kokomiPassives;\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  burstSingle,\r\n  chargedAttackSingle,\r\n  healingValue,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  ScalingType,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('kokomi');\r\n\r\nconst kokomiAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier: getKokomiChargedAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiSkill: Record<string, TalentFn> = {\r\n  hpRegen: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  rippleDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiSkillModifier(stats, modifier),\r\n    }),\r\n};\r\n\r\nconst kokomiBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      scalingType: ScalingType.Hp,\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiTalents: Talents = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getKokomiNormalAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const normalAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[3] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.normalAttackFlatDmg =\r\n    normalAttackBonusDmg + (newModifier.normalAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiChargedAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const chargedAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[4] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.chargedAttackFlatDmg =\r\n    chargedAttackBonusDmg + (newModifier.chargedAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiSkillModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const skillBonusDmg =\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[8] * stats.flatHp;\r\n  newModifier.skillFlatDmg = skillBonusDmg + (newModifier.skillFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value) {\r\n        modifier.kokomiBurst = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kokomiPassives from './KokomiPassive';\nimport kokomiTalents from './KokomiTalent';\nimport kokomiOptions from './KokomiOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Kokomi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kokomi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kokomiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kokomiOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return kokomiPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('lisa');\n\nconst lisaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack0: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack1: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack2: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack3: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaTalents: Talents = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport lisaTalents from './LisaTalent';\n\nexport default class Lisa extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('lisa', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return lisaTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { TalentType } from '../../talent/types';\n\nclass MonaOptionOmen\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('omen');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('mona')\n        );\n\n        stats.dmgBonus = burstParams[9] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst monaOptions = [MonaOptionOmen];\nexport default monaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('mona');\n\nconst monaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaSkill: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaBurst: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaTalents: Talents = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport monaOptions from './MonaOption';\nimport monaTalents from './MonaTalent';\n\nexport default class Mona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('mona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return monaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return monaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ningguang');\n\nconst ningguangAttack: Record<string, TalentFn> = {\n  normalAtkDmg: ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  starJadeDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  jadeScreenHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangBurst: Record<string, TalentFn> = {\n  dmgPerGem: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangTalents: Talents = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ningguangTalents from './NingguangTalent';\n\nexport default class Ningguang extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ningguang', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ningguangTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  skillSingle,\n  shieldHpValue,\n  healingValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('noelle');\n\nconst noelleAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  firstSwingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleTalents: Talents = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('noelle')\n        );\n\n        const totalDef =\n          (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n          (stats.flatDef ?? 0);\n\n        stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Geo;\n      }\n    },\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport noelleTalents from './NoelleTalent';\nimport noelleOptions from './NoelleOption';\n\nexport default class Noelle extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('noelle', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return noelleTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return noelleOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  healingValue,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('qiqi');\n\nconst qiqiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  heraldOfFrostDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiTalents: Talents = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport qiqiTalents from './QiqiTalent';\n\nexport default class Qiqi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('qiqi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return qiqiTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport { Priority } from '../../option/Mixin';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('raiden').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst raidenAscension4: CharacterPassive = {\r\n  id: 'raidenAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  statMixin: {\r\n    priority: Priority.Last,\r\n    apply: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = a4Params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst raidenPassives = [raidenAscension4];\r\nexport default raidenPassives;\r\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  normalAttackSingle,\r\n  chargedAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  burstMulti,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('raiden');\r\n\r\nconst raidenAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(3, 5),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[10],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenSkill: Record<string, TalentFn> = {\r\n  skillDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  coordinatedAtkDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenBurst: Record<string, TalentFn> = {\r\n  musouNoHitotachiDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[0] + getInitialResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[4] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[5] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[6] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(7, 9)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[9] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(10, 12)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[13] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[14] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[15] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenTalents: Talents = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getInitialResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[1] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n\r\nfunction getAttackResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[2] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentParams, getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value) {\r\n        const params = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('raiden')\r\n        );\r\n\r\n        const burstDmgBonus = params[3] * 90;\r\n        stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value < 0) modifier.resolveStacks = 0;\r\n      else if (this.value > 60) modifier.resolveStacks = 60;\r\n      else modifier.resolveStacks = this.value;\r\n    },\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport raidenPassives from './RaidenPassive';\nimport raidenTalents from './RaidenTalent';\nimport raidenOptions from './RaidenOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Raiden extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('raiden', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return raidenTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return raidenOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return raidenPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('razor');\n\nconst razorAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorTalents: Talents = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport razorTalents from './RazorTalent';\n\nexport default class Razor extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('razor', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return razorTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('rosaria');\n\nconst rosariaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n  iceLanceDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaTalents: Talents = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport rosariaTalents from './RosariaTalent';\n\nexport default class Rosaria extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('rosaria', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return rosariaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  atkBuffValue,\r\n  burstSingle,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  TalentFn,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('sara');\r\n\r\nconst saraAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraSkill: Record<string, TalentFn> = {\r\n  tenguJuuraiAmbushDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  atkBonus: ({ stats, modifier }: TalentProps) =>\r\n    atkBuffValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraBurst: Record<string, TalentFn> = {\r\n  tenguJuuraiTitanbreakerDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  tenguJuuraiStormclusterDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraTalents: Talents = {\r\n  attack: saraAttack,\r\n  skill: saraSkill,\r\n  burst: saraBurst,\r\n};\r\n\r\nexport default saraTalents;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport saraTalents from './SaraTalent';\n\nexport default class Sara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return saraTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sayu');\n\nconst sayuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuSkill: Record<string, TalentFn> = {\n  fuufuuWindwheelDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickPressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickHoldDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWindwheelElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n\n  fuufuuWhirlwindKickElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[4],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sayuBurst: Record<string, TalentFn> = {\n  activationDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  activationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuTalents: Talents = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sayuTalents from './SayuTalent';\nimport sayuOptions from './SayuOption';\n\nexport default class Sayu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sayu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sayuTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sayuOptions;\n  }\n}\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sucrose');\n\nconst sucroseAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sucroseTalents: Talents = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sucroseOptions from './SucroseOption';\nimport sucroseTalents from './SucroseTalent';\n\nexport default class Sucrose extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sucrose', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sucroseTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sucroseOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  typelessAttack,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('tartaglia');\n\nconst tartagliaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n\n  riptideFlashDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  riptideBurstDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaSkill: Record<string, TalentFn> = {\n  stanceChangeDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(8, 10),\n      stats,\n      modifier,\n    }),\n\n  riptideSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaBurst: Record<string, TalentFn> = {\n  burstDmgMelee: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgRanged: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  riptideBlastDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaTalents: Talents = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nexport const tartagliaAscension0: CharacterPassive = {\n  id: 'tartagliaAscension0',\n  ascensionLevel: 0,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.talentAttackLevel += 1;\n    },\n  },\n};\n\nconst tartagliaPassives = [tartagliaAscension0];\nexport default tartagliaPassives;\n","import { TeamPassive } from '../../passive/types';\nimport { tartagliaAscension0 } from './TartagliaPassive';\n\nconst tartagliaTeamPassive: TeamPassive = tartagliaAscension0;\nexport default tartagliaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport tartagliaTalents from './TartagliaTalent';\nimport tartagliaPassives from './TartagliaPassive';\nimport tartagliaTeamPassive from './TartagliaTeamPassive';\n\nexport default class Tartaglia extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('tartaglia', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return tartagliaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return tartagliaPassives;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return tartagliaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('thoma');\n\nconst thomaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  shieldHpMax: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieryCollapseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier: getThomaFieryCollapseModifier(stats, modifier),\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatBonus: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaTalents: Talents = {\n  attack: thomaAttack,\n  skill: thomaSkill,\n  burst: thomaBurst,\n};\n\nexport default thomaTalents;\n\n// Helper functions\n\nfunction getThomaFieryCollapseModifier(\n  stats: Stats,\n  modifier: DamageModifier\n): DamageModifier {\n  if (!modifier.thomaHpBonusDmg) {\n    return modifier;\n  }\n\n  const flatDmg = modifier.thomaHpBonusDmg * stats.flatHp + modifier.flatDmg;\n\n  return { ...modifier, flatDmg };\n}\n","import { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('thoma').passives;\nconst a4Params = a4Data.params;\n\nconst thomaAscension4: CharacterPassive = {\n  id: 'thomaAscension4',\n  ascensionLevel: 4,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.thomaHpBonusDmg = a4Params[0];\n    },\n  },\n};\n\nconst thomaPassives = [thomaAscension4];\nexport default thomaPassives;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport Constellation, {\n  ConstellationBurst,\n  ConstellationSkill,\n} from '../../constellation/Constellation';\n\nconst [, , , , , { params: c6Params }] = getTalentData('thoma').constellations;\n\nexport function ThomaOptionConstellation6(id?: string) {\n  return class ThomaOptionConstellation6\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super(id ?? 'thomaConstellation6');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = c6Params[0] + (stats.normalDmgBonus ?? 0);\n          stats.chargedDmgBonus = c6Params[0] + (stats.chargedDmgBonus ?? 0);\n          stats.plungeDmgBonus = c6Params[0] + (stats.plungeDmgBonus ?? 0);\n        }\n      },\n    };\n  };\n}\n\nconst thomaConstellation3 = ConstellationSkill(3);\nconst thomaConstellation5 = ConstellationBurst(5);\n\nconst thomaConstellation6: Constellation = {\n  constellationLevel: 6,\n  options: [ThomaOptionConstellation6()],\n};\n\nconst thomaConstellations = [\n  thomaConstellation3,\n  thomaConstellation5,\n  thomaConstellation6,\n];\nexport default thomaConstellations;\n","import DamageModifier from '../modifier/DamageModifer';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { StatMixin, ModifierMixin } from '../option/Mixin';\n\nexport default interface Constellation {\n  constellationLevel: number;\n  options?: typeof CharacterOption[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n\nexport function ConstellationSkill(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentSkillLevel += 3;\n      },\n    },\n  };\n}\n\nexport function ConstellationBurst(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentBurstLevel += 3;\n      },\n    },\n  };\n}\n","import { TeamPassive } from '../../passive/types';\nimport { ThomaOptionConstellation6 } from './ThomaConstellation';\n\nconst thomaTeamPassive: TeamPassive = {\n  id: 'thomaTeamPassive',\n  options: [ThomaOptionConstellation6('thomaConstellation6Team')],\n};\n\nexport default thomaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport thomaTalents from './ThomaTalent';\nimport thomaPassives from './ThomaPassive';\nimport Constellation from '../../constellation/Constellation';\nimport thomaConstellations from './ThomaConstellation';\nimport thomaTeamPassive from './ThomaTeamPassive';\n\nexport default class Thoma extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('thoma', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return thomaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return thomaPassives;\n  }\n\n  getAllConstellations(): Constellation[] {\n    return thomaConstellations;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return thomaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('venti');\n\nconst ventiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst ventiTalents: Talents = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ventiTalents from './VentiTalent';\nimport ventiOptions from './VentiOption';\n\nexport default class Venti extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('venti', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ventiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ventiOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiangling');\n\nconst xianglingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingSkill: Record<string, TalentFn> = {\n  guobaDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingBurst: Record<string, TalentFn> = {\n  swing1HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  swing2HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  swing3HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  pyronadoDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingTalents: Talents = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xianglingTalents from './XianglingTalent';\n\nexport default class Xiangling extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiangling', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xianglingTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('xiao')\n        );\n\n        stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiao');\n\nconst xiaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoTalents: Talents = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n};\n\nexport default xiaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xiaoOptions from './XiaoOption';\nimport xiaoTalents from './XiaoTalent';\n\nexport default class Xiao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xiaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return xiaoOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, TalentFn, Talents, Element, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('xingqiu');\n\nconst xingqiuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(7, 9),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuBurst: Record<string, TalentFn> = {\n  swordRainDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuTalents: Talents = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xingqiuTalents from './XingqiuTalent';\n\nexport default class Xingqiu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xingqiu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xingqiuTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xinyan');\n\nconst xinyanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanSkill: Record<string, TalentFn> = {\n  swingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel1: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel2: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel3: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Physical,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  pyroDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanTalents: Talents = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xinyanTalents from './XinyanTalent';\n\nexport default class Xinyan extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xinyan', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xinyanTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('yanfei')\n        );\n        stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('yanfei');\n\nconst yanfeiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal0: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal1: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal2: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal3: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal4: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[15],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[16],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[17],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiTalents: Talents = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yanfeiOptions from './YanfeiOption';\nimport yanfeiTalents from './YanfeiTalent';\n\nexport default class Yanfei extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yanfei', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yanfeiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yanfeiOptions;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionNormal = Element.Pyro;\n        modifier.yoimiyaSkill = true;\n      }\n    },\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [a1Data] = getTalentData('yoimiya').passives;\nconst a1Params = a1Data.params;\n\nclass YoimiyaOptionAscension1\n  extends CharacterOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('yoimiyaAscension1');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      let pyroDmgBonus = this.value * a1Params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    },\n  };\n}\n\nconst yoimiyaAscension1: CharacterPassive = {\n  id: 'yoimiyaAscension1',\n  ascensionLevel: 1,\n  options: [YoimiyaOptionAscension1],\n};\n\nconst yoimiyaPassives = [yoimiyaAscension1];\nexport default yoimiyaPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('yoimiya');\n\nconst yoimiyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[0],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[3],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  kindlingArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  aurousBlazeExplosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaTalents: Talents = {\n  attack: yoimiyaAttack,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalents;\n\n// Helper functions\n\nfunction getYoimiyaNormalAttackMultiplier(\n  multiplier: number,\n  modifier: DamageModifier\n): number {\n  if (!modifier.yoimiyaSkill) {\n    return multiplier;\n  }\n\n  return (\n    multiplier *\n    getTalentParams(TalentType.Skill, modifier.talentSkillLevel, talentData)[3]\n  );\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yoimiyaOptions from './YoimiyaOption';\nimport yoimiyaPassives from './YoimiyaPassive';\nimport yoimiyaTalents from './YoimiyaTalent';\n\nexport default class Yoimiya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yoimiya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yoimiyaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yoimiyaOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return yoimiyaPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('zhongli');\n\nconst zhongliAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliSkill: Record<string, TalentFn> = {\n  stoneSteeleDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  resonanceDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliTalents: Talents = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalents;\n","import { IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { TeamPassive } from '../../passive/types';\n\nclass ZhongliOptionShield extends CharacterOption implements IOptionBoolean {\n  value = false;\n\n  constructor() {\n    super('zhongliShield');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        Object.values(Element).forEach((element) =>\n          modifier.enemyResReduction.set(element, 0.2)\n        );\n      }\n    },\n  };\n}\n\nconst zhongliTeamPassive: TeamPassive = {\n  id: 'zhongliTeamPassive',\n  options: [ZhongliOptionShield],\n};\nexport default zhongliTeamPassive;\n","import Albedo from './albedo/Albedo';\nimport Aloy from './aloy/Aloy';\nimport Amber from './amber/Amber';\nimport Ayaka from './ayaka/Ayaka';\nimport Barbara from './barbara/Barbara';\nimport Beidou from './beidou/Beidou';\nimport Bennett from './bennett/Bennett';\nimport Character from './Character';\nimport Chongyun from './chongyun/Chongyun';\nimport Diluc from './diluc/Diluc';\nimport Diona from './diona/Diona';\nimport Eula from './eula/Eula';\nimport Fischl from './fischl/Fischl';\nimport Ganyu from './ganyu/Ganyu';\nimport Hutao from './hutao/Hutao';\nimport Jean from './jean/Jean';\nimport Kaeya from './kaeya/Kaeya';\nimport Kazuha from './kazuha/Kazuha';\nimport Keqing from './keqing/Keqing';\nimport Klee from './klee/Klee';\nimport Kokomi from './kokomi/Kokomi';\nimport Lisa from './lisa/Lisa';\nimport Mona from './mona/Mona';\nimport Ningguang from './ningguang/Ningguang';\nimport Noelle from './noelle/Noelle';\nimport Qiqi from './qiqi/Qiqi';\nimport Raiden from './raiden/Raiden';\nimport Razor from './razor/Razor';\nimport Rosaria from './rosaria/Rosaria';\nimport Sara from './sara/Sara';\nimport Sayu from './sayu/Sayu';\nimport Sucrose from './sucrose/Sucrose';\nimport Tartaglia from './tartaglia/Tartaglia';\nimport Thoma from './thoma/Thoma';\nimport Venti from './venti/Venti';\nimport Xiangling from './xiangling/Xiangling';\nimport Xiao from './xiao/Xiao';\nimport Xingqiu from './xingqiu/Xingqiu';\nimport Xinyan from './xinyan/Xinyan';\nimport Yanfei from './yanfei/Yanfei';\nimport Yoimiya from './yoimiya/Yoimiya';\nimport Zhongli from './zhongli/Zhongli';\n\nconst characters: Record<string, typeof Character> = {\n  albedo: Albedo,\n  aloy: Aloy,\n  amber: Amber,\n  ayaka: Ayaka,\n  barbara: Barbara,\n  beidou: Beidou,\n  bennett: Bennett,\n  chongyun: Chongyun,\n  diluc: Diluc,\n  diona: Diona,\n  eula: Eula,\n  fischl: Fischl,\n  ganyu: Ganyu,\n  hutao: Hutao,\n  jean: Jean,\n  kaeya: Kaeya,\n  kazuha: Kazuha,\n  keqing: Keqing,\n  klee: Klee,\n  kokomi: Kokomi,\n  lisa: Lisa,\n  mona: Mona,\n  ningguang: Ningguang,\n  noelle: Noelle,\n  qiqi: Qiqi,\n  raiden: Raiden,\n  razor: Razor,\n  rosaria: Rosaria,\n  sara: Sara,\n  sayu: Sayu,\n  sucrose: Sucrose,\n  tartaglia: Tartaglia,\n  thoma: Thoma,\n  venti: Venti,\n  xiangling: Xiangling,\n  xiao: Xiao,\n  xingqiu: Xingqiu,\n  xinyan: Xinyan,\n  yanfei: Yanfei,\n  yoimiya: Yoimiya,\n  zhongli: Zhongli,\n};\n\nfunction getCharacterConstructor(id: string): typeof Character {\n  return characters[id] ?? Character;\n}\n\nexport function initCharacter(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  constellationLevel?: number\n): Character {\n  const CharacterConstructor = getCharacterConstructor(id);\n\n  return new CharacterConstructor(id, level, hasAscended, constellationLevel);\n}\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport zhongliTalents from './ZhongliTalent';\nimport zhongliTeamPassive from './ZhongliTeamPassive';\n\nexport default class Zhongli extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('zhongli', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return zhongliTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return zhongliTeamPassive;\n  }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          type='number'\n          size='sm'\n          value={displayString}\n          onInput={this.handleInput}\n          className={`number-input ${this.props.className ?? ''}`}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\nimport Row from 'react-bootstrap/esm/Row';\n\nclass InputRow extends React.Component {\n  render() {\n    return <Row className='input-row no-gutters'>{this.props.children}</Row>;\n  }\n}\n\nexport default InputRow;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          as='select'\n          size='sm'\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={`picker ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </Form.Control>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../artifact/Artifact';\nimport { propMapping } from '../data/Data';\nimport { capitalize, getStatDisplayValue } from '../stat/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactRarity = (rarity: number) => {\n    this.props.artifact.rarity = rarity;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactLevel = (level: number) => {\n    this.props.artifact.level = level;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatInputValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-rarity`}\n            label='Rarity:'\n            defaultValue={1}\n            value={artifact.rarity}\n            onInput={this.setArtifactRarity}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-level`}\n            label='Level:'\n            defaultValue={0}\n            value={artifact.level}\n            onInput={this.setArtifactLevel}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label='Main Stat:'\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <p>\n            {getStatDisplayValue(\n              artifact.mainStat.stat,\n              artifact.mainStat.value\n            )}\n          </p>\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import { ArchaicPetra4PcOption } from '../../artifact/artifactSet/ArchaicPetra';\nimport { Instructor4PcOption } from '../../artifact/artifactSet/Instructor';\nimport { NoblesseOblige4PcOption } from '../../artifact/artifactSet/NoblesseOblige';\nimport { Tenacity4PcOption } from '../../artifact/artifactSet/Tenacity';\nimport { ViridescentVenerer4PcOption } from '../../artifact/artifactSet/ViridescentVenerer';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\n\nconst artifactTeamBuffs: Record<string, typeof ArtifactSetOption> = {\n  archaicPetra4Pc: ArchaicPetra4PcOption,\n  instructor4Pc: Instructor4PcOption,\n  noblesseOblige4Pc: NoblesseOblige4PcOption,\n  tenacity4Pc: Tenacity4PcOption,\n  viridescentVenerer4Pc: ViridescentVenerer4PcOption,\n};\n\nexport default artifactTeamBuffs;\n","import {\n  AppState,\n  GetDamageModifierFn,\n  GetModifierMixinsFn,\n  GetStatMixinsFn,\n} from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { getAscensionLevel } from '../character/Character';\nimport { Stats } from '../data/types';\nimport { getOptionValue, setOptionValue } from '../option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport Option from '../option/Option';\nimport { getTotalStatsAt } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\n\nexport function calculateTalentValue(\n  talentType: string,\n  talentId: string,\n  options: Option[],\n  appState: AppState,\n  artifactSetBonuses: Stats,\n  getDamageModifier: GetDamageModifierFn,\n  getStatMixins: GetStatMixinsFn,\n  getModifierMixins: GetModifierMixinsFn,\n  overrideArtifacts?: Artifact[]\n): TalentValue {\n  // Initialize a set of all options\n  const {\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  } = initializeAllOptions(appState);\n\n  const allOptions = [\n    ...characterOptions,\n    ...weaponOptions,\n    ...artifactSetOptions,\n    ...teamOptions,\n    ...artifactBuffOptions,\n  ];\n\n  // Override option values\n  options.forEach((option) => {\n    let oldOption = allOptions.find((oldOption) => oldOption.id === option.id);\n    if (oldOption !== undefined) {\n      setOptionValue(oldOption, getOptionValue(option));\n    } else if (option.id === 'reaction') {\n      characterOptions.push(option as ReactionOption);\n    }\n  });\n\n  // Calculate stats and modifier\n  const statMixins = getStatMixins({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n    updateCache: false,\n  });\n\n  const stats = getTotalStatsAt(\n    appState.character,\n    appState.weapon,\n    artifactSetBonuses,\n    overrideArtifacts ?? appState.artifacts,\n    appState.talentAttackLevel,\n    appState.talentSkillLevel,\n    appState.talentBurstLevel,\n    statMixins\n  );\n\n  const modifierMixins = getModifierMixins({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n    updateCache: false,\n  });\n\n  const modifier = getDamageModifier({ modifierMixins });\n\n  // Calculate talent value\n  const talentFn = appState.character.talentFns[talentType]?.[talentId];\n\n  const talentValue = talentFn?.({ stats, modifier }) ?? { damage: [NaN] };\n\n  return talentValue;\n}\n\nexport function initializeAllOptions(appState: AppState) {\n  const characterOptions = [\n    ...appState.character.getCharacterOptions(),\n    ...appState.character.getPassiveOptions(\n      getAscensionLevel(\n        appState.character.level,\n        appState.character.hasAscended\n      )\n    ),\n    ...appState.character.getConstellationsOptions(\n      appState.character.constellationLevel\n    ),\n  ];\n  appState.characterOptions.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, getOptionValue(option));\n    }\n  });\n\n  const weaponOptions = appState.weapon.getPassiveOptions();\n  appState.weaponOptions.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, getOptionValue(option));\n    }\n  });\n\n  const artifactSetOptions = appState.artifactSets.flatMap((artifactSet) =>\n    artifactSet.getOptions(artifactSet.pieces)\n  );\n  appState.artifactSetOptions.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, getOptionValue(option));\n    }\n  });\n\n  const teamOptions = appState.teamCharacters.flatMap((character) =>\n    character.getTeamOptions()\n  );\n  appState.teamOptions.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, getOptionValue(option));\n    }\n  });\n\n  const artifactBuffOptions = appState.artifactBuffOptions.flatMap((option) => {\n    const OptionConstructor = artifactTeamBuffs[option.id];\n    if (OptionConstructor !== undefined) {\n      let artifactOption = new OptionConstructor();\n      setOptionValue(artifactOption, getOptionValue(option));\n      return [artifactOption];\n    }\n\n    return [];\n  });\n\n  return {\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  };\n}\n","import {\n  AppState,\n  GetDamageModifierFn,\n  GetModifierMixinsFn,\n  GetStatMixinsFn,\n} from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { Stats } from '../data/types';\nimport { calculateTalentValue } from '../dps/DPSCalculator';\nimport { getTotalStatsAt } from '../stat/Stat';\n\nexport type RollDistribution = {\n  stat: string;\n  rolls: number;\n};\n\ntype SubstatOptimzerResult = {\n  subStatRolls: RollDistribution[];\n  artifacts: Artifact[];\n};\n\n// Average substat rolls, as per KQM guidelines\nexport const substats: Record<string, number> = {\n  hpBonus: 0.0496,\n  flatHp: 253.94,\n  atkBonus: 0.0496,\n  flatAtk: 16.54,\n  defBonus: 0.062,\n  flatDef: 19.68,\n  elementalMastery: 19.82,\n  energyRecharge: 0.0551,\n  critRate: 0.0331,\n  critDmg: 0.0662,\n};\n\n// Optimize substats according to KQM standardized guidelines\n// 20 preallocated fixed subs (2 of each substat)\n// maxRolls liquid subs (default/max = 20)\n// each sub type can have maximum 2 rolls per different main stat type\nexport function optimizeSubstats(\n  possibleStats: string[],\n  maxRolls: number,\n  erThreshold: number,\n  appState: AppState,\n  artifactSetBonuses: Stats,\n  getDamageModifier: GetDamageModifierFn,\n  getStatMixins: GetStatMixinsFn,\n  getModifierMixins: GetModifierMixinsFn\n): SubstatOptimzerResult {\n  let maxDmg = 0;\n  let optimalSubstatRolls: RollDistribution[] = [];\n  let optimalArtifacts: Artifact[] = appState.artifacts;\n\n  // Roll ER to reach threshold\n  const baseArtifacts = generateBaseArtifacts(appState.artifacts);\n  const baseTotalStats = getTotalStatsAt(\n    appState.character,\n    appState.weapon,\n    artifactSetBonuses,\n    baseArtifacts,\n    appState.talentAttackLevel,\n    appState.talentSkillLevel,\n    appState.talentBurstLevel,\n    getStatMixins()\n  );\n  const baseEr = baseTotalStats.energyRecharge ?? 0;\n\n  let baseErRolls = Math.ceil((erThreshold - baseEr) / substats.energyRecharge);\n\n  const erMainStatCount = baseArtifacts\n    .map((artifact) => artifact.mainStat.stat)\n    .filter((mainStat) => mainStat === 'energyRecharge').length;\n\n  if (baseErRolls < 0) {\n    baseErRolls = 0;\n  } else if (baseErRolls > 2 * (5 - erMainStatCount)) {\n    baseErRolls = 2 * (5 - erMainStatCount);\n  }\n\n  // Generate all combinations\n  const combinations = generateRollCombinationsKqm(\n    possibleStats,\n    maxRolls - baseErRolls,\n    appState.artifacts.map((artifact) => artifact.mainStat.stat),\n    baseErRolls\n  );\n\n  combinations.forEach((combination) => {\n    // Add in ER threshold rolls\n    if (baseErRolls > 0) {\n      const erDistribution = combination.find(\n        ({ stat }) => stat === 'energyRecharge'\n      );\n      if (erDistribution === undefined) {\n        combination.push({ stat: 'energyRecharge', rolls: baseErRolls });\n      } else {\n        erDistribution.rolls += baseErRolls;\n      }\n    }\n\n    const artifacts = generateBaseArtifacts(appState.artifacts);\n\n    addRollsToArtifacts(combination, artifacts);\n\n    const damage = appState.rotation.reduce((acc, attack) => {\n      const talentValue = calculateTalentValue(\n        attack.talentType,\n        attack.talentId,\n        attack.options,\n        appState,\n        artifactSetBonuses,\n        getDamageModifier,\n        getStatMixins,\n        getModifierMixins,\n        artifacts\n      );\n      const totalDmg = talentValue.damage.reduce(\n        (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n        0\n      );\n      const multiplier = !isNaN(attack.multiplier) ? attack.multiplier : 0;\n      return acc + totalDmg * multiplier;\n    }, 0);\n\n    // Update optimal rolls\n    if (damage > maxDmg) {\n      optimalSubstatRolls = combination;\n      optimalArtifacts = artifacts;\n      maxDmg = damage;\n    }\n  });\n\n  return {\n    subStatRolls: optimalSubstatRolls,\n    artifacts: optimalArtifacts,\n  };\n}\n\n// Recursive function to generate all substat combinations according to KQM 2*n rule\nfunction generateRollCombinationsKqm(\n  possibleStats: string[],\n  maxRolls: number,\n  mainStats: string[],\n  baseErRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const sameMainStatCount = mainStats.filter(\n    (mainStat) => possibleStats[0] === mainStat\n  ).length;\n  let currentMaxRolls = Math.min((5 - sameMainStatCount) * 2, maxRolls);\n  if (possibleStats[0] === 'energyRecharge') {\n    currentMaxRolls -= baseErRolls;\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = currentMaxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinationsKqm(\n      possibleStats.slice(1),\n      maxRolls - i,\n      mainStats,\n      baseErRolls\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n\n// Recursive function to generate all combinations of possibleStats.length numbers that sum to maxRolls\n// Generated combinations are not guaranteed to be valid substat combinations\n/*\nfunction generateRollCombinations(\n  possibleStats: string[],\n  maxRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = maxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinations(\n      possibleStats.slice(1),\n      maxRolls - i\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n*/\n\n// Generate artifacts with 2 of each substat\nfunction generateBaseArtifacts(prevArtifacts: Artifact[]): Artifact[] {\n  const artifacts = prevArtifacts.map((artifact) => {\n    return new Artifact(\n      artifact.type,\n      artifact.rarity,\n      artifact.level,\n      artifact.mainStat.stat\n    );\n  });\n\n  // Set artifact substats according to currentSubstatRolls\n  let iArtifact = 0;\n  let jArtifact = 0;\n  Object.entries(substats).forEach(([stat, value]) => {\n    artifacts[iArtifact].setSubStatProp(jArtifact, stat);\n    artifacts[iArtifact].setSubStatValue(jArtifact, value * 2);\n    if (++jArtifact >= 4) {\n      jArtifact = 0;\n      if (++iArtifact >= 5) {\n        // This really should not happen\n        iArtifact = 0;\n      }\n    }\n  });\n\n  return artifacts;\n}\n\n// Add liquid subs to fixed subs without replacing any fixed subs\nfunction addRollsToArtifacts(\n  combination: RollDistribution[],\n  artifacts: Artifact[]\n) {\n  const subStats = artifacts.flatMap((artifact) => artifact.subStats);\n  combination.forEach(({ stat, rolls }) => {\n    const subStat = subStats.find((inputStat) => inputStat.stat === stat);\n    if (subStat === undefined) {\n      let sIndex = 0;\n      artifacts\n        .find((artifact) =>\n          artifact.subStats.find((inputStat, i) => {\n            sIndex = i;\n            return isNaN(inputStat.value);\n          })\n        )\n        ?.setSubStatValue(sIndex, substats[stat] * rolls);\n    } else {\n      subStat.setValue(subStat.value + substats[stat] * rolls);\n    }\n  });\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <div>\n        <Form.Check\n          type='checkbox'\n          className={`checkbox ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.isLabelShown() ? (\n            <Form.Check.Label>{this.props.label}</Form.Check.Label>\n          ) : (\n            <Form.Check.Label></Form.Check.Label>\n          )}\n\n          <Form.Check.Input\n            type='checkbox'\n            checked={value}\n            onChange={this.handleChange}\n          />\n        </Form.Check>\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\r\nimport Row from 'react-bootstrap/esm/Row';\r\n\r\nclass InputBlock extends React.Component {\r\n  render() {\r\n    return <Row className='input-block no-gutters'>{this.props.children}</Row>;\r\n  }\r\n}\r\n\r\nexport default InputBlock;\r\n","import React from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Button from 'react-bootstrap/esm/Button';\nimport Card from 'react-bootstrap/esm/Card';\nimport {\n  AppState,\n  GetDamageModifierFn,\n  GetModifierMixinsFn,\n  GetStatMixinsFn,\n} from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { propMapping } from '../data/Data';\nimport { Stats } from '../data/types';\nimport {\n  optimizeSubstats,\n  RollDistribution,\n  substats,\n} from '../optimization/Optimization';\nimport Checkbox from './Checkbox';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype OptimizerBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  getDamageModifier: GetDamageModifierFn;\n  getStatMixins: GetStatMixinsFn;\n  getModifierMixins: GetModifierMixinsFn;\n};\n\ntype OptimizerBlockState = {\n  maxRolls: number;\n  selectedSubstats: string[];\n  erThreshold: number;\n  substatRolls: RollDistribution[];\n};\n\nclass OptimizerBlock extends React.Component<\n  OptimizerBlockProps,\n  OptimizerBlockState\n> {\n  state: OptimizerBlockState = {\n    maxRolls: 20,\n    selectedSubstats: [],\n    erThreshold: 100,\n    substatRolls: [],\n  };\n\n  setMaxRolls = (maxRolls: number) => {\n    this.setState({ maxRolls });\n  };\n\n  setSelectedSubstats = (stat: string) => (selected: boolean) => {\n    if (selected) {\n      if (!this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: [...this.state.selectedSubstats, stat],\n        });\n      }\n    } else {\n      if (this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: this.state.selectedSubstats.filter(\n            (substat) => substat !== stat\n          ),\n        });\n      }\n    }\n  };\n\n  setErThreshold = (value: number) => {\n    if (isNaN(value)) {\n      this.setState({ erThreshold: 0 });\n    } else {\n      this.setState({ erThreshold: value });\n    }\n  };\n\n  onOptimizeClick = () => {\n    const result = optimizeSubstats(\n      this.state.selectedSubstats,\n      this.state.maxRolls,\n      this.state.erThreshold / 100,\n      this.props.appState,\n      this.props.artifactSetBonuses,\n      this.props.getDamageModifier,\n      this.props.getStatMixins,\n      this.props.getModifierMixins\n    );\n\n    this.props.updateTotalStats({ artifacts: result.artifacts });\n    this.props.setAppState({ artifacts: result.artifacts });\n    this.setState({ substatRolls: result.subStatRolls });\n  };\n\n  render() {\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='0'\n            className='bg-transparent border-0'\n          >\n            <h3>Substat Optimizer</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey='0'>\n            <Card.Body>\n              <InputBlock>\n                <p>Fixed Substats: 20</p>\n\n                <InputRow>\n                  <IntInput\n                    className='level-input'\n                    id={'optimizer-liquid-substats'}\n                    label='Liquid Substats:'\n                    defaultValue={20}\n                    value={this.state.maxRolls}\n                    onInput={this.setMaxRolls}\n                  />\n                </InputRow>\n              </InputBlock>\n\n              <InputBlock>\n                <p>Select substats to optimize:</p>\n                {Object.keys(substats).map((stat) => (\n                  <InputRow key={stat}>\n                    <Checkbox\n                      id={`optimizer-selected-substats-${stat}`}\n                      label={`${propMapping[stat].name}`}\n                      defaultValue={false}\n                      value={this.state.selectedSubstats.includes(stat)}\n                      onChange={this.setSelectedSubstats(stat)}\n                    />\n                  </InputRow>\n                ))}\n              </InputBlock>\n\n              <InputBlock>\n                <InputRow>\n                  <FloatInput\n                    className='stat-input'\n                    id={'optimizer-er-threshold'}\n                    label='ER Threshold:'\n                    defaultValue={100}\n                    value={this.state.erThreshold}\n                    onInput={this.setErThreshold}\n                  />\n                </InputRow>\n              </InputBlock>\n\n              <InputBlock>\n                <InputRow>\n                  <Button\n                    variant='secondary'\n                    size='sm'\n                    onClick={this.onOptimizeClick}\n                  >\n                    Optimize\n                  </Button>\n                </InputRow>\n              </InputBlock>\n\n              {this.state.substatRolls.length > 0 && (\n                <InputBlock>\n                  <p>Liquid roll distribution:</p>\n                  {this.state.substatRolls.map(({ stat, rolls }) => (\n                    <p key={stat}>\n                      {propMapping[stat].name}: {rolls}\n                    </p>\n                  ))}\n                </InputBlock>\n              )}\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default OptimizerBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport {\n  AppState,\n  GetDamageModifierFn,\n  GetModifierMixinsFn,\n  GetStatMixinsFn,\n} from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { Stats } from '../data/types';\nimport ArtifactBlock from './ArtifactBlock';\nimport OptimizerBlock from './OptimizerBlock';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  getDamageModifier: GetDamageModifierFn;\n  getStatMixins: GetStatMixinsFn;\n  getModifierMixins: GetModifierMixinsFn;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Col\n        id='artifact-column'\n        className='artifact-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='artifact-heading'>\n          <h2>Artifacts</h2>\n        </div>\n        <OptimizerBlock {...this.props} />\n        <div className='result-block'>\n          {appState.artifacts.map((artifact) => (\n            <ArtifactBlock\n              artifact={artifact}\n              updateArtifactState={this.updateArtifactState}\n              key={artifact.type}\n            />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../option';\nimport { IOptionBoolean, IOptionNumber, IOptionPicker } from '../option/Option';\nimport { capitalize, getOptionName } from '../stat/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n  isLabelShown?: boolean;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n          isLabelShown={this.props.isLabelShown}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n          isLabelShown={this.props.isLabelShown}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          isLabelShown={this.props.isLabelShown}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport Reaction from '../../modifier/Reaction';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ReactionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = Object.values(Reaction);\n\n  constructor() {\n    super('reaction');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.reaction = this.value as Reaction;\n      } else {\n        modifier.reaction = Reaction.None;\n      }\n    },\n  };\n}\n\nexport default ReactionOption;\n","import React from 'react';\nimport Option from '../option/Option';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\nimport { optionMapping } from '../data/Data';\nimport OptionInput from './OptionInput';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\n\ntype DPSOptionInputProps = {\n  setOption: (option?: Option) => void;\n  options: Option[];\n  option?: Option;\n  index: number;\n};\n\nclass DPSOptionInput extends React.Component<DPSOptionInputProps> {\n  setOptionId = (id: string) => {\n    const OptionConstructor = this.props.options.find(\n      (option) => option.id === id\n    )?.constructor as { new (): Option };\n\n    if (OptionConstructor !== undefined) {\n      this.props.setOption(new OptionConstructor());\n    } else if (id === 'reaction') {\n      this.props.setOption(new ReactionOption());\n    } else {\n      this.props.setOption();\n    }\n  };\n\n  updateOptions = () => {\n    this.props.setOption(this.props.option);\n  };\n\n  render() {\n    return (\n      <InputRow>\n        <Picker\n          id={`dps-attack-option-${this.props.index}`}\n          label=''\n          defaultValue=''\n          value={this.props.option?.id ?? ''}\n          onChange={this.setOptionId}\n          isLabelShown={false}\n          className='ml-5'\n        >\n          <Picker.Item value='' label='' />\n          <Picker.Item value='reaction' label='Reaction' />\n          {this.props.options.map((option) => (\n            <Picker.Item\n              key={option.id}\n              value={option.id}\n              label={optionMapping[option.id]}\n            />\n          ))}\n        </Picker>\n\n        {this.props.option && (\n          <OptionInput\n            option={this.props.option}\n            updateOptions={this.updateOptions}\n            isLabelShown={false}\n          />\n        )}\n      </InputRow>\n    );\n  }\n}\n\nexport default DPSOptionInput;\n","import React from 'react';\nimport InputRow from './InputRow';\nimport { Attack } from './DPSColumn';\nimport Picker from './Picker';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport IntInput from './IntInput';\nimport { TalentValueSet } from '../talent/types';\nimport DPSOptionInput from './DPSOptionInput';\nimport Option from '../option';\n\ntype DPSAttackInputProps = {\n  setAttack: (attack: Attack) => void;\n  attack: Attack;\n  index: number;\n  talentValues: TalentValueSet;\n  options: Option[];\n};\n\nclass DPSAttackInput extends React.Component<DPSAttackInputProps> {\n  setTalentType = (type: string) => {\n    const attack = { ...this.props.attack, talentType: type };\n    this.props.setAttack(attack);\n  };\n\n  setTalentId = (id: string) => {\n    const attack = { ...this.props.attack, talentId: id };\n    this.props.setAttack(attack);\n  };\n\n  setMultiplier = (multiplier: number) => {\n    const attack = { ...this.props.attack, multiplier };\n    this.props.setAttack(attack);\n  };\n\n  setOption = (i: number) => (option?: Option) => {\n    const options = [...this.props.attack.options];\n\n    if (option === undefined) {\n      options.splice(i, 1);\n    } else {\n      options[i] = option;\n    }\n\n    this.props.setAttack({ ...this.props.attack, options });\n  };\n\n  render() {\n    return (\n      <>\n        <InputRow>\n          <Picker\n            id={`dps-talent-type-${this.props.index}`}\n            label=''\n            defaultValue=''\n            value={this.props.attack.talentType}\n            onChange={this.setTalentType}\n            isLabelShown={false}\n          >\n            <Picker.Item value='' label='' />\n            {Object.keys(this.props.talentValues).map((type) => (\n              <Picker.Item\n                key={type}\n                value={type}\n                label={talentDescMapping[type]}\n              />\n            ))}\n          </Picker>\n\n          <Picker\n            id={`dps-talent-id-${this.props.index}`}\n            label=''\n            defaultValue=''\n            value={this.props.attack.talentId}\n            onChange={this.setTalentId}\n            isLabelShown={false}\n          >\n            <Picker.Item value='' label='' />\n            {Object.keys(\n              this.props.talentValues[this.props.attack.talentType] ?? {}\n            ).map((id) => (\n              <Picker.Item key={id} value={id} label={talentDescMapping[id]} />\n            ))}\n          </Picker>\n\n          {getDamageDisplayValue(this.props.attack.talentValue.damage)}\n\n          <IntInput\n            id={`dps-attack-multiplier-${this.props.index}`}\n            label='x'\n            defaultValue={1}\n            value={this.props.attack.multiplier}\n            onInput={this.setMultiplier}\n            className='level-input'\n          />\n        </InputRow>\n\n        {this.props.attack.options.map((option, i) => (\n          <DPSOptionInput\n            key={i}\n            setOption={this.setOption(i)}\n            options={this.props.options}\n            option={option}\n            index={i}\n          />\n        ))}\n\n        <DPSOptionInput\n          setOption={this.setOption(this.props.attack.options.length)}\n          options={this.props.options}\n          index={this.props.attack.options.length}\n        />\n      </>\n    );\n  }\n}\n\nexport default DPSAttackInput;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport InputRow from './InputRow';\nimport FloatInput from './FloatInput';\nimport { TalentValue, TalentValueSet } from '../talent/types';\nimport DPSAttackInput from './DPSAttackInput';\nimport {\n  AppState,\n  GetDamageModifierFn,\n  GetModifierMixinsFn,\n  GetStatMixinsFn,\n} from '../App';\nimport { Stats } from '../data/types';\nimport {\n  calculateTalentValue,\n  initializeAllOptions,\n} from '../dps/DPSCalculator';\nimport Option from '../option/Option';\nimport InputBlock from './InputBlock';\n\nexport type Attack = {\n  talentType: string;\n  talentId: string;\n  multiplier: number;\n  talentValue: TalentValue;\n  options: Option[];\n};\n\nconst defaultAttack: Attack = {\n  talentType: '',\n  talentId: '',\n  multiplier: 1,\n  talentValue: { damage: [NaN] },\n  options: [],\n};\n\ntype DPSColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  artifactSetBonuses: Stats;\n  getDamageModifier: GetDamageModifierFn;\n  getStatMixins: GetStatMixinsFn;\n  getModifierMixins: GetModifierMixinsFn;\n  talentValues: TalentValueSet;\n};\n\nclass DPSColumn extends React.Component<DPSColumnProps> {\n  dpr: number = 0;\n  dps: number = NaN;\n\n  updateTalentValue = (attack: Attack) => {\n    attack.talentValue = calculateTalentValue(\n      attack.talentType,\n      attack.talentId,\n      attack.options,\n      this.props.appState,\n      this.props.artifactSetBonuses,\n      this.props.getDamageModifier,\n      this.props.getStatMixins,\n      this.props.getModifierMixins\n    );\n  };\n\n  updateTalentValues = () => {\n    const rotation = this.props.appState.rotation;\n\n    rotation.forEach((attack) => this.updateTalentValue(attack));\n\n    this.dpr = rotation.reduce(\n      (acc, attack) =>\n        acc +\n        attack.talentValue.damage.reduce(\n          (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n          0\n        ) *\n          (!isNaN(attack.multiplier) ? attack.multiplier : 0),\n      0\n    );\n    this.dps = this.dpr / this.props.appState.rotationTime;\n  };\n\n  setRotationTime = (time: number) => {\n    this.props.setAppState({ rotationTime: time });\n  };\n\n  setAttack = (i: number) => (attack: Attack) => {\n    const rotation = this.props.appState.rotation;\n\n    if (attack.talentType === '') {\n      rotation.splice(i, 1);\n    } else {\n      rotation[i] = attack;\n    }\n\n    this.props.setAppState({ rotation });\n  };\n\n  render() {\n    this.updateTalentValues();\n\n    const {\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n      teamOptions,\n      artifactBuffOptions,\n    } = initializeAllOptions(this.props.appState);\n\n    const allOptions = [\n      ...characterOptions,\n      ...weaponOptions,\n      ...artifactSetOptions,\n      ...teamOptions,\n      ...artifactBuffOptions,\n    ];\n\n    return (\n      <Col\n        id='dps-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <InputBlock>\n          <h2>DPS Calculator</h2>\n\n          <InputRow>\n            <FloatInput\n              id='rotation-time-input'\n              label='Rotation Time:'\n              defaultValue={0}\n              value={this.props.appState.rotationTime}\n              onInput={this.setRotationTime}\n              className='level-input'\n            />\n          </InputRow>\n\n          <InputRow>\n            <p>DPR: {this.dpr.toFixed(0)}</p>\n          </InputRow>\n\n          <InputRow>\n            <p>DPS: {isFinite(this.dps) ? this.dps.toFixed(0) : '-'}</p>\n          </InputRow>\n\n          {this.props.appState.rotation.map((attack, i) => (\n            <DPSAttackInput\n              key={i}\n              setAttack={this.setAttack(i)}\n              attack={attack}\n              index={i}\n              talentValues={this.props.talentValues}\n              options={allOptions}\n            />\n          ))}\n\n          <DPSAttackInput\n            setAttack={this.setAttack(this.props.appState.rotation.length)}\n            attack={{ ...defaultAttack }}\n            index={this.props.appState.rotation.length}\n            talentValues={this.props.talentValues}\n            options={allOptions}\n          />\n        </InputBlock>\n      </Col>\n    );\n  }\n}\n\nexport default DPSColumn;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i] = initArtifactSet(id, artifactSets[i].pieces);\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </InputBlock>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const { level, hasAscended, constellationLevel } =\n      this.props.appState.character;\n    const character = initCharacter(id, level, hasAscended, constellationLevel);\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterConstellationLevel = (constellationLevel: number) => {\n    const character = this.props.appState.character;\n    character.constellationLevel = constellationLevel;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-constellation-level-input'\n            label='Constellation:'\n            defaultValue={0}\n            value={appState.character.constellationLevel}\n            onInput={this.setCharacterConstellationLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport Resistance from '../stat/Resistance';\nimport { capitalize } from '../stat/Stat';\nimport { Element } from '../talent/types';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  setReaction = (reaction: string) => {\n    this.props.updateTalentValues({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n    this.props.setAppState({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType, reaction } = this.props.appState;\n    return (\n      <InputBlock>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n\n        <InputRow>\n          <Picker\n            id='reaction-picker'\n            label='Reaction:'\n            defaultValue={Reaction.None}\n            value={reaction}\n            onChange={this.setReaction}\n          >\n            {Object.values(Reaction).map((reaction) => (\n              <Picker.Item\n                key={reaction}\n                label={capitalize(reaction)}\n                value={reaction}\n              />\n            ))}\n          </Picker>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  WeaponPassiveData,\n  WeaponPassiveSetData,\n} from '../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getWeaponPassiveAt,\n  getWeaponPassiveData,\n} from '../data/Data';\nimport { getOptionValue, setOptionValue } from '../option';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../passive/types';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    refinement: number = 1\n  ) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n    this._refinement = refinement;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.passiveDataSet = getWeaponPassiveData(value);\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(\n        this.refinement,\n        this.passiveDataSet\n      );\n    }\n    this.passive = this.getPassive(this.refinement);\n    this.passiveOptions = this.getPassiveOptions();\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  passiveDataSet?: WeaponPassiveSetData;\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  private _refinement: number = 1;\n  get refinement(): number {\n    return this._refinement;\n  }\n  set refinement(value: number) {\n    this._refinement = value;\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(value, this.passiveDataSet);\n      this.passive = this.getPassive(value);\n      this.passiveOptions = this.getPassiveOptions(true);\n    }\n  }\n\n  stats: Stats = {};\n  passiveData?: WeaponPassiveData;\n  passive?: WeaponPassive;\n  passiveOptions: WeaponOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n\n  // Override in derived classes to implement special passives\n  // Only returns the extra passive bonuses, excluding the direct stat bonuses\n  // To be called when passive should update (e.g. id or refinement change)\n  getPassive(_refinement: number): WeaponPassive | undefined {\n    return;\n  }\n\n  // getPassive should be called before this if passives are updated\n  getPassiveOptions(shouldKeepValue: boolean = false) {\n    let newOptions = (this.passive?.options ?? []).map(\n      (Option) => new Option()\n    );\n\n    if (shouldKeepValue) {\n      this.passiveOptions.forEach((option) => {\n        let newOption = newOptions.find(\n          (newOption) => newOption.id === option.id\n        );\n        if (newOption !== undefined) {\n          setOptionValue(newOption, getOptionValue(option));\n        }\n      });\n    }\n\n    return newOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    let statMixins = [];\n\n    if (this.passive?.statMixin !== undefined) {\n      statMixins.push(this.passive.statMixin);\n    }\n\n    if (this.passiveData?.statBonuses !== undefined) {\n      this.passiveData.statBonuses.forEach(({ stat, value }) => {\n        statMixins.push({\n          apply: (stats: Stats) => {\n            stats[stat] = value + (stats[stat] ?? 0);\n          },\n        });\n      });\n    }\n\n    return statMixins;\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    if (this.passive?.modifierMixin === undefined) {\n      return [];\n    }\n\n    return [this.passive.modifierMixin];\n  }\n}\n","import Option from '../Option';\n\nexport default class WeaponOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport const watatsumiWavewalkerPassive =\n  (id: string) =>\n  (refinement: number): WeaponPassive => {\n    const params = getWeaponPassiveParams(id, refinement);\n\n    class WatatsumiWavewalkerOption\n      extends WeaponOption\n      implements IOptionNumber, IStatsApplicable\n    {\n      value = 0;\n\n      constructor() {\n        super('watatsumiWavewalkerPassive');\n      }\n\n      statMixin = {\n        apply: (stats: Stats) => {\n          if (this.value > 0) {\n            let burstDmgBonus = this.value * (params[0] / 100);\n            if (burstDmgBonus > params[1]) {\n              burstDmgBonus = params[1];\n            }\n            stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n          }\n        },\n      };\n    }\n\n    return {\n      id,\n      options: [WatatsumiWavewalkerOption],\n    };\n  };\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class Akuoumaru extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('akuoumaru', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('akuoumaru')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { dragonsBanePassive } from './DragonsBanePassive';\n\nexport default class DragonsBane extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('dragonsbane', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return dragonsBanePassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function dragonsBanePassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('dragonsbane', refinement);\n\n  class DragonsBaneOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('dragonsBanePassive');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'dragonsBane',\n    options: [DragonsBaneOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { engulfingLightningPassive } from './EngulfingLightningPassive';\n\nexport default class EngulfingLightning extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('engulfinglightning', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return engulfingLightningPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function engulfingLightningPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('engulfinglightning', refinement);\n\n  class EngulfingLightningOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('engulfingLightningEnergyRecharge');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.energyRecharge = params[2] + (stats.energyRecharge ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'engulfingLightning',\n    options: [EngulfingLightningOption],\n\n    statMixin: {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        let atkBonus = (stats.energyRecharge - 1) * params[0];\n        if (atkBonus > params[1]) {\n          atkBonus = params[1];\n        }\n\n        stats.atkBonus = atkBonus + (stats.atkBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { everlastingMoonglowPassive } from './EverlastingMoonglowPassive';\n\nexport default class EverlastingMoonglow extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('everlastingmoonglow', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return everlastingMoonglowPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function everlastingMoonglowPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('everlastingmoonglow', refinement);\n\n  return {\n    id: 'everlastingMoonglow',\n    options: [],\n    modifierMixin: {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        modifier.normalAttackFlatDmg =\n          params[1] * (stats.flatHp ?? 0) + (modifier.normalAttackFlatDmg ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { luxuriousSeaLordPassive } from './LuxuriousSeaLordPassive';\n\nexport default class LuxuriousSeaLord extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('luxurioussealord', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return luxuriousSeaLordPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function luxuriousSeaLordPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('luxurioussealord', refinement);\n\n  return {\n    id: 'luxuriousSeaLord',\n    options: [],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class MouunsMoon extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('mouunsmoon', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('mouunsmoon')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { polarStarPassive } from './PolarStarPassive';\n\nexport default class PolarStar extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('polarstar', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return polarStarPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function polarStarPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('polarstar', refinement);\n\n  class PolarStarOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('polarStarStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        let stacks = this.value;\n\n        if (stacks > 0) {\n          if (stacks > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[stacks + 1] + (stats.atkBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'polarStar',\n    options: [PolarStarOption],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { solarPearlPassive } from './SolarPearlPassive';\n\nexport default class SolarPearl extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('solarpearl', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return solarPearlPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function solarPearlPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('solarpearl', refinement);\n\n  class SolarPearlOptionNormalAttack\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlNormalAttack');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n          stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  class SolarPearlOptionSkillBurst\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlSkillBurst');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'solarPearl',\n    options: [SolarPearlOptionNormalAttack, SolarPearlOptionSkillBurst],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { staffOfHomaPassive } from './StaffOfHomaPassive';\n\nexport default class StaffOfHoma extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('staffofhoma', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return staffOfHomaPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function staffOfHomaPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('staffofhoma', refinement);\n\n  class StaffOfHomaOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('staffOfHomaAtkBonus');\n    }\n\n    statMixin = {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n\n        let flatAtkBonus = totalHp * params[1];\n        if (this.value) {\n          flatAtkBonus += totalHp * params[2];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      },\n    };\n  }\n\n  return {\n    id: 'staffOfHoma',\n    options: [StaffOfHomaOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { theCatchPassive } from './TheCatchPassive';\n\nexport default class TheCatch extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('thecatch', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return theCatchPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function theCatchPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('thecatch', refinement);\n\n  return {\n    id: 'theCatch',\n    options: [],\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        stats.burstCritRate = params[1] + (stats.burstCritRate ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { whiteblindPassive } from './WhiteblindPassive';\n\nexport default class Whiteblind extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('whiteblind', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return whiteblindPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function whiteblindPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('whiteblind', refinement);\n\n  class WhiteblindOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('whiteblindStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value > 0) {\n          let stacks = this.value;\n          if (this.value > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[0] * stacks + (stats.atkBonus ?? 0);\n          stats.defBonus = params[0] * stacks + (stats.defBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'whiteblind',\n    options: [WhiteblindOption],\n  };\n}\n","import Weapon from './Weapon';\nimport Akuoumaru from './watatsumi/Akuoumaru';\nimport DragonsBane from './dragonsbane/DragonsBane';\nimport EngulfingLightning from './engulfinglightning/EngulfingLightning';\nimport EverlastingMoonglow from './everlastingmoonglow/EverlastingMoonglow';\nimport LuxuriousSeaLord from './luxurioussealord/LuxuriousSeaLord';\nimport MouunsMoon from './watatsumi/MouunsMoon';\nimport PolarStar from './polarstar/PolarStar';\nimport SolarPearl from './solarpearl/SolarPearl';\nimport StaffOfHoma from './staffofhoma/StaffOfHoma';\nimport TheCatch from './thecatch/TheCatch';\nimport Whiteblind from './whiteblind/Whiteblind';\nimport WavebreakersFin from './watatsumi/WavebreakersFin';\n\nconst weapons: Record<string, typeof Weapon> = {\n  // Polearm\n  dragonsbane: DragonsBane,\n  engulfinglightning: EngulfingLightning,\n  staffofhoma: StaffOfHoma,\n  thecatch: TheCatch,\n  wavebreakersfin: WavebreakersFin,\n\n  // Catalyst\n  everlastingmoonglow: EverlastingMoonglow,\n  solarpearl: SolarPearl,\n\n  // Claymore\n  luxurioussealord: LuxuriousSeaLord,\n  whiteblind: Whiteblind,\n  akuoumaru: Akuoumaru,\n\n  // Bow\n  polarstar: PolarStar,\n  mouunsmoon: MouunsMoon,\n};\n\nfunction getWeaponConstructor(id: string): typeof Weapon {\n  return weapons[id] ?? Weapon;\n}\n\nexport function initWeapon(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  refinement?: number\n): Weapon {\n  const WeaponConstructor = getWeaponConstructor(id);\n\n  return new WeaponConstructor(id, level, hasAscended, refinement);\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class WavebreakersFin extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('wavebreakersfin', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('wavebreakersfin')(refinement);\n  }\n}\n","import { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport { ArtifactType, InputStat } from '../artifact/types';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport { Attack } from '../component/DPSColumn';\nimport Option from '../option/Option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n  characterConstellationLevel?: number;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n  weaponRefinement?: number;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  teamCharacterIds?: string[];\n\n  characterOptions?: { id?: string; value?: unknown }[];\n  weaponOptions?: { id?: string; value?: unknown }[];\n  artifactSetOptions?: { id?: string; value?: unknown }[];\n  teamOptions?: { id?: string; value?: unknown }[];\n  artifactBuffOptions?: { id?: string; value?: unknown }[];\n\n  rotationTime?: number;\n  rotation?: AttackSave[];\n}\n\nexport type Saves = Record<string, Save>;\n\ninterface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\ninterface AttackSave {\n  talentType?: string;\n  talentId?: string;\n  multiplier?: number;\n  options?: { id?: string; value?: unknown }[];\n}\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n    characterConstellationLevel: appState.character.constellationLevel,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n    weaponRefinement: appState.weapon.refinement,\n\n    artifacts: appState.artifacts.map((artifact) => {\n      return {\n        type: artifact.type,\n        rarity: artifact.rarity,\n        level: artifact.level,\n        mainStat: artifact.mainStat.stat,\n        subStats: artifact.subStats.map((subStat) =>\n          createInputStatSave(subStat)\n        ),\n      };\n    }),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    teamCharacterIds: appState.teamCharacters.map((character) => character.id),\n\n    characterOptions: appState.characterOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    weaponOptions: appState.weaponOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactSetOptions: appState.artifactSetOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    teamOptions: appState.teamOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactBuffOptions: appState.artifactBuffOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n\n    rotationTime: appState.rotationTime,\n    rotation: appState.rotation.map((attack) => {\n      return {\n        talentType: attack.talentType,\n        talentId: attack.talentId,\n        multiplier: attack.multiplier,\n        options: attack.options.map((option) => {\n          return { id: option.id, value: getOptionValue(option) };\n        }),\n      };\n    }),\n  };\n\n  return save;\n}\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const character = initCharacter(\n    save.characterId,\n    save.characterLevel,\n    save.characterHasAscended,\n    save.characterConstellationLevel\n  );\n  const weapon = initWeapon(\n    save.weaponId,\n    save.weaponLevel,\n    save.weaponHasAscended,\n    save.weaponRefinement\n  );\n\n  const artifacts =\n    save.artifacts?.map((savedArtifact, i) => {\n      const artifactType = savedArtifact.type ?? Object.values(ArtifactType)[i];\n      let artifact = new Artifact(\n        artifactType,\n        savedArtifact.rarity ?? 1,\n        savedArtifact.level ?? 0,\n        savedArtifact.mainStat ?? ''\n      );\n      artifact.subStats =\n        savedArtifact.subStats?.map(\n          (subStat) =>\n            new InputStat(\n              subStat.stat ?? '',\n              subStat.value ?? NaN,\n              subStat.rawValue ?? NaN\n            )\n        ) ?? artifact.subStats;\n\n      return artifact;\n    }) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map((artifactSet) =>\n    initArtifactSet(artifactSet.artifactSetId, artifactSet.artifactSetPieces)\n  ) ?? [initArtifactSet(), initArtifactSet(), initArtifactSet()];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const teamCharacters = save.teamCharacterIds?.map((id) =>\n    initCharacter(id)\n  ) ?? [initCharacter(), initCharacter(), initCharacter()];\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, option.value);\n    }\n  });\n\n  const weaponOptions = weapon.passiveOptions;\n  save.weaponOptions?.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, option.value);\n    }\n  });\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, option.value);\n    }\n  });\n\n  const teamOptions = teamCharacters.flatMap(\n    (character) => character.teamOptions\n  );\n  save.teamOptions?.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, option.value);\n    }\n  });\n\n  const artifactBuffOptions =\n    save.artifactBuffOptions?.flatMap((option) => {\n      const OptionConstructor = artifactTeamBuffs[option.id ?? ''];\n      if (OptionConstructor !== undefined) {\n        let artifactOption = new OptionConstructor();\n        setOptionValue(artifactOption, option.value);\n        return [artifactOption];\n      }\n\n      return [];\n    }) ?? [];\n\n  const allOptions = [\n    ...characterOptions,\n    ...weaponOptions,\n    ...artifactSetOptions,\n    ...teamOptions,\n    ...artifactBuffOptions,\n  ];\n\n  const rotationTime = save.rotationTime ?? 0;\n  const rotation: Attack[] =\n    save.rotation?.map((attackSave) => {\n      return {\n        talentType: attackSave.talentType ?? '',\n        talentId: attackSave.talentId ?? '',\n        multiplier: attackSave.multiplier ?? 1,\n        talentValue: { damage: [NaN] },\n        options:\n          attackSave.options\n            ?.map(({ id, value }) => {\n              const OptionConstructor = allOptions.find(\n                (option) => option.id === id\n              )?.constructor as { new (): Option };\n              let option;\n              if (OptionConstructor !== undefined) {\n                option = new OptionConstructor();\n                setOptionValue(option, value);\n              } else if (id === 'reaction') {\n                option = new ReactionOption();\n                setOptionValue(option, value);\n              }\n              return option;\n            })\n            ?.filter((option): option is Option => option !== undefined) ?? [],\n      };\n    }) ?? [];\n\n  setAppState(\n    {\n      character,\n      weapon,\n      artifacts,\n      artifactSets,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      critType,\n      enemyLevel,\n      enemyRes,\n      reaction,\n      teamCharacters,\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n      teamOptions,\n      artifactBuffOptions,\n      rotationTime,\n      rotation,\n    },\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Col from 'react-bootstrap/esm/Col';\nimport Form from 'react-bootstrap/esm/Form';\nimport Modal from 'react-bootstrap/esm/Modal';\nimport Row from 'react-bootstrap/esm/Row';\nimport { AppState } from '../App';\nimport {\n  createSave,\n  addSave,\n  getSave,\n  loadSave,\n  Saves,\n  deleteSave,\n} from '../save/Save';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype SaveBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  refreshApp: () => void;\n};\n\ntype SaveBlockState = {\n  saves: Saves;\n  saveInputName: string;\n  selectedSave: string;\n  showDeleteWarning: boolean;\n  showImportModal: boolean;\n  showExportModal: boolean;\n  saveJson: string;\n  hasCopied: boolean;\n  invalidJson: boolean;\n};\n\nclass SaveBlock extends React.Component<SaveBlockProps, SaveBlockState> {\n  state: SaveBlockState;\n\n  constructor(props: SaveBlockProps) {\n    super(props);\n\n    // Populate local storage if empty\n    if (window.localStorage.getItem('saves') === null) {\n      window.localStorage.setItem('saves', '{}');\n    }\n\n    // Initialize saves in memory\n    const saves = JSON.parse(window.localStorage.getItem('saves') ?? '{}');\n    // Initialize state\n    this.state = {\n      saves,\n      saveInputName: '',\n      selectedSave: '',\n      showDeleteWarning: false,\n      showImportModal: false,\n      showExportModal: false,\n      saveJson: '',\n      hasCopied: false,\n      invalidJson: false,\n    };\n  }\n\n  onSaveClick = () => {\n    if (this.state.saveInputName !== '') {\n      const save = createSave(this.state.saveInputName, this.props.appState);\n      const saves = this.state.saves;\n      addSave(save, saves);\n      this.setState({ saves });\n    }\n  };\n\n  onSaveInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveInputName: e.target.value });\n  };\n\n  onLoadClick = () => {\n    if (this.state.selectedSave !== '') {\n      const save = getSave(this.state.selectedSave, this.state.saves);\n      if (save !== undefined) {\n        loadSave(save, this.props.setAppState, this.props.refreshApp);\n      }\n    }\n  };\n\n  onLoadInputChange = (value: string) => {\n    this.setState({ selectedSave: value });\n  };\n\n  onDeleteClick = () => {\n    if (this.state.selectedSave !== '') {\n      this.setState({ showDeleteWarning: true });\n    }\n  };\n\n  onDeleteModalConfirm = () => {\n    const saves = this.state.saves;\n    deleteSave(this.state.selectedSave, saves);\n    this.setState({ saves });\n\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onDeleteModalHide = () => {\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onImportClick = () => {\n    this.setState({ showImportModal: true });\n  };\n\n  onImportModalHide = () => {\n    this.setState({ showImportModal: false, saveJson: '', invalidJson: false });\n  };\n\n  onImportTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ saveJson: e.target.value });\n  };\n\n  onImportSubmitClick = () => {\n    try {\n      const save = JSON.parse(this.state.saveJson);\n      loadSave(save, this.props.setAppState, this.props.refreshApp);\n      this.onImportModalHide();\n    } catch {\n      this.setState({ invalidJson: true });\n    }\n  };\n\n  onExportClick = () => {\n    const saveJson = JSON.stringify(createSave('', this.props.appState));\n    this.setState({ showExportModal: true, saveJson, invalidJson: false });\n  };\n\n  onExportModalHide = () => {\n    this.setState({ showExportModal: false, saveJson: '', hasCopied: false });\n  };\n\n  onCopyClick = () => {\n    navigator.clipboard.writeText(this.state.saveJson);\n    this.setState({ hasCopied: true });\n  };\n\n  render() {\n    return (\n      <InputBlock>\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onSaveClick}>\n            Save\n          </Button>\n\n          <Col className='save-name-col'>\n            <Form.Control\n              type='text'\n              size='sm'\n              placeholder='Save label (cannot be empty)'\n              onChange={this.onSaveInputChange}\n            />\n          </Col>\n        </InputRow>\n\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onLoadClick}>\n            Load\n          </Button>\n\n          <Picker\n            id='save-picker'\n            label=''\n            defaultValue=''\n            value={this.state.selectedSave}\n            onChange={this.onLoadInputChange}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {Object.values(this.state.saves).map((save) => (\n              <Picker.Item\n                label={save.label}\n                value={save.label}\n                key={save.label}\n              />\n            ))}\n          </Picker>\n\n          <>\n            <Button variant='danger' size='sm' onClick={this.onDeleteClick}>\n              Delete\n            </Button>\n\n            <Modal\n              show={this.state.showDeleteWarning}\n              onHide={this.onDeleteModalHide}\n            >\n              <Modal.Body>\n                Are you sure you want to delete the save configuration? This\n                action is irreversible!\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={this.onDeleteModalHide}>\n                  Cancel\n                </Button>\n                <Button variant='danger' onClick={this.onDeleteModalConfirm}>\n                  Delete\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        </InputRow>\n\n        <InputRow>\n          <>\n            <Button variant='secondary' size='sm' onClick={this.onImportClick}>\n              Import\n            </Button>\n\n            <Modal\n              size='lg'\n              show={this.state.showImportModal}\n              onHide={this.onImportModalHide}\n            >\n              <Modal.Header closeButton>\n                Import Configuration from JSON\n              </Modal.Header>\n              <Modal.Body>\n                <Col>\n                  <Row>\n                    <Form.Control\n                      as='textarea'\n                      rows={10}\n                      value={this.state.saveJson}\n                      onChange={this.onImportTextChange}\n                    />\n                  </Row>\n\n                  <Row className='mt-2'>\n                    <Button\n                      variant='secondary'\n                      size='sm'\n                      onClick={this.onImportSubmitClick}\n                      className='mr-2'\n                    >\n                      Import\n                    </Button>\n                    {this.state.invalidJson && 'Invalid JSON!'}\n                  </Row>\n                </Col>\n              </Modal.Body>\n            </Modal>\n          </>\n\n          <>\n            <Button variant='secondary' size='sm' onClick={this.onExportClick}>\n              Export\n            </Button>\n\n            <Modal\n              size='lg'\n              show={this.state.showExportModal}\n              onHide={this.onExportModalHide}\n            >\n              <Modal.Header closeButton>\n                Export Configuration as JSON\n              </Modal.Header>\n              <Modal.Body>\n                <Col>\n                  <Row>\n                    <Form.Control\n                      as='textarea'\n                      rows={10}\n                      value={this.state.saveJson}\n                      readOnly\n                    />\n                  </Row>\n\n                  <Row className='mt-2'>\n                    <Button\n                      variant={\n                        !this.state.hasCopied ? 'secondary' : 'outline-success'\n                      }\n                      size='sm'\n                      onClick={this.onCopyClick}\n                      disabled={this.state.hasCopied}\n                    >\n                      {!this.state.hasCopied\n                        ? 'Copy to Clipboard'\n                        : 'Copied to Clipboard!'}\n                    </Button>\n                  </Row>\n                </Col>\n              </Modal.Body>\n            </Modal>\n          </>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default SaveBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n  talentAttackLevelExtra: number;\n  talentSkillLevelExtra: number;\n  talentBurstLevelExtra: number;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n          {this.props.talentAttackLevelExtra > 0 &&\n            `+${this.props.talentAttackLevelExtra}`}\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n          {this.props.talentSkillLevelExtra > 0 &&\n            `+${this.props.talentSkillLevelExtra}`}\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n          {this.props.talentBurstLevelExtra > 0 &&\n            `+${this.props.talentBurstLevelExtra}`}\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Weapon from '../weapon/Weapon';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    weapon,\n    weaponOptions,\n  }: {\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n  }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const { weaponLevel, hasAscended, refinement } = this.props.appState.weapon;\n    const weapon = initWeapon(id, weaponLevel, hasAscended, refinement);\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponRefinement = (refinement: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.refinement = refinement;\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  updateOptions = () => {\n    const { weaponOptions } = this.props.appState;\n    this.props.updateTotalStats({ weaponOptions });\n    this.props.setAppState({ weaponOptions: [...weaponOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-refinement-input'\n            label='Refinement:'\n            defaultValue={1}\n            value={appState.weapon.refinement}\n            onInput={this.setWeaponRefinement}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.weaponOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React from 'react';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\nimport { optionMapping } from '../data/Data';\nimport OptionInput from './OptionInput';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\ntype TeamBuffOptionInputProps = {\n  setOption: (option?: ArtifactSetOption) => void;\n  options: Record<string, typeof ArtifactSetOption>;\n  option?: ArtifactSetOption;\n  index: number;\n};\n\nclass TeamBuffOptionInput extends React.Component<TeamBuffOptionInputProps> {\n  setOptionId = (id: string) => {\n    const OptionConstructor = this.props.options[id];\n\n    if (OptionConstructor !== undefined) {\n      this.props.setOption(new OptionConstructor());\n    } else {\n      this.props.setOption();\n    }\n  };\n\n  updateOptions = () => {\n    this.props.setOption(this.props.option);\n  };\n\n  render() {\n    return (\n      <InputRow>\n        <Picker\n          id={`team-buff-option-${this.props.index}`}\n          label=''\n          defaultValue=''\n          value={this.props.option?.id ?? ''}\n          onChange={this.setOptionId}\n          isLabelShown={false}\n        >\n          <Picker.Item value='' label='' />\n          {Object.keys(this.props.options).map((id) => (\n            <Picker.Item key={id} value={id} label={optionMapping[id]} />\n          ))}\n        </Picker>\n\n        {this.props.option && (\n          <OptionInput\n            option={this.props.option}\n            updateOptions={this.updateOptions}\n            isLabelShown={false}\n          />\n        )}\n      </InputRow>\n    );\n  }\n}\n\nexport default TeamBuffOptionInput;\n","import React, { Fragment } from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Card from 'react-bootstrap/esm/Card';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { initCharacter } from '../character/CharacterUtil';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\nimport CharacterPicker from './CharacterPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport OptionInput from './OptionInput';\nimport TeamBuffOptionInput from './TeamBuffOptionInput';\n\ntype TeamInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    teamCharacters?: Character[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass TeamInputBlock extends React.Component<TeamInputBlockProps> {\n  setCharacterId = (i: number) => (id: string) => {\n    const { teamCharacters } = this.props.appState;\n    teamCharacters[i] = initCharacter(id);\n    const teamOptions = teamCharacters.flatMap(\n      (character) => character.teamOptions\n    );\n    this.props.updateTotalStats({ teamCharacters, teamOptions });\n    this.props.setAppState({\n      teamCharacters: [...teamCharacters],\n      teamOptions,\n    });\n  };\n\n  updateTeamOptions = () => {\n    const { teamOptions } = this.props.appState;\n    this.props.updateTotalStats({ teamOptions });\n    this.props.setAppState({ teamOptions: [...teamOptions] });\n  };\n\n  setArtifactBuffOption = (i: number) => (option?: ArtifactSetOption) => {\n    const options = [...this.props.appState.artifactBuffOptions];\n\n    if (option === undefined) {\n      options.splice(i, 1);\n    } else {\n      options[i] = option;\n    }\n\n    this.props.updateTotalStats({ artifactBuffOptions: options });\n    this.props.setAppState({ artifactBuffOptions: options });\n  };\n\n  render() {\n    const { teamCharacters, artifactBuffOptions } = this.props.appState;\n\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='1'\n            className='bg-transparent border-0'\n          >\n            <h3>Team Buffs</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey='1'>\n            <Card.Body>\n              <InputBlock>\n                <InputRow>Party Members</InputRow>\n\n                {[0, 1, 2].map((i) => (\n                  <Fragment key={i}>\n                    <InputRow>\n                      <CharacterPicker\n                        characterId={teamCharacters[i].id}\n                        setCharacterId={this.setCharacterId(i)}\n                      />\n                    </InputRow>\n\n                    {teamCharacters[i].teamOptions.map((option) => (\n                      <InputRow key={option.id}>\n                        <OptionInput\n                          option={option}\n                          updateOptions={this.updateTeamOptions}\n                        />\n                      </InputRow>\n                    ))}\n                  </Fragment>\n                ))}\n              </InputBlock>\n\n              <InputBlock>\n                <InputRow>Artifact Buffs</InputRow>\n\n                {artifactBuffOptions.map((option, i) => (\n                  <TeamBuffOptionInput\n                    key={i}\n                    setOption={this.setArtifactBuffOption(i)}\n                    options={artifactTeamBuffs}\n                    option={option}\n                    index={i}\n                  />\n                ))}\n\n                <TeamBuffOptionInput\n                  setOption={this.setArtifactBuffOption(\n                    artifactBuffOptions.length\n                  )}\n                  options={artifactTeamBuffs}\n                  index={artifactBuffOptions.length}\n                />\n              </InputBlock>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default TeamInputBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport CritType from '../modifier/CritType';\nimport Resistance from '../stat/Resistance';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport SaveBlock from './SaveBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport TeamInputBlock from './TeamInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n    teamOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => void;\n  refreshApp: () => void;\n  talentAttackLevelExtra: number;\n  talentSkillLevelExtra: number;\n  talentBurstLevelExtra: number;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n      refreshApp,\n    } = this.props;\n\n    return (\n      <Col\n        id='input-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <SaveBlock\n          appState={appState}\n          setAppState={setAppState}\n          refreshApp={refreshApp}\n        />\n\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n          talentAttackLevelExtra={this.props.talentAttackLevelExtra}\n          talentSkillLevelExtra={this.props.talentSkillLevelExtra}\n          talentBurstLevelExtra={this.props.talentBurstLevelExtra}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n\n        <TeamInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../character/Character';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\nimport Weapon from '../weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Col\n        id='stat-column'\n        className='stat-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\n\ntype TalentBlockProps = {\n  type: string;\n  talentValues: Record<string, TalentValue>;\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{talentDescMapping[this.props.type]}</h3>\n        {Object.entries(this.props.talentValues).map(([id, { damage }]) => (\n          <p key={id}>\n            {talentDescMapping[id]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport { TalentValueSet } from '../talent/types';\nimport TalentBlock from './TalentBlock';\nimport Col from 'react-bootstrap/esm/Col';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const talentValues = this.props.talentValues;\n\n    return (\n      <Col\n        id='talent-column'\n        className='talent-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='result-block'>\n          <h2>Talents</h2>\n          {Object.entries(talentValues).map(([type, values]) => (\n            <TalentBlock key={type} type={type} talentValues={values} />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport Row from 'react-bootstrap/esm/Row';\nimport './App.css';\nimport Artifact from './artifact/Artifact';\nimport ArtifactSet from './artifact/ArtifactSet';\nimport { initArtifactSet } from './artifact/ArtifactSetUtil';\nimport { ArtifactType } from './artifact/types';\nimport Character from './character/Character';\nimport { initCharacter } from './character/CharacterUtil';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport DPSColumn, { Attack } from './component/DPSColumn';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport { Stats } from './data/types';\nimport CritType from './modifier/CritType';\nimport DamageModifier from './modifier/DamageModifer';\nimport Reaction from './modifier/Reaction';\nimport { isModifierApplicable, isStatsApplicable } from './option';\nimport ArtifactSetOption from './option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from './option/characterOptions/CharacterOption';\nimport { ModifierMixin, Priority, StatMixin } from './option/Mixin';\nimport { IModifierApplicable, IStatsApplicable } from './option/Option';\nimport WeaponOption from './option/weaponOptions/WeaponOption';\nimport Resistance from './stat/Resistance';\nimport { getTotalStatsAt } from './stat/Stat';\nimport { TalentValue, TalentValueSet } from './talent/types';\nimport Weapon from './weapon/Weapon';\nimport { initWeapon } from './weapon/WeaponUtil';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  teamCharacters: Character[];\n\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n\n  rotationTime: number;\n  rotation: Attack[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: initCharacter(),\n    weapon: initWeapon(),\n    artifacts: Object.values(ArtifactType).map(\n      (type) => new Artifact(type, 1, 0, '')\n    ),\n\n    artifactSets: [initArtifactSet(), initArtifactSet(), initArtifactSet()],\n\n    enemyLevel: 1,\n    enemyDefReduction: 0,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    flatDmg: 0,\n    reaction: Reaction.None,\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    teamCharacters: [initCharacter(), initCharacter(), initCharacter()],\n\n    characterOptions: [],\n    weaponOptions: [],\n    artifactSetOptions: [],\n    teamOptions: [],\n    artifactBuffOptions: [],\n\n    rotationTime: 0,\n    rotation: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = {};\n\n  modifierMixins: ModifierMixin[] = [];\n  statMixins: StatMixin[] = [];\n\n  talentAttackLevelExtra: number = 0;\n  talentSkillLevelExtra: number = 0;\n  talentBurstLevelExtra: number = 0;\n\n  // Gets all modifier mixins and updates cache (modifierMixins)\n  getModifierMixins: GetModifierMixinsFn = ({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n    updateCache = true,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamCharacters?: Character[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n    updateCache?: boolean;\n  } = {}) => {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined &&\n      teamOptions === undefined &&\n      artifactBuffOptions === undefined\n    ) {\n      return this.modifierMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveModifierMixins();\n\n    const characterConstellationMixins = (\n      character ?? this.state.character\n    ).getConstellationModifierMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveModifierMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getModifierMixins()\n    );\n\n    const teamPassiveMixins = (teamCharacters ?? this.state.teamCharacters)\n      .map((character) => character.getTeamModifierMixin())\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const teamOptionMixins = (teamOptions ?? this.state.teamOptions)\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const artifactBuffOptionMixins = (\n      artifactBuffOptions ?? this.state.artifactBuffOptions\n    )\n      .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const unarrangedMixins = [\n      ...characterPassiveMixins,\n      ...characterConstellationMixins,\n      ...weaponPassiveMixins,\n      ...artifactSetMixins,\n      ...teamPassiveMixins,\n      ...characterOptionMixins,\n      ...weaponOptionMixins,\n      ...artifactSetOptionMixins,\n      ...teamOptionMixins,\n      ...artifactBuffOptionMixins,\n    ];\n    const groupedMixins = new Map<Priority, ModifierMixin[]>();\n    unarrangedMixins.forEach((mixin) => {\n      const priority = mixin.priority ?? Priority.Normal;\n      const array = groupedMixins.get(priority);\n      if (!array) {\n        groupedMixins.set(priority, [mixin]);\n      } else {\n        array.push(mixin);\n      }\n    });\n\n    const modifierMixins = (groupedMixins.get(Priority.Normal) ?? []).concat(\n      groupedMixins.get(Priority.Last) ?? []\n    );\n\n    if (updateCache) {\n      this.modifierMixins = modifierMixins;\n    }\n\n    return modifierMixins;\n  };\n\n  // Gets all stat mixins and updates cache (statMixins)\n  getStatMixins: GetStatMixinsFn = ({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n    updateCache = true,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamCharacters?: Character[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n    updateCache?: boolean;\n  } = {}) => {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined &&\n      teamOptions === undefined &&\n      artifactBuffOptions === undefined\n    ) {\n      return this.statMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveStatMixins();\n\n    const characterConstellationMixins = (\n      character ?? this.state.character\n    ).getConstellationStatMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveStatMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getStatMixins()\n    );\n\n    const teamPassiveMixins = (teamCharacters ?? this.state.teamCharacters)\n      .map((character) => character.getTeamStatMixin())\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const teamOptionMixins = (teamOptions ?? this.state.teamOptions)\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const artifactBuffOptionMixins = (\n      artifactBuffOptions ?? this.state.artifactBuffOptions\n    )\n      .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const unarrangedMixins = [\n      ...characterPassiveMixins,\n      ...characterConstellationMixins,\n      ...weaponPassiveMixins,\n      ...artifactSetMixins,\n      ...teamPassiveMixins,\n      ...characterOptionMixins,\n      ...weaponOptionMixins,\n      ...artifactSetOptionMixins,\n      ...teamOptionMixins,\n      ...artifactBuffOptionMixins,\n    ];\n    const groupedMixins = new Map<Priority, StatMixin[]>();\n    unarrangedMixins.forEach((mixin) => {\n      const priority = mixin.priority ?? Priority.Normal;\n      const array = groupedMixins.get(priority);\n      if (!array) {\n        groupedMixins.set(priority, [mixin]);\n      } else {\n        array.push(mixin);\n      }\n    });\n\n    const statMixins = (groupedMixins.get(Priority.Normal) ?? []).concat(\n      groupedMixins.get(Priority.Last) ?? []\n    );\n\n    if (updateCache) {\n      this.statMixins = statMixins;\n    }\n\n    return statMixins;\n  };\n\n  getDamageModifier: GetDamageModifierFn = ({\n    characterLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n  }: {\n    characterLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    modifierMixins?: ModifierMixin[];\n  } = {}): DamageModifier => {\n    const modifier: DamageModifier = {\n      characterLevel: characterLevel ?? this.state.character.level,\n      enemyLevel: enemyLevel ?? this.state.enemyLevel,\n      enemyDefReduction: this.state.enemyDefReduction,\n      enemyRes: enemyRes ?? this.state.enemyRes,\n      enemyResReduction: new Resistance(),\n      critType: critType ?? this.state.critType,\n      flatDmg: this.state.flatDmg,\n      reaction: reaction ?? this.state.reaction,\n      talentAttackLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n    };\n\n    // Apply modifier mixins\n    (modifierMixins ?? this.modifierMixins).forEach((mixin) =>\n      mixin.apply(modifier, this.totalStats)\n    );\n\n    // Update extra talent levels (from constellations etc) for display\n    this.talentAttackLevelExtra =\n      modifier.talentAttackLevel -\n      (talentAttackLevel ?? this.state.talentAttackLevel);\n    this.talentSkillLevelExtra =\n      modifier.talentSkillLevel -\n      (talentSkillLevel ?? this.state.talentSkillLevel);\n    this.talentBurstLevelExtra =\n      modifier.talentBurstLevel -\n      (talentBurstLevel ?? this.state.talentBurstLevel);\n\n    return modifier;\n  };\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = newArtifactSets\n      .map((artifactSet) => artifactSet.stats)\n      .reduce((acc, stats) => {\n        Object.entries(stats).forEach(([stat, value]) => {\n          acc[stat] = value + (acc[stat] ?? 0);\n        });\n        return acc;\n      }, {} as Stats);\n\n    this.updateTotalStats({\n      artifactSets,\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSets?: ArtifactSet[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    teamCharacters?: Character[];\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => {\n    const statMixins = this.getStatMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n      teamCharacters,\n      teamOptions,\n      artifactBuffOptions,\n    });\n\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel,\n      statMixins\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      teamCharacters,\n      characterOptions,\n      artifactSetOptions,\n      teamOptions,\n      artifactBuffOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    weapon,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifactSets?: ArtifactSet[];\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    teamCharacters?: Character[];\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n\n    const modifierMixins = this.getModifierMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n      teamCharacters,\n      teamOptions,\n      artifactBuffOptions,\n    });\n\n    const damageModifier = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n    });\n\n    this.talentValues = {};\n    Object.entries(character.talentFns).forEach(([type, fns]) => {\n      this.talentValues[type] = Object.entries(fns).reduce((acc, [id, fn]) => {\n        acc[id] = fn({ stats: this.totalStats, modifier: damageModifier });\n        return acc;\n      }, {} as Record<string, TalentValue>);\n    });\n  };\n\n  refreshApp = () => {\n    this.getStatMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n      teamCharacters: this.state.teamCharacters,\n      teamOptions: this.state.teamOptions,\n      artifactBuffOptions: this.state.artifactBuffOptions,\n    });\n    this.getModifierMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n      teamCharacters: this.state.teamCharacters,\n      teamOptions: this.state.teamOptions,\n      artifactBuffOptions: this.state.artifactBuffOptions,\n    });\n\n    this.updateArtifactSetBonuses({});\n    this.setState({});\n  };\n\n  render() {\n    return (\n      <Container className='app px-0' fluid>\n        <Navbar sticky='top' bg='light' className='d-md-none'>\n          <Nav>\n            <Nav.Item>\n              <Nav.Link href='#input-column'>Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#artifact-column'>Artifacts</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#stat-column'>Stats</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#talent-column'>Talents</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar>\n\n        <Row className='mx-0 flex-md-nowrap'>\n          <InputColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n            updateTotalStats={this.updateTotalStats}\n            updateTalentValues={this.updateTalentValues}\n            refreshApp={this.refreshApp}\n            talentAttackLevelExtra={this.talentAttackLevelExtra}\n            talentSkillLevelExtra={this.talentSkillLevelExtra}\n            talentBurstLevelExtra={this.talentBurstLevelExtra}\n          />\n          <ArtifactColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateTotalStats={this.updateTotalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n            getDamageModifier={this.getDamageModifier}\n            getStatMixins={this.getStatMixins}\n            getModifierMixins={this.getModifierMixins}\n          />\n          <StatColumn\n            appState={this.state}\n            totalStats={this.totalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n          />\n          <TalentColumn talentValues={this.talentValues} />\n          <DPSColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            artifactSetBonuses={this.artifactSetBonuses}\n            getDamageModifier={this.getDamageModifier}\n            getStatMixins={this.getStatMixins}\n            getModifierMixins={this.getModifierMixins}\n            talentValues={this.talentValues}\n          />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\n// Function type definitions (for convenience)\nexport type GetModifierMixinsFn = (params?: {\n  character?: Character;\n  characterOptions?: CharacterOption[];\n  weapon?: Weapon;\n  weaponOptions?: WeaponOption[];\n  artifactSets?: ArtifactSet[];\n  artifactSetOptions?: ArtifactSetOption[];\n  teamCharacters?: Character[];\n  teamOptions?: CharacterOption[];\n  artifactBuffOptions?: ArtifactSetOption[];\n  updateCache?: boolean;\n}) => ModifierMixin[];\n\nexport type GetStatMixinsFn = (params?: {\n  character?: Character;\n  characterOptions?: CharacterOption[];\n  weapon?: Weapon;\n  weaponOptions?: WeaponOption[];\n  artifactSets?: ArtifactSet[];\n  artifactSetOptions?: ArtifactSetOption[];\n  teamCharacters?: Character[];\n  teamOptions?: CharacterOption[];\n  artifactBuffOptions?: ArtifactSetOption[];\n  updateCache?: boolean;\n}) => StatMixin[];\n\nexport type GetDamageModifierFn = (params?: {\n  characterLevel?: number;\n  enemyLevel?: number;\n  enemyRes?: Resistance;\n  critType?: CritType;\n  reaction?: Reaction;\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n  modifierMixins?: ModifierMixin[];\n}) => DamageModifier;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}