{"version":3,"sources":["js/Data.ts","js/talent/types.ts","js/option/Option.ts","js/option/artifactSetOptions/ArtifactSetOption.ts","js/option/artifactSetOptions/ArchaicPetraOption.ts","js/option/artifactSetOptions/BerserkerOption.ts","js/option/artifactSetOptions/BlizzardStrayerOption.ts","js/option/artifactSetOptions/BloodstainedChivalryOption.ts","js/option/artifactSetOptions/BraveHeartOption.ts","js/option/artifactSetOptions/CrimsonWitchOption.ts","js/option/artifactSetOptions/HeartOfDepthOption.ts","js/option/artifactSetOptions/InstructorOption.ts","js/option/artifactSetOptions/LavawalkerOption.ts","js/option/artifactSetOptions/MaidenBelovedOption.ts","js/option/artifactSetOptions/MartialArtistOption.ts","js/option/artifactSetOptions/NoblesseObligeOption.ts","js/option/artifactSetOptions/PaleFlameOption.ts","js/option/artifactSetOptions/RetracingBolideOption.ts","js/option/artifactSetOptions/ShimenawaOption.ts","js/option/artifactSetOptions/TenacityOption.ts","js/option/artifactSetOptions/ThundersootherOption.ts","js/option/artifactSetOptions/index.ts","js/option/artifactSetOptions/ViridescentVenererOption.ts","js/option/characterOptions/CharacterOption.ts","js/option/characterOptions/AyakaOption.ts","js/option/characterOptions/ChongyunOption.ts","js/option/characterOptions/DilucOption.ts","js/option/characterOptions/HuTaoOption.ts","js/option/characterOptions/ElementalAbsorptionOption.ts","js/option/characterOptions/KazuhaOption.ts","js/option/characterOptions/NoelleOption.ts","js/option/characterOptions/SayuOption.ts","js/option/characterOptions/SucroseOption.ts","js/option/characterOptions/index.ts","js/option/characterOptions/VentiOption.ts","js/option/characterOptions/XiaoOption.ts","js/option/characterOptions/YanfeiOption.ts","js/option/characterOptions/YoimiyaOption.ts","js/option/OptionUtils.ts","js/Stat.ts","js/artifact/types.ts","js/artifact/Artifact.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/Picker.tsx","component/ArtifactBlock.tsx","component/Column.tsx","component/ArtifactColumn.tsx","component/ArtifactSetPicker.tsx","component/IntInput.tsx","component/Checkbox.tsx","component/OptionInput.tsx","component/ArtifactSetInputBlock.tsx","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","js/artifact/ArtifactSetBonus.ts","js/artifact/ArtifactSet.ts","js/Resistance.ts","js/talent/DefaultTalent.ts","js/talent/Talent.ts","js/talent/AyakaTalent.ts","js/talent/JeanTalent.ts","js/talent/LisaTalent.ts","js/talent/BarbaraTalent.ts","js/talent/KaeyaTalent.ts","js/talent/DilucTalent.ts","js/talent/RazorTalent.ts","js/talent/AmberTalent.ts","js/talent/VentiTalent.ts","js/talent/XianglingTalent.ts","js/talent/BeidouTalent.ts","js/talent/XingqiuTalent.ts","js/talent/XiaoTalent.ts","js/talent/NingguangTalent.ts","js/talent/KleeTalent.ts","js/talent/ZhongliTalent.ts","js/talent/FischlTalent.ts","js/talent/BennettTalent.ts","js/talent/TartagliaTalent.ts","js/talent/NoelleTalent.ts","js/talent/QiqiTalent.ts","js/talent/ChongyunTalent.ts","js/talent/GanyuTalent.ts","js/talent/AlbedoTalent.ts","js/talent/DionaTalent.ts","js/talent/MonaTalent.ts","js/talent/KeqingTalent.ts","js/talent/SucroseTalent.ts","js/talent/XinyanTalent.ts","js/talent/RosariaTalent.ts","js/talent/HutaoTalent.ts","js/talent/KazuhaTalent.ts","js/talent/YanfeiTalent.ts","js/talent/YoimiyaTalent.ts","js/talent/EulaTalent.ts","js/talent/TalentUtil.ts","js/talent/SayuTalent.ts","js/character/passive/CharacterPassive.ts","js/character/passive/YoimiyaPassive.ts","js/modifier/CritType.ts","js/character/Character.ts","js/weapon/Weapon.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","TalentType","Element","AttackType","ScalingType","Option","this","ArtifactSetOption","threshold","archaicPetraOptions","value","choices","stats","berserkerOptions","critRate","blizzardStrayerOptions","bloodstainedChivalryOptions","chargedDmgBonus","braveHeartOptions","dmgBonus","crimsonWitchOptions","param","bonuses","find","stat","pyroDmgBonus","heartOfDepthOptions","normalDmgBonus","instructorOptions","elementalMastery","lavawalkerOptions","maidenBelovedOptions","healedBonus","martialArtistOptions","noblesseObligeOptions","atkBonus","paleFlameOptions","physicalDmgBonus","retracingBolideOptions","shimenawaOptions","plungeDmgBonus","tenacityOptions","shieldStrength","thundersootherOptions","artifactSetOptions","braveheart","berserker","martialartist","instructor","blizzardstrayer","thundersoother","lavawalker","maidenbeloved","viridescentvenerer","Cryo","Electro","Hydro","Pyro","modifier","enemyResReduction","add","crimsonwitchofflames","noblesseoblige","bloodstainedchivalry","archaicpetra","retracingbolide","heartofdepth","tenacityofthemillelith","paleflame","shimenawasreminiscence","CharacterOption","ayakaOptions","infusion","chongyunOptions","dilucOptions","_talentAttackLevel","_talentSkillLevel","_talentBurstLevel","ascensionLevel","passiveData","hutaoOptions","talentSkillLevel","skillParams","Skill","flatAtk","flatHp","ElementalAbsoprtionOption","elementalAbsorption","kazuhaOptions","infusionPlunge","Anemo","noelleOptions","talentBurstLevel","burstParams","Burst","totalDef","baseDef","defBonus","flatDef","Geo","sayuOptions","sucroseOptions","characterOptions","ayaka","diluc","venti","xiao","noelle","chongyun","sucrose","hutao","kazuha","yanfei","yoimiya","yoimiyaSkill","sayu","defaultOptions","getArtifactSetOptions","isStatsApplicable","option","applyOnStats","isModifierApplicable","applyOnModifier","getStatDisplayValue","isPercentage","isNaN","toFixed","Math","round","toString","getDamageDisplayValue","values","str","length","every","slice","forEach","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","talentAttackLevel","severedFateBonus","burstDmgBonus","burstDmgBonusByEnergyRechargeRatio","burstDmgBonusByEnergyRechargeMax","baseStats","characterStats","weaponStats","innateStats","Object","entries","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","totalStats","baseAtk","baseHp","hpBonus","critDmg","energyRecharge","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","skillDmgBonus","chargedCritRate","capitalize","toUpperCase","concat","ArtifactType","InputStat","rawValue","Artifact","mainStat","subStats","prop","setProp","setValue","i","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","htmlFor","className","label","React","Component","FloatInput","parseFloat","InputRow","children","Picker","selectedValue","target","handleChange","onChange","Item","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactMainStatValue","setMainStatValue","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatValue","name","statObj","Column","ArtifactColumn","appState","updateTotalStats","setAppState","ArtifactSetPicker","setArtifactSetId","index","artifactSetId","sort","name1","name2","localeCompare","data","IntInput","Checkbox","checked","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","isBooleanOption","isPickerOption","choice","isNumberOption","ArtifactSetInputBlock","artifactSets","flatMap","artifactSet","options","updateArtifactSetBonuses","setArtifactSetPieces","CharacterPicker","setCharacterId","CharacterInputBlock","getOptions","setCharacterLevel","setIsCharacterAscended","isAscended","hasAscended","ModifierInputBlock","setEnemyLevel","updateTalentValues","enemyLevel","setEnemyRes","enemyRes","set","setCritType","critType","ToggleButtonGroup","size","ToggleButton","variant","element","get","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","weaponLevel","setIsWeaponAscended","InputColumn","ArtifactSetStatBlock","keys","filter","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","talentValues","description","damage","TalentColumn","Attack","defaultSetBonus","Relic_ExtraAtkCritUp","Relic_AllElemResistUp","Relic_AtkAndExtraAtkUp","Relic_SkillDamageUp","Relic_MeleeAttackUp","Relci_RangerAttackUp","Relic_ElementalBurstUp","Relic_ElementalBurstUpByChargeEfficiency","Relic_GiantKiller","Relic_LowHPGainExtraCritRate","Relic_SkillEnhanceNormalAtkAndExtraAtk","Relic_ReactionGainExtraElemMasteryForTeam","Relic_CriticUpAgainstIceAndFrozen","Relic_DamageUpAgainstElectric","Relic_DamageUpAgainstFireAndBurning","Relic_SkillEnhanceCured","Relic_TeamAtkupAfterElementalBurst","Relic_KillEnhanceExtraAtk","Relic_ElementDmgUpAfterCrystalShield","Relic_ShieldEnhanceAtk","Relic_WaterSkillEnhanceNormalAtkAndExtraAtk","Relic_ShieldCostUpWhenElementalArtHit","Relic_AttackUpWhenNormalAtkAndExtraAtkHit","Relic_NormalDamageUpIfCostEnergy","Relic_ReactionWindEnhance","Relic_ReactionFireEnhance","Relic_ReactionElectricEnhance","Relic_AbsorbTeamElemResist","Relic_ElemDmgEnhanceElemResist","Relic_KillingRefreshSkill","Relic_UltGainEnergyForTeam","Relic_RestoreEnergyGainExtraEnergyForTeam","Relic_ChestHealSelf","Relic_CoinHealSelf","Relic_UltHealSelf","Relic_FireResistance","Relic_WaterResistance","Relic_ElectricResistance","Relic_IceResistance","ArtifactSet","_id","bonusThresholds","setBonuses","_pieces","getStatsAt","prevPieces","getSetBonusesAt","setBonus","statBonus","extraBonus","extraBonuses","newOptions","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","Map","Physical","prevValue","defaultTalentFn","defaultTalent","attackLightMulti","normalHits","chargedHits","skillDefault","burstBase","multiplier","jean","attackLightDefault","healingSkillBase","scalingType","lisa","talentDmg","push","skillBase","burstDefault","barbara","kaeya","attackHeavyDefault","talentDamage","razor","attackParams","amber","attackBowDefault","chargedElement","hpBase","flatBonus","xiangling","beidou","shieldBase","xingqiu","skillMultiBase","hits","ningguang","normalAtkDmg","calculateTotalDamage","attackType","Normal","chargedAttackDefault","starJadeDmg","Charged","plungeAttackDefault","klee","zhongli","fischl","bennett","tartaglia","riptideFlashDmg","riptideBurstDmg","normalAttackMulti","chargedAttackMulti","skillDamage","Defense","qiqi","ganyu","normalAttackDefault","aimedShotDmg","chargedDmg","albedo","transientBlossomDmg","diona","holdModifier","dionaHoldSkill","mona","modifiedStats","keqing","hit4Dmg","hit5Dmg","consecutiveSlashDmg","xinyan","rosaria","burstMultiBase","hit6Dmg","hit3Dmg","hit5DmgSingle","normalAttackParams","chargedAimedShotDmg","kindlingArrowDmg","eula","chargedAttackHeavy","attackHeavyMulti","lightfallSwordParams","lightfallSwordTalent","elementalParams","calculateBaseDamage","flatDmg","Hp","baseDmg","getDamageBonus","crit","min","characterLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","calculateHp","hitCount","damages","hit","Plunge","aimShotDefault","flatHealing","calculateHealing","dmgAbsorption","calculateDmgAbsorption","characterPassives","Yoimiya_PermanentSkill_1","defaultPassiveFn","getCharacterPassiveFn","passiveId","CritType","Character","statCurveMapping","_level","_hasAscended","passiveOptions","getInnateStatsAt","getCharacterOptions","getPassiveOptions","prevAscensionLevel","getAscensionLevel","obj","charStatCurves","curve","bonus","talentLevel","getTalentFn","damageFn","passiveDatas","keptOptionIds","includes","Weapon","rank","_weaponLevel","weaponStatCurves","App","None","reaction","callback","newArtifactSets","newChar","damageModifer","getDamageModifier","getTalentDamageAt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.348ea881.chunk.js","sourcesContent":["import type * as Data from '../data/types';\nimport type { TalentType } from './talent/types';\n\nimport characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\nimport talentDataRaw from '../data/talentdata.json';\nimport artifactSetDataRaw from '../data/artifactsetdata.json';\nimport artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\n\nimport propMappingRaw from '../data/propmapping.json';\nimport talentDescMappingRaw from '../data/talentdescmapping.json';\nimport optionMappingRaw from '../data/optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonus>);\n}\n\n// Helper functions for accessing data properties\nfunction getData(id: string, dataObj: Record<string, any>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonus {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport interface TalentValue {\n  description: string;\n  damage: number[];\n}\n\nexport interface TalentValueSet {\n  attack: TalentValue[];\n  skill: TalentValue[];\n  burst: TalentValue[];\n}\n\nexport interface TalentProps {\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { Stats } from '../../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  applyOnStats: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number,\n    ascensionLevel: number\n  ) => void;\n}\n\nexport interface IModifierApplicable {\n  applyOnModifier: (modifier: DamageModifier) => void;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionPicker, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value !== '') {\n      const params = getArtifactSetBonusParams('archaicpetra', 4);\n      stats[`${this.value}DmgBonus`] =\n        params[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n    }\n  }\n}\n\nconst archaicPetraOptions = [ArchaicPetra4PcOption];\nexport default archaicPetraOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('berserker', 4);\n      stats.critRate = params[0] + (stats.critRate ?? 0);\n    }\n  }\n}\n\nconst berserkerOptions = [Berserker4PcOption];\nexport default berserkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n      stats.critRate = params[0] + (stats.critRate ?? 0);\n    }\n  }\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n      stats.critRate = params[1] + (stats.critRate ?? 0);\n    }\n  }\n}\n\nconst blizzardStrayerOptions = [\n  BlizzardStrayer4PcCryoOption,\n  BlizzardStrayer4PcFrozenOption,\n];\nexport default blizzardStrayerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BloodStainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n      stats.chargedDmgBonus = params[1] + (stats.chargedDmgBonus ?? 0);\n    }\n  }\n}\n\nconst bloodstainedChivalryOptions = [BloodStainedChivalry4PcOption];\nexport default bloodstainedChivalryOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('braveheart', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  }\n}\n\nconst braveHeartOptions = [BraveHeart4PcOption];\nexport default braveHeartOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('crimsonWitch4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n      const param = setBonusData[2].bonuses.find(\n        ({ stat }) => stat === 'pyroDmgBonus'\n      )?.value!!;\n\n      stats.pyroDmgBonus = param / 2 + (stats.pyroDmgBonus ?? 0);\n    }\n  }\n}\n\nconst crimsonWitchOptions = [CrimsonWitch4PcOption];\nexport default crimsonWitchOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('heartofdepth', 4);\n      stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n    }\n  }\n}\n\nconst heartOfDepthOptions = [HeartOfDepth4PcOption];\nexport default heartOfDepthOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('instructor', 4);\n      stats.elementalMastery = params[1] + (stats.elementalMastery ?? 0);\n    }\n  }\n}\n\nconst instructorOptions = [Instructor4PcOption];\nexport default instructorOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('lavawalker', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  }\n}\n\nconst lavawalkerOptions = [Lavawalker4PcOption];\nexport default lavawalkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('maidenbeloved', 4);\n      stats.healedBonus = params[0] + (stats.healedBonus ?? 0);\n    }\n  }\n}\n\nconst maidenBelovedOptions = [MaidenBeloved4PcOption];\nexport default maidenBelovedOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('martialartist', 4);\n      stats.normalDmgBonus = params[2] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[2] + (stats.chargedDmgBonus ?? 0);\n    }\n  }\n}\n\nconst martialArtistOptions = [MartialArtist4PcOption];\nexport default martialArtistOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('noblesseoblige', 4);\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n    }\n  }\n}\n\nconst noblesseObligeOptions = [NoblesseOblige4PcOption];\nexport default noblesseObligeOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionNumber, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    const params = getArtifactSetBonusParams('paleflame', 4);\n\n    if (this.value >= 1) {\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n    }\n\n    if (this.value >= 2) {\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      stats.physicalDmgBonus = params[3] + (stats.physicalDmgBonus ?? 0);\n    }\n  }\n}\n\nconst paleFlameOptions = [PaleFlame4PcOption];\nexport default paleFlameOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('retracingbolide', 4);\n      stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n    }\n  }\n}\n\nconst retracingBolideOptions = [RetracingBolide4PcOption];\nexport default retracingBolideOptions;\n","import { Stats } from '../../../data/types';\nimport { getArtifactSetBonusData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport ArtifactSetOption from './ArtifactSetOption';\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const setBonusData = getArtifactSetBonusData('shimenawasreminiscence');\n      const param = setBonusData[4].bonusExtra.params[1];\n      stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n      stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n    }\n  }\n}\n\nconst shimenawaOptions = [Shimenawa4PcOption];\nexport default shimenawaOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      stats.shieldStrength = params[1] + (stats.shieldStrength ?? 0);\n    }\n  }\n}\n\nconst tenacityOptions = [Tenacity4PcOption];\nexport default tenacityOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('thundersoother', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  }\n}\n\nconst thundersootherOptions = [Thundersoother4PcOption];\nexport default thundersootherOptions;\n","import archaicPetraOptions from './ArchaicPetraOption';\nimport ArtifactSetOption from './ArtifactSetOption';\nimport berserkerOptions from './BerserkerOption';\nimport blizzardStrayerOptions from './BlizzardStrayerOption';\nimport bloodstainedChivalryOptions from './BloodstainedChivalryOption';\nimport braveHeartOptions from './BraveHeartOption';\nimport crimsonWitchOptions from './CrimsonWitchOption';\nimport heartOfDepthOptions from './HeartOfDepthOption';\nimport instructorOptions from './InstructorOption';\nimport lavawalkerOptions from './LavawalkerOption';\nimport maidenBelovedOptions from './MaidenBelovedOption';\nimport martialArtistOptions from './MartialArtistOption';\nimport noblesseObligeOptions from './NoblesseObligeOption';\nimport paleFlameOptions from './PaleFlameOption';\nimport retracingBolideOptions from './RetracingBolideOption';\nimport shimenawaOptions from './ShimenawaOption';\nimport tenacityOptions from './TenacityOption';\nimport thundersootherOptions from './ThundersootherOption';\nimport viridescentVenererOptions from './ViridescentVenererOption';\n\nexport { default as ArtifactSetOption } from './ArtifactSetOption';\n\nexport const artifactSetOptions: Record<string, typeof ArtifactSetOption[]> = {\n  braveheart: braveHeartOptions,\n  berserker: berserkerOptions,\n  martialartist: martialArtistOptions,\n  instructor: instructorOptions,\n  blizzardstrayer: blizzardStrayerOptions,\n  thundersoother: thundersootherOptions,\n  lavawalker: lavawalkerOptions,\n  maidenbeloved: maidenBelovedOptions,\n  viridescentvenerer: viridescentVenererOptions,\n  crimsonwitchofflames: crimsonWitchOptions,\n  noblesseoblige: noblesseObligeOptions,\n  bloodstainedchivalry: bloodstainedChivalryOptions,\n  archaicpetra: archaicPetraOptions,\n  retracingbolide: retracingBolideOptions,\n  heartofdepth: heartOfDepthOptions,\n  tenacityofthemillelith: tenacityOptions,\n  paleflame: paleFlameOptions,\n  shimenawasreminiscence: shimenawaOptions,\n};\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\n\nclass ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value !== '') {\n      const params = getArtifactSetBonusParams('viridescentvenerer', 4);\n      modifier.enemyResReduction.add(this.value as Element, params[1]);\n    }\n  }\n}\n\nconst viridescentVenererOptions = [ViridescentVenerer4PcOption];\nexport default viridescentVenererOptions;\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Cryo;\n    }\n  }\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Cryo;\n    }\n  }\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { Stats } from '../../../data/types';\nimport { getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n    }\n  }\n\n  applyOnStats(\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    _talentBurstLevel: number,\n    ascensionLevel: number\n  ) {\n    if (this.value && ascensionLevel >= 4) {\n      const params = getTalentData('diluc').passives.find(\n        (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n      )?.params;\n      const pyroDmgBonus = params?.[1] ?? NaN;\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    }\n  }\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  applyOnStats(\n    stats: Stats,\n    _talentAttackLevel: number,\n    talentSkillLevel: number,\n    _talentBurstLevel: number\n  ) {\n    if (this.value) {\n      let skillParams = getTalentStatsAt(\n        TalentType.Skill,\n        talentSkillLevel,\n        getTalentData('hutao')\n      );\n      stats.flatAtk += skillParams[1] * stats.flatHp;\n    }\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n    }\n  }\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value !== '') {\n      modifier.elementalAbsorption = this.value as Element;\n    }\n  }\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\nimport ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusionPlunge = Element.Anemo;\n    }\n  }\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  applyOnStats(\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) {\n    if (this.value) {\n      let burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('noelle')\n      );\n\n      const totalDef =\n        (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n        (stats.flatDef ?? 0);\n\n      stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n    }\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Geo;\n    }\n  }\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import ayakaOptions from './AyakaOption';\nimport CharacterOption from './CharacterOption';\nimport chongyunOptions from './ChongyunOption';\nimport dilucOptions from './DilucOption';\nimport hutaoOptions from './HuTaoOption';\nimport kazuhaOptions from './KazuhaOption';\nimport noelleOptions from './NoelleOption';\nimport sayuOptions from './SayuOption';\nimport sucroseOptions from './SucroseOption';\nimport ventiOptions from './VentiOption';\nimport xiaoOptions from './XiaoOption';\nimport yanfeiOptions from './YanfeiOption';\nimport yoimiyaOptions from './YoimiyaOption';\n\nexport { default as CharacterOption } from './CharacterOption';\n\nexport const characterOptions: Record<string, typeof CharacterOption[]> = {\n  ayaka: ayakaOptions,\n  diluc: dilucOptions,\n  venti: ventiOptions,\n  xiao: xiaoOptions,\n  noelle: noelleOptions,\n  chongyun: chongyunOptions,\n  sucrose: sucroseOptions,\n  hutao: hutaoOptions,\n  kazuha: kazuhaOptions,\n  yanfei: yanfeiOptions,\n  yoimiya: yoimiyaOptions,\n  sayu: sayuOptions,\n};\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  applyOnStats(\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) {\n    if (this.value) {\n      let burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('xiao')\n      );\n\n      stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n      stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n    }\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Anemo;\n    }\n  }\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  applyOnStats(\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) {\n    if (this.value) {\n      const burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('yanfei')\n      );\n      stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n    }\n  }\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n      modifier.yoimiyaSkill = true;\n    }\n  }\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { artifactSetOptions } from './artifactSetOptions';\nimport { characterOptions } from './characterOptions';\nimport Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nconst defaultOptions: typeof Option[] = [];\n\nexport function getCharacterOptions(id: string) {\n  return characterOptions[id] ?? defaultOptions;\n}\n\nexport function getArtifactSetOptions(id: string) {\n  return artifactSetOptions[id] ?? defaultOptions;\n}\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).applyOnStats !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (\n    (option as unknown as IModifierApplicable).applyOnModifier !== undefined\n  );\n}\n","import { Stats } from '../data/types';\nimport Artifact from './artifact/Artifact';\nimport Character from './character/Character';\nimport { talentDescMapping, optionMapping } from './Data';\nimport { isStatsApplicable } from './option';\nimport CharacterOption from './option/characterOptions/CharacterOption';\nimport Weapon from './weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value: number, isPercentage: boolean) {\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputed value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  characterOptions: CharacterOption[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number\n) {\n  // Remove previous Severed Fate set bonus (if applicable)\n  if (\n    artifactSetBonuses.severedFateBonus !== undefined &&\n    !isNaN(artifactSetBonuses.severedFateBonus)\n  ) {\n    artifactSetBonuses.burstDmgBonus -= artifactSetBonuses.severedFateBonus;\n    if (\n      artifactSetBonuses.burstDmgBonusByEnergyRechargeRatio === undefined ||\n      artifactSetBonuses.burstDmgBonusByEnergyRechargeMax === undefined\n    ) {\n      delete artifactSetBonuses.severedFateBonus;\n    }\n  }\n\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n\n  // Apply character options (only)\n  characterOptions.forEach((option) => {\n    if (isStatsApplicable(option)) {\n      option.applyOnStats(\n        totalStats,\n        talentAttackLevel,\n        talentSkillLevel,\n        talentBurstLevel,\n        character.ascensionLevel\n      );\n    }\n  });\n\n  // Severed Fate set bonus (if applicable)\n  if (\n    combinedStats.burstDmgBonusByEnergyRechargeRatio !== undefined &&\n    combinedStats.burstDmgBonusByEnergyRechargeMax !== undefined\n  ) {\n    let burstDmgBonus =\n      totalStats.energyRecharge *\n      combinedStats.burstDmgBonusByEnergyRechargeRatio;\n\n    if (burstDmgBonus > combinedStats.burstDmgBonusByEnergyRechargeMax) {\n      burstDmgBonus = combinedStats.burstDmgBonusByEnergyRechargeMax;\n    }\n\n    artifactSetBonuses.severedFateBonus = burstDmgBonus;\n\n    if (!isNaN(burstDmgBonus)) {\n      // Update artifact set stats too so that Burst DMG Bonus is reflected in the artifact set block\n      artifactSetBonuses.burstDmgBonus =\n        burstDmgBonus + (artifactSetBonuses.burstDmgBonus ?? 0);\n\n      totalStats.burstDmgBonus =\n        burstDmgBonus + (totalStats.burstDmgBonus ?? 0);\n    }\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../../data/types';\nimport { propMapping } from '../Data';\nimport { convertStatValue } from '../Stat';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n","import { Stats } from '../../data/types';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  mainStat: InputStat = new InputStat();\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(type: ArtifactType) {\n    this.type = type;\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.setProp(prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.setValue(value);\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value;\n        } else {\n          stats[subStat.stat] = NaN;\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import React from 'react';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <input\n          type='number'\n          value={displayString}\n          onInput={this.handleInput}\n          className={this.props.className}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\n\nclass InputRow extends React.Component {\n  render() {\n    return <div className='input-row'>{this.props.children}</div>;\n  }\n}\n\nexport default InputRow;\n","import React from 'react';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <select\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={this.props.className}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </select>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../js/artifact/Artifact';\nimport { propMapping } from '../js/Data';\nimport { capitalize } from '../js/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactMainStatValue = (value: number) => {\n    this.props.artifact.setMainStatValue(value);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <p>Main Stat</p>\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label=''\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <FloatInput\n            id={`artifact-${artifact.type}-main-stat-value`}\n            label=''\n            defaultValue={NaN}\n            value={artifact.mainStat.rawValue}\n            onInput={this.setArtifactMainStatValue}\n            isLabelShown={false}\n            className='stat-input'\n          />\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import React from 'react';\n\ntype ColumnProps = {\n  className?: string;\n};\n\nclass Column extends React.Component<ColumnProps> {\n  render() {\n    return (\n      <div className={`column ${this.props.className ?? ''}`}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Column;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactBlock from './ArtifactBlock';\nimport Column from './Column';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Column className='input-column'>\n        <h2>Artifacts</h2>\n        {appState.artifacts.map((artifact) => (\n          <ArtifactBlock\n            artifact={artifact}\n            updateArtifactState={this.updateArtifactState}\n            key={artifact.type}\n          />\n        ))}\n      </Column>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <input\n          type='checkbox'\n          checked={value}\n          onChange={this.handleChange}\n          className={this.props.className}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../js/option';\nimport {\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n} from '../js/option/Option';\nimport { capitalize, getOptionName } from '../js/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport { ArtifactSetOption } from '../js/option/artifactSetOptions';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].id = id;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../js/character/Character';\nimport { CharacterOption } from '../js/option/characterOptions';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const character = this.props.appState.character;\n    character.id = id;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../js/modifier/CritType';\nimport Resistance from '../js/Resistance';\nimport { capitalize } from '../js/Stat';\nimport { Element } from '../js/talent/types';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType } = this.props.appState;\n    return (\n      <div className='input-block'>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <div className='input-block'>\n        {' '}\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Weapon from '../js/weapon/Weapon';\nimport Checkbox from './Checkbox';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ weapon }: { weapon?: Weapon }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const weapon = this.props.appState.weapon;\n    weapon.id = id;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport Character from '../js/character/Character';\nimport CritType from '../js/modifier/CritType';\nimport { ArtifactSetOption } from '../js/option/artifactSetOptions';\nimport { CharacterOption } from '../js/option/characterOptions';\nimport Resistance from '../js/Resistance';\nimport Weapon from '../js/weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport Column from './Column';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n    } = this.props;\n\n    return (\n      <Column className='input-column'>\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n      </Column>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}:{' '}\n              {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../js/character/Character';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}:{' '}\n            {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}:{' '}\n                {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\nimport Weapon from '../js/weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}:{' '}\n            {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport Column from './Column';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Column className='stat-column'>\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Column>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../js/Data';\nimport { capitalize, getDamageDisplayValue } from '../js/Stat';\nimport { TalentType, TalentValue } from '../js/talent/types';\n\ntype TalentBlockProps = {\n  type: TalentType;\n  talentValues: TalentValue[];\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(this.props.type)}</h3>\n        {this.props.talentValues.map(({ description, damage }) => (\n          <p key={description}>\n            {talentDescMapping[description]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport Column from './Column';\nimport { TalentType, TalentValueSet } from '../js/talent/types';\nimport TalentBlock from './TalentBlock';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const { attack, skill, burst } = this.props.talentValues;\n\n    return (\n      <Column className='talent-column'>\n        <div className='result-block'>\n          <h2>Talents</h2>\n          <TalentBlock type={TalentType.Attack} talentValues={attack} />\n          <TalentBlock type={TalentType.Skill} talentValues={skill} />\n          <TalentBlock type={TalentType.Burst} talentValues={burst} />\n        </div>\n      </Column>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import { ArtifactSetBonusFunction } from './types';\n\nexport const artifactSetBonuses: Record<string, ArtifactSetBonusFunction> = {\n  defaultSetBonus,\n  Relic_ExtraAtkCritUp,\n  Relic_AllElemResistUp,\n  Relic_AtkAndExtraAtkUp,\n  Relic_SkillDamageUp,\n  Relic_MeleeAttackUp,\n  Relci_RangerAttackUp,\n  Relic_ElementalBurstUp,\n  Relic_ElementalBurstUpByChargeEfficiency,\n\n  // Handled through Options\n  Relic_GiantKiller: defaultSetBonus,\n  Relic_LowHPGainExtraCritRate: defaultSetBonus,\n  Relic_SkillEnhanceNormalAtkAndExtraAtk: defaultSetBonus,\n  Relic_ReactionGainExtraElemMasteryForTeam: defaultSetBonus,\n  Relic_CriticUpAgainstIceAndFrozen: defaultSetBonus,\n  Relic_DamageUpAgainstElectric: defaultSetBonus,\n  Relic_DamageUpAgainstFireAndBurning: defaultSetBonus,\n  Relic_SkillEnhanceCured: defaultSetBonus,\n  Relic_TeamAtkupAfterElementalBurst: defaultSetBonus,\n  Relic_KillEnhanceExtraAtk: defaultSetBonus,\n  Relic_ElementDmgUpAfterCrystalShield: defaultSetBonus,\n  Relic_ShieldEnhanceAtk: defaultSetBonus,\n  Relic_WaterSkillEnhanceNormalAtkAndExtraAtk: defaultSetBonus,\n  Relic_ShieldCostUpWhenElementalArtHit: defaultSetBonus,\n  Relic_AttackUpWhenNormalAtkAndExtraAtkHit: defaultSetBonus,\n  Relic_NormalDamageUpIfCostEnergy: defaultSetBonus,\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n  Relic_ReactionWindEnhance,\n\n  // Reaction Dmg Up not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionFireEnhance,\n\n  // Not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionElectricEnhance: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Requires info about team composition\n  Relic_AbsorbTeamElemResist: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Probably can be implemented with a dropdown option for prev received elem dmg\n  Relic_ElemDmgEnhanceElemResist: defaultSetBonus,\n\n  // Not implemented. CD reduction effect.\n  Relic_KillingRefreshSkill: defaultSetBonus,\n\n  // Not implemented. Energy effect.\n  Relic_UltGainEnergyForTeam: defaultSetBonus,\n  Relic_RestoreEnergyGainExtraEnergyForTeam: defaultSetBonus,\n\n  // Not implemented. Healing effect when opening chests.\n  Relic_ChestHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when getting Mora.\n  Relic_CoinHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when burst.\n  Relic_UltHealSelf: defaultSetBonus,\n\n  // Not implemented. Element duration reduction.\n  Relic_FireResistance: defaultSetBonus,\n  Relic_WaterResistance: defaultSetBonus,\n  Relic_ElectricResistance: defaultSetBonus,\n  Relic_IceResistance: defaultSetBonus,\n};\n\n// Placeholder function\nfunction defaultSetBonus() {\n  return [];\n}\n\nfunction Relic_ExtraAtkCritUp(params: number[]) {\n  return [\n    {\n      stat: 'chargedCritRate',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_AllElemResistUp(params: number[]) {\n  const elements = ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'];\n  return elements.map((element) => {\n    return {\n      stat: `${element}Res`,\n      value: params[0],\n    };\n  });\n}\n\nfunction Relic_AtkAndExtraAtkUp(params: number[]) {\n  return [\n    {\n      stat: 'normalDmgBonus',\n      value: params[0],\n    },\n    {\n      stat: 'chargedDmgBonus',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_SkillDamageUp(params: number[]) {\n  return [\n    {\n      stat: 'skillDmgBonus',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_MeleeAttackUp(params: number[]) {\n  // Only for sword, polearm, claymore characters\n  // Did not make this an Option because this would likely not want to be disabled\n  // Calculation will be wrong if used on a catalyst, bow character\n  // Checking for that would require character weapon type to be implemented first\n  return [\n    {\n      stat: 'normalDmgBonus',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_ReactionWindEnhance() {\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n\n  // Elemental Res shred implemented through Options\n  return defaultSetBonus();\n}\n\nfunction Relci_RangerAttackUp(params: number[]) {\n  // Typo is present in the game data\n  // Only for catalyst, bow characters\n  // See Relic_MeleeAttackUp for more details\n  return [\n    {\n      stat: 'chargedDmgBonus',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_ReactionFireEnhance() {\n  // Reaction Dmg Up not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n\n  // Pyro Dmg Bonus implemented through Options\n  return defaultSetBonus();\n}\n\nfunction Relic_ElementalBurstUp(params: number[]) {\n  return [\n    {\n      stat: 'burstDmgBonus',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_ElementalBurstUpByChargeEfficiency(params: number[]) {\n  // Fake stats used to calculate Burst DMG Bonus in getTotalStats\n  return [\n    {\n      stat: 'burstDmgBonusByEnergyRechargeRatio',\n      value: params[0],\n    },\n    {\n      stat: 'burstDmgBonusByEnergyRechargeMax',\n      value: params[1],\n    },\n  ];\n}\n","import { getArtifactSetData, getArtifactSetBonusData } from '../Data';\nimport { artifactSetBonuses as extraBonuses } from './ArtifactSetBonus';\nimport { getArtifactSetOptions } from '../option';\nimport { ArtifactSetBonus, Stats } from '../../data/types';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\n\nexport default class ArtifactSet {\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonuses = getArtifactSetBonusData(value);\n\n    this.options = this.getOptions(this.pieces);\n    this.stats = this.getStatsAt(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonuses?: ArtifactSetBonus;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n    this.options = this.getOptions(this.pieces, prevPieces);\n    this.stats = this.getStatsAt(this.pieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n\n  getSetBonusesAt(pieces: number) {\n    return this.bonusThresholds\n      ?.filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonuses?.[threshold]);\n  }\n\n  getStatsAt(pieces: number) {\n    let stats: Stats = {};\n\n    let setBonuses = this.getSetBonusesAt(pieces);\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n\n      // Special bonuses, has to be handled individually\n      let extraBonus = setBonus?.bonusExtra;\n      if (extraBonus !== undefined && extraBonus.type !== '') {\n        let bonusFn =\n          extraBonuses[extraBonus.type] ?? extraBonuses['defaultSetBonus'];\n\n        let params = extraBonus.params;\n\n        let statBonuses = bonusFn(params);\n\n        statBonuses.forEach((statBonus) => {\n          if (stats[statBonus.stat] !== undefined) {\n            stats[statBonus.stat] += statBonus.value;\n          } else {\n            stats[statBonus.stat] = statBonus.value;\n          }\n        });\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = getArtifactSetOptions(this.id);\n      return options\n        .map((Option) => new Option())\n        .filter((option) => option.threshold <= pieces);\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const newOptions = getArtifactSetOptions(this.id)\n        .map((Option) => new Option())\n        .filter(\n          (option) =>\n            option.threshold <= pieces && option.threshold > prevPieces\n        );\n\n      return this.options.concat(newOptions);\n    } else {\n      return this.options.filter((option) => option.threshold <= pieces);\n    }\n  }\n}\n","import { Element } from './talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","import Talent from './Talent';\nimport { TalentValue } from './types';\n\nconst defaultTalent: Talent = {\n  attack: defaultTalentFn,\n  skill: defaultTalentFn,\n  burst: defaultTalentFn,\n};\n\nexport default defaultTalent;\n\n// Placeholder function\nexport function defaultTalentFn(): TalentValue[] {\n  return [];\n}\n","import { TalentProps, TalentValue } from './types';\n\nimport defaultTalent from './DefaultTalent';\nimport lisaTalent from './LisaTalent';\nimport barbaraTalent from './BarbaraTalent';\nimport kaeyaTalent from './KaeyaTalent';\nimport dilucTalent from './DilucTalent';\nimport razorTalent from './RazorTalent';\nimport amberTalent from './AmberTalent';\nimport ventiTalent from './VentiTalent';\nimport xianglingTalent from './XianglingTalent';\nimport beidouTalent from './BeidouTalent';\nimport xingqiuTalent from './XingqiuTalent';\nimport xiaoTalent from './XiaoTalent';\nimport ningguangTalent from './NingguangTalent';\nimport kleeTalent from './KleeTalent';\nimport zhongliTalent from './ZhongliTalent';\nimport fischlTalent from './FischlTalent';\nimport bennettTalent from './BennettTalent';\nimport tartagliaTalent from './TartagliaTalent';\nimport noelleTalent from './NoelleTalent';\nimport qiqiTalent from './QiqiTalent';\nimport chongyunTalent from './ChongyunTalent';\nimport ganyuTalent from './GanyuTalent';\nimport albedoTalent from './AlbedoTalent';\nimport dionaTalent from './DionaTalent';\nimport monaTalent from './MonaTalent';\nimport keqingTalent from './KeqingTalent';\nimport sucroseTalent from './SucroseTalent';\nimport xinyanTalent from './XinyanTalent';\nimport rosariaTalent from './RosariaTalent';\nimport hutaoTalent from './HutaoTalent';\nimport yanfeiTalent from './YanfeiTalent';\nimport eulaTalent from './EulaTalent';\nimport jeanTalent from './JeanTalent';\nimport ayakaTalent from './AyakaTalent';\nimport yoimiyaTalent from './YoimiyaTalent';\nimport sayuTalent from './SayuTalent';\nimport kazuhaTalent from './KazuhaTalent';\n\nexport default interface Talent {\n  attack: (props: TalentProps) => TalentValue[];\n  skill: (props: TalentProps) => TalentValue[];\n  burst: (props: TalentProps) => TalentValue[];\n}\n\nexport const talents: Record<string, Talent> = {\n  defaultTalent,\n  ayaka: ayakaTalent,\n  jean: jeanTalent,\n  lisa: lisaTalent,\n  barbara: barbaraTalent,\n  kaeya: kaeyaTalent,\n  diluc: dilucTalent,\n  razor: razorTalent,\n  amber: amberTalent,\n  venti: ventiTalent,\n  xiangling: xianglingTalent,\n  beidou: beidouTalent,\n  xingqiu: xingqiuTalent,\n  xiao: xiaoTalent,\n  ningguang: ningguangTalent,\n  klee: kleeTalent,\n  zhongli: zhongliTalent,\n  fischl: fischlTalent,\n  bennett: bennettTalent,\n  tartaglia: tartagliaTalent,\n  noelle: noelleTalent,\n  qiqi: qiqiTalent,\n  chongyun: chongyunTalent,\n  ganyu: ganyuTalent,\n  albedo: albedoTalent,\n  diona: dionaTalent,\n  mona: monaTalent,\n  keqing: keqingTalent,\n  sucrose: sucroseTalent,\n  xinyan: xinyanTalent,\n  rosaria: rosariaTalent,\n  hutao: hutaoTalent,\n  kazuha: kazuhaTalent,\n  yanfei: yanfeiTalent,\n  yoimiya: yoimiyaTalent,\n  eula: eulaTalent,\n  sayu: sayuTalent,\n};\n","import Talent from './Talent';\nimport { attackLightMulti, burstBase, skillDefault } from './TalentUtil';\nimport { Element, TalentProps } from './types';\n\nconst ayakaTalent: Talent = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalent;\n\nfunction ayakaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 3, 1],\n    chargedHits: 3,\n    element: modifier.infusion ?? Element.Physical,\n    params: params\n      .slice(0, 4)\n      .concat([params[6], params[7], params[7]])\n      .concat(params.slice(7, 12)),\n    stats,\n    modifier,\n  });\n}\n\nfunction ayakaSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction ayakaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'cuttingDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'bloomDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightDefault,\n  burstBase,\n  healingSkillBase,\n  skillDefault,\n} from './TalentUtil';\nimport { Element, ScalingType, TalentProps } from './types';\n\nconst jeanTalent: Talent = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalent;\n\nfunction jeanAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({ normalHits: 5, params, stats, modifier });\n}\n\nfunction jeanSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({ element: Element.Anemo, params, stats, modifier });\n}\n\nfunction jeanBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'fieldEnterExitDmg',\n      element: Element.Anemo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'fieldActivationHealing',\n      scalingType: ScalingType.Attack,\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      scalingType: ScalingType.Attack,\n      params: params.slice(4, 6),\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst lisaTalent: Talent = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalent;\n\nfunction lisaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction lisaSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  talentDmg.push(\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Electro,\n      multiplier: params[5],\n      stats,\n      modifier,\n    })\n  );\n\n  for (let i = 0; i <= 3; i++) {\n    talentDmg.push(\n      skillBase({\n        description: `holdDmgStack${i}`,\n        element: Element.Electro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDmg;\n}\n\nfunction lisaBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackLightDefault, healingSkillBase, skillBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst barbaraTalent: Talent = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalent;\n\nfunction barbaraAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Hydro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction barbaraSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      params: params.slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenOnHit',\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'dropletDmg',\n      element: Element.Hydro,\n      multiplier: params[4],\n      stats,\n      modifier,\n    }),\n  ];\n\n  return talentDmg;\n}\n\nfunction barbaraBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    healingSkillBase({\n      description: 'hpRegen',\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillDefault, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst kaeyaTalent: Talent = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalent;\n\nfunction kaeyaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kaeyaSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kaeyaBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackHeavyDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst dilucTalent: Talent = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalent;\n\nfunction dilucAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction dilucSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      skillBase({\n        description: `${i + 1}HitDmg`,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDamage;\n}\n\nfunction dilucBurst({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['slashingDmg', 'dot', 'explosionDmg'];\n  let talentDamage = descriptions.map((description, i) => {\n    return burstBase({\n      description,\n      element: Element.Pyro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  return talentDamage;\n}\n","import { getTalentStatsAt, getTalentData } from '../Data';\nimport Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  skillBase,\n  burstDefault,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, TalentType, Element } from './types';\n\nconst razorTalent: Talent = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalent;\n\nfunction razorAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 4,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction razorSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['pressDmg', 'holdDmg'];\n  return descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n}\n\nfunction razorBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = burstDefault({\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n\n  let attackParams = getTalentStatsAt(\n    TalentType.Attack,\n    modifier.talentAttackLevel,\n    getTalentData('razor')\n  );\n\n  for (let i = 0; i < 4; i++) {\n    talentDamage.push(\n      burstBase({\n        description: `${i + 1}HitDmgSoulCompanion`,\n        element: Element.Electro,\n        multiplier: params[1] * attackParams[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, hpBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst amberTalent: Talent = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalent;\n\nfunction amberAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction amberSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Electro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    hpBase({\n      description: 'baronBunnyHp',\n      multiplier: params[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction amberBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'dmgPerWave',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push({\n    description: 'totalDmg',\n    damage: [talentDamage[0].damage[0] * 18],\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst ventiTalent: Talent = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalent;\n\nfunction ventiAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 6,\n    chargedElement: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction ventiSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'holdDmg',\n      element: Element.Anemo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction ventiBurst({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n  talentValues.push(\n    burstBase({\n      description: 'dot',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[1],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentValues;\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xianglingTalent: Talent = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalent;\n\nfunction xianglingAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 4, 1],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xianglingSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'guobaDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction xianglingBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      burstBase({\n        description: `swing${i + 1}HitDmg`,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentDamage.push(\n    burstBase({\n      description: 'pyronadoDmg',\n      element: Element.Pyro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  shieldBase,\n  skillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst beidouTalent: Talent = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalent;\n\nfunction beidouAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 5,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction beidouSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[0],\n      flatBonus: params[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'baseDmg',\n      element: Element.Electro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'dmgBonusOnHitTaken',\n      element: Element.Electro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction beidouBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'skillDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    burstBase({\n      description: 'lightningDmg',\n      element: Element.Electro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillMultiBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xingqiuTalent: Talent = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalent;\n\nfunction xingqiuAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 1, 2],\n    chargedHits: 2,\n    params: params\n      .slice(0, 3)\n      .concat(params.slice(4, 6))\n      .concat(params.slice(7)),\n    stats,\n    modifier,\n  });\n}\n\nfunction xingqiuSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillMultiBase({\n      description: 'skillDmg',\n      hits: 2,\n      element: Element.Hydro,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction xingqiuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'swordRainDmg',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import { defaultTalentFn } from './DefaultTalent';\nimport Talent from './Talent';\nimport { attackLightMulti, skillDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xiaoTalent: Talent = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n  burst: xiaoBurst,\n};\n\nexport default xiaoTalent;\n\nfunction xiaoAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  return attackLightMulti({\n    normalHits: [2, 1, 1, 2, 1, 1],\n    element,\n    params: params.slice(1, 5).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction xiaoSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xiaoBurst({ params, stats, modifier }: TalentProps) {\n  return defaultTalentFn();\n}\n","import Talent from './Talent';\nimport {\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillBase,\n  hpBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst ningguangTalent: Talent = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalent;\n\nfunction ningguangAttack({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  // Ningguang's normal attack has no combo\n  let normalAtkDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element: Element.Geo,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'normalAtkDmg',\n    damage: [normalAtkDmg],\n  });\n\n  talentDmg.push(\n    ...chargedAttackDefault({\n      element: Element.Geo,\n      params: params.slice(1, 2),\n      stats,\n      modifier,\n    })\n  );\n\n  // Ningguang's charged attack dmg per star jade\n  let starJadeDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[2],\n    element: Element.Geo,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'starJadeDmg',\n    damage: [starJadeDmg],\n  });\n\n  talentDmg.push(\n    ...plungeAttackDefault({\n      element: Element.Geo,\n      params: params.slice(4),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDmg;\n}\n\nfunction ningguangSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    hpBase({\n      description: 'jadeScreenHp',\n      multiplier: params[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction ningguangBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'dmgPerGem',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst kleeTalent: Talent = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalent;\n\nfunction kleeAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 3,\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kleeSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'jumpyDumptyDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'mineDmg',\n      element: Element.Pyro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction kleeBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'sparksNSplashDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  shieldBase,\n  burstDefault,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst zhongliTalent: Talent = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalent;\n\nfunction zhongliAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 4, 1],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction zhongliSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['stoneSteeleDmg', 'resonanceDmg'];\n\n  let talentDamage = descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Geo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDamage.push(\n    skillBase({\n      description: 'holdDmg',\n      element: Element.Geo,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[5],\n      flatBonus: params[4],\n      element: Element.Geo,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction zhongliBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Geo,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst fischlTalent: Talent = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalent;\n\nfunction fischlAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction fischlSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['ozDmg', 'summoningDmg'];\n  return descriptions.map((description, i) =>\n    skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n}\n\nfunction fischlBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'fallingThunderDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  skillMultiBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst bennettTalent: Talent = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalent;\n\nfunction bennettAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction bennettSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillMultiBase({\n      description: 'chargeLevel1Dmg',\n      hits: 2,\n      element: Element.Pyro,\n      params: params.slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n    skillMultiBase({\n      description: 'chargeLevel2Dmg',\n      hits: 2,\n      element: Element.Pyro,\n      params: params.slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Pyro,\n      multiplier: params[5],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction bennettBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuousPerSecond',\n      params: params.slice(1, 3),\n      stats,\n      modifier,\n    }),\n  ];\n\n  // ATK Bonus\n  let atkBonus = stats.baseAtk * params[3];\n  talentDamage.push({\n    description: 'atkBonus',\n    damage: [atkBonus],\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  attackBowDefault,\n  calculateTotalDamage,\n  skillBase,\n  normalAttackMulti,\n  chargedAttackMulti,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst tartagliaTalent: Talent = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalent;\n\nfunction tartagliaAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = attackBowDefault({\n    normalHits: 6,\n    chargedElement: Element.Hydro,\n    params: params.slice(0, 8).concat(params.slice(10)),\n    stats,\n    modifier,\n  });\n\n  let riptideFlashDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[8],\n    element: Element.Hydro,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'riptideFlashDmg',\n    damage: [riptideFlashDmg],\n  });\n\n  let riptideBurstDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[9],\n    element: Element.Hydro,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'riptideBurstDmg',\n    damage: [riptideBurstDmg],\n  });\n\n  return talentDamage;\n}\n\nfunction tartagliaSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'stanceChangeDmg',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    ...normalAttackMulti({\n      hits: [1, 1, 1, 1, 1, 2],\n      element: Element.Hydro,\n      params: params.slice(1, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: params.slice(8, 10),\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'riptideSlashDmg',\n      element: Element.Hydro,\n      multiplier: params[10],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction tartagliaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmgMelee',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'burstDmgRanged',\n      element: Element.Hydro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'riptideBlastDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  calculateTotalDamage,\n  shieldBase,\n  healingSkillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, AttackType, Element } from './types';\n\nconst noelleTalent: Talent = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalent;\n\nfunction noelleAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction noelleSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  let skillDamage = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Geo,\n    scalingType: ScalingType.Defense,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'skillDmg',\n    damage: [skillDamage],\n  });\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[0],\n      flatBonus: params[6],\n      element: Element.Geo,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    healingSkillBase({\n      description: 'healing',\n      params: [params[1], params[7]],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction noelleBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstInitDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'firstSwingDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  healingSkillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, Element } from './types';\n\nconst qiqiTalent: Talent = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalent;\n\nfunction qiqiAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 2, 1],\n    chargedHits: 2,\n    params: params.slice(0, 6).concat(params[5]).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction qiqiSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Cryo,\n      multiplier: params[7],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'heraldOfFrostDmg',\n      element: Element.Cryo,\n      multiplier: params[4],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenOnHit',\n      scalingType: ScalingType.Attack,\n      params: params.slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      scalingType: ScalingType.Attack,\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction qiqiBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Cryo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'healing',\n      scalingType: ScalingType.Attack,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackHeavyDefault, skillDefault, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst chongyunTalent: Talent = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalent;\n\nfunction chongyunAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction chongyunSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params: params,\n    stats,\n    modifier,\n  });\n}\n\nfunction chongyunBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Cryo,\n    params: params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  plungeAttackDefault,\n  skillBase,\n  hpBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst ganyuTalent: Talent = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalent;\n\nfunction ganyuAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 6,\n      element: Element.Physical,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  let aimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[6],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'aimShotDmg',\n    damage: [aimedShotDmg],\n  });\n\n  let chargedDescriptions = [\n    'aimShotChargeLevel1',\n    'frostflakeArrowDmg',\n    'frostflakeArrowBloomDmg',\n  ];\n  let chargedDmg = chargedDescriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i + 7],\n      element: Element.Cryo,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n\n    return {\n      description,\n      damage: [damage],\n    };\n  });\n  talentDamage.push(...chargedDmg);\n\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(10),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction ganyuSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    hpBase({\n      description: 'iceLotusHp',\n      multiplier: params[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction ganyuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'iceShardDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  calculateTotalDamage,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, AttackType, Element } from './types';\n\nconst albedoTalent: Talent = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalent;\n\nfunction albedoAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction albedoSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  talentDmg.push(\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  let transientBlossomDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: Element.Geo,\n    scalingType: ScalingType.Defense,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'transientBlossomDmg',\n    damage: [transientBlossomDmg],\n  });\n\n  return talentDmg;\n}\n\nfunction albedoBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'fatalBlossomDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackBowDefault,\n  skillBase,\n  shieldBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst dionaTalent: Talent = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalent;\n\nfunction dionaAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Cryo,\n    params: params.slice(0, 5).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction dionaSkill({ params, stats, modifier }: TalentProps) {\n  let holdModifier = {\n    ...modifier,\n    dionaHoldSkill: true,\n  };\n\n  return [\n    skillBase({\n      description: 'icyPawDmgPerPaw',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    shieldBase({\n      description: 'shieldHpPress',\n      multiplier: params[1],\n      flatBonus: params[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n    shieldBase({\n      description: 'shieldHpHold',\n      multiplier: params[1],\n      flatBonus: params[2],\n      element: Element.Cryo,\n      stats,\n      modifier: holdModifier,\n    }),\n  ];\n}\n\nfunction dionaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'continuousFieldDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuousTime',\n      params: params.slice(2),\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst monaTalent: Talent = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalent;\n\nfunction monaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Hydro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction monaSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'dot',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction monaBurst({ params, stats, modifier }: TalentProps) {\n  let modifiedStats = { ...stats };\n  if (modifiedStats.dmgBonus !== undefined) {\n    modifiedStats.dmgBonus += params[9];\n  } else {\n    modifiedStats.dmgBonus = params[9];\n  }\n\n  return [\n    burstBase({\n      description: 'explosionDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats: modifiedStats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  calculateTotalDamage,\n  chargedAttackMulti,\n  plungeAttackDefault,\n  skillBase,\n  skillMultiBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst keqingTalent: Talent = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalent;\n\nfunction keqingAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  for (let i = 0; i < 3; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentDamage.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit4Dmg = [];\n  for (let i = 3; i < 5; i++) {\n    hit4Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '4HitDmg',\n    damage: hit4Dmg,\n  });\n\n  let hit5Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[5],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentDamage.push({\n    description: `5HitDmg`,\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Physical,\n      params: params.slice(6, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction keqingSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['lightningStilettoDmg', 'slashingDmg'];\n  let talentDamage = descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDamage.push(\n    skillMultiBase({\n      description: 'thunderclapSlashDmg',\n      hits: 2,\n      element: Element.Electro,\n      params: [params[2], params[2]],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction keqingBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'burstInitDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  let consecutiveSlashDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: Element.Electro,\n    attackType: AttackType.Burst,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'consecutiveSlashDmg',\n    damage: Array(8).fill(consecutiveSlashDmg),\n  });\n\n  talentDamage.push(\n    burstBase({\n      description: 'lastAttackDmg',\n      element: Element.Electro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillDefault, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst sucroseTalent: Talent = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalent;\n\nfunction sucroseAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction sucroseSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction sucroseBurst({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n  talentValues.push(\n    burstBase({\n      description: 'dot',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[1],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentValues;\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  skillBase,\n  shieldBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, Element } from './types';\n\nconst xinyanTalent: Talent = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalent;\n\nfunction xinyanAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 4,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xinyanSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'swingDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  // Shields\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      shieldBase({\n        description: `shieldHpLevel${i + 1}`,\n        multiplier: params[2 * i + 1],\n        flatBonus: params[2 * i + 2],\n        element: Element.Pyro,\n        scalingType: ScalingType.Defense,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentDamage.push(\n    skillBase({\n      description: 'dot',\n      element: Element.Pyro,\n      multiplier: params[7],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction xinyanBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Physical,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'pyroDot',\n      element: Element.Pyro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  normalAttackMulti,\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillMultiBase,\n  burstMultiBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst rosariaTalent: Talent = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalent;\n\nfunction rosariaAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackMulti({\n      hits: [1, 1, 2, 1],\n      element: Element.Physical,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let hit5Dmg = [];\n  for (let i = 4; i < 6; i++) {\n    hit5Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '5HitDmg',\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackDefault({\n      element: Element.Physical,\n      params: params.slice(6, 7),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(8, 11),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction rosariaSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillMultiBase({\n      description: 'skillDmg',\n      hits: 2,\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction rosariaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstMultiBase({\n      description: 'burstDmg',\n      hits: 2,\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'iceLanceDot',\n      element: Element.Cryo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, TalentValue, Element } from './types';\n\nconst hutaoTalent: Talent = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalent;\n\nfunction hutaoAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 4,\n      element,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let hit5Dmg = [];\n  for (let i = 4; i < 6; i++) {\n    hit5Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '5HitDmg',\n    damage: hit5Dmg,\n  });\n\n  let hit6Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[6],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentDamage.push({\n    description: '6HitDmg',\n    damage: hit6Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackDefault({\n      element,\n      params: params.slice(7, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction hutaoSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'bloodBlossomDmg',\n      element: Element.Pyro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction hutaoBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage: TalentValue[] = [];\n\n  let dmgDescriptions = ['burstDmg', 'burstDmgLowHp'];\n  dmgDescriptions.forEach((description, i) => {\n    talentDamage.push(\n      burstBase({\n        description,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  });\n\n  let regenDescriptions = ['hpRegen', 'hpRegenLowHp'];\n  regenDescriptions.forEach((description, i) => {\n    talentDamage.push(\n      healingSkillBase({\n        description,\n        params: [params[i + 2], 0],\n        stats,\n        modifier,\n      })\n    );\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  chargedAttackMulti,\n  plungeAttackDefault,\n  skillBase,\n} from './TalentUtil';\nimport { AttackType, Element, TalentProps, TalentValue } from './types';\n\nconst kazuhaTalent: Talent = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalent;\n\nfunction kazuhaAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues: TalentValue[] = [];\n\n  // Normal attack\n  for (let i = 0; i < 2; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit3Dmg = [];\n  for (let i = 2; i < 4; i++) {\n    hit3Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentValues.push({\n    description: '3HitDmg',\n    damage: hit3Dmg,\n  });\n\n  let hit4Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[4],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentValues.push({\n    description: `4HitDmg`,\n    damage: hit4Dmg,\n  });\n\n  let hit5Dmg = [];\n  const hit5DmgSingle = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  for (let i = 0; i < 3; i++) {\n    hit5Dmg.push(hit5DmgSingle);\n  }\n  talentValues.push({\n    description: `5HitDmg`,\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentValues.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Physical,\n      params: params.slice(6, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: modifier.infusionPlunge ?? Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction kazuhaSkill({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['pressDmg', 'holdDmg'];\n  return descriptions.map((description, i) =>\n    skillBase({\n      description,\n      element: Element.Anemo,\n      multiplier: params[i * 2],\n      stats,\n      modifier,\n    })\n  );\n}\n\nfunction kazuhaBurst({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['slashingDmg', 'dot'];\n  let talentValues = descriptions.map((description, i) =>\n    burstBase({\n      description,\n      element: Element.Anemo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[2],\n        stats,\n        modifier,\n      })\n    );\n  }\n  return talentValues;\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  plungeAttackDefault,\n  skillDefault,\n  burstDefault,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst yanfeiTalent: Talent = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalent;\n\nfunction yanfeiAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 3,\n      element: Element.Pyro,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  for (let i = 0; i < 5; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i + 3],\n      element: Element.Pyro,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    talentDamage.push({\n      description: `chargedDmgSeal${i}`,\n      damage: [damage],\n    });\n  }\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Pyro,\n      params: params.slice(15, 18),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction yanfeiSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction yanfeiBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import { getTalentData, getTalentStatsAt } from '../Data';\nimport { defaultTalentFn } from './DefaultTalent';\nimport Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  normalAttackMulti,\n  plungeAttackDefault,\n} from './TalentUtil';\nimport { AttackType, Element, TalentProps, TalentType } from './types';\n\nconst yoimiyaTalent: Talent = {\n  attack: yoimiyaAttack,\n  skill: yoimiyaSkill,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalent;\n\nfunction yoimiyaAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n\n  // Normal attack\n  let normalAttackParams = params.slice(0, 5);\n  if (modifier.yoimiyaSkill) {\n    const skillParams = getTalentStatsAt(\n      TalentType.Skill,\n      modifier.talentSkillLevel,\n      getTalentData('yoimiya')\n    );\n    normalAttackParams = normalAttackParams.map(\n      (param) => param * skillParams[3]\n    );\n  }\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: [2, 1, 1, 2, 1],\n      element: modifier.infusion ?? Element.Physical,\n      params: normalAttackParams,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  let aimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentValues.push({\n    description: 'aimShotDmg',\n    damage: [aimedShotDmg],\n  });\n\n  let chargedAimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[6],\n    element: Element.Pyro,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'chargedAimShotDmg',\n    damage: [chargedAimedShotDmg],\n  });\n\n  let kindlingArrowDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[7],\n    element: Element.Pyro,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'kindlingArrowDmg',\n    damage: [kindlingArrowDmg],\n  });\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(8, 11),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction yoimiyaSkill({ params, stats, modifier }: TalentProps) {\n  return defaultTalentFn();\n}\n\nfunction yoimiyaBurst({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['burstDmg', 'aurousBlazeExplosionDmg'];\n\n  return descriptions.map((description, i) =>\n    burstBase({\n      description,\n      element: Element.Pyro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyMulti,\n  skillBase,\n  burstDefault,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst eulaTalent: Talent = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalent;\n\nfunction eulaAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyMulti({\n    normalHits: [1, 1, 2, 1, 2],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction eulaSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['pressDmg', 'holdDmg', 'icewhirlBrandDmg'];\n  return descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Cryo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n}\n\nfunction eulaBurst({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n  talentDmg.push(\n    ...burstDefault({\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let descriptions = ['lightfallSwordBaseDmg', 'lightfallSwordStackDmg'];\n  let lightfallSwordParams = params.slice(1, 3);\n  let lightfallSwordTalent = descriptions.map((description, i) => {\n    return burstBase({\n      description,\n      element: Element.Physical,\n      multiplier: lightfallSwordParams[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDmg.push(...lightfallSwordTalent);\n\n  return talentDmg;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport {\n  AttackType,\n  Element,\n  ScalingType,\n  TalentType,\n  TalentValue,\n} from './types';\nimport Resistance from '../Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { talents } from './Talent';\n\n// Function to get specified talent\nexport function getTalentFn(characterId: string, type: TalentType) {\n  return talents[characterId]?.[type] ?? talents.defaultTalent[type];\n}\n\n// Functions to calculate Talent Values\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: modifier.flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === 'crit') {\n    crit += stats.critDmg;\n  } else if (modifier.critType === 'average') {\n    let critRate = stats.critRate;\n    if (attackType === 'charged') {\n      critRate += stats.chargedCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  // TODO: reactionBonus\n  return baseDmg * dmgBonus * crit * enemyDefMultiplier * enemyResMultiplier;\n}\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  // TODO: Add healing bonus\n  return calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n}\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n// Used for all default normal attacks\nexport function normalAttackDefault({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues: TalentValue[] = [];\n  for (let i = 0; i < hits; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  return talentValues;\n}\n// Used for all normal attacks with multiple damage instances in 1 hit e.g. polearms\nexport function normalAttackMulti({\n  hits = [],\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits?: number[];\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = hits.map((hitCount, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n\n    let damages = [];\n    for (let hit = 0; hit < hitCount; hit++) {\n      damages.push(damage);\n    }\n\n    return {\n      description: `${i + 1}HitDmg`,\n      damage: damages,\n    } as TalentValue;\n  });\n\n  return talentValues;\n}\n// Used for all 1-hit charged attacks\nexport function chargedAttackDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return [\n    {\n      description: 'chargedDmg',\n      damage: [damage],\n    },\n  ] as TalentValue[];\n}\n// Used for multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n  for (let i = 0; i < hits; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return [\n    {\n      description: `chargedDmg`,\n      damage: damages,\n    },\n  ] as TalentValue[];\n}\n// Used for all default claymore charged attacks\nexport function chargedAttackHeavy({\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let descriptions = ['chargedSpinDmg', 'chargedFinalDmg'];\n  return descriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n\n    return {\n      description: description,\n      damage: [damage],\n    } as TalentValue;\n  });\n}\n// Used for all default plunge attacks\nexport function plungeAttackDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n  return descriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Plunge,\n      modifier,\n    });\n\n    return {\n      description: description,\n      damage: [damage],\n    } as TalentValue;\n  });\n}\n// Used for all default sword/polearm/catalyst attacks\nexport function attackLightDefault({\n  normalHits,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackDefault({\n      element,\n      params: params.slice(normalHits, normalHits + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits + 1 + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all default sword/polearm attacks with multi damage instances\nexport function attackLightMulti({\n  normalHits = [],\n  chargedHits = 1,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits?: number[];\n  chargedHits?: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits.length),\n      stats,\n      modifier,\n    })\n  );\n\n  if (chargedHits === 1) {\n    talentValues.push(\n      ...chargedAttackDefault({\n        element,\n        params: params.slice(normalHits.length, normalHits.length + 1),\n        stats,\n        modifier,\n      })\n    );\n  } else {\n    talentValues.push(\n      ...chargedAttackMulti({\n        hits: chargedHits,\n        element,\n        params: params.slice(\n          normalHits.length,\n          normalHits.length + chargedHits\n        ),\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits.length + chargedHits + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all default claymore attacks\nexport function attackHeavyDefault({\n  normalHits,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackHeavy({\n      element,\n      params: params.slice(normalHits, normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits + 2 + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all claymore attacks with multi damage instances\nexport function attackHeavyMulti({\n  normalHits = [],\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits?: number[];\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits.length),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackHeavy({\n      params: params.slice(normalHits.length, normalHits.length + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits.length + 2 + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all debault bow aim shots (include charged shots)\nfunction aimShotDefault({\n  chargedElement,\n  params,\n  stats,\n  modifier,\n}: {\n  chargedElement: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues: TalentValue[] = [];\n\n  let damage = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentValues.push({\n    description: 'aimShotDmg',\n    damage: [damage],\n  });\n\n  damage = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: chargedElement,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'chargedAimShotDmg',\n    damage: [damage],\n  });\n\n  return talentValues;\n}\n// Used for all default bow attacks\nexport function attackBowDefault({\n  normalHits,\n  chargedElement,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  chargedElement: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element: Element.Physical,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...aimShotDefault({\n      chargedElement,\n      params: params.slice(normalHits, normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Base function for all damage skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function skillBase({\n  description,\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  description: string;\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    element,\n    multiplier,\n    attackType: AttackType.Skill,\n    stats,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Used for all default skill that only does 1-hit elemental dmg\nexport function skillDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n// Base function for damage skills with multiple damage instances\nexport function skillMultiBase({\n  description,\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    description,\n    damage: damages,\n  } as TalentValue;\n}\n// Base function for all damage bursts. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function burstBase({\n  description,\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  description: string;\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    element,\n    multiplier,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Used for all default burst that only does 1-hit elemental dmg\nexport function burstDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n// Base function for bursts with multiple damage instances\nexport function burstMultiBase({\n  description,\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    description,\n    damage: damages,\n  } as TalentValue;\n}\n// Base function for all healing skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function healingSkillBase({\n  description,\n  scalingType = ScalingType.Hp,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  scalingType?: ScalingType;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateHealing({\n    stats,\n    multiplier: params[0],\n    flatHealing: params[1],\n    scalingType,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Base function for all shields/summon HP\nexport function hpBase({\n  description,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  description: string;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    description,\n    damage: [hp],\n  } as TalentValue;\n}\nexport function shieldBase({\n  description,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  description: string;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [dmgAbsorption],\n  } as TalentValue;\n}\n","import Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  chargedAttackHeavy,\n  healingSkillBase,\n  plungeAttackDefault,\n  skillBase,\n} from './TalentUtil';\nimport {\n  AttackType,\n  Element,\n  ScalingType,\n  TalentProps,\n  TalentValue,\n} from './types';\n\nconst sayuTalent: Talent = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalent;\n\nfunction sayuAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues: TalentValue[] = [];\n\n  // Normal attack\n  for (let i = 0; i < 2; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit3Dmg = [];\n  for (let i = 2; i < 4; i++) {\n    hit3Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentValues.push({\n    description: '3HitDmg',\n    damage: hit3Dmg,\n  });\n\n  let hit4Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[4],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentValues.push({\n    description: `4HitDmg`,\n    damage: hit4Dmg,\n  });\n\n  // Charged attack\n  talentValues.push(\n    ...chargedAttackHeavy({ params: params.slice(5, 7), stats, modifier })\n  );\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction sayuSkill({ params, stats, modifier }: TalentProps) {\n  const talentValues: TalentValue[] = [];\n\n  const skillDescriptions = [\n    'fuufuuWindwheelDmg',\n    'fuufuuWhirlwindKickPressDmg',\n    'fuufuuWhirlwindKickHoldDmg',\n  ];\n  const skillParams = [params[0], params[2], params[3]];\n\n  skillDescriptions.forEach((description, i) =>\n    talentValues.push(\n      skillBase({\n        description,\n        element: Element.Anemo,\n        multiplier: skillParams[i],\n        stats,\n        modifier,\n      })\n    )\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    const elementalAbsorption = modifier.elementalAbsorption;\n    const elementalDescriptions = [\n      'fuufuuWindwheelElementalDmg',\n      'fuufuuWhirlwindKickElementalDmg',\n    ];\n    const elementalParams = [params[1], params[4]];\n\n    elementalDescriptions.forEach((description, i) =>\n      talentValues.push(\n        skillBase({\n          description,\n          element: elementalAbsorption,\n          multiplier: elementalParams[i],\n          stats,\n          modifier,\n        })\n      )\n    );\n  }\n\n  return talentValues;\n}\n\nfunction sayuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'activationDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'activationHealing',\n      scalingType: ScalingType.Attack,\n      params: [params[2], params[1]],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'mujimujiDarumaDmg',\n      element: Element.Anemo,\n      multiplier: params[3],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'mujimujiDarumaHealing',\n      scalingType: ScalingType.Attack,\n      params: [params[5], params[4]],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import { CharacterPassive, CharacterPassiveFn } from './types';\nimport { yoimiyaAscension1 } from './YoimiyaPassive';\n\nconst characterPassives: Record<string, CharacterPassiveFn> = {\n  Yoimiya_PermanentSkill_1: yoimiyaAscension1,\n};\n\nfunction defaultPassiveFn(): CharacterPassive[] {\n  return [];\n}\n\nexport function getCharacterPassiveFn(passiveId: string) {\n  return characterPassives[passiveId] ?? defaultPassiveFn;\n}\n","import { Stats, TalentParams } from '../../../data/types';\nimport { CharacterOption } from '../../option/characterOptions';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from './types';\n\nexport function yoimiyaAscension1(params: TalentParams): CharacterPassive {\n  class YoimiyaOptionAscension1\n    extends CharacterOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('yoimiyaAscension1');\n    }\n\n    applyOnStats(stats: Stats) {\n      let pyroDmgBonus = this.value * params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    }\n  }\n\n  return {\n    options: [YoimiyaOptionAscension1],\n  };\n}\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n  getTalentStatsAt,\n} from '../Data';\n\nimport { getTalentFn } from '../talent';\nimport { getCharacterOptions } from '../option';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../../data/types';\nimport type DamageModifier from '../modifier/DamageModifer';\nimport type { TalentType } from '../talent/types';\nimport { getCharacterPassiveFn } from './passive/CharacterPassive';\nimport { CharacterOption } from '../option/characterOptions';\n\nexport default class Character {\n  constructor(id: string, level: number, hasAscended: boolean) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    this.passiveOptions = this.getPassiveOptions(this.ascensionLevel);\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    const prevAscensionLevel = this.ascensionLevel;\n    this.ascensionLevel = this.getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passiveOptions = this.getPassiveOptions(\n      this.ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    const prevAscensionLevel = this.ascensionLevel;\n    this.ascensionLevel = this.getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passiveOptions = this.getPassiveOptions(\n      this.ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n  ascensionLevel: number = 0;\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  getAscensionLevel(level: number, hasAscended: boolean) {\n    let ascensionLevel;\n    if (level > 80 || (level === 80 && hasAscended)) {\n      ascensionLevel = 6;\n    } else if (level > 70 || (level === 70 && hasAscended)) {\n      ascensionLevel = 5;\n    } else if (level > 60 || (level === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (level > 50 || (level === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (level > 40 || (level === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (level > 20 || (level === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n\n    return ascensionLevel;\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = this.ascensionLevel;\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Return an Object with description and damage properties\n  getTalentDamageAt({\n    type,\n    talentLevel,\n    totalStats,\n    modifier,\n  }: {\n    type: TalentType;\n    talentLevel: number;\n    totalStats: Stats;\n    modifier: DamageModifier;\n  }) {\n    if (this.talents === undefined) {\n      return [];\n    }\n\n    const params = getTalentStatsAt(type, talentLevel, this.talents);\n\n    let damageFn = getTalentFn(this.id, type);\n\n    let damage = damageFn({\n      params,\n      stats: totalStats,\n      modifier,\n    });\n\n    return damage;\n  }\n\n  getCharacterOptions() {\n    return getCharacterOptions(this.id).map((Option) => new Option());\n  }\n\n  getPassiveOptions(ascensionLevel: number, prevAscensionLevel?: number) {\n    if (this.talents === undefined) {\n      return [];\n    }\n\n    const passiveDatas = this.talents.passives;\n\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return passiveDatas\n        .filter((passiveData) => ascensionLevel >= passiveData.ascensionLevel)\n        .flatMap((passiveData) =>\n          getCharacterPassiveFn(passiveData.id)(passiveData.params)\n        )\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const newOptions = passiveDatas\n        .filter(\n          (passiveData) =>\n            ascensionLevel >= passiveData.ascensionLevel &&\n            passiveData.ascensionLevel > prevAscensionLevel\n        )\n        .flatMap((passiveData) =>\n          getCharacterPassiveFn(passiveData.id)(passiveData.params)\n        )\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = passiveDatas\n        .filter((passiveData) => ascensionLevel >= passiveData.ascensionLevel)\n        .flatMap((passiveData) =>\n          getCharacterPassiveFn(passiveData.id)(passiveData.params)\n        )\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n\n    return characterOptions.concat(passiveOptions);\n  }\n}\n","import { AscensionBonus, StatCurveMapping, Stats } from '../../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n} from '../Data';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(id: string, level: number, hasAscended: boolean) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  stats: Stats = {};\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport Column from './component/Column';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport { Stats } from './data/types';\nimport Artifact from './js/artifact/Artifact';\nimport ArtifactSet from './js/artifact/ArtifactSet';\nimport { ArtifactType } from './js/artifact/types';\nimport Character from './js/character/Character';\nimport CritType from './js/modifier/CritType';\nimport DamageModifier from './js/modifier/DamageModifer';\nimport { isModifierApplicable, isStatsApplicable } from './js/option';\nimport { ArtifactSetOption } from './js/option/artifactSetOptions';\nimport { CharacterOption } from './js/option/characterOptions';\nimport Resistance from './js/Resistance';\nimport { getTotalStatsAt } from './js/Stat';\nimport { TalentType, TalentValueSet } from './js/talent/types';\nimport Weapon from './js/weapon/Weapon';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: string;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  characterOptions: CharacterOption[];\n  artifactSetOptions: ArtifactSetOption[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: new Character('', 1, false),\n    weapon: new Weapon('', 1, false),\n    artifacts: Object.values(ArtifactType).map((type) => new Artifact(type)),\n\n    artifactSets: [\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n    ],\n\n    enemyLevel: 1,\n    enemyDefReduction: 0,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    flatDmg: 0,\n    reaction: 'none',\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    characterOptions: [],\n    artifactSetOptions: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = { attack: [], skill: [], burst: [] };\n\n  getDamageModifier({\n    characterLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    characterLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  } = {}): DamageModifier {\n    const modifier: DamageModifier = {\n      characterLevel: characterLevel ?? this.state.character.level,\n      enemyLevel: enemyLevel ?? this.state.enemyLevel,\n      enemyDefReduction: this.state.enemyDefReduction,\n      enemyRes: enemyRes ?? this.state.enemyRes,\n      enemyResReduction: new Resistance(),\n      critType: critType ?? this.state.critType,\n      flatDmg: this.state.flatDmg,\n      reaction: this.state.reaction,\n      talentAttackLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n    };\n\n    (characterOptions ?? this.state.characterOptions).forEach((option) => {\n      if (isModifierApplicable(option)) {\n        option.applyOnModifier(modifier);\n      }\n    });\n\n    (artifactSetOptions ?? this.state.artifactSetOptions).forEach((option) => {\n      if (isModifierApplicable(option)) {\n        option.applyOnModifier(modifier);\n      }\n    });\n\n    return modifier;\n  }\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = newArtifactSets\n      .map((artifactSet) => artifactSet.stats)\n      .reduce((acc, stats) => {\n        Object.entries(stats).forEach(([stat, value]) => {\n          acc[stat] = value + (acc[stat] ?? 0);\n        });\n        return acc;\n      }, {} as Stats);\n\n    (artifactSetOptions ?? this.state.artifactSetOptions).forEach((option) => {\n      if (isStatsApplicable(option)) {\n        // Placeholder talent levels, currently no artifactsetoption uses it\n        option.applyOnStats(this.artifactSetBonuses, 1, 1, 1, 0);\n      }\n    });\n\n    this.updateTotalStats({\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      characterOptions ?? this.state.characterOptions,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      characterOptions,\n      artifactSetOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n    const damageModifer = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      characterOptions,\n      artifactSetOptions,\n    });\n\n    this.talentValues.attack = character.getTalentDamageAt({\n      type: TalentType.Attack,\n      talentLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n    this.talentValues.skill = character.getTalentDamageAt({\n      type: TalentType.Skill,\n      talentLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n    this.talentValues.burst = character.getTalentDamageAt({\n      type: TalentType.Burst,\n      talentLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n  };\n\n  render() {\n    return (\n      <div className='app'>\n        <InputColumn\n          appState={this.state}\n          setAppState={this.setAppState}\n          updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n          updateTotalStats={this.updateTotalStats}\n          updateTalentValues={this.updateTalentValues}\n        />\n        <ArtifactColumn\n          appState={this.state}\n          setAppState={this.setAppState}\n          updateTotalStats={this.updateTotalStats}\n        />\n        <StatColumn\n          appState={this.state}\n          totalStats={this.totalStats}\n          artifactSetBonuses={this.artifactSetBonuses}\n        />\n        <TalentColumn talentValues={this.talentValues} />\n        <Column></Column>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}