{"version":3,"sources":["js/Data.js","js/Talent.js","js/TalentOption.js","js/Character.js","js/Weapon.js","js/Stat.js","js/Artifact.js","js/DamageModifer.js","js/Styles.js","App.js"],"names":["sortedCharacterList","sortedWeaponList","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talents","attack","curveAcc","params","skill","burst","processTalentData","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","defaultTalent","calculateBaseDamage","stats","multiplier","scalingType","flatDmg","flatAtk","flatDef","flatHp","calculateTotalDamage","element","attackType","modifier","baseDmg","dmgBonus","normalDmgBonus","chargedDmgBonus","plungeDmgBonus","getDamageBonus","crit","critType","critDmg","Math","min","critRate","calculateHp","flatBonus","normalAttackDefault","hits","talentValues","i","damage","push","description","normalAttackMulti","hitCount","damages","hit","chargedAttackDefault","chargedAttackMulti","chargedAttackHeavy","plungeAttackDefault","attackLightDefault","normalHits","slice","attackLightMulti","chargedHits","length","attackHeavyDefault","attackBowDefault","chargedElement","aimShotDefault","skillBase","skillDefault","skillMultiBase","burstBase","burstDefault","burstMultiBase","healingSkillBase","flatHealing","calculateHealing","hpBase","shieldBase","dmgAbsorption","shieldStrength","dionaHoldSkill","calculateDmgAbsorption","lisaAttack","lisaSkill","talentDmg","lisaBurst","barbaraAttack","barbaraSkill","barbaraBurst","kaeyaAttack","kaeyaSkill","kaeyaBurst","dilucAttack","infusion","dilucSkill","talentDamage","dilucBurst","razorAttack","razorSkill","razorBurst","attackParams","talentAttackLevel","amberAttack","amberSkill","amberBurst","ventiAttack","ventiSkill","ventiBurst","xianglingAttack","xianglingSkill","xianglingBurst","beidouAttack","beidouSkill","beidouBurst","xingqiuAttack","concat","xingqiuSkill","xingqiuBurst","xiaoAttack","burstParams","talentBurstLevel","modifiedStats","xiaoSkill","xiaoBurst","ningguangAttack","normalAtkDmg","starJadeDmg","ningguangSkill","ningguangBurst","kleeAttack","kleeSkill","kleeBurst","zhongliAttack","zhongliSkill","zhongliBurst","fischlAttack","fischlSkill","fischlBurst","bennettAttack","bennettSkill","bennettBurst","atkBonus","baseAtk","tartagliaAttack","riptideFlashDmg","riptideBurstDmg","tartagliaSkill","tartagliaBurst","noelleAttack","noelleSkill","skillDamage","noelleBurst","qiqiAttack","qiqiSkill","qiqiBurst","chongyunAttack","chongyunSkill","chongyunBurst","ganyuAttack","aimedShotDmg","chargedDmg","ganyuSkill","ganyuBurst","albedoAttack","albedoSkill","transientBlossomDmg","albedoBurst","dionaAttack","dionaSkill","holdModifier","dionaBurst","monaAttack","monaSkill","monaBurst","keqingAttack","hit4Dmg","hit5Dmg","keqingSkill","keqingBurst","consecutiveSlashDmg","sucroseAttack","sucroseSkill","sucroseBurst","xinyanAttack","xinyanSkill","xinyanBurst","rosariaAttack","rosariaSkill","rosariaBurst","eulaAttack","attackHeavyMulti","eulaSkill","eulaBurst","lightfallSwordParams","lightfallSwordTalent","TalentOption","value","this","dilucTalentOptions","xiaoTalentOptions","noelleTalentOptions","chongyunTalentOptions","Character","data","name","baseStats","statCurveMapping","hasAscended","innateStats","isNaN","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","bonus","talentLevel","totalStats","toLowerCase","damageFn","options","talentOptions","Weapon","rank","weaponLevel","weaponStats","weaponStatCurves","getStatDisplayValue","isPercentage","toFixed","round","getDamageDisplayValue","values","str","every","convertStatValue","getTalentDescription","desc","talentDescMapping","getTotalStatsAt","weapon","weaponHasAscended","character","characterLevel","characterHasAscended","artifacts","characterStats","getStatsAt","getInnateStatsAt","getBaseStatsAt","artifactStats","artifact","getStats","combinedStats","baseDef","defBonus","baseHp","hpBonus","elementalMastery","energyRecharge","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","Artifact","mainStat","rawValue","subStats","statObj","statUtils","subStat","mainStatProps","Flower","Feather","Sands","Goblet","Circlet","subStatProps","DamageModifier","enemyLevel","enemyRes","modifiers","reaction","talentSkillLevel","StyleSheet","create","container","display","flexDirection","alignItems","fontSize","height","backgroundColor","inputColumn","padding","borderRightWidth","inputRow","marginVertical","levelInput","width","statInput","resultColumn","resultBlockNoBorder","resultBlock","borderBottomWidth","artifactBlockNoBorder","paddingTop","paddingBottom","artifactBlock","borderStyle","characterImage","titleText","fontWeight","artifactType","artifactStatType","resultText","fillerColumn","flexGrow","App","renderInputColumn","View","renderCharacterList","style","styles","Text","TextInput","defaultValue","state","onChangeText","text","setState","parseInt","setCharacterState","Checkbox","onValueChange","isCharacterAscended","renderWeaponList","setWeaponState","isWeaponAscended","setAllTalentState","characterSelect","selectedValue","_","getTalentOptions","Item","label","characters","key","weapons","renderCharacterImage","imageUrl","Image","source","uri","getDamageModifier","getTotalStats","talentAttackDamage","getTalentDamageAt","talentSkillDamage","talentBurstDamage","isweaponAscended","setArtifactState","setTalentState","artifactFlower","artifactFeather","artifactSands","artifactGoblet","artifactCirclet","renderCharacterStats","renderWeaponStats","renderArtifactMainStat","setStat","prop","parseFloat","renderArtifactSubStats","index","renderArtifactStat","isLast","renderAllArtifactStats","renderTotalStats","renderTalentDamage","renderTalentOptions","FlatList","keyExtractor","item","renderItem","talentOptionMapping","renderAllTalentDamage","sort","name1","name2","localeCompare","Component"],"mappings":"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","file":"static/js/app.e1e83cc0.chunk.js","sourcesContent":["import characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\n//import artifactSetDataRaw from '../data/artifactsetdata.json';\n//import artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\nimport talentDataRaw from '../data/talentdata.json';\nexport { default as propMapping } from '../data/propmapping.json';\nexport { default as talentDescMapping } from '../data/talentdescmapping.json';\nexport { default as talentOptionMapping } from '../data/talentoptionmapping.json';\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(characterDataRaw);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(characterAscensionBonusDataRaw);\nconst characterStatCurveData = processCharacterStatCurveData(characterStatCurveDataRaw);\nconst weaponData = processWeaponData(weaponDataRaw);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(weaponAscensionBonusDataRaw);\nconst weaponStatCurveData = processWeaponStatCurveData(weaponStatCurveDataRaw);\nconst talentData = processTalentData(talentDataRaw);\n\n// Pre-processed data, lists\nlet sortedCharacterList;    // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList;       // lazy loading implemented with getSortedWeaponList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.id] = charData;\n        return acc;\n    }, {});\n}\n\nfunction processCharacterAscensionBonusData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.characterId] = charData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processCharacterStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.id] = weaponData;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponAscensionBonusData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processWeaponStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processTalentData(rawData) {\n    return rawData.reduce((acc, talentDataRaw) => {\n        let talentData = {...talentDataRaw.talents};\n\n        talentData.attack = talentData.attack.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.skill = talentData.skill.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.burst = talentData.burst.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n\n        acc[talentDataRaw.characterId] = talentData;\n        return acc;\n    }, {});\n}\n\n// Helper functions for accessing data properties\nfunction getData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getAscensionBonusData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getStatCurveAt(level, statCurves) {\n    return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id) {\n    return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id) {\n    return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level) {\n    return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id) {\n    return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id) {\n    return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level) {\n    return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(level, ascensionBonuses) {\n    return ascensionBonuses[level];\n}\n\nexport function getTalentData(id) {\n    return talentData[id];\n}\n\nconst emptyTalentParams = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(type, level, talents) {\n    const talentStats = talents[type][level];\n    if (talentStats !== undefined) {\n        return talentStats;\n    } else {\n        return emptyTalentParams;\n    }\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n    if (sortedCharacterList === undefined) {\n        sortedCharacterList = Object.entries(characterData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n    if (sortedWeaponList === undefined) {\n        sortedWeaponList = Object.entries(weaponData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedWeaponList;\n}","import { getTalentData, getTalentStatsAt } from './Data.js';\n\n// Placeholder function\nexport function defaultTalent() {\n    return [];\n}\n\n// Internal functions\n\nfunction getDamageBonus({ stats, element, attackType }) {\n    let dmgBonus = 1;\n    dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n    if (attackType === 'normal') {\n        dmgBonus += stats.normalDmgBonus ?? 0;\n    } else if (attackType === 'charged') {\n        dmgBonus += stats.chargedDmgBonus ?? 0;\n    } else if (attackType === 'plunge') {\n        dmgBonus += stats.plungeDmgBonus ?? 0;\n    }\n\n    return dmgBonus;\n}\n\nfunction calculateBaseDamage({ stats, multiplier, scalingType, flatDmg = 0 }) {\n    if (scalingType == 'attack') {\n        return stats.flatAtk * multiplier + flatDmg;\n    } else if (scalingType == 'defense') {\n        return stats.flatDef * multiplier + flatDmg;\n    } else if (scalingType == 'hp') {\n        return stats.flatHp * multiplier + flatDmg;\n    } else {\n        return NaN;\n    }\n}\n\nfunction calculateTotalDamage({ stats, multiplier, element, scalingType = 'attack', attackType = 'none', modifier }) {\n    let baseDmg = calculateBaseDamage({ stats, multiplier, scalingType, flatDmg: modifier.flatDmg });\n    let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n    let crit = 1;\n    if (modifier.critType === 'crit') {\n        crit += stats.critDmg;\n    } else if (modifier.critType === 'average') {\n        crit += Math.min(1, stats.critRate) * stats.critDmg;\n    }\n\n    // TODO: enemyDefMultiplier\n    // TODO: enemyResMultiplier\n    // TODO: reactionBonus\n\n    return baseDmg * dmgBonus * crit;\n} \n\nfunction calculateHealing({ stats, multiplier, flatHealing, scalingType = 'hp' }) {\n    // TODO: Add healing bonus\n    return calculateBaseDamage({ stats, multiplier, scalingType, flatDmg: flatHealing });\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({ stats, multiplier, flatBonus, scalingType = 'hp' }) {\n    if (scalingType == 'attack') {\n        return stats.flatAtk * multiplier + flatBonus;\n    } else if (scalingType == 'defense') {\n        return stats.flatDef * multiplier + flatBonus;\n    } else if (scalingType == 'hp') {\n        return stats.flatHp * multiplier + flatBonus;\n    } else {\n        return NaN;\n    }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({ stats, multiplier, flatBonus, element, scalingType = 'hp', modifier }) {\n    let dmgAbsorption = calculateHp({ stats, multiplier, flatBonus, scalingType });\n\n    // Geo Shields\n    if (element === 'geo') dmgAbsorption *= 1.5;\n\n    // Shield bonus from external sources\n    if (stats.shieldStrength !== undefined) dmgAbsorption *= (1 + stats.shieldStrength);\n\n    // Character-specific bonuses\n\n    // Diona Hold Skill\n    if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n    return dmgAbsorption;\n}\n\n// Used for all default normal attacks\nfunction normalAttackDefault({ hits, element, params, stats, modifier }) {\n    let talentValues = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            attackType: 'normal',\n            modifier,\n        });\n        \n        talentValues.push({\n            description: `${i+1}HitDmg`,\n            damage: [damage],\n        });\n    }\n\n    return talentValues;\n}\n\n// Used for all normal attacks with multiple damage instances in 1 hit e.g. polearms\nfunction normalAttackMulti({ hits = [], element, params, stats, modifier }) {\n    let talentValues = hits.map((hitCount, i) => {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element,\n            attackType: 'normal',\n            modifier,\n        });\n\n        let damages = [];\n        for (let hit = 0; hit < hitCount; hit++) {\n            damages.push(damage);\n        }\n\n        return {\n            description: `${i+1}HitDmg`,\n            damage: damages,\n        };\n    });\n\n    return talentValues;\n}\n\n// Used for all 1-hit charged attacks\nfunction chargedAttackDefault({ element, params, stats, modifier }) {\n    let damage = calculateTotalDamage({ \n        stats, \n        multiplier: params[0], \n        element, \n        attackType: 'charged',\n        modifier,\n     });\n\n    return [{\n        description: 'chargedDmg',\n        damage: [damage],\n    }];\n}\n\n// Used for multi-hit charged attacks\nfunction chargedAttackMulti({ hits, element, params, stats, modifier }) {\n    let damages = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            attackType: 'charged',\n            modifier,\n        });\n        damages.push(damage);\n    }\n\n    return [{\n        description: `chargedDmg`,\n        damage: damages,\n    }];\n}\n\n// Used for all default claymore charged attacks\nfunction chargedAttackHeavy({ element = 'physical', params, stats, modifier }) {\n    let descriptions = ['chargedSpinDmg', 'chargedFinalDmg'];\n    return descriptions.map((description, i) => {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            attackType: 'charged',\n            modifier,\n        });\n\n        return {\n            description: description,\n            damage: [damage],\n        };\n    });\n}\n\n// Used for all default plunge attacks\nfunction plungeAttackDefault({ element, params, stats, modifier }) {\n    let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n    return descriptions.map((description, i) => {\n        let damage = calculateTotalDamage({ \n            stats,\n            multiplier: params[i], \n            element,\n            attackType: 'plunge',\n            modifier \n        });\n\n        return {\n            description: description,\n            damage: [damage],\n        };\n    });\n}\n\n// Used for all default sword/polearm/catalyst attacks\nfunction attackLightDefault({ normalHits, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault({ \n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits), \n        stats, \n        modifier \n    }));\n\n    talentValues.push(...chargedAttackDefault({\n        element,\n        params: params.slice(normalHits, normalHits + 1), \n        stats, \n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits + 1 + 1), \n        stats, \n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all default sword/polearm attacks with multi damage instances\nfunction attackLightMulti({ normalHits = [], chargedHits = 1, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackMulti({ \n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits.length), \n        stats, \n        modifier \n    }));\n\n    if (chargedHits === 1) {\n        talentValues.push(...chargedAttackDefault({\n            element,\n            params: params.slice(normalHits.length, normalHits.length + 1), \n            stats, \n            modifier,\n        }));\n    } else {\n        talentValues.push(...chargedAttackMulti({\n            hits: chargedHits,\n            element,\n            params: params.slice(normalHits.length, normalHits.length + chargedHits), \n            stats, \n            modifier,\n        }));\n    }\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits.length + chargedHits + 1), \n        stats, \n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all default claymore attacks\nfunction attackHeavyDefault({ normalHits, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault({\n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...chargedAttackHeavy({\n        element,\n        params: params.slice(normalHits, normalHits + 2),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits + 2 + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all claymore attacks with multi damage instances\nfunction attackHeavyMulti({ normalHits = [], element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackMulti({\n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits.length), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...chargedAttackHeavy({\n        params: params.slice(normalHits.length, normalHits.length + 2), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits.length + 2 + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all debault bow aim shots (include charged shots)\nfunction aimShotDefault({ chargedElement, params, stats, modifier }) {\n    let talentValues = [];\n\n    let damage = calculateTotalDamage({ \n        stats, \n        multiplier: params[0], \n        element: 'physical', \n        attackType: 'normal',\n        modifier,\n    });\n    talentValues.push({\n            description: 'aimShotDmg',\n            damage: [damage],\n    });\n\n    damage = calculateTotalDamage({\n        stats,\n        multiplier: params[1],\n        element: chargedElement,\n        attackType: 'charged',\n        modifier,\n    });\n    talentValues.push({\n        description: 'chargedAimShotDmg',\n        damage: [damage],\n    });\n\n    return talentValues;\n}\n\n// Used for all default bow attacks\nfunction attackBowDefault({ normalHits, chargedElement, params, stats, modifier }) {\n    let talentValues = [];\n    \n    talentValues.push(...normalAttackDefault({\n        hits: normalHits,\n        element: 'physical',\n        params: params.slice(0, normalHits),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...aimShotDefault({\n        chargedElement,\n        params: params.slice(normalHits, normalHits + 2),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(normalHits + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Base function for all damage skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction skillBase({ description, element, multiplier, stats, modifier }) {\n    let damage = calculateTotalDamage({\n        element,\n        multiplier,\n        attackType: 'skill',\n        stats, \n        modifier,\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Used for all default skill that only does 1-hit elemental dmg\nfunction skillDefault({ element, params, stats, modifier }) {\n    return [skillBase({\n        description: 'skillDmg',\n        element,\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Base function for damage skills with multiple damage instances\nfunction skillMultiBase({ description, hits, element, params, stats, modifier }) {\n    let damages = [];\n    \n    for (let i = 0; i < hits; i++) {\n        damages.push(calculateTotalDamage({\n            element,\n            multiplier: params[i],\n            attackType: 'skill',\n            stats,\n            modifier,\n        }));\n    }\n\n    return {\n        description,\n        damage: damages,\n    };\n}\n\n// Base function for all damage bursts. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction burstBase({ description, element, multiplier, stats, modifier }) {\n    let damage = calculateTotalDamage({\n        element,\n        multiplier,\n        attackType: 'burst',\n        stats, \n        modifier,\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Used for all default burst that only does 1-hit elemental dmg\nfunction burstDefault({ element, params, stats, modifier }) {\n    return [burstBase({\n        description: 'burstDmg',\n        element,\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Base function for bursts with multiple damage instances\nfunction burstMultiBase({ description, hits, element, params, stats, modifier }) {\n    let damages = [];\n    \n    for (let i = 0; i < hits; i++) {\n        damages.push(calculateTotalDamage({\n            element,\n            multiplier: params[i],\n            attackType: 'burst',\n            stats,\n            modifier,\n        }));\n    }\n\n    return {\n        description,\n        damage: damages,\n    };\n}\n\n// Base function for all healing skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction healingSkillBase({ description, scalingType = 'hp', params, stats, modifier }) {\n    let damage = calculateHealing({\n        stats,\n        multiplier: params[0],\n        flatHealing: params[1],\n        scalingType,\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Base function for all shields/summon HP\nfunction hpBase({ description, multiplier, flatBonus, scalingType = 'hp', stats, modifier }) {\n    let hp = calculateHp({\n        stats,\n        multiplier,\n        flatBonus,\n        scalingType,\n    });\n\n    return {\n        description,\n        damage: [hp],\n    };\n}\n\nfunction shieldBase({ description, multiplier, flatBonus, element, scalingType = 'hp', stats, modifier }) {\n    let dmgAbsorption = calculateDmgAbsorption({\n        stats,\n        multiplier,\n        flatBonus,\n        element,\n        scalingType,\n        modifier,\n    });\n\n    return {\n        description,\n        damage: [dmgAbsorption],\n    };\n}\n\n// Public functions\n// Access using talent[characterId + type]\n\n// Lisa\nexport function lisaAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function lisaSkill({ params, stats, modifier }) {\n    let talentDmg = [];\n\n    talentDmg.push(skillBase({\n        description: 'pressDmg',\n        element: 'electro',\n        multiplier: params[5],\n        stats,\n        modifier,\n    }));\n\n    for (let i = 0; i <= 3; i++) {\n        talentDmg.push(skillBase({\n            description: `holdDmgStack${i}`,\n            element: 'electro',\n            multiplier: params[i],\n            stats, \n            modifier,\n        }));\n    }\n\n    return talentDmg;\n}\n\nexport function lisaBurst({ params, stats, modifier }) {\n    return burstDefault({\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Barbara\nexport function barbaraAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'hydro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function barbaraSkill({ params, stats, modifier }) {\n    let talentDmg = [\n        healingSkillBase({\n            description: 'hpRegenContinuous',\n            params: params.slice(0, 2),\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenOnHit',\n            params: params.slice(2, 4),\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'dropletDmg',\n            element: 'hydro',\n            multiplier: params[4],\n            stats,\n            modifier,\n        }),\n    ];\n\n    return talentDmg;\n}\n\nexport function barbaraBurst({ params, stats, modifier }) {\n    return [\n        healingSkillBase({\n            description: 'hpRegen',\n            params,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Kaeya\nexport function kaeyaAttack({ params, stats, modifier }) {\n    return attackLightMulti({ \n        normalHits: [1, 1, 1, 1, 1], \n        chargedHits: 2, \n        params, \n        stats, \n        modifier,\n    });\n}\n\nexport function kaeyaSkill({ params, stats, modifier }) {\n    return skillDefault({ \n        element: 'cryo', \n        params, \n        stats, \n        modifier \n    });\n}\n\nexport function kaeyaBurst({ params, stats, modifier }) {\n    return burstDefault({ \n        element: 'cryo', \n        params, \n        stats, \n        modifier,\n    });\n}\n\n// Diluc\nexport function dilucAttack({ params, stats, modifier }) {\n    let element = modifier.infusion ? 'pyro' : 'physical';\n    return attackHeavyDefault({\n        normalHits: 4,\n        element,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function dilucSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n    for (let i = 0; i < 3; i++) {\n        talentDamage.push(skillBase({\n            description: `${i+1}HitDmg`,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    return talentDamage;\n}\n\nexport function dilucBurst({ params, stats, modifier }) {\n    let descriptions = ['slashingDmg', 'dot', 'explosionDmg'];\n    let talentDamage = descriptions.map((description, i) => {\n        return burstBase({\n            description,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n\n    return talentDamage;\n}\n\n// Razor\nexport function razorAttack({ params, stats, modifier }) {\n    return attackHeavyDefault({\n        normalHits: 4,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function razorSkill({ params, stats, modifier }) {\n    let descriptions = ['pressDmg', 'holdDmg'];\n    return descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'electro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n}\n\nexport function razorBurst({ params, stats, modifier }) {\n    let talentDamage = burstDefault({\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n\n    let attackParams = getTalentStatsAt('attack', modifier.talentAttackLevel, getTalentData('razor'));\n\n    for (let i = 0; i < 4; i++) {\n        talentDamage.push(burstBase({\n            description: `${i+1}HitDmgSoulCompanion`,\n            element: 'electro',\n            multiplier: params[1] * attackParams[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    return talentDamage;\n}\n\n// Amber\nexport function amberAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 5,\n        chargedElement: 'pyro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function amberSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'explosionDmg',\n        element: 'electro',\n        multiplier: params[1],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(hpBase({\n        description: 'baronBunnyHp',\n        multiplier: params[0],\n        flatBonus: 0,\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function amberBurst({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(burstBase({\n        description: 'dmgPerWave',\n        element: 'pyro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push({\n        description: 'totalDmg',\n        damage: [talentDamage[0].damage[0] * 18],\n    });\n\n    return talentDamage;\n}\n\n// Venti\nexport function ventiAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 6,\n        chargedElement: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function ventiSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'pressDmg',\n            element: 'anemo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'holdDmg',\n            element: 'anemo',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function ventiBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'dot',\n            element: 'anemo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        // Not sure how the elemental absorption dmg is calculated\n        burstBase({\n            description: 'dotElementalAbsorption',\n            element: 'none',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Xiangling\nexport function xianglingAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 2, 4, 1],\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function xianglingSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'guobaDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function xianglingBurst({ params, stats, modifier }) {\n    let talentDamage = []\n\n    for (let i = 0; i < 3; i++) {\n        talentDamage.push(burstBase({\n            description: `swing${i+1}HitDmg`,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    talentDamage.push(burstBase({\n        description: 'pyronadoDmg',\n        element: 'pyro',\n        multiplier: params[3],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\n// Beidou\nexport function beidouAttack({ params, stats, modifier }) {\n    return attackHeavyDefault({\n        normalHits: 5,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function beidouSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(shieldBase({\n        description: 'shieldHp',\n        multiplier: params[0],\n        flatBonus: params[1],\n        element: 'electro',\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(skillBase({\n        description: 'baseDmg',\n        element: 'electro',\n        multiplier: params[2],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(skillBase({\n        description: 'dmgBonusOnHitTaken',\n        element: 'electro',\n        multiplier: params[3],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function beidouBurst({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(burstBase({\n        description: 'skillDmg',\n        element: 'electro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(burstBase({\n        description: 'lightningDmg',\n        element: 'electro',\n        multiplier: params[1],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\n// Xingqiu\nexport function xingqiuAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 2, 1, 2],\n        chargedHits: 2,\n        params: params.slice(0, 3).concat(params.slice(4, 6)).concat(params.slice(7)),\n        stats,\n        modifier,\n    });\n}\n\nexport function xingqiuSkill({ params, stats, modifier }) {\n    return [skillMultiBase({\n        description: 'skillDmg',\n        hits: 2,\n        element: 'hydro',\n        params,\n        stats,\n        modifier,\n    })];\n}\n\nexport function xingqiuBurst({ params, stats, modifier }) {\n    return [burstBase({\n        description: 'swordRainDmg',\n        element: 'hydro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Xiao\nexport function xiaoAttack({ params, stats, modifier }) {\n    if (modifier.infusion) {\n        let burstParams = getTalentStatsAt('burst', modifier.talentBurstLevel, getTalentData('xiao'));\n        let modifiedStats = {...stats};\n\n        if (modifiedStats.normalDmgBonus === undefined) {\n            modifiedStats.normalDmgBonus = burstParams[0];\n        } else {\n            modifiedStats.normalDmgBonus += burstParams[0];\n        }\n\n        if (modifiedStats.chargedDmgBonus === undefined) {\n            modifiedStats.chargedDmgBonus = burstParams[0];\n        } else {\n            modifiedStats.chargedDmgBonus += burstParams[0];\n        }\n\n        if (modifiedStats.plungeDmgBonus === undefined) {\n            modifiedStats.plungeDmgBonus = burstParams[0];\n        } else {\n            modifiedStats.plungeDmgBonus += burstParams[0];\n        }\n\n        return attackLightMulti({\n            normalHits: [2, 1, 1, 2, 1, 1],\n            element: 'anemo',\n            params: params.slice(1, 5).concat(params.slice(6)),\n            stats: modifiedStats,\n            modifier,\n        });\n    } else {\n        return attackLightMulti({\n            normalHits: [2, 1, 1, 2, 1, 1],\n            params: params.slice(1, 5).concat(params.slice(6)),\n            stats,\n            modifier,\n        });\n    }\n}\n\nexport function xiaoSkill({ params, stats, modifier }) {\n    return skillDefault({\n        element: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function xiaoBurst({ params, stats, modifier }) {\n    return defaultTalent();\n}\n\n// Ningguang\nexport function ningguangAttack({ params, stats, modifier }) {\n    let talentDmg = []; \n\n    // Ningguang's normal attack has no combo\n    let normalAtkDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[0],\n        element: 'geo',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDmg.push({\n        description: 'normalAtkDmg',\n        damage: [normalAtkDmg],\n    });\n\n    talentDmg.push(...chargedAttackDefault({\n        element: 'geo',\n        params: params.slice(1, 2),\n        stats,\n        modifier,\n    }));\n\n    // Ningguang's charged attack dmg per star jade\n    let starJadeDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[2],\n        element: 'geo',\n        attackType: 'charged',\n        modifier,\n    });\n    talentDmg.push({\n        description: 'starJadeDmg',\n        damage: [starJadeDmg],\n    });\n\n    talentDmg.push(...plungeAttackDefault({\n        element: 'geo',\n        params: params.slice(4),\n        stats,\n        modifier,\n    }));\n\n    return talentDmg;\n}\n\nexport function ningguangSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'skillDmg',\n        element: 'geo',\n        multiplier: params[1],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(hpBase({\n        description: 'jadeScreenHp',\n        multiplier: params[2],\n        flatBonus: 0,\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function ningguangBurst({ params, stats, modifier }) {\n    return [burstBase({\n        description: 'dmgPerGem',\n        element: 'geo',\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Klee\nexport function kleeAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 3,\n        element: 'pyro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function kleeSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'jumpyDumptyDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'mineDmg',\n            element: 'pyro',\n            multiplier: params[3],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function kleeBurst({ params, stats, modifier }) {\n    return [burstBase({\n        description: 'sparksNSplashDmg',\n        element: 'pyro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Zhongli\nexport function zhongliAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 1, 1, 4, 1],\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function zhongliSkill({ params, stats, modifier }) {\n    let descriptions = ['stoneSteeleDmg', 'resonanceDmg'];\n\n    let talentDamage = descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'geo',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n\n    talentDamage.push(skillBase({\n        description: 'holdDmg',\n        element: 'geo',\n        multiplier: params[3],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(shieldBase({\n        description: 'shieldHp',\n        multiplier: params[5],\n        flatBonus: params[4],\n        element: 'geo',\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function zhongliBurst({ params, stats, modifier }) {\n    return burstDefault({\n        element: 'geo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Fischl\nexport function fischlAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 5,\n        chargedElement: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function fischlSkill({ params, stats, modifier }) {\n    let descriptions = ['ozDmg', 'summoningDmg'];\n    return descriptions.map((description, i) => skillBase({\n        description,\n        element: 'electro',\n        multiplier: params[i],\n        stats,\n        modifier,\n    }));\n}\n\nexport function fischlBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'fallingThunderDmg',\n            element: 'electro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Bennett\nexport function bennettAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 1, 1, 1],\n        chargedHits: 2,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function bennettSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'pressDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillMultiBase({\n            description: 'chargeLevel1Dmg',\n            hits: 2,\n            element: 'pyro',\n            params: params.slice(1, 3),\n            stats,\n            modifier,\n        }),\n\n        skillMultiBase({\n            description: 'chargeLevel2Dmg',\n            hits: 2,\n            element: 'pyro',\n            params: params.slice(3, 5),\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'explosionDmg',\n            element: 'pyro',\n            multiplier: params[5],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function bennettBurst({ params, stats, modifier }) {\n    let talentDamage = [\n        burstBase({\n            description: 'burstDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenContinuousPerSecond',\n            params: params.slice(1, 3),\n            stats,\n            modifier,\n        }),\n    ];\n\n    // ATK Bonus\n    let atkBonus = stats.baseAtk * params[3];\n    talentDamage.push({\n        description: 'atkBonus',\n        damage: [atkBonus],\n    });\n\n    return talentDamage;\n}\n\n// Tartaglia\nexport function tartagliaAttack({ params, stats, modifier }) {\n    let talentDamage = attackBowDefault({\n        normalHits: 6,\n        chargedElement: 'hydro',\n        params: params.slice(0, 8).concat(params.slice(10)),\n        stats,\n        modifier,\n    });\n\n    let riptideFlashDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[8],\n        element: 'hydro',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'riptideFlashDmg',\n        damage: [riptideFlashDmg],\n    });\n\n    let riptideBurstDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[9],\n        element: 'hydro',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'riptideBurstDmg',\n        damage: [riptideBurstDmg],\n    });\n\n    return talentDamage;\n}\n\nexport function tartagliaSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'stanceChangeDmg',\n        element: 'hydro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(...normalAttackMulti({\n        hits: [1, 1, 1, 1, 1, 2],\n        element: 'hydro',\n        params: params.slice(1, 8),\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(...chargedAttackMulti({\n        hits: 2,\n        element: 'hydro',\n        params: params.slice(8, 10),\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(skillBase({\n        description: 'riptideSlashDmg',\n        element: 'hydro',\n        multiplier: params[10],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function tartagliaBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmgMelee',\n            element: 'hydro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'burstDmgRanged',\n            element: 'hydro',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'riptideBlastDmg',\n            element: 'hydro',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Noelle\nexport function noelleAttack({ params, stats, modifier }) {\n    if (modifier.infusion) {\n        let burstParams = getTalentStatsAt('burst', modifier.talentBurstLevel, getTalentData('noelle'));\n        let modifiedStats = {\n            ...stats,\n            flatAtk: stats.flatAtk + stats.flatDef * burstParams[2],\n        };\n\n        return attackHeavyDefault({\n            normalHits: 4,\n            element: 'geo',\n            params,\n            stats: modifiedStats,\n            modifier,\n        });\n    } else {\n        return attackHeavyDefault({\n            normalHits: 4,\n            params,\n            stats,\n            modifier,\n        }); \n    }\n}\n\nexport function noelleSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    let skillDamage = calculateTotalDamage({\n        stats,\n        multiplier: params[5],\n        element: 'geo',\n        scalingType: 'defense',\n        attackType: 'skill',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'skillDmg',\n        damage: [skillDamage],\n    });\n\n    talentDamage.push(shieldBase({\n        description: 'shieldHp',\n        multiplier: params[0],\n        flatBonus: params[6],\n        element: 'geo',\n        scalingType: 'defense',\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(healingSkillBase({\n        description: 'healing',\n        params: [params[1], params[7]],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function noelleBurst({ params, stats, modifier }) {\n    let modifiedStats = {\n        ...stats,\n        flatAtk: stats.flatAtk + stats.flatDef * params[2]\n    };\n\n    return [\n        burstBase({\n            description: 'burstInitDmg',\n            element: 'geo',\n            multiplier: params[0],\n            stats: modifiedStats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'firstSwingDmg',\n            element: 'geo',\n            multiplier: params[1],\n            stats: modifiedStats,\n            modifier,\n        }),\n    ]\n}\n\n// Qiqi\nexport function qiqiAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 2, 2, 1],\n        chargedHits: 2,\n        params: params.slice(0, 6).concat(params[5]).concat(params.slice(6)),\n        stats,\n        modifier,\n    });\n}\n\nexport function qiqiSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'skillDmg',\n            element: 'cryo',\n            multiplier: params[7],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'heraldOfFrostDmg',\n            element: 'cryo',\n            multiplier: params[4],\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenOnHit',\n            scalingType: 'attack',\n            params: params.slice(0, 2),\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenContinuous',\n            scalingType: 'attack',\n            params: params.slice(2, 4),\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function qiqiBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmg',\n            element: 'cryo',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'healing',\n            scalingType: 'attack',\n            params,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Chongyun\nexport function chongyunAttack({ params, stats, modifier }) {\n    if (modifier.infusion) {\n        return attackHeavyDefault({\n            normalHits: 4,\n            element: 'cryo',\n            params,\n            stats,\n            modifier,\n        });\n    } else {\n        return attackHeavyDefault({\n            normalHits: 4,\n            params,\n            stats,\n            modifier,\n        });\n    }\n}\n\nexport function chongyunSkill({ params, stats, modifier }) {\n    return skillDefault({\n        element: 'cryo',\n        params: params,\n        stats,\n        modifier,\n    });\n}\n\nexport function chongyunBurst({ params, stats, modifier }) {\n    return burstDefault({\n        element: 'cryo',\n        params: params,\n        stats,\n        modifier,\n    });\n}\n\n// Ganyu\nexport function ganyuAttack({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    // Normal attack\n    talentDamage.push(...normalAttackDefault({\n        hits: 6,\n        element: 'physical',\n        params,\n        stats,\n        modifier,\n    }));\n\n    // Charged attack\n    let aimedShotDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[6],\n        element: 'physical',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'aimShotDmg',\n        damage: [aimedShotDmg],\n    });\n\n    let chargedDescriptions = ['aimShotChargeLevel1', 'frostflakeArrowDmg', 'frostflakeArrowBloomDmg'];\n    let chargedDmg = chargedDescriptions.map((description, i) => {\n        let damage = calculateTotalDamage({\n            stats,\n            multiplier: params[i+7],\n            element: 'cryo',\n            attackType: 'charged',\n            modifier,\n        });\n\n        return {\n            description,\n            damage: [damage],\n        };\n    });\n    talentDamage.push(...chargedDmg);\n\n    talentDamage.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(10),\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function ganyuSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'skillDmg',\n            element: 'cryo',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n\n        hpBase({\n            description: 'iceLotusHp',\n            multiplier: params[0],\n            flatBonus: 0,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function ganyuBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'iceShardDmg',\n            element: 'cryo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Albedo\nexport function albedoAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 1, 1, 1],\n        chargedHits: 2,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function albedoSkill({ params, stats, modifier }) {\n    let talentDmg = [];\n\n    talentDmg.push(skillBase({\n        description: 'skillDmg',\n        element: 'geo',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    let transientBlossomDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[1],\n        element: 'geo',\n        scalingType: 'defense',\n        attackType: 'skill',\n        modifier,\n    });\n    talentDmg.push({\n        description: 'transientBlossomDmg',\n        damage: [transientBlossomDmg],\n    });\n\n    return talentDmg;\n}\n\nexport function albedoBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmg',\n            element: 'geo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'fatalBlossomDmg',\n            element: 'geo',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Diona\nexport function dionaAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 5,\n        chargedElement: 'cryo',\n        params: params.slice(0, 5).concat(params.slice(6)),\n        stats,\n        modifier,\n    });\n}\n\nexport function dionaSkill({ params, stats, modifier }) {\n    let holdModifier = {\n        ...modifier,\n        dionaHoldSkill: true,\n    }\n\n    return [\n        skillBase({\n            description: 'icyPawDmgPerPaw',\n            element: 'cryo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        shieldBase({\n            description: 'shieldHpPress',\n            multiplier: params[1],\n            flatBonus: params[2],\n            element: 'cryo',\n            stats,\n            modifier,\n        }),\n\n        shieldBase({\n            description: 'shieldHpHold',\n            multiplier: params[1],\n            flatBonus: params[2],\n            element: 'cryo',\n            stats,\n            modifier: holdModifier,\n        }),\n    ];\n}\n\nexport function dionaBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmg',\n            element: 'cryo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'continuousFieldDmg',\n            element: 'cryo',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenContinuousTime',\n            params: params.slice(2),\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Mona\nexport function monaAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'hyrdo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function monaSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'dot',\n            element: 'hydro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'explosionDmg',\n            element: 'hydro',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function monaBurst({ params, stats, modifier }) {\n    let modifiedStats = { ...stats };\n    if (modifiedStats.dmgBonus !== undefined) {\n        modifiedStats.dmgBonus += params[9];\n    } else {\n        modifiedStats.dmgBonus = params[9];\n    }\n\n    return [\n        burstBase({\n            description: 'explosionDmg',\n            element: 'hydro',\n            multiplier: params[1],\n            stats: modifiedStats,\n            modifier,\n        }),\n    ];\n}\n\n// Keqing\nexport function keqingAttack({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    // Normal attack\n    for (let i = 0; i < 3; i++) {\n        let damage = calculateTotalDamage({\n            stats,\n            multiplier: params[i],\n            element: 'physical',\n            attackType: 'normal',\n            modifier,\n        });\n        talentDamage.push({\n            description: `${i+1}HitDmg`,\n            damage: [damage],\n        });\n    }\n\n    let hit4Dmg = [];\n    for (let i = 3; i < 5; i++) {\n        hit4Dmg.push(calculateTotalDamage({\n            stats,\n            multiplier: params[i],\n            element: 'physical',\n            attackType: 'normal',\n            modifier,\n        }));\n    }\n    talentDamage.push({\n        description: '4HitDmg',\n        damage: hit4Dmg,\n    });\n\n    let hit5Dmg = [calculateTotalDamage({\n        stats,\n        multiplier: params[5],\n        element: 'physical',\n        attackType: 'normal',\n        modifier,\n    })];\n    talentDamage.push({\n        description: `5HitDmg`,\n        damage: hit5Dmg,\n    });\n\n    // Charged attack\n    talentDamage.push(...chargedAttackMulti({\n        hits: 2,\n        element: 'physical',\n        params: params.slice(6, 8),\n        stats,\n        modifier,\n    }));\n\n    // Plunge attack\n    talentDamage.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(9, 12),\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function keqingSkill({ params, stats, modifier }) {\n    let descriptions = ['lightningStilettoDmg', 'slashingDmg'];\n    let talentDamage = descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'electro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n\n    talentDamage.push(skillMultiBase({\n        description: 'thunderclapSlashDmg',\n        hits: 2,\n        element: 'electro',\n        params: [params[2], params[2]],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function keqingBurst({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(burstBase({\n        description: 'burstInitDmg',\n        element: 'electro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    let consecutiveSlashDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[1],\n        element: 'electro',\n        attackType: 'burst',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'consecutiveSlashDmg',\n        damage: Array(8).fill(consecutiveSlashDmg),\n    });\n\n    talentDamage.push(burstBase({\n        description: 'lastAttackDmg',\n        element: 'electro',\n        multiplier: params[2],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\n// Sucrose\nexport function sucroseAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function sucroseSkill({ params, stats, modifier }) {\n    return skillDefault({\n        element: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function sucroseBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'dot',\n            element: 'anemo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        // Not sure how the elemental absorption dmg is calculated\n        burstBase({\n            description: 'dotElementalAbsorption',\n            element: 'none',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Xinyan\nexport function xinyanAttack({ params, stats, modifier }) {\n    return attackHeavyDefault({\n        normalHits: 4,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function xinyanSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'swingDmg',\n        element: 'pyro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    // Shields\n    for (let i = 0; i < 3; i++) {\n        talentDamage.push(shieldBase({\n            description: `shieldHpLevel${i+1}`,\n            multiplier: params[2 * i + 1],\n            flatBonus: params[2 * i + 2],\n            element: 'pyro',\n            scalingType: 'defense',\n            stats,\n            modifier,\n        }));\n    }\n\n    talentDamage.push(skillBase({\n        description: 'dot',\n        element: 'pyro',\n        multiplier: params[7],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function xinyanBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmg',\n            element: 'physical',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'pyroDot',\n            element: 'pyro',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Rosaria\nexport function rosariaAttack({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    // Normal attack\n    talentDamage.push(...normalAttackMulti({\n        hits: [1, 1, 2, 1],\n        element: 'physical',\n        params,\n        stats,\n        modifier,\n    }));\n\n    let hit5Dmg = [];\n    for (let i = 4; i < 6; i++) {\n        hit5Dmg.push(calculateTotalDamage({\n            stats,\n            multiplier: params[i],\n            element: 'physical',\n            attackType: 'normal',\n            modifier,\n        }));\n    }\n    talentDamage.push({\n        description: '5HitDmg',\n        damage: hit5Dmg,\n    });\n\n    // Charged attack\n    talentDamage.push(...chargedAttackDefault({\n        element: 'physical',\n        params: params.slice(6, 7),\n        stats,\n        modifier,\n    }));\n\n    // Plunge attack\n    talentDamage.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(8, 11),\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function rosariaSkill({ params, stats, modifier }) {\n    return [\n        skillMultiBase({\n            description: 'skillDmg',\n            hits: 2,\n            element: 'cryo',\n            params,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function rosariaBurst({ params, stats, modifier }) {\n    return [\n        burstMultiBase({\n            description: 'burstDmg',\n            hits: 2,\n            element: 'cryo',\n            params,\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'iceLanceDot',\n            element: 'cyro',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Eula\nexport function eulaAttack({ params, stats, modifier }) {\n    return attackHeavyMulti({ \n        normalHits: [1, 1, 2, 1, 2], \n        params, \n        stats, \n        modifier\n    });\n}\n\nexport function eulaSkill({ params, stats, modifier }) {\n    let descriptions = ['pressDmg', 'holdDmg', 'icewhirlBrandDmg'];\n    return descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'cryo',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n}\n\nexport function eulaBurst({ params, stats, modifier }) {\n    let talentDmg = [];\n    talentDmg.push(...burstDefault({\n        element: 'cryo', \n        params, \n        stats,\n        modifier,\n    }));\n    \n    let descriptions = ['lightfallSwordBaseDmg', 'lightfallSwordStackDmg'];\n    let lightfallSwordParams = params.slice(1, 3);\n    let lightfallSwordTalent = descriptions.map((description, i) => {\n        return burstBase({\n            description,\n            element: 'physical',\n            multiplier: lightfallSwordParams[i],\n            stats,\n            modifier,\n        });\n    });\n\n    talentDmg.push(...lightfallSwordTalent);\n\n    return talentDmg;\n}\n","export default class TalentOption {\n    constructor(id, type = 'boolean', value) {\n        this.id = id;\n        this.type = type;\n        this.value = value;\n    }\n}\n\n// Diluc\nexport const dilucTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n\n// Xiao\nexport const xiaoTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n\n// Noelle\nexport const noelleTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n\n// Chongyun\nexport const chongyunTalentOptions = [new TalentOption('infusion', 'boolean', false)];","import { \n    getCharacterData as getData, \n    getCharacterAscensionBonusData as getAscensionBonusData, \n    getCharacterStatCurveAt as getStatCurveAt, \n    getAscensionBonusAt,\n    getTalentData,\n    getTalentStatsAt,\n} from './Data.js';\n\nimport * as talents from './Talent.js';\nimport * as talentOptions from './TalentOption.js';\n\nexport default class Character {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n\n        this.talents = getTalentData(id);\n    }\n\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n    getInnateStatsAt(level, hasAscended) {\n        if (isNaN(level) || level < 1 || level > 90) {\n            // Return nulls if level is invalid\n            let innateStats;\n            if (this.innateStats !== undefined) {\n                // Copy all of innateStats' properties to a new object and initialize them to null\n                innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                innateStats = {};\n            }\n            \n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n            \n            return innateStats;\n        } \n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\n        else if (level === this.level && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.innateStats;\n        } else {\n\n            // Initialize stats with character level 1 base stats\n            let innateStats = {...this.baseStats};\n\n            let charStatCurves = getStatCurveAt(level);\n\n            // Calculate stats from character level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = charStatCurves[curve];\n                innateStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from character ascension\n            let ascensionLevel;\n            if (level > 80 || (level == 80 && hasAscended)) {\n                ascensionLevel = 6;\n            } else if (level > 70 || (level == 70 && hasAscended)) {\n                ascensionLevel = 5;\n            } else if (level > 60 || (level == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (level > 50 || (level == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (level > 40 || (level == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (level > 20 || (level == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n\n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in innateStats) {\n                        innateStats[stat] += bonus;\n                    } else {\n                        innateStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n\n            return innateStats;\n        }\n    }\n\n    // Return an Object with description and damage properties\n    getTalentDamageAt({ type, talentLevel, totalStats, modifier }) {\n        const params = getTalentStatsAt(type.toLowerCase(), talentLevel, this.talents);\n\n        let damageFn = talents[this.id + type];\n        if (damageFn === undefined) {\n            damageFn = talents['defaultTalent'];\n        }\n\n        let damage = damageFn({\n            params,\n            stats: totalStats,\n            modifier,\n        });\n\n        return damage;\n    }\n\n    getTalentOptions() {\n        let options = talentOptions[this.id + 'TalentOptions'];\n        if (options !== undefined) {\n            return options;\n        } else {\n            return [];\n        }\n    }\n}\n","import { getWeaponData as getData, getWeaponAscensionBonusData as getAscensionBonusData, getWeaponStatCurveAt as getStatCurveAt, getAscensionBonusAt } from './Data.js';\n\nexport default class Weapon {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.type = data.type;\n        this.rank = data.rank;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n    }\n\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n    getStatsAt(weaponLevel, hasAscended) {\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.rank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\n            // Return nulls if weapon level is invalid\n            let weaponStats;\n            if (this.stats !== undefined) {\n                // Copy all of stats' properties to a new object and initialize them to null\n                weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                weaponStats = {};\n            }\n            \n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n        // If getStatsAt has not been called before, this.weaponLevel, this.hasAscended, and this.stats will be undefined\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.stats;\n        } else {\n\n            // Level 1 weapon stats\n            let weaponStats = {...this.baseStats};\n\n            let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n            // Calculate stats from weapon level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = weaponStatCurves[curve];\n                weaponStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from weapon ascension\n            let ascensionLevel;\n            // Only 3-star and above weapons can be ascended beyond level 70\n            if (this.rank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\n                ascensionLevel = 6;\n            } else if (this.rank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\n                ascensionLevel = 5;\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n            \n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in weaponStats) {\n                        weaponStats[stat] += bonus;\n                    } else {\n                        weaponStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n    }\n}\n","import { talentDescMapping, talentOptionMapping } from './Data.js';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value, isPercentage) {\n    if (value != null) {\n        if (isPercentage) {\n            return (value * 100).toFixed(1) + \"%\";\n        } else {\n            return Math.round(value);\n        }\n    } else {\n        return \"-\";\n    }\n};\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values) {\n    let str = '';\n\n    if (values.length === 0) {\n        return str;\n    }\n\n    if (isNaN(values[0])) {\n        return '-';\n    } else {\n        str += Math.round(values[0]);\n    }\n\n    if (values.length >= 3 && values.every(value => value === values[0])) {\n        // All elements are the same, simplify to ${damage} x${count}\n        str += ' x ' + values.length;\n    } else {\n        // Less than 3 elements, or elements are different\n        values.slice(1).forEach(value => {\n            if (isNaN(value)) {\n                return '-';\n            } else {\n                str += ' + ' + Math.round(value);\n            }\n        });\n    }\n\n    return str;\n}\n\n// Returns the display name of a talent option\nexport function getTalentOptionName(id) {\n    return talentOptionMapping[id];\n}\n\n// Returns a Number representing the inputed value of a stat\n// Returns null if the input is not a valid stat value\nexport function convertStatValue(value, isPercentage) {\n    if (isPercentage) {\n        return value / 100;\n    } else {\n        return value;\n    }\n};\n\nexport function getTalentDescription(desc) {\n    return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended) {\n\n    let weaponStats;\n    if (weapon !== undefined) {\n        weaponStats = weapon.getStatsAt(weaponLevel, weaponHasAscended);\n    } else {\n        weaponStats = {};\n    }\n\n    let characterStats;\n    if (character !== undefined) {\n        characterStats = character.getInnateStatsAt(characterLevel, characterHasAscended);\n    } else {\n        characterStats = {};\n    }\n    \n    // Merges weaponStats and innateStats into a new baseStats object\n    let baseStats = {...weaponStats};\n    Object.entries(characterStats).map(([stat, value]) => {\n        if (baseStats[stat] === undefined) {\n            baseStats[stat] = value;\n        } else {\n            baseStats[stat] += value;\n        }\n    });\n    \n    return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended, artifacts) {\n    \n    let baseStats = getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended);\n    \n    // Merge artifact bonuses into separate object\n    let artifactStats = {};\n    artifacts.forEach(artifact => {\n        Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n            if (artifactStats[stat] === undefined) {\n                artifactStats[stat] = value;\n            } else {\n                artifactStats[stat] += value;\n            }\n        });\n    });\n\n    // Merge base stats and artifact bonuses\n    let combinedStats = {...baseStats};\n    Object.entries(artifactStats).forEach(([stat, value]) => {\n        if (combinedStats[stat] === undefined) {\n            combinedStats[stat] = value;\n        } else {\n            combinedStats[stat] += value;\n        }\n    });\n\n    // Calculate total stats\n    let totalStats = {};\n\n    totalStats.baseAtk = (combinedStats.baseAtk ? combinedStats.baseAtk : 0);\n\n    totalStats.flatAtk = (combinedStats.baseAtk ? combinedStats.baseAtk : 0) \n        * (1 + (combinedStats.atkBonus ? combinedStats.atkBonus : 0))\n        + (combinedStats.flatAtk ? combinedStats.flatAtk : 0);\n    totalStats.flatDef = (combinedStats.baseDef ? combinedStats.baseDef : 0) \n        * (1 + (combinedStats.defBonus ? combinedStats.defBonus : 0))\n        + (combinedStats.flatDef ? combinedStats.flatDef : 0);\n    totalStats.flatHp = (combinedStats.baseHp ? combinedStats.baseHp : 0) \n        * (1 + (combinedStats.hpBonus ? combinedStats.hpBonus : 0))\n        + (combinedStats.flatHp ? combinedStats.flatHp : 0);\n    totalStats.critRate = combinedStats.critRate ? combinedStats.critRate : 0;\n    totalStats.critDmg = combinedStats.critDmg ? combinedStats.critDmg : 0;\n    totalStats.elementalMastery = combinedStats.elementalMastery ? combinedStats.elementalMastery : 0;\n    totalStats.energyRecharge = 1 + (combinedStats.energyRecharge ? combinedStats.energyRecharge : 0);\n    \n    combinedStats.anemoDmgBonus ? totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus : null;\n    combinedStats.cryoDmgBonus ? totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus : null;\n    combinedStats.electroDmgBonus ? totalStats.electroDmgBonus = combinedStats.electroDmgBonus : null;\n    combinedStats.geoDmgBonus ? totalStats.geoDmgBonus = combinedStats.geoDmgBonus : null;\n    combinedStats.hydroDmgBonus ? totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus : null;\n    combinedStats.pyroDmgBonus ? totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus : null;\n    combinedStats.physicalDmgBonus ? totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus : null;\n\n    combinedStats.anemoRes ? totalStats.anemoRes = combinedStats.anemoRes : null;\n    combinedStats.cryoRes ? totalStats.cryoRes = combinedStats.cryoRes : null;\n    combinedStats.electroRes ? totalStats.electroRes = combinedStats.electroRes : null;\n    combinedStats.geoRes ? totalStats.geoRes = combinedStats.geoRes : null;\n    combinedStats.hydroRes ? totalStats.hydroRes = combinedStats.hydroRes : null;\n    combinedStats.pyroRes ? totalStats.pyroRes = combinedStats.pyroRes : null;\n    combinedStats.physicalRes ? totalStats.physicalRes = combinedStats.physicalRes : null;\n\n    combinedStats.healingBonus ? totalStats.healingBonus = combinedStats.healingBonus : null;\n\n    return totalStats;\n}","import * as statUtils from './Stat.js';\n\nexport default class Artifact {\n    mainStat = {\n        stat: 0,\n        rawValue: NaN,\n        value: NaN,\n    };\n\n    subStats = [\n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }\n    ];\n\n    constructor(type) {\n        this.type = type;\n    }\n\n    // Can be called with one of the two of stat and value (the other will be undefined)\n    setStat(statObj, stat, value, isPercentage = false) {\n        if (stat == undefined && value != undefined) {\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        } else if (stat != undefined && value == undefined) {\n            statObj.stat = stat;\n            statObj.value = statUtils.convertStatValue(statObj.rawValue, isPercentage);\n        } else if (stat != undefined && value != undefined) {\n            statObj.stat = stat;\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        }\n    }\n\n    /*\n    setMainStat(stat, value, isPercentage = false) {\n        this.setStat(this.mainStat, stat, value, isPercentage);\n    }\n\n    // Set substat in a spefiic position\n    setSubStat(pos, stat, value, isPercentage = false) {\n        this.setStat(this.subStats[pos], stat, value, isPercentage);\n    }\n    */\n\n    // Returns object containing stat: value mapping, including both main stat and substats\n    getStats() {\n        let stats = {};\n\n        if (this.mainStat.stat != 0) {\n            if (!isNaN(this.mainStat.value)) {\n                stats[this.mainStat.stat] = this.mainStat.value;\n            } else {\n                stats[this.mainStat.stat] = null;\n            }\n        }\n        \n        this.subStats.forEach(subStat => {\n            if (subStat.stat != 0) {\n                if (!isNaN(subStat.value)) {\n                    stats[subStat.stat] = subStat.value;\n                } else {\n                    stats[subStat.stat] = null;\n                }\n            }\n        });\n\n        return stats;\n    }\n}\n\nexport const mainStatProps = {\n    Flower: [\n        'flatHp',\n    ],\n\n    Feather: [\n        'flatAtk',\n    ],\n\n    Sands: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'energyRecharge',\n    ],\n\n    Goblet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'anemoDmgBonus',\n        'cryoDmgBonus',\n        'electroDmgBonus',\n        'geoDmgBonus',\n        'hydroDmgBonus',\n        'pyroDmgBonus',\n        'physicalDmgBonus',\n    ],\n\n    Circlet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'critRate',\n        'critDmg',\n        'healingBonus',\n    ],\n}\n\nexport const subStatProps = [\n    'flatHp',\n    'flatAtk',\n    'flatDef',\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n    'critRate',\n    'critDmg',\n]","export default class DamageModifier {\n    constructor({\n        characterLevel,\n        enemyLevel = 1,\n        enemyRes = {},\n        modifiers = {},\n        critType = 'none',\n        flatDmg = 0,\n        reaction = 'none',\n        talentAttackLevel,\n        talentSkillLevel,\n        talentBurstLevel,\n        talentOptions = [] \n    }) {\n        this.characterLevel = characterLevel;\n        this.enemyLevel = enemyLevel;\n        this.enemyRes = enemyRes;\n        this.modifiers = modifiers;\n        this.critType = critType;\n        this.flatDmg = flatDmg;\n        this.reaction = reaction;\n        this.talentAttackLevel = talentAttackLevel;\n        this.talentSkillLevel = talentSkillLevel;\n        this.talentBurstLevel = talentBurstLevel;\n\n        talentOptions.forEach(({id, value}) => {\n            this[id] = value;\n        });\n    }\n}","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n\n        fontSize: 14,\n\n        height: '100%',\n\n        backgroundColor: '#fff',\n    },\n\n    inputColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '1%',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#ccc',\n    },\n\n    inputRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    levelInput: {\n        width: '2em',\n    },\n\n    statInput: {\n        width: '3em',\n    },\n\n    resultColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#eee',\n    },\n\n    resultBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n    },\n\n    resultBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n        borderBottomWidth: 1,\n    },\n\n    artifactBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n    },\n\n    artifactBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n\n        borderStyle: 'dashed',\n        borderBottomWidth: 1,  \n    },\n\n    characterImage: {\n        marginVertical: '0.25em',\n    },\n\n    titleText: {\n        fontSize: '1.5em',\n        fontWeight: '200',\n\n        marginVertical: '0.17em',\n    },\n\n    artifactType: {\n        fontSize: '1.2em',\n        fontWeight: '200',\n\n        marginVertical: '0.21em',\n    },\n\n    artifactStatType: {\n        marginVertical: '0.25em',\n    },\n\n    resultText: {\n        marginVertical: '0.25em',\n    },\n\n    fillerColumn: {\n        flexGrow: 1,\n\n        backgroundColor: '#eee',\n    },\n});\n","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { FlatList, Image, Text, TextInput, View } from 'react-native';\n\nimport Character from './js/Character.js';\nimport Weapon from './js/Weapon.js';\nimport Artifact, { mainStatProps, subStatProps } from './js/Artifact.js';\nimport DamageModifier from './js/DamageModifer.js';\nimport TalentOption from './js/TalentOption.js';\nimport * as statUtils from './js/Stat.js';\nimport * as data from './js/Data.js';\n\nimport styles from './js/Styles.js';\n\nexport default class App extends Component {\n\n  // Class properties\n  character;\n  weapon;\n  artifactFlower;\n  artifactFeather;\n  artifactSands;\n  artifactGoblet;\n  artifactCirclet;\n\n  constructor() {\n    super();  \n\n    // Initialize sorted list of characters and weapons\n    this.characters = data.getSortedCharacterList();\n    this.weapons = data.getSortedWeaponList();\n\n    this.artifactFlower = new Artifact('Flower');\n    this.artifactFeather = new Artifact('Feather');\n    this.artifactSands = new Artifact('Sands');\n    this.artifactGoblet = new Artifact('Goblet');\n    this.artifactCirclet = new Artifact('Circlet');\n\n    this.state = {\n      characterId: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n\n      weaponId: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n\n      talentAttackLevel: 1,\n      talentSkillLevel: 1,\n      talentBurstLevel: 1,\n\n      characterStats: undefined,\n      weaponStats: undefined,\n      totalStats: undefined,\n\n      talentAttackDamage: undefined,\n      talentSkillDamage: undefined,\n      talentBurstDamage: undefined,\n\n      talentOptions: [],\n    }\n  }\n\n  renderInputColumn = () => {\n    return (\n      <View>\n        {this.renderCharacterList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.characterLevel} \n            onChangeText={text => {\n              this.setState({ characterLevel: parseInt(text) }, this.setCharacterState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isCharacterAscended: value }, this.setCharacterState)}\n            value={this.state.isCharacterAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        {this.renderWeaponList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.weaponLevel} \n            onChangeText={text => {\n              this.setState({ weaponLevel: parseInt(text) }, this.setWeaponState)\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isWeaponAscended: value }, this.setWeaponState)}\n            value={this.state.isWeaponAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        <View style={styles.inputRow}>\n          <Text>Attack Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentAttackLevel} \n            onChangeText={text => {\n              this.setState({ talentAttackLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Skill Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentSkillLevel} \n            onChangeText={text => {\n              this.setState({ talentSkillLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Burst Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentBurstLevel} \n            onChangeText={text => {\n              this.setState({ talentBurstLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n      </View>\n    )\n  }\n\n  renderCharacterList = () => {    \n    return (\n      <View style={styles.inputRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.character = new Character(value);\n              this.setState({\n                characterId: value,\n                talentOptions: this.character.getTalentOptions()\n              }, this.setCharacterState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.characters.map(id => <Picker.Item label={data.getCharacterData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    return (\n      <View style={styles.inputRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.weapon = new Weapon(value);\n              this.setState({ weaponId: value }, this.setWeaponState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.weapons.map(id => <Picker.Item label={data.getWeaponData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  getDamageModifier = () => {\n    let modifier = new DamageModifier({ \n      characterLevel: this.state.characterLevel,\n      talentAttackLevel: this.state.talentAttackLevel,\n      talentSkillLevel: this.state.talentSkillLevel,\n      talentBurstLevel: this.state.talentBurstLevel,\n      talentOptions: this.state.talentOptions,\n    });\n\n    return modifier;\n  }\n\n  setCharacterState = () => {\n    if (this.character !== undefined) {\n      let stats = this.character.getInnateStatsAt(this.state.characterLevel, this.state.isCharacterAscended);\n      let totalStats = this.getTotalStats();\n      let modifier = this.getDamageModifier();\n\n      let talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats,\n        modifier,\n      });\n\n      let talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats,\n        modifier,\n      });\n      \n      let talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats,\n        modifier,\n      });\n\n      this.setState({ \n        characterStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setWeaponState = () => {\n    if (this.weapon !== undefined) {\n      let stats = this.weapon.getStatsAt(this.state.weaponLevel, this.state.isweaponAscended);\n      let totalStats = this.getTotalStats();\n      let modifier = this.getDamageModifier();\n\n      let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n      if (this.character !== undefined) {\n        talentAttackDamage = this.character.getTalentDamageAt({\n          type: 'Attack', \n          talentLevel: this.state.talentAttackLevel, \n          totalStats,\n          modifier,\n        });\n  \n        talentSkillDamage = this.character.getTalentDamageAt({\n          type: 'Skill', \n          talentLevel: this.state.talentSkillLevel, \n          totalStats,\n          modifier,\n        });\n        \n        talentBurstDamage = this.character.getTalentDamageAt({\n          type: 'Burst', \n          talentLevel: this.state.talentBurstLevel, \n          totalStats,\n          modifier,\n        });\n      }\n\n      this.setState({ \n        weaponStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setArtifactState = (type) => {\n    let totalStats = this.getTotalStats();\n    let modifier = this.getDamageModifier();\n\n    let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n    if (this.character !== undefined) {\n      talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats,\n        modifier,\n      });\n\n      talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats,\n        modifier,\n      });\n      \n      talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats,\n        modifier,\n      });\n    }\n\n    this.setState({\n      totalStats: totalStats,\n      talentAttackDamage: talentAttackDamage,\n      talentSkillDamage: talentSkillDamage,\n      talentBurstDamage: talentBurstDamage,\n    });\n  }\n\n  setTalentState = (type) => {\n    if (this.character !== undefined) {\n      let talentDmg = this.character.getTalentDamageAt({\n        type, \n        talentLevel: this.state[`talent${type}Level`], \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      this.setState({ [`talent${type}Damage`]: talentDmg });\n    }\n  }\n\n  // Not used in setCharacterState, setWeaponState, or setArtifactState to reduce number of setState calls\n  // Does not call setTalentState to reduce number of setState calls\n  setAllTalentState = () => {\n    if (this.character !== undefined) {\n      let talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      let talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n      \n      let talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      this.setState({\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  getTotalStats = () => {\n    let artifacts = [this.artifactFlower, this.artifactFeather, this.artifactSands, this.artifactGoblet, this.artifactCirclet];\n\n    let stats = statUtils.getTotalStatsAt(\n      this.weapon, \n      this.state.weaponLevel, \n      this.state.isWeaponAscended, \n      this.character,\n      this.state.characterLevel,\n      this.state.isCharacterAscended,\n      artifacts,\n    );\n\n    return stats;\n  }\n\n  renderCharacterStats = () => {\n    return (\n      this.character ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Character</Text>\n          {this.renderCharacterImage()}\n          <Text style={styles.resultText}>{this.character ? this.character.name : ''}</Text>\n          {\n            this.state.characterStats ? (\n              Object.entries(this.state.characterStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderWeaponStats = () => {\n    return (\n      this.weapon ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Weapon</Text>\n          <Text style={styles.resultText}>{this.weapon ? this.weapon.name : ''}</Text>\n          {\n            this.state.weaponStats ? (\n              Object.entries(this.state.weaponStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderArtifactMainStat = (type) => {\n    return (\n      <View style={styles.inputRow}>\n        <Picker\n          selectedValue={this['artifact' + type].mainStat.stat}\n          onValueChange={(stat, _) => {\n            if (stat != 0) {\n              let mainStat = this['artifact' + type].mainStat;\n              this['artifact' + type].setStat(mainStat, stat, undefined, data.propMapping[stat].isPercentage);\n              // Update total stats\n              this.setArtifactState(type);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {mainStatProps[type].map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n        </Picker>\n\n        <Text> : </Text>\n\n        <TextInput \n          style={styles.statInput} \n          onChangeText={text => {\n            let mainStat = this['artifact' + type].mainStat;\n            if (mainStat.stat) {\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), data.propMapping[mainStat.stat].isPercentage);\n            } else {\n              // If stat type is not yet set\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), false);\n            }\n\n            // Update total stats\n            this.setArtifactState(type);\n          }}\n        />\n      </View>\n    )\n  }\n\n  renderArtifactSubStats = (type) => {\n    return (\n      <View>\n        {\n          this['artifact' + type].subStats.map((subStat, index) => {\n            return (\n              <View style={styles.inputRow} key={index}>\n                <Picker\n                  selectedValue={subStat.stat}\n                  onValueChange={(stat, _) => {\n                    if (stat != 0) {\n                      this['artifact' + type].setStat(subStat, stat, undefined, data.propMapping[stat].isPercentage);     \n                      // Update total stats\n                      this.setArtifactState(type);\n                    }\n                  }}\n                >\n                  <Picker.Item label='' value={0} />\n                  {subStatProps.map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n                </Picker>\n\n                <Text> : </Text>\n\n                <TextInput \n                  style={styles.statInput} \n                  onChangeText={text => {\n                    let stat = subStat.stat;\n                    if (stat) {\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), data.propMapping[stat].isPercentage);\n                    } else {\n                      // If stat type is not yet set\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), false);\n                    }\n                    // Update total stats\n                    this.setArtifactState(type);\n                  }}\n                />\n              </View>\n            )\n          })\n        }\n      </View>\n    )\n  }\n\n  renderArtifactStat = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n\n        <Text style={styles.artifactStatType}>Main Stat</Text>\n        {this.renderArtifactMainStat(type)}\n\n        <Text style={styles.artifactStatType}>Substats</Text>\n        {this.renderArtifactSubStats(type)}\n      </View>\n    )\n  }\n\n  renderAllArtifactStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Artifacts</Text>\n        {this.renderArtifactStat('Flower')}\n        {this.renderArtifactStat('Feather')}\n        {this.renderArtifactStat('Sands')}\n        {this.renderArtifactStat('Goblet')}\n        {this.renderArtifactStat('Circlet', true)}\n      </View>\n    )\n  }\n\n  renderTotalStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Stat Total</Text>\n        {\n          this.state.totalStats ? (\n            Object.entries(this.state.totalStats).map(([stat, value]) => {\n              if (stat != 'baseAtk') {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              } else {\n                return null;\n              }\n            })\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  renderTalentDamage = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n        {\n          this.state['talent' + type + 'Damage'] ? (\n            this.state['talent' + type + 'Damage'].map(({description, damage}, index) => {\n              return (\n                <Text style={styles.resultText} key={index}>{statUtils.getTalentDescription(description)}: {statUtils.getDamageDisplayValue(damage)}</Text>\n              )\n            })\n          ) : null\n        }\n      </View>\n\n    )\n  }\n\n  renderTalentOptions = () => {\n    return (\n      <FlatList\n        data={this.state.talentOptions}\n        keyExtractor={item => item.id}\n        renderItem={({item, index}) => {\n          if (item.type === 'boolean') {\n            return (\n              <View style={styles.inputRow}>\n                <Text>{statUtils.getTalentOptionName(item.id)}: </Text>\n                <Checkbox\n                  onValueChange={value => {\n                    let talentOptions = [...this.state.talentOptions];\n                    talentOptions[index] = new TalentOption(item.id, item.type, value);\n                    this.setState({ talentOptions }, this.setAllTalentState);\n                  }}\n                  value={item.value}\n                />\n              </View>\n            );\n          } else {\n            return null;\n          }\n        }}\n      />\n    )\n  }\n\n  renderAllTalentDamage = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Talents</Text>\n\n        {this.renderTalentDamage('Attack')}\n        {this.renderTalentDamage('Skill')}\n        {this.renderTalentDamage('Burst', true)}\n        {this.renderTalentOptions()}\n      </View>\n    )\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.inputColumn}>\n          {this.renderInputColumn()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderCharacterStats()}\n          {this.renderWeaponStats()}\n          {this.renderAllArtifactStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderTotalStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderAllTalentDamage()}\n        </View>\n\n        <View style={styles.fillerColumn}>\n        </View>\n\n      </View>\n    )\n  }\n}\n"],"sourceRoot":""}