{"version":3,"sources":["js/Data.js","js/Talent.js","js/Character.js","js/Weapon.js","js/Stat.js","js/Artifact.js","js/DamageModifer.js","js/Styles.js","App.js"],"names":["sortedCharacterList","sortedWeaponList","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talents","attack","curveAcc","params","skill","burst","processTalentData","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","defaultTalent","calculateBaseDamage","stats","multiplier","scalingType","flatDmg","flatAtk","flatDef","flatHp","NaN","calculateTotalDamage","element","modifier","baseDmg","dmgBonus","undefined","getDamageBonus","crit","critType","critDmg","Math","min","critRate","normalAttackDefault","hits","talentValues","i","damage","push","description","normalAttackMulti","doubledHits","damages","includes","chargedAttackDefault","chargedAttackHeavy","plungeAttackDefault","attackLightDefault","normalHits","slice","attackLightMulti","chargedHits","chargedAttackMulti","attackMagic","skillBase","skillDefault","healingSkillBase","flatHealing","calculateHealing","lisaAttack","lisaSkill","talentDmg","lisaBurst","barbaraAttack","barbaraSkill","barbaraBurst","kaeyaAttack","attackLightMultiPhysical","kaeyaSkill","kaeyaBurst","eulaAttack","attackHeavyMulti","eulaSkill","eulaBurst","lightfallSwordParams","lightfallSwordTalent","emptyTalentParams","Array","fill","Character","this","data","name","baseStats","statCurveMapping","getTalentData","hasAscended","innateStats","isNaN","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","bonus","type","talentLevel","totalStats","getTalentStatsAt","toLowerCase","damageFn","Weapon","rank","weaponLevel","weaponStats","weaponStatCurves","getStatDisplayValue","value","isPercentage","toFixed","round","getDamageDisplayValue","values","str","convertStatValue","getTalentDescription","desc","talentDescMapping","getTotalStatsAt","weapon","weaponHasAscended","character","characterLevel","characterHasAscended","artifacts","characterStats","getStatsAt","getInnateStatsAt","getBaseStatsAt","artifactStats","artifact","getStats","combinedStats","baseAtk","atkBonus","baseDef","defBonus","baseHp","hpBonus","elementalMastery","energyRecharge","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","Artifact","mainStat","rawValue","subStats","statObj","statUtils","subStat","mainStatProps","Flower","Feather","Sands","Goblet","Circlet","subStatProps","DamageModifier","enemyLevel","enemyRes","modifiers","reaction","StyleSheet","create","container","display","flexDirection","alignItems","fontSize","height","backgroundColor","inputColumn","padding","borderRightWidth","inputRow","marginVertical","levelInput","width","statInput","resultColumn","resultBlockNoBorder","resultBlock","borderBottomWidth","artifactBlockNoBorder","paddingTop","paddingBottom","artifactBlock","borderStyle","characterImage","titleText","fontWeight","artifactType","artifactStatType","resultText","fillerColumn","flexGrow","App","renderInputColumn","View","renderCharacterList","style","styles","Text","TextInput","defaultValue","state","onChangeText","text","setState","parseInt","setCharacterState","Checkbox","onValueChange","isCharacterAscended","renderWeaponList","setWeaponState","isWeaponAscended","talentAttackLevel","setTalentState","talentSkillLevel","talentBurstLevel","characterSelect","selectedValue","_","Item","label","characters","key","weapons","renderCharacterImage","imageUrl","Image","source","uri","getDamageModifier","getTotalStats","talentAttackDamage","getTalentDamageAt","talentSkillDamage","talentBurstDamage","isweaponAscended","setArtifactState","artifactFlower","artifactFeather","artifactSands","artifactGoblet","artifactCirclet","renderCharacterStats","renderWeaponStats","renderArtifactMainStat","setStat","prop","parseFloat","renderArtifactSubStats","index","renderArtifactStat","isLast","renderAllArtifactStats","renderTotalStats","renderTalentDamage","renderAllTalentDamage","sort","name1","name2","localeCompare","Component"],"mappings":"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","file":"static/js/app.48c02f20.chunk.js","sourcesContent":["import characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\n//import artifactSetDataRaw from '../data/artifactsetdata.json';\n//import artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\nimport talentDataRaw from '../data/talentdata.json';\nexport { default as propMapping } from '../data/propmapping.json';\nexport { default as talentDescMapping } from '../data/talentdescmapping.json';\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(characterDataRaw);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(characterAscensionBonusDataRaw);\nconst characterStatCurveData = processCharacterStatCurveData(characterStatCurveDataRaw);\nconst weaponData = processWeaponData(weaponDataRaw);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(weaponAscensionBonusDataRaw);\nconst weaponStatCurveData = processWeaponStatCurveData(weaponStatCurveDataRaw);\nconst talentData = processTalentData(talentDataRaw);\n\n// Pre-processed data, lists\nlet sortedCharacterList;    // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList;       // lazy loading implemented with getSortedWeaponList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.id] = charData;\n        return acc;\n    }, {});\n}\n\nfunction processCharacterAscensionBonusData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.characterId] = charData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processCharacterStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.id] = weaponData;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponAscensionBonusData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processWeaponStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processTalentData(rawData) {\n    return rawData.reduce((acc, talentDataRaw) => {\n        let talentData = {...talentDataRaw.talents};\n\n        talentData.attack = talentData.attack.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.skill = talentData.skill.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.burst = talentData.burst.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n\n        acc[talentDataRaw.characterId] = talentData;\n        return acc;\n    }, {});\n}\n\n// Helper functions for accessing data properties\nfunction getData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getAscensionBonusData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getStatCurveAt(level, statCurves) {\n    return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id) {\n    return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id) {\n    return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level) {\n    return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id) {\n    return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id) {\n    return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level) {\n    return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(level, ascensionBonuses) {\n    return ascensionBonuses[level];\n}\n\nexport function getTalentData(id) {\n    return talentData[id];\n}\n\nexport function getTalentStatsAt(type, level, talents) {\n    return talents[type][level];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n    if (sortedCharacterList === undefined) {\n        sortedCharacterList = Object.entries(characterData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n    if (sortedWeaponList === undefined) {\n        sortedWeaponList = Object.entries(weaponData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedWeaponList;\n}","// Placeholder function\nexport function defaultTalent() {\n    return [];\n}\n\n// Internal functions\n\nfunction getDamageBonus({ stats, element }) {\n    let dmgBonus = stats[`${element}DmgBonus`];\n    if (dmgBonus !== undefined) {\n        return 1 + dmgBonus;\n    } else {\n        return 1;\n    }\n}\n\nfunction calculateBaseDamage({ stats, multiplier, scalingType, flatDmg = 0 }) {\n    if (scalingType == 'attack') {\n        return stats.flatAtk * multiplier + flatDmg;\n    } else if (scalingType == 'defense') {\n        return stats.flatDef * multiplier + flatDmg;\n    } else if (scalingType == 'hp') {\n        return stats.flatHp * multiplier + flatDmg;\n    } else {\n        return NaN;\n    }\n}\n\nfunction calculateTotalDamage({ stats, multiplier, element, scalingType = 'attack', modifier }) {\n    let baseDmg = calculateBaseDamage({ stats, multiplier, scalingType, flatDmg: modifier.flatDmg });\n    let dmgBonus = getDamageBonus({ stats, element });\n\n    let crit = 1;\n    if (modifier.critType === 'crit') {\n        crit += stats.critDmg;\n    } else if (modifier.critType === 'average') {\n        crit += Math.min(1, stats.critRate) * stats.critDmg;\n    }\n\n    // TODO: enemyDefMultiplier\n    // TODO: enemyResMultiplier\n    // TODO: reactionBonus\n\n    return baseDmg * dmgBonus * crit;\n} \n\nfunction calculateHealing({ stats, multiplier, flatHealing, scalingType = 'hp' }) {\n    // TODO: Add healing bonus\n    return calculateBaseDamage({ stats, multiplier, scalingType, flatDmg: flatHealing });\n}\n\n// Used for all default normal attacks\nfunction normalAttackDefault({ hits, element, params, stats, modifier }) {\n    let talentValues = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            modifier,\n        });\n        \n        talentValues.push({\n            description: `${i+1}HitDmg`,\n            damage: [damage],\n        });\n    }\n\n    return talentValues;\n}\n\n// Used for all normal attacks with multiple damage instances in 1 hit e.g. polearms\n// doubledHits is an array containing all n where n-hit is 2 identical damage instances\nfunction normalAttackMulti({ hits, doubledHits, element, params, stats, modifier }) {\n    let talentValues = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element,\n            modifier,\n        });\n\n        let damages = doubledHits.includes(i+1) ? [damage, damage] : [damage];\n        \n        talentValues.push({\n            description: `${i+1}HitDmg`,\n            damage: damages,\n        });\n    }\n\n    return talentValues;\n}\n\n// Used for all 1-hit charged attacks\nfunction chargedAttackDefault({ element, params, stats, modifier }) {\n    let damage = calculateTotalDamage({ \n        stats, \n        multiplier: params[0], \n        element, \n        modifier,\n     });\n\n    return [{\n        description: 'chargedDmg',\n        damage: [damage],\n    }];\n}\n\n// Used for multi-hit charged attacks\nfunction chargedAttackMulti({ hits, element, params, stats, modifier }) {\n    let damages = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            modifier,\n        });\n        damages.push(damage);\n    }\n\n    return [{\n        description: `chargedDmg`,\n        damage: damages,\n    }];\n}\n\n// Used for all default claymore charged attacks\nfunction chargedAttackHeavy({ params, stats, modifier }) {\n    let descriptions = ['chargedSpinDmg', 'chargedFinalDmg'];\n    return descriptions.map((description, i) => {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element: 'physical', \n            modifier,\n        });\n\n        return {\n            description: description,\n            damage: [damage],\n        };\n    });\n}\n\n// Used for all default plunge attacks\nfunction plungeAttackDefault({ element, params, stats, modifier }) {\n    let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n    return descriptions.map((description, i) => {\n        let damage = calculateTotalDamage({ \n            stats,\n            multiplier: params[i], \n            element,\n            modifier \n        });\n\n        return {\n            description: description,\n            damage: [damage],\n        };\n    });\n}\n\n// Used for all default sword/polearm/catalyst attacks\nfunction attackLightDefault({ normalHits, element, params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault({ \n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits), \n        stats, \n        modifier \n    }));\n\n    talentValues.push(...chargedAttackDefault({\n        element,\n        params: params.slice(normalHits, normalHits + 1), \n        stats, \n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits + 1 + 1), \n        stats, \n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all default sword/polearm attacks with multi damage instances\nfunction attackLightMulti({ normalHits, doubledHits = [], chargedHits = 1, element, params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackMulti({ \n        hits: normalHits, \n        doubledHits,\n        element,\n        params: params.slice(0, normalHits), \n        stats, \n        modifier \n    }));\n\n    if (chargedHits === 1) {\n        talentValues.push(...chargedAttackDefault({\n            element,\n            params: params.slice(normalHits, normalHits + 1), \n            stats, \n            modifier,\n        }));\n    } else {\n        talentValues.push(...chargedAttackMulti({\n            hits: chargedHits,\n            element,\n            params: params.slice(normalHits, normalHits + chargedHits), \n            stats, \n            modifier,\n        }));\n    }\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits + chargedHits + 1), \n        stats, \n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all default physical sword/polearm attacks\nfunction attackLightPhysical({ normalHits, params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits,\n        element: 'physical',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Used for all physical sword/polearm attacks with multi damage instances\nfunction attackLightMultiPhysical({ normalHits, doubledHits = [], chargedHits = 1, params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits,\n        doubledHits,\n        chargedHits,\n        element: 'physical',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Used for all catalyst/infused attacks\nfunction attackMagic({ normalHits, element, params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits,\n        element,\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Used for all default claymore attacks\nfunction attackHeavyDefault({ normalHits, params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault({\n        hits: normalHits, \n        element: 'physical',\n        params: params.slice(0, normalHits), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...chargedAttackHeavy({\n        params: params.slice(normalHits, normalHits + 2), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(normalHits + 2 + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all claymore attacks with multi damage instances\nfunction attackHeavyMulti({ normalHits, doubledHits, params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackMulti({\n        hits: normalHits, \n        doubledHits,\n        element: 'physical',\n        params: params.slice(0, normalHits), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...chargedAttackHeavy({\n        params: params.slice(normalHits, normalHits + 2), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(normalHits + 2 + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Base function for all damage skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction skillBase({ description, element, multiplier, stats, modifier }) {\n    let damage = calculateTotalDamage({\n        element,\n        multiplier,\n        stats, \n        modifier,\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Used for all default skill/burst that only does 1-hit elemental dmg\nfunction skillDefault({ element, params, stats, modifier }) {\n    return [skillBase({\n        description: 'skillDmg',\n        element,\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Base function for all healing skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction healingSkillBase({ description, params, stats, modifier }) {\n    let damage = calculateHealing({\n        stats,\n        multiplier: params[0],\n        flatHealing: params[1],\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Public functions\n// Access using talent[characterId + type]\n\n// Lisa\nexport function lisaAttack({ params, stats, modifier }) {\n    return attackMagic({\n        normalHits: 4,\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function lisaSkill({ params, stats, modifier }) {\n    let talentDmg = [];\n\n    talentDmg.push(skillBase({\n        description: 'pressDmg',\n        element: 'electro',\n        multiplier: params[5],\n        stats,\n        modifier,\n    }));\n\n    for (let i = 0; i <= 3; i++) {\n        talentDmg.push(skillBase({\n            description: `holdDmgStack${i}`,\n            element: 'electro',\n            multiplier: params[i],\n            stats, \n            modifier,\n        }));\n    }\n\n    return talentDmg;\n}\n\nexport function lisaBurst({ params, stats, modifier }) {\n    return skillDefault({\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Barbara\nexport function barbaraAttack({ params, stats, modifier }) {\n    return attackMagic({\n        normalHits: 4,\n        element: 'hydro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function barbaraSkill({ params, stats, modifier }) {\n    let talentDmg = [\n        healingSkillBase({\n            description: 'hpRegenContinuous',\n            params: params.slice(0, 2),\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenOnHit',\n            params: params.slice(2, 4),\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'dropletDmg',\n            element: 'hydro',\n            multiplier: params[4],\n            stats,\n            modifier,\n        }),\n    ];\n\n    return talentDmg;\n}\n\nexport function barbaraBurst({ params, stats, modifier }) {\n    return [\n        healingSkillBase({\n            description: 'hpRegen',\n            params,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Kaeya\nexport function kaeyaAttack({ params, stats, modifier }) {\n    return attackLightMultiPhysical({ \n        normalHits: 5, \n        chargedHits: 2, \n        params, \n        stats, \n        modifier,\n    });\n}\n\nexport function kaeyaSkill({ params, stats, modifier }) {\n    return skillDefault({ \n        element: 'cryo', \n        params, \n        stats, \n        modifier \n    });\n}\n\nexport function kaeyaBurst({ params, stats, modifier }) {\n    return skillDefault({ \n        element: 'cryo', \n        params, \n        stats, \n        modifier,\n    });\n}\n\n// Eula\nexport function eulaAttack({ params, stats, modifier }) {\n    return attackHeavyMulti({ \n        normalHits: 5, \n        doubledHits: [3, 5],\n        params, \n        stats, \n        modifier\n    });\n}\n\nexport function eulaSkill({ params, stats, modifier }) {\n    let descriptions = ['pressDmg', 'holdDmg', 'icewhirlBrandDmg'];\n    return descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'cryo',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n}\n\nexport function eulaBurst({ params, stats, modifier }) {\n    let talentDmg = [];\n    talentDmg.push(...skillDefault({\n        element: 'cryo', \n        params, \n        stats,\n        modifier,\n    }));\n    \n    let descriptions = ['lightfallSwordBaseDmg', 'lightfallSwordStackDmg'];\n    let lightfallSwordParams = params.slice(1, 3);\n    let lightfallSwordTalent = descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'physical',\n            multiplier: lightfallSwordParams[i],\n            stats,\n            modifier,\n        });\n    });\n\n    talentDmg.push(...lightfallSwordTalent);\n\n    return talentDmg;\n}\n","import { \n    getCharacterData as getData, \n    getCharacterAscensionBonusData as getAscensionBonusData, \n    getCharacterStatCurveAt as getStatCurveAt, \n    getAscensionBonusAt,\n    getTalentData,\n    getTalentStatsAt,\n} from './Data.js';\n\nimport * as talents from './Talent.js';\nconst emptyTalentParams = Array(19).fill(NaN);\n\nexport default class Character {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n\n        this.talents = getTalentData(id);\n    }\n\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n    getInnateStatsAt(level, hasAscended) {\n        if (isNaN(level) || level < 1 || level > 90) {\n            // Return nulls if level is invalid\n            let innateStats;\n            if (this.innateStats !== undefined) {\n                // Copy all of innateStats' properties to a new object and initialize them to null\n                innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                innateStats = {};\n            }\n            \n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n            \n            return innateStats;\n        } \n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\n        else if (level === this.level && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.innateStats;\n        } else {\n\n            // Initialize stats with character level 1 base stats\n            let innateStats = {...this.baseStats};\n\n            let charStatCurves = getStatCurveAt(level);\n\n            // Calculate stats from character level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = charStatCurves[curve];\n                innateStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from character ascension\n            let ascensionLevel;\n            if (level > 80 || (level == 80 && hasAscended)) {\n                ascensionLevel = 6;\n            } else if (level > 70 || (level == 70 && hasAscended)) {\n                ascensionLevel = 5;\n            } else if (level > 60 || (level == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (level > 50 || (level == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (level > 40 || (level == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (level > 20 || (level == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n\n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in innateStats) {\n                        innateStats[stat] += bonus;\n                    } else {\n                        innateStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n\n            return innateStats;\n        }\n    }\n\n    // Return an Object with description and damage properties\n    getTalentDamageAt({ type, talentLevel, totalStats, modifier }) {\n        const params = getTalentStatsAt(type.toLowerCase(), talentLevel, this.talents);\n\n        let damageFn = talents[this.id + type];\n        if (damageFn === undefined) {\n            damageFn = talents['defaultTalent'];\n        }\n\n        let damage = damageFn({\n            params: params ? params : emptyTalentParams, \n            stats: totalStats, \n            modifier,\n        });\n\n        return damage;\n    }\n}\n","import { getWeaponData as getData, getWeaponAscensionBonusData as getAscensionBonusData, getWeaponStatCurveAt as getStatCurveAt, getAscensionBonusAt } from './Data.js';\n\nexport default class Weapon {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.type = data.type;\n        this.rank = data.rank;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n    }\n\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n    getStatsAt(weaponLevel, hasAscended) {\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.rank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\n            // Return nulls if weapon level is invalid\n            let weaponStats;\n            if (this.stats !== undefined) {\n                // Copy all of stats' properties to a new object and initialize them to null\n                weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                weaponStats = {};\n            }\n            \n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n        // If getStatsAt has not been called before, this.weaponLevel, this.hasAscended, and this.stats will be undefined\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.stats;\n        } else {\n\n            // Level 1 weapon stats\n            let weaponStats = {...this.baseStats};\n\n            let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n            // Calculate stats from weapon level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = weaponStatCurves[curve];\n                weaponStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from weapon ascension\n            let ascensionLevel;\n            // Only 3-star and above weapons can be ascended beyond level 70\n            if (this.rank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\n                ascensionLevel = 6;\n            } else if (this.rank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\n                ascensionLevel = 5;\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n            \n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in weaponStats) {\n                        weaponStats[stat] += bonus;\n                    } else {\n                        weaponStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n    }\n}\n","import { talentDescMapping } from './Data.js';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value, isPercentage) {\n    if (value != null) {\n        if (isPercentage) {\n            return (value * 100).toFixed(1) + \"%\";\n        } else {\n            return Math.round(value);\n        }\n    } else {\n        return \"-\";\n    }\n};\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values) {\n    let str = '';\n\n    if (isNaN(values[0])) {\n        return '-';\n    } else {\n        str += Math.round(values[0]);\n    }\n\n    values.slice(1).forEach(value => {\n        if (isNaN(value)) {\n            return '-';\n        } else {\n            str += ' + ' + Math.round(value);\n        }\n    });\n\n    return str;\n}\n\n// Returns a Number representing the inputed value of a stat\n// Returns null if the input is not a valid stat value\nexport function convertStatValue(value, isPercentage) {\n    if (isPercentage) {\n        return value / 100;\n    } else {\n        return value;\n    }\n};\n\nexport function getTalentDescription(desc) {\n    return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended) {\n\n    let weaponStats;\n    if (weapon !== undefined) {\n        weaponStats = weapon.getStatsAt(weaponLevel, weaponHasAscended);\n    } else {\n        weaponStats = {};\n    }\n\n    let characterStats;\n    if (character !== undefined) {\n        characterStats = character.getInnateStatsAt(characterLevel, characterHasAscended);\n    } else {\n        characterStats = {};\n    }\n    \n    // Merges weaponStats and innateStats into a new baseStats object\n    let baseStats = {...weaponStats};\n    Object.entries(characterStats).map(([stat, value]) => {\n        if (baseStats[stat] === undefined) {\n            baseStats[stat] = value;\n        } else {\n            baseStats[stat] += value;\n        }\n    });\n    \n    return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended, artifacts) {\n    \n    let baseStats = getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended);\n    \n    // Merge artifact bonuses into separate object\n    let artifactStats = {};\n    artifacts.forEach(artifact => {\n        Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n            if (artifactStats[stat] === undefined) {\n                artifactStats[stat] = value;\n            } else {\n                artifactStats[stat] += value;\n            }\n        });\n    });\n\n    // Merge base stats and artifact bonuses\n    let combinedStats = {...baseStats};\n    Object.entries(artifactStats).forEach(([stat, value]) => {\n        if (combinedStats[stat] === undefined) {\n            combinedStats[stat] = value;\n        } else {\n            combinedStats[stat] += value;\n        }\n    });\n\n    // Calculate total stats\n    let totalStats = {};\n    totalStats.flatAtk = (combinedStats.baseAtk ? combinedStats.baseAtk : 0) \n        * (1 + (combinedStats.atkBonus ? combinedStats.atkBonus : 0))\n        + (combinedStats.flatAtk ? combinedStats.flatAtk : 0);\n    totalStats.flatDef = (combinedStats.baseDef ? combinedStats.baseDef : 0) \n        * (1 + (combinedStats.defBonus ? combinedStats.defBonus : 0))\n        + (combinedStats.flatDef ? combinedStats.flatDef : 0);\n    totalStats.flatHp = (combinedStats.baseHp ? combinedStats.baseHp : 0) \n        * (1 + (combinedStats.hpBonus ? combinedStats.hpBonus : 0))\n        + (combinedStats.flatHp ? combinedStats.flatHp : 0);\n    totalStats.critRate = combinedStats.critRate ? combinedStats.critRate : 0;\n    totalStats.critDmg = combinedStats.critDmg ? combinedStats.critDmg : 0;\n    totalStats.elementalMastery = combinedStats.elementalMastery ? combinedStats.elementalMastery : 0;\n    totalStats.energyRecharge = 1 + (combinedStats.energyRecharge ? combinedStats.energyRecharge : 0);\n    \n    combinedStats.anemoDmgBonus ? totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus : null;\n    combinedStats.cryoDmgBonus ? totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus : null;\n    combinedStats.electroDmgBonus ? totalStats.electroDmgBonus = combinedStats.electroDmgBonus : null;\n    combinedStats.geoDmgBonus ? totalStats.geoDmgBonus = combinedStats.geoDmgBonus : null;\n    combinedStats.hydroDmgBonus ? totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus : null;\n    combinedStats.pyroDmgBonus ? totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus : null;\n    combinedStats.physicalDmgBonus ? totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus : null;\n\n    combinedStats.anemoRes ? totalStats.anemoRes = combinedStats.anemoRes : null;\n    combinedStats.cryoRes ? totalStats.cryoRes = combinedStats.cryoRes : null;\n    combinedStats.electroRes ? totalStats.electroRes = combinedStats.electroRes : null;\n    combinedStats.geoRes ? totalStats.geoRes = combinedStats.geoRes : null;\n    combinedStats.hydroRes ? totalStats.hydroRes = combinedStats.hydroRes : null;\n    combinedStats.pyroRes ? totalStats.pyroRes = combinedStats.pyroRes : null;\n    combinedStats.physicalRes ? totalStats.physicalRes = combinedStats.physicalRes : null;\n\n    combinedStats.healingBonus ? totalStats.healingBonus = combinedStats.healingBonus : null;\n\n    return totalStats;\n}","import * as statUtils from './Stat.js';\n\nexport default class Artifact {\n    mainStat = {\n        stat: 0,\n        rawValue: NaN,\n        value: NaN,\n    };\n\n    subStats = [\n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }\n    ];\n\n    constructor(type) {\n        this.type = type;\n    }\n\n    // Can be called with one of the two of stat and value (the other will be undefined)\n    setStat(statObj, stat, value, isPercentage = false) {\n        if (stat == undefined && value != undefined) {\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        } else if (stat != undefined && value == undefined) {\n            statObj.stat = stat;\n            statObj.value = statUtils.convertStatValue(statObj.rawValue, isPercentage);\n        } else if (stat != undefined && value != undefined) {\n            statObj.stat = stat;\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        }\n    }\n\n    /*\n    setMainStat(stat, value, isPercentage = false) {\n        this.setStat(this.mainStat, stat, value, isPercentage);\n    }\n\n    // Set substat in a spefiic position\n    setSubStat(pos, stat, value, isPercentage = false) {\n        this.setStat(this.subStats[pos], stat, value, isPercentage);\n    }\n    */\n\n    // Returns object containing stat: value mapping, including both main stat and substats\n    getStats() {\n        let stats = {};\n\n        if (this.mainStat.stat != 0) {\n            if (!isNaN(this.mainStat.value)) {\n                stats[this.mainStat.stat] = this.mainStat.value;\n            } else {\n                stats[this.mainStat.stat] = null;\n            }\n        }\n        \n        this.subStats.forEach(subStat => {\n            if (subStat.stat != 0) {\n                if (!isNaN(subStat.value)) {\n                    stats[subStat.stat] = subStat.value;\n                } else {\n                    stats[subStat.stat] = null;\n                }\n            }\n        });\n\n        return stats;\n    }\n}\n\nexport const mainStatProps = {\n    Flower: [\n        'flatHp',\n    ],\n\n    Feather: [\n        'flatAtk',\n    ],\n\n    Sands: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'energyRecharge',\n    ],\n\n    Goblet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'anemoDmgBonus',\n        'cryoDmgBonus',\n        'electroDmgBonus',\n        'geoDmgBonus',\n        'hydroDmgBonus',\n        'pyroDmgBonus',\n        'physicalDmgBonus',\n    ],\n\n    Circlet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'critRate',\n        'critDmg',\n        'healingBonus',\n    ],\n}\n\nexport const subStatProps = [\n    'flatHp',\n    'flatAtk',\n    'flatDef',\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n    'critRate',\n    'critDmg',\n]","export default class DamageModifier {\n    constructor({ characterLevel, enemyLevel = 1, enemyRes = {}, modifiers = {}, critType = 'none', flatDmg = 0, reaction = 'none' }) {\n        this.characterLevel = characterLevel;\n        this.enemyLevel = enemyLevel;\n        this.enemyRes = enemyRes;\n        this.modifiers = modifiers;\n        this.critType = critType;\n        this.flatDmg = flatDmg;\n        this.reaction = reaction;\n    }\n}","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n\n        fontSize: 14,\n\n        height: '100%',\n\n        backgroundColor: '#fff',\n    },\n\n    inputColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '1%',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#ccc',\n    },\n\n    inputRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    levelInput: {\n        width: '2em',\n    },\n\n    statInput: {\n        width: '3em',\n    },\n\n    resultColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#eee',\n    },\n\n    resultBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n    },\n\n    resultBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n        borderBottomWidth: 1,\n    },\n\n    artifactBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n    },\n\n    artifactBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n\n        borderStyle: 'dashed',\n        borderBottomWidth: 1,  \n    },\n\n    characterImage: {\n        marginVertical: '0.25em',\n    },\n\n    titleText: {\n        fontSize: '1.5em',\n        fontWeight: '200',\n\n        marginVertical: '0.17em',\n    },\n\n    artifactType: {\n        fontSize: '1.2em',\n        fontWeight: '200',\n\n        marginVertical: '0.21em',\n    },\n\n    artifactStatType: {\n        marginVertical: '0.25em',\n    },\n\n    resultText: {\n        marginVertical: '0.25em',\n    },\n\n    fillerColumn: {\n        flexGrow: 1,\n\n        backgroundColor: '#eee',\n    },\n});\n","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { Image, Text, TextInput, View } from 'react-native';\n\nimport Character from './js/Character.js';\nimport Weapon from './js/Weapon.js';\nimport Artifact, { mainStatProps, subStatProps } from './js/Artifact.js';\nimport DamageModifier from './js/DamageModifer.js';\nimport * as statUtils from './js/Stat.js';\nimport * as data from './js/Data.js';\n\nimport styles from './js/Styles.js';\n\nexport default class App extends Component {\n\n  // Class properties\n  character;\n  weapon;\n  artifactFlower;\n  artifactFeather;\n  artifactSands;\n  artifactGoblet;\n  artifactCirclet;\n\n  constructor() {\n    super();  \n\n    // Initialize sorted list of characters and weapons\n    this.characters = data.getSortedCharacterList();\n    this.weapons = data.getSortedWeaponList();\n\n    this.artifactFlower = new Artifact('Flower');\n    this.artifactFeather = new Artifact('Feather');\n    this.artifactSands = new Artifact('Sands');\n    this.artifactGoblet = new Artifact('Goblet');\n    this.artifactCirclet = new Artifact('Circlet');\n\n    this.state = {\n      characterId: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n\n      weaponId: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n\n      talentAttackLevel: 1,\n      talentSkillLevel: 1,\n      talentBurstLevel: 1,\n\n      characterStats: undefined,\n      weaponStats: undefined,\n      totalStats: undefined,\n\n      talentAttackDamage: undefined,\n      talentSkillDamage: undefined,\n      talentBurstDamage: undefined,\n    }\n  }\n\n  renderInputColumn = () => {\n    return (\n      <View>\n        {this.renderCharacterList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.characterLevel} \n            onChangeText={text => {\n              this.setState({ characterLevel: parseInt(text) }, this.setCharacterState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isCharacterAscended: value }, this.setCharacterState)}\n            value={this.state.isCharacterAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        {this.renderWeaponList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.weaponLevel} \n            onChangeText={text => {\n              this.setState({ weaponLevel: parseInt(text) }, this.setWeaponState)\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isWeaponAscended: value }, this.setWeaponState)}\n            value={this.state.isWeaponAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        <View style={styles.inputRow}>\n          <Text>Attack Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentAttackLevel} \n            onChangeText={text => {\n              this.setState({ talentAttackLevel: parseInt(text) }, () => this.setTalentState('Attack'));\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Skill Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentSkillLevel} \n            onChangeText={text => {\n              this.setState({ talentSkillLevel: parseInt(text) }, () => this.setTalentState('Skill'));\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Burst Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentBurstLevel} \n            onChangeText={text => {\n              this.setState({ talentBurstLevel: parseInt(text) }, () => this.setTalentState('Burst'));\n            }}\n          />\n        </View>\n      </View>\n    )\n  }\n\n  renderCharacterList = () => {    \n    return (\n      <View style={styles.inputRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.character = new Character(value);\n              this.setState({ characterId: value }, this.setCharacterState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.characters.map(id => <Picker.Item label={data.getCharacterData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    return (\n      <View style={styles.inputRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.weapon = new Weapon(value);\n              this.setState({ weaponId: value }, this.setWeaponState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.weapons.map(id => <Picker.Item label={data.getWeaponData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  getDamageModifier = () => {\n    return new DamageModifier({ \n      characterLevel: this.state.characterLevel,\n    });\n  }\n\n  setCharacterState = () => {\n    if (this.character !== undefined) {\n      let stats = this.character.getInnateStatsAt(this.state.characterLevel, this.state.isCharacterAscended);\n      let totalStats = this.getTotalStats();\n      let modifier = this.getDamageModifier();\n\n      let talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats,\n        modifier,\n      });\n\n      let talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats,\n        modifier,\n      });\n      \n      let talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats,\n        modifier,\n      });\n\n      this.setState({ \n        characterStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setWeaponState = () => {\n    if (this.weapon !== undefined) {\n      let stats = this.weapon.getStatsAt(this.state.weaponLevel, this.state.isweaponAscended);\n      let totalStats = this.getTotalStats();\n      let modifier = this.getDamageModifier();\n\n      let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n      if (this.character !== undefined) {\n        talentAttackDamage = this.character.getTalentDamageAt({\n          type: 'Attack', \n          talentLevel: this.state.talentAttackLevel, \n          totalStats,\n          modifier,\n        });\n  \n        talentSkillDamage = this.character.getTalentDamageAt({\n          type: 'Skill', \n          talentLevel: this.state.talentSkillLevel, \n          totalStats,\n          modifier,\n        });\n        \n        talentBurstDamage = this.character.getTalentDamageAt({\n          type: 'Burst', \n          talentLevel: this.state.talentBurstLevel, \n          totalStats,\n          modifier,\n        });\n      }\n\n      this.setState({ \n        weaponStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setArtifactState = (type) => {\n    let totalStats = this.getTotalStats();\n    let modifier = this.getDamageModifier();\n\n    let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n    if (this.character !== undefined) {\n      talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats,\n        modifier,\n      });\n\n      talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats,\n        modifier,\n      });\n      \n      talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats,\n        modifier,\n      });\n    }\n\n    this.setState({\n      totalStats: totalStats,\n      talentAttackDamage: talentAttackDamage,\n      talentSkillDamage: talentSkillDamage,\n      talentBurstDamage: talentBurstDamage,\n    });\n  }\n\n  setTalentState = (type) => {\n    if (this.character !== undefined) {\n      let talentDmg = this.character.getTalentDamageAt({\n        type, \n        talentLevel: this.state[`talent${type}Level`], \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      this.setState({ [`talent${type}Damage`]: talentDmg });\n    }\n  }\n\n  getTotalStats = () => {\n    let artifacts = [this.artifactFlower, this.artifactFeather, this.artifactSands, this.artifactGoblet, this.artifactCirclet];\n\n    let stats = statUtils.getTotalStatsAt(\n      this.weapon, \n      this.state.weaponLevel, \n      this.state.isWeaponAscended, \n      this.character,\n      this.state.characterLevel,\n      this.state.isCharacterAscended,\n      artifacts,\n    );\n\n    return stats;\n  }\n\n  renderCharacterStats = () => {\n    return (\n      this.character ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Character</Text>\n          {this.renderCharacterImage()}\n          <Text style={styles.resultText}>{this.character ? this.character.name : ''}</Text>\n          {\n            this.state.characterStats ? (\n              Object.entries(this.state.characterStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderWeaponStats = () => {\n    return (\n      this.weapon ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Weapon</Text>\n          <Text style={styles.resultText}>{this.weapon ? this.weapon.name : ''}</Text>\n          {\n            this.state.weaponStats ? (\n              Object.entries(this.state.weaponStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderArtifactMainStat = (type) => {\n    return (\n      <View style={styles.inputRow}>\n        <Picker\n          selectedValue={this['artifact' + type].mainStat.stat}\n          onValueChange={(stat, _) => {\n            if (stat != 0) {\n              let mainStat = this['artifact' + type].mainStat;\n              this['artifact' + type].setStat(mainStat, stat, undefined, data.propMapping[stat].isPercentage);\n              // Update total stats\n              this.setArtifactState(type);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {mainStatProps[type].map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n        </Picker>\n\n        <Text> : </Text>\n\n        <TextInput \n          style={styles.statInput} \n          onChangeText={text => {\n            let mainStat = this['artifact' + type].mainStat;\n            if (mainStat.stat) {\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), data.propMapping[mainStat.stat].isPercentage);\n            } else {\n              // If stat type is not yet set\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), false);\n            }\n\n            // Update total stats\n            this.setArtifactState(type);\n          }}\n        />\n      </View>\n    )\n  }\n\n  renderArtifactSubStats = (type) => {\n    return (\n      <View>\n        {\n          this['artifact' + type].subStats.map((subStat, index) => {\n            return (\n              <View style={styles.inputRow} key={index}>\n                <Picker\n                  selectedValue={subStat.stat}\n                  onValueChange={(stat, _) => {\n                    if (stat != 0) {\n                      this['artifact' + type].setStat(subStat, stat, undefined, data.propMapping[stat].isPercentage);     \n                      // Update total stats\n                      this.setArtifactState(type);\n                    }\n                  }}\n                >\n                  <Picker.Item label='' value={0} />\n                  {subStatProps.map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n                </Picker>\n\n                <Text> : </Text>\n\n                <TextInput \n                  style={styles.statInput} \n                  onChangeText={text => {\n                    let stat = subStat.stat;\n                    if (stat) {\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), data.propMapping[stat].isPercentage);\n                    } else {\n                      // If stat type is not yet set\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), false);\n                    }\n                    // Update total stats\n                    this.setArtifactState(type);\n                  }}\n                />\n              </View>\n            )\n          })\n        }\n      </View>\n    )\n  }\n\n  renderArtifactStat = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n\n        <Text style={styles.artifactStatType}>Main Stat</Text>\n        {this.renderArtifactMainStat(type)}\n\n        <Text style={styles.artifactStatType}>Substats</Text>\n        {this.renderArtifactSubStats(type)}\n      </View>\n    )\n  }\n\n  renderAllArtifactStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Artifacts</Text>\n        {this.renderArtifactStat('Flower')}\n        {this.renderArtifactStat('Feather')}\n        {this.renderArtifactStat('Sands')}\n        {this.renderArtifactStat('Goblet')}\n        {this.renderArtifactStat('Circlet', true)}\n      </View>\n    )\n  }\n\n  renderTotalStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Stat Total</Text>\n        {\n          this.state.totalStats ? (\n            Object.entries(this.state.totalStats).map(([stat, value]) => {\n              return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n            })\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  renderTalentDamage = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n        {\n          this.state['talent' + type + 'Damage'] ? (\n            this.state['talent' + type + 'Damage'].map(({description, damage}, index) => {\n              return (\n                <Text style={styles.resultText} key={index}>{statUtils.getTalentDescription(description)}: {statUtils.getDamageDisplayValue(damage)}</Text>\n              )\n            })\n          ) : null\n        }\n      </View>\n\n    )\n  }\n\n  renderAllTalentDamage = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Talents</Text>\n\n        {this.renderTalentDamage('Attack')}\n        {this.renderTalentDamage('Skill')}\n        {this.renderTalentDamage('Burst', true)}\n      </View>\n    )\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.inputColumn}>\n          {this.renderInputColumn()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderCharacterStats()}\n          {this.renderWeaponStats()}\n          {this.renderAllArtifactStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderTotalStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderAllTalentDamage()}\n        </View>\n\n        <View style={styles.fillerColumn}>\n        </View>\n\n      </View>\n    )\n  }\n}\n"],"sourceRoot":""}