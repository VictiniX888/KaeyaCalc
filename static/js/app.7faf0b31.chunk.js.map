{"version":3,"sources":["js/Data.js","js/Stat.js","js/Talent.js","js/Character.js","js/Weapon.js","js/Artifact.js","js/Styles.js","App.js"],"names":["sortedCharacterList","sortedWeaponList","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talents","attack","curveAcc","params","skill","burst","processTalentData","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getStatDisplayValue","value","isPercentage","toFixed","Math","round","convertStatValue","getDamageBonus","element","stats","dmgBonus","undefined","getTalentDescription","desc","talentDescMapping","getTotalStatsAt","weapon","weaponLevel","weaponHasAscended","character","characterLevel","characterHasAscended","artifacts","baseStats","weaponStats","characterStats","getStatsAt","getInnateStatsAt","Object","entries","stat","getBaseStatsAt","artifactStats","forEach","artifact","getStats","combinedStats","totalStats","flatAtk","baseAtk","atkBonus","flatDef","baseDef","defBonus","flatHp","baseHp","hpBonus","critRate","critDmg","elementalMastery","energyRecharge","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","defaultTalent","attackLightDefault","normalHits","chargedHits","talentValues","push","hits","i","damage","description","normalAttackDefault","slice","chargedAttackDefault","chargedAttackMulti","plungeAttackDefault","skillDefault","kaeyaAttack","kaeyaSkill","kaeyaBurst","emptyTalentParams","Array","fill","NaN","Character","this","data","name","statCurveMapping","getTalentData","hasAscended","innateStats","isNaN","keys","obj","charStatCurves","curve","multiplier","bonus","type","getTalentStatsAt","toLowerCase","damageFn","idvDamage","Weapon","rank","weaponStatCurves","Artifact","mainStat","rawValue","subStats","statObj","statUtils","subStat","mainStatProps","Flower","Feather","Sands","Goblet","Circlet","subStatProps","StyleSheet","create","container","display","flexDirection","alignItems","fontSize","height","backgroundColor","inputColumn","padding","borderRightWidth","inputRow","marginVertical","levelInput","width","statInput","resultColumn","resultBlockNoBorder","resultBlock","borderBottomWidth","artifactBlockNoBorder","paddingTop","paddingBottom","artifactBlock","borderStyle","characterImage","titleText","fontWeight","artifactType","artifactStatType","resultText","fillerColumn","flexGrow","App","renderInputColumn","View","renderCharacterList","style","styles","Text","TextInput","defaultValue","state","onChangeText","text","setState","parseInt","setCharacterState","Checkbox","onValueChange","isCharacterAscended","renderWeaponList","setWeaponState","isWeaponAscended","talentAttackLevel","setTalentState","talentSkillLevel","talentBurstLevel","characterSelect","selectedValue","_","Item","label","characters","key","weapons","renderCharacterImage","imageUrl","Image","source","uri","getTotalStats","talentAttackDamage","getTalentDamageAt","talentSkillDamage","talentBurstDamage","isweaponAscended","setArtifactState","talentDmg","artifactFlower","artifactFeather","artifactSands","artifactGoblet","artifactCirclet","renderCharacterStats","renderWeaponStats","renderArtifactMainStat","setStat","prop","parseFloat","renderArtifactSubStats","index","renderArtifactStat","isLast","renderAllArtifactStats","renderTotalStats","renderTalentDamage","renderAllTalentDamage","sort","name1","name2","localeCompare","Component"],"mappings":"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","file":"static/js/app.7faf0b31.chunk.js","sourcesContent":["import characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\n//import artifactSetDataRaw from '../data/artifactsetdata.json';\n//import artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\nimport talentDataRaw from '../data/talentdata.json';\nexport { default as propMapping } from '../data/propmapping.json';\nexport { default as talentDescMapping } from '../data/talentdescmapping.json';\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(characterDataRaw);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(characterAscensionBonusDataRaw);\nconst characterStatCurveData = processCharacterStatCurveData(characterStatCurveDataRaw);\nconst weaponData = processWeaponData(weaponDataRaw);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(weaponAscensionBonusDataRaw);\nconst weaponStatCurveData = processWeaponStatCurveData(weaponStatCurveDataRaw);\nconst talentData = processTalentData(talentDataRaw);\n\n// Pre-processed data, lists\nlet sortedCharacterList;    // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList;       // lazy loading implemented with getSortedWeaponList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.id] = charData;\n        return acc;\n    }, {});\n}\n\nfunction processCharacterAscensionBonusData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.characterId] = charData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processCharacterStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.id] = weaponData;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponAscensionBonusData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processWeaponStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processTalentData(rawData) {\n    return rawData.reduce((acc, talentDataRaw) => {\n        let talentData = {...talentDataRaw.talents};\n\n        talentData.attack = talentData.attack.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.skill = talentData.skill.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.burst = talentData.burst.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n\n        acc[talentDataRaw.characterId] = talentData;\n        return acc;\n    }, {});\n}\n\n// Helper functions for accessing data properties\nfunction getData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getAscensionBonusData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getStatCurveAt(level, statCurves) {\n    return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id) {\n    return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id) {\n    return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level) {\n    return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id) {\n    return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id) {\n    return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level) {\n    return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(level, ascensionBonuses) {\n    return ascensionBonuses[level];\n}\n\nexport function getTalentData(id) {\n    return talentData[id];\n}\n\nexport function getTalentStatsAt(type, level, talents) {\n    return talents[type][level];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n    if (sortedCharacterList === undefined) {\n        sortedCharacterList = Object.entries(characterData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n    if (sortedWeaponList === undefined) {\n        sortedWeaponList = Object.entries(weaponData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedWeaponList;\n}","import { talentDescMapping } from './Data.js';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value, isPercentage) {\n    if (value != null) {\n        if (isPercentage) {\n            return (value * 100).toFixed(1) + \"%\";\n        } else {\n            return Math.round(value);\n        }\n    } else {\n        return \"-\";\n    }\n};\n\n// Returns a Number representing the inputed value of a stat\n// Returns null if the input is not a valid stat value\nexport function convertStatValue(value, isPercentage) {\n    if (isPercentage) {\n        return value / 100;\n    } else {\n        return value;\n    }\n};\n\nexport function getDamageBonus(element, stats) {\n    let dmgBonus = stats[`${element}DmgBonus`];\n    if (dmgBonus !== undefined) {\n        return 1 + dmgBonus;\n    } else {\n        return 1;\n    }\n}\n\nexport function getTalentDescription(desc) {\n    return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended) {\n\n    let weaponStats;\n    if (weapon !== undefined) {\n        weaponStats = weapon.getStatsAt(weaponLevel, weaponHasAscended);\n    } else {\n        weaponStats = {};\n    }\n\n    let characterStats;\n    if (character !== undefined) {\n        characterStats = character.getInnateStatsAt(characterLevel, characterHasAscended);\n    } else {\n        characterStats = {};\n    }\n    \n    // Merges weaponStats and innateStats into a new baseStats object\n    let baseStats = {...weaponStats};\n    Object.entries(characterStats).map(([stat, value]) => {\n        if (baseStats[stat] === undefined) {\n            baseStats[stat] = value;\n        } else {\n            baseStats[stat] += value;\n        }\n    });\n    \n    return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended, artifacts) {\n    \n    let baseStats = getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended);\n    \n    // Merge artifact bonuses into separate object\n    let artifactStats = {};\n    artifacts.forEach(artifact => {\n        Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n            if (artifactStats[stat] === undefined) {\n                artifactStats[stat] = value;\n            } else {\n                artifactStats[stat] += value;\n            }\n        });\n    });\n\n    // Merge base stats and artifact bonuses\n    let combinedStats = {...baseStats};\n    Object.entries(artifactStats).forEach(([stat, value]) => {\n        if (combinedStats[stat] === undefined) {\n            combinedStats[stat] = value;\n        } else {\n            combinedStats[stat] += value;\n        }\n    });\n\n    // Calculate total stats\n    let totalStats = {};\n    totalStats.flatAtk = (combinedStats.baseAtk ? combinedStats.baseAtk : 0) \n        * (1 + (combinedStats.atkBonus ? combinedStats.atkBonus : 0))\n        + (combinedStats.flatAtk ? combinedStats.flatAtk : 0);\n    totalStats.flatDef = (combinedStats.baseDef ? combinedStats.baseDef : 0) \n        * (1 + (combinedStats.defBonus ? combinedStats.defBonus : 0))\n        + (combinedStats.flatDef ? combinedStats.flatDef : 0);\n    totalStats.flatHp = (combinedStats.baseHp ? combinedStats.baseHp : 0) \n        * (1 + (combinedStats.hpBonus ? combinedStats.hpBonus : 0))\n        + (combinedStats.flatHp ? combinedStats.flatHp : 0);\n    totalStats.critRate = combinedStats.critRate ? combinedStats.critRate : 0;\n    totalStats.critDmg = combinedStats.critDmg ? combinedStats.critDmg : 0;\n    totalStats.elementalMastery = combinedStats.elementalMastery ? combinedStats.elementalMastery : 0;\n    totalStats.energyRecharge = 1 + (combinedStats.energyRecharge ? combinedStats.energyRecharge : 0);\n    \n    combinedStats.anemoDmgBonus ? totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus : null;\n    combinedStats.cryoDmgBonus ? totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus : null;\n    combinedStats.electroDmgBonus ? totalStats.electroDmgBonus = combinedStats.electroDmgBonus : null;\n    combinedStats.geoDmgBonus ? totalStats.geoDmgBonus = combinedStats.geoDmgBonus : null;\n    combinedStats.hydroDmgBonus ? totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus : null;\n    combinedStats.pyroDmgBonus ? totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus : null;\n    combinedStats.physicalDmgBonus ? totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus : null;\n\n    combinedStats.anemoRes ? totalStats.anemoRes = combinedStats.anemoRes : null;\n    combinedStats.cryoRes ? totalStats.cryoRes = combinedStats.cryoRes : null;\n    combinedStats.electroRes ? totalStats.electroRes = combinedStats.electroRes : null;\n    combinedStats.geoRes ? totalStats.geoRes = combinedStats.geoRes : null;\n    combinedStats.hydroRes ? totalStats.hydroRes = combinedStats.hydroRes : null;\n    combinedStats.pyroRes ? totalStats.pyroRes = combinedStats.pyroRes : null;\n    combinedStats.physicalRes ? totalStats.physicalRes = combinedStats.physicalRes : null;\n\n    combinedStats.healingBonus ? totalStats.healingBonus = combinedStats.healingBonus : null;\n\n    return totalStats;\n}","import { getDamageBonus } from './Stat.js';\n\n// Placeholder function\nexport function defaultTalent() {\n    return [];\n}\n\n// Internal functions\n\n// Used for all default normal attacks\nfunction normalAttackDefault(hits, params, stats) {\n    let talentValues = [];\n    let dmgBonus = getDamageBonus('physical', stats);\n    for (let i = 0; i < hits; i++) {\n        let damage = stats.flatAtk * params[i] * dmgBonus;\n        talentValues.push({\n            description: `${i+1}HitDmg`,\n            damage: damage,\n        });\n    }\n\n    return talentValues;\n}\n\n// Used for all 1-hit charged attacks\nfunction chargedAttackDefault(params, stats) {\n    let dmgBonus = getDamageBonus('physical', stats);\n    let damage = stats.flatAtk * params[0] * dmgBonus;\n    return [{\n        description: 'chargedDmg',\n        damage: damage,\n    }];\n}\n\n// Internal function: Used for multi-hit charged attacks\nfunction chargedAttackMulti(hits, params, stats) {\n    let talentValues = [];\n    let dmgBonus = getDamageBonus('physical', stats);\n    for (let i = 0; i < hits; i++) {\n        let damage = stats.flatAtk * params[i] * dmgBonus;\n        talentValues.push({\n            description: `charged${i+1}HitDmg`,\n            damage: damage,\n        });\n    }\n\n    return talentValues;\n}\n\n// Used for all default plunge attacks\nfunction plungeAttackDefault(params, stats) {\n    let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n    let dmgBonus = getDamageBonus('physical', stats);\n    return descriptions.map((description, i) => {\n        let damage = stats.flatAtk * params[i] * dmgBonus;\n        return {\n            description: description,\n            damage: damage,\n        };\n    });\n}\n\n// Used for all default sword/polearm/catalyst attacks\nfunction attackLightDefault(normalHits, chargedHits, params, stats) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault(normalHits, params.slice(0, normalHits), stats));\n\n    if (chargedHits === 1) {\n        talentValues.push(...chargedAttackDefault(params[normalHits], stats));\n    } else {\n        talentValues.push(...chargedAttackMulti(chargedHits, params.slice(normalHits, normalHits + chargedHits), stats));\n    }\n\n    talentValues.push(...plungeAttackDefault(params.slice(normalHits + chargedHits + 1), stats));\n\n    return talentValues;\n}\n\n// Used for all default skill/burst that only does 1-hit elemental dmg\nfunction skillDefault(element, params, stats) {\n    let dmgBonus = getDamageBonus(element, stats);\n    let damage = stats.flatAtk * params[0] * dmgBonus;\n\n    return [{\n        description: 'dmg',\n        damage: damage,\n    }];\n}\n\n// Public functions\n// Access using talent[characterId + type]\n\n// Kaeya\nexport function kaeyaAttack(params, stats) {\n    return attackLightDefault(5, 2, params, stats);\n}\n\nexport function kaeyaSkill(params, stats) {\n    return skillDefault('cryo', params, stats);\n}\n\nexport function kaeyaBurst(params, stats) {\n    return skillDefault('cryo', params, stats);\n}","import { \n    getCharacterData as getData, \n    getCharacterAscensionBonusData as getAscensionBonusData, \n    getCharacterStatCurveAt as getStatCurveAt, \n    getAscensionBonusAt,\n    getTalentData,\n    getTalentStatsAt,\n} from './Data.js';\n\nimport * as talents from './Talent.js';\nconst emptyTalentParams = Array(19).fill(NaN);\n\nexport default class Character {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n\n        this.talents = getTalentData(id);\n    }\n\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n    getInnateStatsAt(level, hasAscended) {\n        if (isNaN(level) || level < 1 || level > 90) {\n            // Return nulls if level is invalid\n            let innateStats;\n            if (this.innateStats !== undefined) {\n                // Copy all of innateStats' properties to a new object and initialize them to null\n                innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                innateStats = {};\n            }\n            \n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n            \n            return innateStats;\n        } \n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\n        else if (level === this.level && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.innateStats;\n        } else {\n\n            // Initialize stats with character level 1 base stats\n            let innateStats = {...this.baseStats};\n\n            let charStatCurves = getStatCurveAt(level);\n\n            // Calculate stats from character level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = charStatCurves[curve];\n                innateStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from character ascension\n            let ascensionLevel;\n            if (level > 80 || (level == 80 && hasAscended)) {\n                ascensionLevel = 6;\n            } else if (level > 70 || (level == 70 && hasAscended)) {\n                ascensionLevel = 5;\n            } else if (level > 60 || (level == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (level > 50 || (level == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (level > 40 || (level == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (level > 20 || (level == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n\n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in innateStats) {\n                        innateStats[stat] += bonus;\n                    } else {\n                        innateStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n\n            return innateStats;\n        }\n    }\n\n    // Return an Object with description and damage properties\n    getTalentDamageAt(type, level, totalStats) {\n        const params = getTalentStatsAt(type.toLowerCase(), level, this.talents);\n\n        let damageFn = talents[this.id + type];\n        if (damageFn === undefined) {\n            damageFn = talents['defaultTalent'];\n        }\n\n        let damage = damageFn(params ? params : emptyTalentParams, totalStats);\n\n        // Set damage values to null if they are NaN so that getStatDisplayValue can display them correctly\n        damage.forEach(idvDamage => isNaN(idvDamage.damage) ? idvDamage.damage = null : null);\n\n        return damage;\n    }\n}\n","import { getWeaponData as getData, getWeaponAscensionBonusData as getAscensionBonusData, getWeaponStatCurveAt as getStatCurveAt, getAscensionBonusAt } from './Data.js';\n\nexport default class Weapon {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.type = data.type;\n        this.rank = data.rank;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n    }\n\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n    getStatsAt(weaponLevel, hasAscended) {\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.rank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\n            // Return nulls if weapon level is invalid\n            let weaponStats;\n            if (this.stats !== undefined) {\n                // Copy all of stats' properties to a new object and initialize them to null\n                weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                weaponStats = {};\n            }\n            \n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n        // If getStatsAt has not been called before, this.weaponLevel, this.hasAscended, and this.stats will be undefined\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.stats;\n        } else {\n\n            // Level 1 weapon stats\n            let weaponStats = {...this.baseStats};\n\n            let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n            // Calculate stats from weapon level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = weaponStatCurves[curve];\n                weaponStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from weapon ascension\n            let ascensionLevel;\n            // Only 3-star and above weapons can be ascended beyond level 70\n            if (this.rank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\n                ascensionLevel = 6;\n            } else if (this.rank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\n                ascensionLevel = 5;\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n            \n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in weaponStats) {\n                        weaponStats[stat] += bonus;\n                    } else {\n                        weaponStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n    }\n}\n","import * as statUtils from './Stat.js';\n\nexport default class Artifact {\n    mainStat = {\n        stat: 0,\n        rawValue: NaN,\n        value: NaN,\n    };\n\n    subStats = [\n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }\n    ];\n\n    constructor(type) {\n        this.type = type;\n    }\n\n    // Can be called with one of the two of stat and value (the other will be undefined)\n    setStat(statObj, stat, value, isPercentage = false) {\n        if (stat == undefined && value != undefined) {\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        } else if (stat != undefined && value == undefined) {\n            statObj.stat = stat;\n            statObj.value = statUtils.convertStatValue(statObj.rawValue, isPercentage);\n        } else if (stat != undefined && value != undefined) {\n            statObj.stat = stat;\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        }\n    }\n\n    /*\n    setMainStat(stat, value, isPercentage = false) {\n        this.setStat(this.mainStat, stat, value, isPercentage);\n    }\n\n    // Set substat in a spefiic position\n    setSubStat(pos, stat, value, isPercentage = false) {\n        this.setStat(this.subStats[pos], stat, value, isPercentage);\n    }\n    */\n\n    // Returns object containing stat: value mapping, including both main stat and substats\n    getStats() {\n        let stats = {};\n\n        if (this.mainStat.stat != 0) {\n            if (!isNaN(this.mainStat.value)) {\n                stats[this.mainStat.stat] = this.mainStat.value;\n            } else {\n                stats[this.mainStat.stat] = null;\n            }\n        }\n        \n        this.subStats.forEach(subStat => {\n            if (subStat.stat != 0) {\n                if (!isNaN(subStat.value)) {\n                    stats[subStat.stat] = subStat.value;\n                } else {\n                    stats[subStat.stat] = null;\n                }\n            }\n        });\n\n        return stats;\n    }\n}\n\nexport const mainStatProps = {\n    Flower: [\n        'flatHp',\n    ],\n\n    Feather: [\n        'flatAtk',\n    ],\n\n    Sands: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'energyRecharge',\n    ],\n\n    Goblet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'anemoDmgBonus',\n        'cryoDmgBonus',\n        'electroDmgBonus',\n        'geoDmgBonus',\n        'hydroDmgBonus',\n        'pyroDmgBonus',\n        'physicalDmgBonus',\n    ],\n\n    Circlet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'critRate',\n        'critDmg',\n        'healingBonus',\n    ],\n}\n\nexport const subStatProps = [\n    'flatHp',\n    'flatAtk',\n    'flatDef',\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n    'critRate',\n    'critDmg',\n]","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n\n        fontSize: 14,\n\n        height: '100%',\n\n        backgroundColor: '#fff',\n    },\n\n    inputColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '1%',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#ccc',\n    },\n\n    inputRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    levelInput: {\n        width: '2em',\n    },\n\n    statInput: {\n        width: '3em',\n    },\n\n    resultColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#eee',\n    },\n\n    resultBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n    },\n\n    resultBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n        borderBottomWidth: 1,\n    },\n\n    artifactBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n    },\n\n    artifactBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n\n        borderStyle: 'dashed',\n        borderBottomWidth: 1,  \n    },\n\n    characterImage: {\n        marginVertical: '0.25em',\n    },\n\n    titleText: {\n        fontSize: '1.5em',\n        fontWeight: '200',\n\n        marginVertical: '0.17em',\n    },\n\n    artifactType: {\n        fontSize: '1.2em',\n        fontWeight: '200',\n\n        marginVertical: '0.21em',\n    },\n\n    artifactStatType: {\n        marginVertical: '0.25em',\n    },\n\n    resultText: {\n        marginVertical: '0.25em',\n    },\n\n    fillerColumn: {\n        flexGrow: 1,\n\n        backgroundColor: '#eee',\n    },\n});\n","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { Image, Text, TextInput, View } from 'react-native';\n\nimport Character from './js/Character.js';\nimport Weapon from './js/Weapon.js';\nimport Artifact, { mainStatProps, subStatProps } from './js/Artifact.js';\nimport * as statUtils from './js/Stat.js';\nimport * as data from './js/Data.js';\n\nimport styles from './js/Styles.js';\n\nexport default class App extends Component {\n\n  // Class properties\n  character;\n  weapon;\n  artifactFlower;\n  artifactFeather;\n  artifactSands;\n  artifactGoblet;\n  artifactCirclet;\n\n  constructor() {\n    super();  \n\n    // Initialize sorted list of characters and weapons\n    this.characters = data.getSortedCharacterList();\n    this.weapons = data.getSortedWeaponList();\n\n    this.artifactFlower = new Artifact('Flower');\n    this.artifactFeather = new Artifact('Feather');\n    this.artifactSands = new Artifact('Sands');\n    this.artifactGoblet = new Artifact('Goblet');\n    this.artifactCirclet = new Artifact('Circlet');\n\n    this.state = {\n      characterId: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n\n      weaponId: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n\n      talentAttackLevel: 1,\n      talentSkillLevel: 1,\n      talentBurstLevel: 1,\n\n      characterStats: undefined,\n      weaponStats: undefined,\n      totalStats: undefined,\n\n      talentAttackDamage: undefined,\n      talentSkillDamage: undefined,\n      talentBurstDamage: undefined,\n    }\n  }\n\n  renderInputColumn = () => {\n    return (\n      <View>\n        {this.renderCharacterList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.characterLevel} \n            onChangeText={text => {\n              this.setState({ characterLevel: parseInt(text) }, this.setCharacterState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isCharacterAscended: value }, this.setCharacterState)}\n            value={this.state.isCharacterAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        {this.renderWeaponList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.weaponLevel} \n            onChangeText={text => {\n              this.setState({ weaponLevel: parseInt(text) }, this.setWeaponState)\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isWeaponAscended: value }, this.setWeaponState)}\n            value={this.state.isWeaponAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        <View style={styles.inputRow}>\n          <Text>Attack Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentAttackLevel} \n            onChangeText={text => {\n              this.setState({ talentAttackLevel: parseInt(text) }, () => this.setTalentState('Attack'));\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Skill Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentSkillLevel} \n            onChangeText={text => {\n              this.setState({ talentSkillLevel: parseInt(text) }, () => this.setTalentState('Skill'));\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Burst Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentBurstLevel} \n            onChangeText={text => {\n              this.setState({ talentBurstLevel: parseInt(text) }, () => this.setTalentState('Burst'));\n            }}\n          />\n        </View>\n      </View>\n    )\n  }\n\n  renderCharacterList = () => {    \n    return (\n      <View style={styles.inputRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.character = new Character(value);\n              this.setState({ characterId: value }, this.setCharacterState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.characters.map(id => <Picker.Item label={data.getCharacterData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    return (\n      <View style={styles.inputRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.weapon = new Weapon(value);\n              this.setState({ weaponId: value }, this.setWeaponState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.weapons.map(id => <Picker.Item label={data.getWeaponData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  setCharacterState = () => {\n    if (this.character !== undefined) {\n      let stats = this.character.getInnateStatsAt(this.state.characterLevel, this.state.isCharacterAscended);\n      let totalStats = this.getTotalStats();\n\n      let talentAttackDamage = this.character.getTalentDamageAt('Attack', this.state.talentAttackLevel, totalStats);\n      let talentSkillDamage = this.character.getTalentDamageAt('Skill', this.state.talentSkillLevel, totalStats);\n      let talentBurstDamage = this.character.getTalentDamageAt('Burst', this.state.talentBurstLevel, totalStats);\n\n      this.setState({ \n        characterStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setWeaponState = () => {\n    if (this.weapon !== undefined) {\n      let stats = this.weapon.getStatsAt(this.state.weaponLevel, this.state.isweaponAscended);\n      let totalStats = this.getTotalStats();\n\n      let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n      if (this.character !== undefined) {\n        talentAttackDamage = this.character.getTalentDamageAt('Attack', this.state.talentAttackLevel, totalStats);\n        talentSkillDamage = this.character.getTalentDamageAt('Skill', this.state.talentSkillLevel, totalStats);\n        talentBurstDamage = this.character.getTalentDamageAt('Burst', this.state.talentBurstLevel, totalStats);\n      }\n\n      this.setState({ \n        weaponStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setArtifactState = (type) => {\n    let totalStats = this.getTotalStats();\n\n    let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n    if (this.character !== undefined) {\n      talentAttackDamage = this.character.getTalentDamageAt('Attack', this.state.talentAttackLevel, totalStats);\n      talentSkillDamage = this.character.getTalentDamageAt('Skill', this.state.talentSkillLevel, totalStats);\n      talentBurstDamage = this.character.getTalentDamageAt('Burst', this.state.talentBurstLevel, totalStats);\n    }\n\n    this.setState({\n      totalStats: totalStats,\n      talentAttackDamage: talentAttackDamage,\n      talentSkillDamage: talentSkillDamage,\n      talentBurstDamage: talentBurstDamage,\n    });\n  }\n\n  setTalentState = (type) => {\n    if (this.character !== undefined) {\n      let talentDmg = this.character.getTalentDamageAt(type, this.state[`talent${type}Level`], this.state.totalStats);\n      this.setState({ [`talent${type}Damage`]: talentDmg });\n    }\n  }\n\n  getTotalStats = () => {\n    let artifacts = [this.artifactFlower, this.artifactFeather, this.artifactSands, this.artifactGoblet, this.artifactCirclet];\n\n    let stats = statUtils.getTotalStatsAt(\n      this.weapon, \n      this.state.weaponLevel, \n      this.state.isWeaponAscended, \n      this.character,\n      this.state.characterLevel,\n      this.state.isCharacterAscended,\n      artifacts,\n    );\n\n    return stats;\n  }\n\n  renderCharacterStats = () => {\n    return (\n      this.character ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Character</Text>\n          {this.renderCharacterImage()}\n          <Text style={styles.resultText}>{this.character ? this.character.name : ''}</Text>\n          {\n            this.state.characterStats ? (\n              Object.entries(this.state.characterStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderWeaponStats = () => {\n    return (\n      this.weapon ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Weapon</Text>\n          <Text style={styles.resultText}>{this.weapon ? this.weapon.name : ''}</Text>\n          {\n            this.state.weaponStats ? (\n              Object.entries(this.state.weaponStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderArtifactMainStat = (type) => {\n    return (\n      <View style={styles.inputRow}>\n        <Picker\n          selectedValue={this['artifact' + type].mainStat.stat}\n          onValueChange={(stat, _) => {\n            if (stat != 0) {\n              let mainStat = this['artifact' + type].mainStat;\n              this['artifact' + type].setStat(mainStat, stat, undefined, data.propMapping[stat].isPercentage);\n              // Update total stats\n              this.setArtifactState(type);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {mainStatProps[type].map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n        </Picker>\n\n        <Text> : </Text>\n\n        <TextInput \n          style={styles.statInput} \n          onChangeText={text => {\n            let mainStat = this['artifact' + type].mainStat;\n            if (mainStat.stat) {\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), data.propMapping[mainStat.stat].isPercentage);\n            } else {\n              // If stat type is not yet set\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), false);\n            }\n\n            // Update total stats\n            this.setArtifactState(type);\n          }}\n        />\n      </View>\n    )\n  }\n\n  renderArtifactSubStats = (type) => {\n    return (\n      <View>\n        {\n          this['artifact' + type].subStats.map((subStat, index) => {\n            return (\n              <View style={styles.inputRow} key={index}>\n                <Picker\n                  selectedValue={subStat.stat}\n                  onValueChange={(stat, _) => {\n                    if (stat != 0) {\n                      this['artifact' + type].setStat(subStat, stat, undefined, data.propMapping[stat].isPercentage);     \n                      // Update total stats\n                      this.setArtifactState(type);\n                    }\n                  }}\n                >\n                  <Picker.Item label='' value={0} />\n                  {subStatProps.map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n                </Picker>\n\n                <Text> : </Text>\n\n                <TextInput \n                  style={styles.statInput} \n                  onChangeText={text => {\n                    let stat = subStat.stat;\n                    if (stat) {\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), data.propMapping[stat].isPercentage);\n                    } else {\n                      // If stat type is not yet set\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), false);\n                    }\n                    // Update total stats\n                    this.setArtifactState(type);\n                  }}\n                />\n              </View>\n            )\n          })\n        }\n      </View>\n    )\n  }\n\n  renderArtifactStat = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n\n        <Text style={styles.artifactStatType}>Main Stat</Text>\n        {this.renderArtifactMainStat(type)}\n\n        <Text style={styles.artifactStatType}>Substats</Text>\n        {this.renderArtifactSubStats(type)}\n      </View>\n    )\n  }\n\n  renderAllArtifactStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Artifacts</Text>\n        {this.renderArtifactStat('Flower')}\n        {this.renderArtifactStat('Feather')}\n        {this.renderArtifactStat('Sands')}\n        {this.renderArtifactStat('Goblet')}\n        {this.renderArtifactStat('Circlet', true)}\n      </View>\n    )\n  }\n\n  renderTotalStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Stat Total</Text>\n        {\n          this.state.totalStats ? (\n            Object.entries(this.state.totalStats).map(([stat, value]) => {\n              return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n            })\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  renderTalentDamage = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n        {\n          this.state['talent' + type + 'Damage'] ? (\n            this.state['talent' + type + 'Damage'].map(({description, damage}, index) => {\n              return (\n                <Text style={styles.resultText} key={index}>{statUtils.getTalentDescription(description)}: {statUtils.getStatDisplayValue(damage)}</Text>\n              )\n            })\n          ) : null\n        }\n      </View>\n\n    )\n  }\n\n  renderAllTalentDamage = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Talents</Text>\n\n        {this.renderTalentDamage('Attack')}\n        {this.renderTalentDamage('Skill')}\n        {this.renderTalentDamage('Burst', true)}\n      </View>\n    )\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.inputColumn}>\n          {this.renderInputColumn()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderCharacterStats()}\n          {this.renderWeaponStats()}\n          {this.renderAllArtifactStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderTotalStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderAllTalentDamage()}\n        </View>\n\n        <View style={styles.fillerColumn}>\n        </View>\n\n      </View>\n    )\n  }\n}\n"],"sourceRoot":""}