{"version":3,"sources":["optimization/OptimizerWorker.ts","data/Data.ts","character/Character.ts","stat/Stat.ts","artifact/types.ts","artifact/Artifact.ts","artifact/ArtifactSet.ts","option/Option.ts","option/artifactSetOptions/ArtifactSetOption.ts","artifact/artifactSet/ArchaicPetra.ts","artifact/artifactSet/Berserker.ts","artifact/artifactSet/BlizzardStrayer.ts","artifact/artifactSet/BloodstainedChivalry.ts","artifact/artifactSet/BraveHeart.ts","artifact/artifactSet/CrimsonWitch.ts","option/OptionUtils.ts","option/index.ts","option/Mixin.ts","talent/types.ts","artifact/artifactSet/EmblemOfSeveredFate.ts","artifact/artifactSet/Gambler.ts","artifact/artifactSet/GladiatorsFinale.ts","artifact/artifactSet/HeartOfDepth.ts","artifact/artifactSet/Instructor.ts","artifact/artifactSet/Lavawalker.ts","artifact/artifactSet/MaidenBeloved.ts","artifact/artifactSet/MartialArtist.ts","artifact/artifactSet/NoblesseOblige.ts","artifact/artifactSet/PaleFlame.ts","artifact/artifactSet/ResolutionOfSojourner.ts","artifact/artifactSet/RetracingBolide.ts","artifact/artifactSet/Shimenawa.ts","artifact/artifactSet/Tenacity.ts","artifact/artifactSet/Thundersoother.ts","artifact/artifactSet/TinyMiracle.ts","artifact/artifactSet/ViridescentVenerer.ts","artifact/artifactSet/WanderersTroupe.ts","artifact/ArtifactSetUtil.ts","modifier/Reaction.ts","stat/Resistance.ts","modifier/CritType.ts","talent/TalentUtil.ts","character/albedo/AlbedoTalent.ts","character/albedo/Albedo.ts","option/characterOptions/CharacterOption.ts","character/aloy/AloyOption.ts","character/aloy/AloyPassive.ts","character/aloy/AloyTalent.ts","character/aloy/Aloy.ts","character/amber/AmberTalent.ts","character/amber/Amber.ts","character/ayaka/AyakaOption.ts","character/ayaka/AyakaTalent.ts","character/ayaka/Ayaka.ts","character/barbara/BarbaraTalent.ts","character/barbara/Barbara.ts","character/beidou/BeidouPassive.ts","character/beidou/BeidouTalent.ts","character/beidou/Beidou.ts","character/bennett/BennettTalent.ts","character/bennett/BennettTeamPassive.ts","character/bennett/Bennett.ts","character/chongyun/ChongyunOption.ts","character/chongyun/ChongyunTalent.ts","character/chongyun/Chongyun.ts","character/diluc/DilucTalent.ts","character/diluc/DilucOption.ts","character/diluc/Diluc.ts","character/diona/DionaTalent.ts","character/diona/Diona.ts","character/eula/EulaTalent.ts","character/eula/Eula.ts","character/fischl/FischlTalent.ts","character/fischl/Fischl.ts","character/ganyu/GanyuTalent.ts","character/ganyu/Ganyu.ts","character/hutao/HutaoPassive.ts","character/hutao/HutaoTalent.ts","character/hutao/HutaoOption.ts","character/hutao/Hutao.ts","character/jean/JeanTalent.ts","character/jean/Jean.ts","character/kaeya/KaeyaTalent.ts","character/kaeya/Kaeya.ts","character/kazuha/KazuhaTalent.ts","option/characterOptions/ElementalAbsorptionOption.ts","character/kazuha/KazuhaOption.ts","character/kazuha/Kazuha.ts","character/keqing/KeqingTalent.ts","character/keqing/Keqing.ts","character/klee/KleeTalent.ts","character/klee/Klee.ts","character/kokomi/KokomiPassive.ts","character/kokomi/KokomiTalent.ts","character/kokomi/KokomiOption.ts","character/kokomi/Kokomi.ts","character/lisa/LisaTalent.ts","character/lisa/Lisa.ts","character/mona/MonaOption.ts","character/mona/MonaTalent.ts","character/mona/Mona.ts","character/ningguang/NingguangTalent.ts","character/ningguang/Ningguang.ts","character/noelle/NoelleTalent.ts","character/noelle/NoelleOption.ts","character/noelle/Noelle.ts","character/qiqi/QiqiTalent.ts","character/qiqi/Qiqi.ts","character/raiden/RaidenPassive.ts","character/raiden/RaidenTalent.ts","character/raiden/RaidenOption.ts","character/raiden/Raiden.ts","character/razor/RazorTalent.ts","character/razor/Razor.ts","character/rosaria/RosariaTalent.ts","character/rosaria/Rosaria.ts","character/sara/SaraTalent.ts","character/sara/Sara.ts","character/sayu/SayuTalent.ts","character/sayu/SayuOption.ts","character/sayu/Sayu.ts","character/sucrose/SucroseOption.ts","character/sucrose/SucroseTalent.ts","character/sucrose/Sucrose.ts","character/tartaglia/TartagliaTalent.ts","character/tartaglia/TartagliaPassive.ts","character/tartaglia/TartagliaTeamPassive.ts","character/tartaglia/Tartaglia.ts","character/thoma/ThomaTalent.ts","character/thoma/ThomaPassive.ts","character/thoma/ThomaConstellation.ts","constellation/Constellation.ts","character/thoma/ThomaTeamPassive.ts","character/thoma/Thoma.ts","character/venti/VentiTalent.ts","character/venti/VentiOption.ts","character/venti/Venti.ts","character/xiangling/XianglingTalent.ts","character/xiangling/Xiangling.ts","character/xiao/XiaoOption.ts","character/xiao/XiaoTalent.ts","character/xiao/Xiao.ts","character/xingqiu/XingqiuTalent.ts","character/xingqiu/Xingqiu.ts","character/xinyan/XinyanTalent.ts","character/xinyan/Xinyan.ts","character/yanfei/YanfeiOption.ts","character/yanfei/YanfeiTalent.ts","character/yanfei/Yanfei.ts","character/yoimiya/YoimiyaOption.ts","character/yoimiya/YoimiyaPassive.ts","character/yoimiya/YoimiyaTalent.ts","character/yoimiya/Yoimiya.ts","character/zhongli/ZhongliTalent.ts","character/zhongli/ZhongliTeamPassive.ts","character/CharacterUtil.ts","character/zhongli/Zhongli.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/IntInput.tsx","component/Picker.tsx","component/ArtifactBlock.tsx","modifier/DamageModifer.ts","teambuff/artifact/ArtifactTeamBuff.ts","dps/DPSCalculator.ts","optimization/Optimization.ts","optimization/OptimizerWorkerShim.js","weapon/Weapon.ts","option/weaponOptions/WeaponOption.ts","weapon/watatsumi/WatatsumiWavewalker.ts","weapon/watatsumi/Akuoumaru.ts","weapon/dragonsbane/DragonsBane.ts","weapon/dragonsbane/DragonsBanePassive.ts","weapon/engulfinglightning/EngulfingLightning.ts","weapon/engulfinglightning/EngulfingLightningPassive.ts","weapon/everlastingmoonglow/EverlastingMoonglow.ts","weapon/everlastingmoonglow/EverlastingMoonglowPassive.ts","weapon/luxurioussealord/LuxuriousSeaLord.ts","weapon/luxurioussealord/LuxuriousSeaLordPassive.ts","weapon/watatsumi/MouunsMoon.ts","weapon/polarstar/PolarStar.ts","weapon/polarstar/PolarStarPassive.ts","weapon/solarpearl/SolarPearl.ts","weapon/solarpearl/SolarPearlPassive.ts","weapon/staffofhoma/StaffOfHoma.ts","weapon/staffofhoma/StaffOfHomaPassive.ts","weapon/thecatch/TheCatch.ts","weapon/thecatch/TheCatchPassive.ts","weapon/whiteblind/Whiteblind.ts","weapon/whiteblind/WhiteblindPassive.ts","weapon/WeaponUtil.ts","weapon/watatsumi/WavebreakersFin.ts","option/characterOptions/ReactionOption.ts","save/Save.ts","component/Checkbox.tsx","component/InputBlock.tsx","component/OptimizerBlock.tsx","component/ArtifactColumn.tsx","component/OptionInput.tsx","component/DPSOptionInput.tsx","component/DPSAttackInput.tsx","component/DPSColumn.tsx","component/ArtifactSetPicker.tsx","component/ArtifactSetInputBlock.tsx","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","component/SaveBlock.tsx","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/TeamBuffOptionInput.tsx","component/TeamInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","constellations","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","weaponPassiveData","weaponPassiveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getWeaponPassiveData","getWeaponPassiveParams","refinement","passive","passiveParams","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentParams","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","getWeaponPassiveAt","Character","hasAscended","constellationLevel","_id","baseStats","statCurveMapping","talentFns","_level","_hasAscended","_constellationLevel","innateStats","characterOptions","passiveOptions","constellationOptions","teamOptions","this","value","data","getTalentFns","getInnateStatsAt","getCharacterOptions","ascensionLevel","getAscensionLevel","getPassives","getPassiveOptions","getConstellations","getConstellationsOptions","getTeamOptions","prevAscensionLevel","prevConstellationLevel","isNaN","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","multiplier","bonus","getCharacterOptionConstuctors","Option","getAllPassives","filter","flatMap","options","oldOptionIds","newOptions","includes","concat","keptOptionIds","option","statMixin","mixin","modifierMixin","getAllConstellations","constellation","getTeamPassive","teamPassive","unroll","getStatDisplayValue","prop","isPercentage","toFixed","Math","round","toString","getDamageDisplayValue","values","str","length","every","slice","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","talentAttackLevel","talentSkillLevel","talentBurstLevel","statMixins","characterStats","weaponStats","stats","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","energyRecharge","apply","totalStats","baseAtk","flatAtk","atkBonus","flatDef","baseDef","defBonus","flatHp","baseHp","hpBonus","critRate","critDmg","elementalMastery","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","shieldStrength","dmgBonus","normalDmgBonus","chargedDmgBonus","plungeDmgBonus","skillDmgBonus","burstDmgBonus","chargedCritRate","burstCritRate","overloadDmgBonus","burningDmgBonus","vaporizeDmgBonus","meltDmgBonus","capitalize","toUpperCase","ArtifactType","InputStat","rawValue","convertStatToDisplayValue","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","setMainStatValue","getArtifactMainStatValue","i","setProp","setInputValue","setValue","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","ArtifactSet","bonusThresholds","setBonusData","_pieces","setBonusSets","setBonuses","getSetBonusSetsAt","getSetBonusesAt","getOptions","prevPieces","getAllSetBonuses","setBonus","threshold","bonuses","statBonus","extraStats","ArtifactSetOption","ArchaicPetra","archaicPetra4Pc","params4Pc","ArchaicPetra4PcOption","choices","Berserker","berserker4Pc","BlizzardStrayer","blizzardStrayer4Pc","BloodstainedChivalry","bloodstainedChivalry4Pc","BraveHeart","braveHeart4Pc","CrimsonWitch","crimsonWitch4Pc","param","find","stacks","isBooleanOption","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","Priority","getStatMixins","weaponOptions","artifactSets","artifactSetOptions","teamCharacters","artifactBuffOptions","characterPassiveMixins","getPassiveStatMixins","characterConstellationMixins","getConstellationStatMixins","weaponPassiveMixins","artifactSetMixins","artifactSet","teamPassiveMixins","getTeamStatMixin","characterOptionMixins","weaponOptionMixins","artifactSetOptionMixins","teamOptionMixins","artifactBuffOptionMixins","unarrangedMixins","groupedMixins","Map","priority","Normal","array","get","push","set","Last","getModifierMixins","getPassiveModifierMixins","getConstellationModifierMixins","getTeamModifierMixin","TalentType","Element","AttackType","ScalingType","EmblemOfSeveredFate","emblemOfSeveredFate4Pc","Gambler","gambler2Pc","GladiatorsFinale","gladiatorsFinale4Pc","HeartOfDepth","heartOfDepth4Pc","Instructor","instructor4Pc","Instructor4PcOption","Lavawalker","lavawalker4Pc","MaidenBeloved","maidenBeloved4Pc","healedBonus","MartialArtist","martialArtist2Pc","martialArtist4Pc","params2Pc","NoblesseOblige","noblesseOblige2Pc","noblesseOblige4Pc","NoblesseOblige4PcOption","PaleFlame","paleFlame4Pc","ResolutionOfSojourner","resolutionOfSojourner4Pc","RetracingBolide","retracingBolide4Pc","Shimenawa","shimenawa4Pc","Tenacity","tenacity4Pc","Tenacity4PcOption","Thundersoother","thundersoother4Pc","TinyMiracle","tinyMiracle2Pc","element","ViridescentVenerer","viridescentVenerer4Pc","ViridescentVenerer4PcOption","Cryo","Electro","Hydro","Pyro","modifier","enemyResReduction","add","WanderersTroupe","wanderersTroupe4Pc","resolutionofsojourner","tinymiracle","martialartist","gambler","gladiatorsfinale","viridescentvenerer","wandererstroupe","crimsonwitchofflames","noblesseoblige","emblemofseveredfate","braveheart","berserker","instructor","blizzardstrayer","thundersoother","lavawalker","maidenbeloved","bloodstainedchivalry","archaicpetra","retracingbolide","heartofdepth","tenacityofthemillelith","paleflame","shimenawasreminiscence","getArtifactSetConstructor","initArtifactSet","ArtifactSetConstructor","getAllArtifactSetBonuses","Reaction","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","Anemo","Geo","Physical","prevValue","CritType","calculateBaseDamage","scalingType","flatDmg","Attack","Defense","Hp","calculateAmplifyingReactionMultiplier","reaction","amplifyingStrength","triggerElement","Melt","Vaporize","calculateAmplifyingStrengthMultiplier","reactionBonus","calculateTotalDamage","attackType","normalAttackFlatDmg","Charged","chargedAttackFlatDmg","Skill","skillFlatDmg","baseDmg","getDamageBonus","crit","critType","Crit","Average","Burst","min","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","calculateHp","flatBonus","normalAttackSingle","damage","infusionNormal","infusion","normalAttackMulti","hits","damages","chargedAttackSingle","chargedAttackMulti","aimShot","aimShotCharged","plungeAttack","infusionPlunge","Plunge","skillSingle","skillMulti","burstSingle","burstMulti","typelessAttack","None","healingValue","flatHealing","calculateHealing","hpValue","shieldHpValue","dmgAbsorption","dionaHoldSkill","calculateDmgAbsorption","atkBuffValue","albedoTalents","chargedDmg","plungeDmg","lowPlungeDmg","highPlungeDmg","skillDmg","transientBlossomDmg","burstDmg","fatalBlossomDmg","Albedo","CharacterOption","children","aloyOptions","_talentAttackLevel","_talentBurstLevel","skillParams","a1Data","a4Data","a1Params","a4Params","aloyPassives","aloyTalents","aimShotDmg","chargedAimShotDmg","freezeBombDmg","chillwaterBombletDmg","Aloy","amberTalents","explosionDmg","baronBunnyHp","dmgPerWave","totalDmg","talentValue","Amber","ayakaOptions","ayakaTalents","cuttingDmg","bloomDmg","Ayaka","barbaraTalents","hpRegenContinuous","hpRegenOnHit","dropletDmg","hpRegen","Barbara","beidouPassives","beidouTalents","chargedSpinDmg","chargedFinalDmg","shieldHp","dmgBonusOnHitTaken","lightningDmg","Beidou","bennettTalents","pressDmg","chargeLevel1Dmg","chargeLevel2Dmg","hpRegenContinuousPerSecond","BennettOptionAtkBuff","bennettTeamPassive","atkBuff","Bennett","chongyunOptions","chongyunTalents","Chongyun","dilucTalents","slashingDmg","dot","dilucOptions","_talentSkillLevel","passiveData","Diluc","dionaTalents","icyPawDmgPerPaw","shieldHpPress","shieldHpHold","continuousFieldDmg","hpRegenContinuousTime","Diona","eulaTalents","holdDmg","icewhirlBrandDmg","lightfallSwordBaseDmg","lightfallSwordStackDmg","Eula","fischlTalents","ozDmg","summoningDmg","fallingThunderDmg","Fischl","ganyuTalents","aimShotChargeLevel1","frostflakeArrowDmg","frostflakeArrowBloomDmg","iceLotusHp","iceShardDmg","Ganyu","hutaoPassives","hutaoTalents","bloodBlossomDmg","burstDmgLowHp","hpRegenLowHp","hutaoOptions","flatAtkBonus","Hutao","jeanTalents","fieldEnterExitDmg","fieldActivationHealing","Jean","kaeyaTalents","Kaeya","kazuhaTalents","dotElementalAbsorption","elementalAbsorption","ElementalAbsoprtionOption","kazuhaOptions","Kazuha","keqingTalents","lightningStilettoDmg","thunderclapSlashDmg","burstInitDmg","consecutiveSlashDmg","lastAttackDmg","Keqing","kleeTalents","jumpyDumptyDmg","mineDmg","sparksNSplashDmg","Klee","kokomiPassives","kokomiHealingBonusDmg","kokomiTalents","getKokomiNormalAttackModifier","getKokomiChargedAttackModifier","rippleDmg","getKokomiSkillModifier","kokomiBurst","newModifier","normalAttackBonusDmg","chargedAttackBonusDmg","skillBonusDmg","kokomiOptions","Kokomi","lisaTalents","holdDmgStack0","holdDmgStack1","holdDmgStack2","holdDmgStack3","Lisa","monaOptions","burstParams","monaTalents","Mona","ningguangTalents","normalAtkDmg","starJadeDmg","jadeScreenHp","dmgPerGem","Ningguang","noelleTalents","healing","firstSwingDmg","noelleOptions","totalDef","Noelle","qiqiTalents","heraldOfFrostDmg","Qiqi","raidenPassives","raidenTalents","coordinatedAtkDmg","musouNoHitotachiDmg","getInitialResolveBonus","getAttackResolveBonus","resolveStacks","raidenOptions","Raiden","razorTalents","Razor","rosariaTalents","iceLanceDot","Rosaria","saraTalents","tenguJuuraiAmbushDmg","tenguJuuraiTitanbreakerDmg","tenguJuuraiStormclusterDmg","Sara","sayuTalents","fuufuuWindwheelDmg","fuufuuWhirlwindKickPressDmg","fuufuuWhirlwindKickHoldDmg","fuufuuWindwheelElementalDmg","fuufuuWhirlwindKickElementalDmg","activationDmg","activationHealing","mujimujiDarumaDmg","mujimujiDarumaHealing","sayuOptions","Sayu","sucroseOptions","sucroseTalents","Sucrose","tartagliaTalents","riptideFlashDmg","riptideBurstDmg","stanceChangeDmg","riptideSlashDmg","burstDmgMelee","burstDmgRanged","riptideBlastDmg","tartagliaAscension0","tartagliaPassives","tartagliaTeamPassive","Tartaglia","thomaTalents","shieldHpMax","fieryCollapseDmg","getThomaFieryCollapseModifier","thomaHpBonusDmg","thomaPassives","c6Params","ThomaOptionConstellation6","thomaConstellations","ConstellationBurst","thomaTeamPassive","Thoma","ventiTalents","ventiOptions","Venti","xianglingTalents","guobaDmg","swing1HitDmg","swing2HitDmg","swing3HitDmg","pyronadoDmg","Xiangling","xiaoOptions","xiaoTalents","Xiao","xingqiuTalents","swordRainDmg","Xingqiu","xinyanTalents","swingDmg","shieldHpLevel1","shieldHpLevel2","shieldHpLevel3","pyroDot","Xinyan","yanfeiOptions","yanfeiTalents","chargedDmgSeal0","chargedDmgSeal1","chargedDmgSeal2","chargedDmgSeal3","chargedDmgSeal4","Yanfei","yoimiyaOptions","yoimiyaSkill","yoimiyaPassives","yoimiyaTalents","getYoimiyaNormalAttackMultiplier","kindlingArrowDmg","aurousBlazeExplosionDmg","Yoimiya","zhongliTalents","stoneSteeleDmg","resonanceDmg","zhongliTeamPassive","characters","albedo","aloy","amber","ayaka","barbara","beidou","bennett","chongyun","diluc","diona","eula","fischl","ganyu","hutao","jean","kaeya","kazuha","keqing","klee","kokomi","lisa","mona","ningguang","noelle","qiqi","raiden","razor","rosaria","sara","sayu","sucrose","tartaglia","thoma","venti","xiangling","xiao","xingqiu","xinyan","yanfei","yoimiya","zhongli","getCharacterConstructor","initCharacter","CharacterConstructor","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","Form","Label","htmlFor","srOnly","label","Control","size","className","React","Component","FloatInput","parseFloat","InputRow","Row","IntInput","Picker","selectedValue","target","handleChange","onChange","as","Item","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactRarity","setArtifactLevel","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatInputValue","statObj","getDamageModifier","modifierMixins","artifactTeamBuffs","calculateTalentValue","talentType","talentId","initializeAllOptions","characterOptionsNew","weaponOptionsNew","artifactSetOptionsNew","teamOptionsNew","artifactBuffOptionsNew","allOptions","newOption","talentFn","characterOption","weaponOption","artifactSetOption","teamOption","OptionConstructor","artifactOption","substats","OptimizerWorker","Weapon","rank","passiveDataSet","_weaponLevel","_refinement","getPassive","getStatsAt","weaponLevel","weaponStatCurves","shouldKeepValue","statBonuses","WeaponOption","watatsumiWavewalkerPassive","Akuoumaru","DragonsBane","dragonsBanePassive","EngulfingLightning","engulfingLightningPassive","EverlastingMoonglow","everlastingMoonglowPassive","LuxuriousSeaLord","luxuriousSeaLordPassive","MouunsMoon","PolarStar","polarStarPassive","SolarPearl","solarPearlPassive","StaffOfHoma","totalHp","staffOfHomaPassive","TheCatch","theCatchPassive","Whiteblind","whiteblindPassive","weapons","dragonsbane","engulfinglightning","staffofhoma","thecatch","wavebreakersfin","everlastingmoonglow","solarpearl","luxurioussealord","whiteblind","akuoumaru","polarstar","mouunsmoon","getWeaponConstructor","initWeapon","WeaponConstructor","ReactionOption","createSave","appState","characterHasAscended","characterConstellationLevel","weaponHasAscended","weaponRefinement","createArtifactSave","artifactSetId","artifactSetPieces","teamCharacterIds","rotationTime","rotation","unpackArtifactSave","save","artifactType","loadSave","setAppState","refreshApp","artifactSave","attackSave","constructor","unpackSave","Checkbox","checked","Check","Input","InputBlock","OptimizerBlock","maxRolls","selectedSubstats","erThreshold","substatRolls","isOptimizing","setMaxRolls","setSelectedSubstats","selected","substat","setErThreshold","onOptimizeClick","a","worker","optimize","possibleStats","result","updateTotalStats","subStatRolls","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","Button","variant","onClick","disabled","rolls","ArtifactColumn","Col","md","xs","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","choice","DPSOptionInput","setOptionId","setOption","index","DPSAttackInput","setTalentType","setAttack","setTalentId","setMultiplier","splice","talentValues","defaultAttack","DPSColumn","dpr","dps","updateTalentValue","updateTalentValues","dmg","setRotationTime","time","isFinite","ArtifactSetPicker","setArtifactSetId","sort","name1","name2","localeCompare","ArtifactSetInputBlock","updateArtifactSetBonuses","setArtifactSetPieces","CharacterPicker","setCharacterId","CharacterInputBlock","setCharacterLevel","setIsCharacterAscended","isAscended","setCharacterConstellationLevel","ModifierInputBlock","setEnemyLevel","setEnemyRes","setCritType","setReaction","ToggleButtonGroup","ToggleButton","SaveBlock","onSaveClick","saveInputName","saves","window","localStorage","setItem","JSON","stringify","addSave","onSaveInputChange","onLoadClick","selectedSave","onLoadInputChange","onDeleteClick","showDeleteWarning","onDeleteModalConfirm","deleteSave","onDeleteModalHide","onImportClick","showImportModal","onImportModalHide","saveJson","invalidJson","onImportTextChange","onImportSubmitClick","parse","onExportClick","showExportModal","onExportModalHide","hasCopied","onCopyClick","navigator","clipboard","writeText","getItem","placeholder","Modal","show","onHide","Footer","closeButton","rows","readOnly","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","talentAttackLevelExtra","talentSkillLevelExtra","talentBurstLevelExtra","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","setIsWeaponAscended","setWeaponRefinement","TeamBuffOptionInput","TeamInputBlock","updateTeamOptions","setArtifactBuffOption","InputColumn","ArtifactSetStatBlock","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","TalentColumn","App","updateCache","callback","newArtifactSets","newChar","damageModifier","fns","fn","Container","fluid","Navbar","sticky","bg","Nav","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.793f7577.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"optimize\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"894d93a0701d4c252f5e.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import type * as Data from './types';\nimport type { TalentType } from '../talent/types';\n\nimport characterDataRaw from './characterdata.json';\nimport characterAscensionBonusDataRaw from './characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from './characterstatcurvedata.json';\nimport weaponDataRaw from './weapondata.json';\nimport weaponAscensionBonusDataRaw from './weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from './weaponstatcurvedata.json';\nimport weaponPassiveDataRaw from './weaponpassivedata.json';\nimport talentDataRaw from './talentdata.json';\nimport artifactSetDataRaw from './artifactsetdata.json';\nimport artifactSetBonusDataRaw from './artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from './artifactmainstatdata.json';\n\nimport propMappingRaw from './propmapping.json';\nimport talentDescMappingRaw from './talentdescmapping.json';\nimport optionMappingRaw from './optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\nconst weaponPassiveData = weaponPassiveDataRaw as Record<\n  string,\n  Data.WeaponPassiveSetData\n>;\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n\n      constellations: talentDataSetRaw.constellations,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getWeaponPassiveData(id: string) {\n  return getData(id, weaponPassiveData);\n}\n\nexport function getWeaponPassiveParams(id: string, refinement: number) {\n  return getWeaponPassiveData(id).passive[refinement]?.passiveParams ?? [];\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentParams(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\nexport function getWeaponPassiveAt(\n  refinement: number,\n  passives: Data.WeaponPassiveSetData\n): Data.WeaponPassiveData | undefined {\n  return passives.passive[refinement];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n} from '../data/Data';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../data/types';\nimport type { Talents } from '../talent/types';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { CharacterPassive, TeamPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport Constellation from '../constellation/Constellation';\n\nexport default class Character {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    constellationLevel = 0\n  ) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n    this._constellationLevel = constellationLevel;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n    this.talentFns = this.getTalentFns();\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n    this.constellations = this.getConstellations(this.constellationLevel);\n    this.constellationOptions = this.getConstellationsOptions(\n      this.constellationLevel\n    );\n    this.teamOptions = this.getTeamOptions();\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n  talentFns: Talents = {};\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _constellationLevel: number = 0;\n  get constellationLevel(): number {\n    return this._constellationLevel;\n  }\n  set constellationLevel(value: number) {\n    const prevConstellationLevel = this.constellationLevel;\n    this._constellationLevel = value;\n\n    this.constellations = this.getConstellations(value);\n    this.constellationOptions = this.getConstellationsOptions(\n      value,\n      prevConstellationLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  constellations: Constellation[] = [];\n\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n  constellationOptions: CharacterOption[] = [];\n  teamOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Override in derived classes\n  getTalentFns(): Talents {\n    return {};\n  }\n\n  // Override in derived classes if character has base options\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return [];\n  }\n\n  getCharacterOptions(): CharacterOption[] {\n    return this.getCharacterOptionConstuctors().map((Option) => new Option());\n  }\n\n  // Override in derived classes\n  getAllPassives(): CharacterPassive[] {\n    return [];\n  }\n\n  // Returns passives that character should have based on their current ascension\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    return this.getAllPassives().filter(\n      (passive) => ascensionLevel >= passive.ascensionLevel\n    );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(\n    ascensionLevel: number,\n    prevAscensionLevel?: number\n  ): CharacterOption[] {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  // Override in derived classes\n  getAllConstellations(): Constellation[] {\n    return [];\n  }\n\n  getConstellations(constellationLevel: number): Constellation[] {\n    return this.getAllConstellations().filter(\n      (constellation) => constellationLevel >= constellation.constellationLevel\n    );\n  }\n\n  // getConstellations should be called before this if passives are updated\n  getConstellationsOptions(\n    constellationLevel: number,\n    prevConstellationLevel?: number\n  ): CharacterOption[] {\n    if (prevConstellationLevel === undefined || isNaN(prevConstellationLevel)) {\n      return this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n    }\n\n    if (constellationLevel > prevConstellationLevel) {\n      const newOptions = this.constellations\n        .filter(\n          ({ constellationLevel }) =>\n            constellationLevel > prevConstellationLevel\n        )\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n\n      return this.constellationOptions.concat(newOptions);\n    }\n\n    if (constellationLevel < prevConstellationLevel) {\n      const keptOptionIds = this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.constellationOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (constellationLevel === prevConstellationLevel)\n    return this.constellationOptions;\n  }\n\n  getConstellationStatMixins(): StatMixin[] {\n    return this.constellations\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getConstellationModifierMixins(): ModifierMixin[] {\n    return this.constellations\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n    const constellationOptions = this.constellationOptions;\n\n    return [...characterOptions, ...passiveOptions, ...constellationOptions];\n  }\n\n  // Override in derived classes to implement team buffs\n  getTeamPassive(): TeamPassive | undefined {\n    return undefined;\n  }\n\n  getTeamStatMixin(): StatMixin | undefined {\n    return this.getTeamPassive()?.statMixin;\n  }\n\n  getTeamModifierMixin(): ModifierMixin | undefined {\n    return this.getTeamPassive()?.modifierMixin;\n  }\n\n  getTeamOptions(): CharacterOption[] {\n    const teamPassive = this.getTeamPassive();\n\n    return (\n      teamPassive?.options?.flatMap((Option) => new Option().unroll()) ?? []\n    );\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from '../data/Data';\nimport { StatMixin } from '../option/Mixin';\nimport Weapon from '../weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputted value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\n// Returns a number representing the value to display (e.g. in stat inputs)\nexport function convertStatToDisplayValue(\n  value: number,\n  isPercentage: boolean\n) {\n  if (isPercentage) {\n    return value * 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin.apply(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n  if (combinedStats.burstCritRate !== undefined) {\n    totalStats.burstCritRate = combinedStats.burstCritRate;\n  }\n\n  if (combinedStats.overloadDmgBonus !== undefined) {\n    totalStats.overloadDmgBonus = combinedStats.overloadDmgBonus;\n  }\n  if (combinedStats.burningDmgBonus !== undefined) {\n    totalStats.burningDmgBonus = combinedStats.burningDmgBonus;\n  }\n  if (combinedStats.vaporizeDmgBonus !== undefined) {\n    totalStats.vaporizeDmgBonus = combinedStats.vaporizeDmgBonus;\n  }\n  if (combinedStats.meltDmgBonus !== undefined) {\n    totalStats.meltDmgBonus = combinedStats.meltDmgBonus;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatToDisplayValue, convertStatValue } from '../stat/Stat';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setInputValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n\n  setValue(value: number) {\n    this.value = value;\n    if (this.stat !== '') {\n      this.rawValue = convertStatToDisplayValue(\n        value,\n        propMapping[this.stat].isPercentage\n      );\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  pieces: number;\n  options?: typeof ArtifactSetOption[];\n  extraStats?: Stat[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stat, Stats } from '../data/types';\nimport { getArtifactMainStatValue } from '../data/Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatInputValue(i: number, value: number) {\n    this.subStats[i].setInputValue(value);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value + (stats[subStat.stat] ?? 0);\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import { getArtifactSetData, getArtifactSetBonusData } from '../data/Data';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../data/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces: number = 0) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  // Override in derived classes to implement special set bonuses\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [];\n  }\n\n  // Returns all special set bonuses that are active for given pieces\n  getSetBonusesAt(pieces: number): ArtifactSetBonus[] {\n    return this.getAllSetBonuses().filter(\n      (setBonus) => pieces >= setBonus.pieces\n    );\n  }\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n    });\n\n    // Special bonus stats, has to be handled individually\n    let extraStats = this.setBonuses.flatMap(\n      (setBonus) => setBonus.extraStats ?? []\n    );\n\n    extraStats.forEach((statBonus) => {\n      if (stats[statBonus.stat] !== undefined) {\n        stats[statBonus.stat] += statBonus.value;\n      } else {\n        stats[statBonus.stat] = statBonus.value;\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap(\n        (setBonus) => setBonus.options ?? []\n      );\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  statMixin: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  modifierMixin: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionPicker, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class ArchaicPetra extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [archaicPetra4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('archaicpetra', 4);\n\nexport class ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value !== '') {\n        stats[`${this.value}DmgBonus`] =\n          params4Pc[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n      }\n    },\n  };\n}\n\nconst archaicPetra4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ArchaicPetra4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Berserker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [berserker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('berserker', 4);\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst berserker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Berserker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BlizzardStrayer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [blizzardStrayer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('blizzardstrayer', 4);\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[1] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst blizzardStrayer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BlizzardStrayer4PcCryoOption, BlizzardStrayer4PcFrozenOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BloodstainedChivalry extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [bloodstainedChivalry4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n\nclass BloodstainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.chargedDmgBonus = params4Pc[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst bloodstainedChivalry4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BloodstainedChivalry4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BraveHeart extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [braveHeart4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('braveheart', 4);\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst braveHeart4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BraveHeart4PcOption],\n};\n","import {\n  getArtifactSetBonusData,\n  getArtifactSetBonusParams,\n} from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\n\nexport default class CrimsonWitch extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [crimsonWitch4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('crimsonwitchofflames', 4);\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n        const param = setBonusData[2].bonuses.find(\n          ({ stat }) => stat === 'pyroDmgBonus'\n        )?.value!!;\n\n        let stacks = this.value;\n        if (stacks > 3) stacks = 3;\n        stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst crimsonWitch4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [CrimsonWitch4PcOption],\n\n  extraStats: [\n    {\n      stat: 'overloadDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'burningDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'vaporizeDmgBonus',\n      value: params4Pc[1],\n    },\n    {\n      stat: 'meltDmgBonus',\n      value: params4Pc[2],\n    },\n  ],\n};\n","import Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).statMixin !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (option as unknown as IModifierApplicable).modifierMixin !== undefined;\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import Option from './Option';\n\nexport default Option;\nexport * from './OptionUtils';\n","import { isModifierApplicable, isStatsApplicable } from '.';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetOption from './artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from './characterOptions/CharacterOption';\nimport { IModifierApplicable, IStatsApplicable } from './Option';\nimport WeaponOption from './weaponOptions/WeaponOption';\n\nexport enum Priority {\n  Normal,\n  Last,\n}\n\ninterface Mixin {\n  priority?: Priority;\n}\n\nexport interface StatMixin extends Mixin {\n  apply: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number,\n    ascensionLevel: number\n  ) => void;\n}\n\n// Do not modify stats here, use StatMixin for that purpose\nexport interface ModifierMixin extends Mixin {\n  apply: (modifier: DamageModifier, stats: Stats) => void;\n}\n\nexport type GetStatMixinsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n};\n\nexport function getStatMixins({\n  character,\n  characterOptions,\n  weapon,\n  weaponOptions,\n  artifactSets,\n  artifactSetOptions,\n  teamCharacters,\n  teamOptions,\n  artifactBuffOptions,\n}: GetStatMixinsParams): StatMixin[] {\n  const characterPassiveMixins = character.getPassiveStatMixins();\n\n  const characterConstellationMixins = character.getConstellationStatMixins();\n\n  const weaponPassiveMixins = weapon.getPassiveStatMixins();\n\n  const artifactSetMixins = artifactSets.flatMap((artifactSet) =>\n    artifactSet.getStatMixins()\n  );\n\n  const teamPassiveMixins = teamCharacters\n    .map((character) => character.getTeamStatMixin())\n    .filter((mixin): mixin is StatMixin => mixin !== undefined);\n\n  const characterOptionMixins = characterOptions\n    .filter((option): option is CharacterOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const weaponOptionMixins = weaponOptions\n    .filter((option): option is WeaponOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const artifactSetOptionMixins = artifactSetOptions\n    .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const teamOptionMixins = teamOptions\n    .filter((option): option is CharacterOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const artifactBuffOptionMixins = artifactBuffOptions\n    .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const unarrangedMixins = [\n    ...characterPassiveMixins,\n    ...characterConstellationMixins,\n    ...weaponPassiveMixins,\n    ...artifactSetMixins,\n    ...teamPassiveMixins,\n    ...characterOptionMixins,\n    ...weaponOptionMixins,\n    ...artifactSetOptionMixins,\n    ...teamOptionMixins,\n    ...artifactBuffOptionMixins,\n  ];\n  const groupedMixins = new Map<Priority, StatMixin[]>();\n  unarrangedMixins.forEach((mixin) => {\n    const priority = mixin.priority ?? Priority.Normal;\n    const array = groupedMixins.get(priority);\n    if (!array) {\n      groupedMixins.set(priority, [mixin]);\n    } else {\n      array.push(mixin);\n    }\n  });\n\n  const statMixins = [\n    ...(groupedMixins.get(Priority.Normal) ?? []),\n    ...(groupedMixins.get(Priority.Last) ?? []),\n  ];\n\n  return statMixins;\n}\n\nexport type GetModifierMixinsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n};\n\nexport function getModifierMixins({\n  character,\n  characterOptions,\n  weapon,\n  weaponOptions,\n  artifactSets,\n  artifactSetOptions,\n  teamCharacters,\n  teamOptions,\n  artifactBuffOptions,\n}: GetModifierMixinsParams): ModifierMixin[] {\n  const characterPassiveMixins = character.getPassiveModifierMixins();\n\n  const characterConstellationMixins =\n    character.getConstellationModifierMixins();\n\n  const weaponPassiveMixins = weapon.getPassiveModifierMixins();\n\n  const artifactSetMixins = artifactSets.flatMap((artifactSet) =>\n    artifactSet.getModifierMixins()\n  );\n\n  const teamPassiveMixins = teamCharacters\n    .map((character) => character.getTeamModifierMixin())\n    .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n\n  const characterOptionMixins = characterOptions\n    .filter((option): option is CharacterOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const weaponOptionMixins = weaponOptions\n    .filter((option): option is WeaponOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const artifactSetOptionMixins = artifactSetOptions\n    .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const teamOptionMixins = teamOptions\n    .filter((option): option is CharacterOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const artifactBuffOptionMixins = artifactBuffOptions\n    .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const unarrangedMixins = [\n    ...characterPassiveMixins,\n    ...characterConstellationMixins,\n    ...weaponPassiveMixins,\n    ...artifactSetMixins,\n    ...teamPassiveMixins,\n    ...characterOptionMixins,\n    ...weaponOptionMixins,\n    ...artifactSetOptionMixins,\n    ...teamOptionMixins,\n    ...artifactBuffOptionMixins,\n  ];\n  const groupedMixins = new Map<Priority, ModifierMixin[]>();\n  unarrangedMixins.forEach((mixin) => {\n    const priority = mixin.priority ?? Priority.Normal;\n    const array = groupedMixins.get(priority);\n    if (!array) {\n      groupedMixins.set(priority, [mixin]);\n    } else {\n      array.push(mixin);\n    }\n  });\n\n  const modifierMixins = [\n    ...(groupedMixins.get(Priority.Normal) ?? []),\n    ...(groupedMixins.get(Priority.Last) ?? []),\n  ];\n\n  return modifierMixins;\n}\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport type TalentFn = (props: TalentProps) => TalentValue;\n\nexport type Talents = Record<string, Record<string, TalentFn>>;\n\nexport type TalentValueSet = Record<string, Record<string, TalentValue>>;\n\nexport interface TalentValue {\n  damage: number[];\n  element?: Element;\n}\n\nexport interface TalentProps {\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  None = 'none',\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class EmblemOfSeveredFate extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [emblemOfSeveredFate4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('emblemofseveredfate', 4);\n\nconst emblemOfSeveredFate4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  statMixin: {\n    priority: Priority.Last,\n    apply: (stats: Stats) => {\n      let burstDmgBonus = params4Pc[0] * stats.energyRecharge;\n      if (burstDmgBonus > params4Pc[1]) {\n        burstDmgBonus = params4Pc[1];\n      }\n\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n    },\n  },\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Gambler extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gambler2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('gambler', 2);\n\nconst gambler2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'skillDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class GladiatorsFinale extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gladiatorsFinale4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('gladiatorsfinale', 4);\n\nconst gladiatorsFinale4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for sword, polearm, claymore characters\n  // Did not make this an Option because this would likely not want to be disabled\n  // Calculation will be wrong if used on a catalyst, bow character\n  // Checking for that would require character weapon type to be implemented first\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class HeartOfDepth extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [heartOfDepth4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('heartofdepth', 4);\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst heartOfDepth4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [HeartOfDepth4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Instructor extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [instructor4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('instructor', 4);\n\nexport class Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.elementalMastery = params4Pc[1] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst instructor4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Instructor4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Lavawalker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [lavawalker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('lavawalker', 4);\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst lavawalker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Lavawalker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MaidenBeloved extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [maidenBeloved4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('maidenbeloved', 4);\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.healedBonus = params4Pc[0] + (stats.healedBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst maidenBeloved4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MaidenBeloved4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MartialArtist extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [martialArtist2Pc, martialArtist4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('martialartist', 2);\n\nconst martialArtist2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params2Pc[0],\n    },\n    {\n      stat: 'chargedDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('martialartist', 4);\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[2] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[2] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst martialArtist4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MartialArtist4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class NoblesseOblige extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [noblesseOblige2Pc, noblesseOblige4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('noblesseoblige', 2);\n\nconst noblesseOblige2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'burstDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('noblesseoblige', 4);\n\nexport class NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst noblesseOblige4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [NoblesseOblige4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class PaleFlame extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [paleFlame4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('paleflame', 4);\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value >= 1) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n\n      if (this.value >= 2) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.physicalDmgBonus = params4Pc[3] + (stats.physicalDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst paleFlame4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [PaleFlame4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class ResolutionOfSojourner extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [resolutionOfSojourner4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('resolutionofsojourner', 4);\n\nconst resolutionOfSojourner4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  extraStats: [\n    {\n      stat: 'chargedCritRate',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class RetracingBolide extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [retracingBolide4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('retracingbolide', 4);\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst retracingBolide4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [RetracingBolide4PcOption],\n};\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Shimenawa extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [shimenawa4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('shimenawasreminiscence', 4);\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const param = params4Pc[1];\n        stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst shimenawa4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Shimenawa4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Tenacity extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tenacity4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n\nexport class Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.shieldStrength = params4Pc[1] + (stats.shieldStrength ?? 0);\n      }\n    },\n  };\n}\n\nconst tenacity4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Tenacity4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Thundersoother extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [thundersoother4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('thundersoother', 4);\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst thundersoother4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Thundersoother4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class TinyMiracle extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tinyMiracle2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('tinymiracle', 2);\n\nconst tinyMiracle2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'].map(\n    (element) => {\n      return {\n        stat: `${element}Res`,\n        value: params2Pc[0],\n      };\n    }\n  ),\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionPicker, IModifierApplicable } from '../../option/Option';\n\nexport default class ViridescentVenerer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [viridescentVenerer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('viridescentvenerer', 4);\n\nexport class ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.enemyResReduction.add(this.value as Element, params4Pc[1]);\n      }\n    },\n  };\n}\n\nconst viridescentVenerer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ViridescentVenerer4PcOption],\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class WanderersTroupe extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [wanderersTroupe4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('wandererstroupe', 4);\n\nconst wanderersTroupe4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for catalyst, bow characters\n  // See Gladiator's Finale for more details\n  extraStats: [\n    {\n      stat: 'chargedDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { Stats } from '../data/types';\nimport ArtifactSet from './ArtifactSet';\nimport ArchaicPetra from './artifactSet/ArchaicPetra';\nimport Berserker from './artifactSet/Berserker';\nimport BlizzardStrayer from './artifactSet/BlizzardStrayer';\nimport BloodstainedChivalry from './artifactSet/BloodstainedChivalry';\nimport BraveHeart from './artifactSet/BraveHeart';\nimport CrimsonWitch from './artifactSet/CrimsonWitch';\nimport EmblemOfSeveredFate from './artifactSet/EmblemOfSeveredFate';\nimport Gambler from './artifactSet/Gambler';\nimport GladiatorsFinale from './artifactSet/GladiatorsFinale';\nimport HeartOfDepth from './artifactSet/HeartOfDepth';\nimport Instructor from './artifactSet/Instructor';\nimport Lavawalker from './artifactSet/Lavawalker';\nimport MaidenBeloved from './artifactSet/MaidenBeloved';\nimport MartialArtist from './artifactSet/MartialArtist';\nimport NoblesseOblige from './artifactSet/NoblesseOblige';\nimport PaleFlame from './artifactSet/PaleFlame';\nimport ResolutionOfSojourner from './artifactSet/ResolutionOfSojourner';\nimport RetracingBolide from './artifactSet/RetracingBolide';\nimport Shimenawa from './artifactSet/Shimenawa';\nimport Tenacity from './artifactSet/Tenacity';\nimport Thundersoother from './artifactSet/Thundersoother';\nimport TinyMiracle from './artifactSet/TinyMiracle';\nimport ViridescentVenerer from './artifactSet/ViridescentVenerer';\nimport WanderersTroupe from './artifactSet/WanderersTroupe';\n\nconst artifactSets: Record<string, typeof ArtifactSet> = {\n  resolutionofsojourner: ResolutionOfSojourner,\n  tinymiracle: TinyMiracle,\n  martialartist: MartialArtist,\n  gambler: Gambler,\n  gladiatorsfinale: GladiatorsFinale,\n  viridescentvenerer: ViridescentVenerer,\n  wandererstroupe: WanderersTroupe,\n  crimsonwitchofflames: CrimsonWitch,\n  noblesseoblige: NoblesseOblige,\n  emblemofseveredfate: EmblemOfSeveredFate,\n  braveheart: BraveHeart,\n  berserker: Berserker,\n  instructor: Instructor,\n  blizzardstrayer: BlizzardStrayer,\n  thundersoother: Thundersoother,\n  lavawalker: Lavawalker,\n  maidenbeloved: MaidenBeloved,\n  bloodstainedchivalry: BloodstainedChivalry,\n  archaicpetra: ArchaicPetra,\n  retracingbolide: RetracingBolide,\n  heartofdepth: HeartOfDepth,\n  tenacityofthemillelith: Tenacity,\n  paleflame: PaleFlame,\n  shimenawasreminiscence: Shimenawa,\n};\n\nfunction getArtifactSetConstructor(id: string): typeof ArtifactSet {\n  return artifactSets[id] ?? ArtifactSet;\n}\n\nexport function initArtifactSet(id: string = '', pieces?: number) {\n  const ArtifactSetConstructor = getArtifactSetConstructor(id);\n\n  return new ArtifactSetConstructor(id, pieces);\n}\n\nexport function getAllArtifactSetBonuses(artifactSets: ArtifactSet[]): Stats {\n  return artifactSets\n    .map((artifactSet) => artifactSet.stats)\n    .reduce((acc, stats) => {\n      Object.entries(stats).forEach(([stat, value]) => {\n        acc[stat] = value + (acc[stat] ?? 0);\n      });\n      return acc;\n    }, {} as Stats);\n}\n\n/* To be implemented\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\nRelic_ReactionWindEnhance,\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionFireEnhance,\n\n// Not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionElectricEnhance: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Requires info about team composition\nRelic_AbsorbTeamElemResist: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Probably can be implemented with a dropdown option for prev received elem dmg\nRelic_ElemDmgEnhanceElemResist: defaultSetBonus,\n*/\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n}\r\n\r\nexport default Reaction;\r\n","import { Element } from '../talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import { Stats, TalentParams } from '../data/types';\nimport { AttackType, Element, ScalingType, TalentValue } from './types';\nimport Resistance from '../stat/Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport CritType from '../modifier/CritType';\n\n// Helper functions\n\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\n\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\n\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\n\nfunction calculateAmplifyingStrengthMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\n\nfunction calculateAmplifyingReactionMultiplier({\n  reaction,\n  stats,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  element: Element;\n}) {\n  const amplifyingStrength = calculateAmplifyingStrengthMultiplier(\n    reaction,\n    element\n  );\n\n  if (amplifyingStrength > 1) {\n    // Caulculate reactionbonus\n    let reactionBonus = 0;\n    switch (reaction) {\n      case Reaction.Vaporize:\n        reactionBonus = stats.vaporizeDmgBonus ?? 0;\n        break;\n      case Reaction.Melt:\n        reactionBonus = stats.meltDmgBonus ?? 0;\n        break;\n      default:\n        break;\n    }\n\n    // Calculate amplifying reaction multiplier\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingStrength * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\n\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let flatDmg = modifier.flatDmg;\n  if (attackType === AttackType.Normal) {\n    flatDmg += modifier.normalAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Charged) {\n    flatDmg += modifier.chargedAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Skill) {\n    flatDmg += modifier.skillFlatDmg ?? 0;\n  }\n\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === CritType.Crit) {\n    crit += stats.critDmg;\n  } else if (modifier.critType === CritType.Average) {\n    let critRate = stats.critRate;\n    if (attackType === AttackType.Charged) {\n      critRate += stats.chargedCritRate ?? 0;\n    } else if (attackType === AttackType.Burst) {\n      critRate += stats.burstCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateAmplifyingReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\n\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  const baseHealing = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n\n  // Incoming healing bonus is ignored because the healer's\n  // incoming healing bonus is not necessarily the same as the\n  // character being healed\n  return baseHealing * (1 + (stats.healingBonus ?? 0));\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n\n// Functions to calculate Talent Values\n\n// Used for all single-hit normal attacks\nexport function normalAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit normal attacks\nexport function normalAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: number[];\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for single-hit charged attacks\nexport function chargedAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for uncharged aim shots\nexport function aimShot({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const element = modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for charged aim shots\nexport function aimShotCharged({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier: multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all physical plunge attacks\nexport function plungeAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionPlunge ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Plunge,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all single-hit skill dmg\nexport function skillSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    scalingType,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit skills\nexport function skillMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for all single-hit burst dmg\nexport function burstSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    element,\n    multiplier,\n    scalingType,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit bursts\nexport function burstMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for damage that does not have an AttackType\nexport function typelessAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.None,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for healing skills/bursts\nexport function healingValue({\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const healing = calculateHealing({\n    stats,\n    multiplier,\n    flatHealing,\n    scalingType,\n  });\n\n  return {\n    damage: [healing],\n  };\n}\n\n// Used for all summons HP\nexport function hpValue({\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    damage: [hp],\n  };\n}\n\n// Used for all shields\nexport function shieldHpValue({\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    damage: [dmgAbsorption],\n  };\n}\n\n// Used for Bennett and Sara's ATK buffs\nexport function atkBuffValue({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const atkBonus = stats.baseAtk * multiplier;\n  return {\n    damage: [atkBonus],\n  };\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('albedo');\n\nconst albedoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  transientBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fatalBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoTalents: Talents = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport albedoTalents from './AlbedoTalent';\n\nexport default class Albedo extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('albedo', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return albedoTalents;\n  }\n}\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  children: CharacterOption[];\n\n  constructor(id: string = '', children: typeof CharacterOption[] = []) {\n    super(id);\n    this.children = children.map((Option) => new Option());\n  }\n\n  unroll(): CharacterOption[] {\n    return [this, ...this.children.flatMap((option) => option.unroll())];\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { Element, TalentType } from '../../talent/types';\r\nimport {\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n  IModifierApplicable,\r\n} from '../../option/Option';\r\n\r\nclass AloyOptionCoil\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('coil');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value > 0) {\r\n        const skillParams = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('aloy')\r\n        );\r\n\r\n        if (this.value >= 4) {\r\n          // Rushing Ice state\r\n          stats.normalDmgBonus = skillParams[7] + (stats.normalDmgBonus ?? 0);\r\n        } else {\r\n          stats.normalDmgBonus =\r\n            skillParams[this.value + 3] + (stats.normalDmgBonus ?? 0);\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value >= 4) {\r\n        modifier.infusionNormal = Element.Cryo;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyOptions = [AloyOptionCoil];\r\nexport default aloyOptions;\r\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport {\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [a1Data, a4Data] = getTalentData('aloy').passives;\r\nconst a1Params = a1Data.params;\r\nconst a4Params = a4Data.params;\r\n\r\nclass AloyOptionAscension1\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('aloyAscension1');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value) {\r\n        stats.atkBonus = a1Params[0] * 2 + (stats.atkBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension1: CharacterPassive = {\r\n  id: 'aloyAscension1',\r\n  ascensionLevel: 1,\r\n  options: [AloyOptionAscension1],\r\n};\r\n\r\nclass AloyOptionAscension4\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('aloyAscension4');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value > 0) {\r\n        let stacks = this.value;\r\n        if (stacks > 10) {\r\n          stacks = 10;\r\n        }\r\n\r\n        const cryoDmgBonus = a4Params[0] * stacks;\r\n        stats.cryoDmgBonus = cryoDmgBonus + (stats.cryoDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension4: CharacterPassive = {\r\n  id: 'aloyAscension4',\r\n  ascensionLevel: 4,\r\n  options: [AloyOptionAscension4],\r\n};\r\n\r\nconst aloyPassives = [aloyAscension1, aloyAscension4];\r\nexport default aloyPassives;\r\n","import {\r\n  Element,\r\n  TalentFn,\r\n  TalentProps,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\n\r\nconst talentData = getTalentData('aloy');\r\n\r\nconst aloyAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(0, 2),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloySkill: Record<string, TalentFn> = {\r\n  freezeBombDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chillwaterBombletDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyTalents: Talents = {\r\n  attack: aloyAttack,\r\n  skill: aloySkill,\r\n  burst: aloyBurst,\r\n};\r\n\r\nexport default aloyTalents;\r\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport aloyOptions from './AloyOption';\nimport aloyPassives from './AloyPassive';\nimport aloyTalents from './AloyTalent';\n\nexport default class Aloy extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('aloy', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return aloyTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return aloyOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return aloyPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('amber');\n\nconst amberAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst amberSkill: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  baronBunnyHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst amberBurst: Record<string, TalentFn> = {\n  dmgPerWave: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  totalDmg: ({ stats, modifier }: TalentProps) => {\n    const talentValue = burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    });\n    talentValue.damage[0] *= 18;\n    return talentValue;\n  },\n};\n\nconst amberTalents: Talents = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport amberTalents from './AmberTalent';\n\nexport default class Amber extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('amber', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return amberTalents;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ayaka');\n\nconst ayakaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[7]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaBurst: Record<string, TalentFn> = {\n  cuttingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  bloomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaTalents: Talents = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ayakaOptions from './AyakaOption';\nimport ayakaTalents from './AyakaTalent';\n\nexport default class Ayaka extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ayaka', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ayakaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ayakaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('barbara');\n\nconst barbaraAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraSkill: Record<string, TalentFn> = {\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  dropletDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraBurst: Record<string, TalentFn> = {\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraTalents: Talents = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport barbaraTalents from './BarbaraTalent';\n\nexport default class Barbara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('barbara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return barbaraTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('beidou').passives;\nconst a4Params = a4Data.params;\n\nclass BeidouOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('beidouAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = a4Params[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = a4Params[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst beidouAscension4: CharacterPassive = {\n  id: 'beidouAscension4',\n  ascensionLevel: 4,\n  options: [BeidouOptionAscension4],\n};\n\nconst beidouPassives = [beidouAscension4];\nexport default beidouPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  chargedAttackSingle,\n  shieldHpValue,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('beidou');\n\nconst beidouAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouSkill: Record<string, TalentFn> = {\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  baseDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  dmgBonusOnHitTaken: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouBurst: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightningDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouTalents: Talents = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalents;\n","import { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport beidouPassives from './BeidouPassive';\nimport beidouTalents from './BeidouTalent';\n\nexport default class Beidou extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('beidou', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return beidouTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return beidouPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  atkBuffValue,\n  burstSingle,\n  chargedAttackMulti,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillMulti,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('bennett');\n\nconst bennettAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargeLevel1Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n  chargeLevel2Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousPerSecond: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  atkBonus: ({ stats, modifier }: TalentProps) =>\n    atkBuffValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettTalents: Talents = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalents;\n","import {\n  IOptionBoolean,\n  IOptionNumber,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Stats } from '../../data/types';\nimport { getOptionValue } from '../../option/OptionUtils';\nimport { TeamPassive } from '../../passive/types';\n\nclass BennettOptionAtkBuff extends CharacterOption implements IOptionNumber {\n  value = 0;\n\n  constructor() {\n    super('bennettAtkBuff');\n  }\n}\n\nclass BennettOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('bennettBurst', [BennettOptionAtkBuff]);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const atkBuff = getOptionValue(this.children[0]) as number;\n        stats.flatAtk = atkBuff + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n}\n\nconst bennettTeamPassive: TeamPassive = {\n  id: 'bennettTeamPassive',\n  options: [BennettOptionBurst],\n};\nexport default bennettTeamPassive;\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport bennettTalents from './BennettTalent';\nimport bennettTeamPassive from './BennettTeamPassive';\n\nexport default class Bennett extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('bennett', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return bennettTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return bennettTeamPassive;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('chongyun');\n\nconst chongyunAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunTalents: Talents = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport chongyunOptions from './ChongyunOption';\nimport chongyunTalents from './ChongyunTalent';\n\nexport default class Chongyun extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('chongyun', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return chongyunTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return chongyunOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diluc');\n\nconst dilucAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucSkill: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucTalents: Talents = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalents;\n","import { Stats } from '../../data/types';\nimport { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      _talentBurstLevel: number,\n      ascensionLevel: number\n    ) => {\n      if (this.value && ascensionLevel >= 4) {\n        const params = getTalentData('diluc').passives.find(\n          (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n        )?.params;\n        const pyroDmgBonus = params?.[1] ?? NaN;\n\n        stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dilucTalents from './DilucTalent';\nimport dilucOptions from './DilucOption';\n\nexport default class Diluc extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diluc', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dilucTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return dilucOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  shieldHpValue,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diona');\n\nconst dionaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaSkill: Record<string, TalentFn> = {\n  icyPawDmgPerPaw: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpPress: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  shieldHpHold: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier: { ...modifier, dionaHoldSkill: true },\n    }),\n};\n\nconst dionaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  continuousFieldDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousTime: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaTalents: Talents = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dionaTalents from './DionaTalent';\n\nexport default class Diona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dionaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('eula');\n\nconst eulaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  icewhirlBrandDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordBaseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordStackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaTalents: Talents = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport eulaTalents from './EulaTalent';\n\nexport default class Eula extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('eula', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return eulaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('fischl');\n\nconst fischlAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlSkill: Record<string, TalentFn> = {\n  ozDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  summoningDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlBurst: Record<string, TalentFn> = {\n  fallingThunderDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlTalents: Talents = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport fischlTalents from './FischlTalent';\n\nexport default class Fischl extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('fischl', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return fischlTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  hpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ganyu');\n\nconst ganyuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  aimShotChargeLevel1: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowBloomDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  iceLotusHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuBurst: Record<string, TalentFn> = {\n  iceShardDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuTalents: Talents = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ganyuTalents from './GanyuTalent';\n\nexport default class Ganyu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ganyu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ganyuTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('hutao').passives;\nconst a4Params = a4Data.params;\n\nclass HuTaoOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('hutaoAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.pyroDmgBonus = a4Params[1] + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst hutaoAscension4: CharacterPassive = {\n  id: 'hutaoAscension4',\n  ascensionLevel: 4,\n  options: [HuTaoOptionAscension4],\n};\n\nconst hutaoPassives = [hutaoAscension4];\nexport default hutaoPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('hutao');\n\nconst hutaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoSkill: Record<string, TalentFn> = {\n  bloodBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgLowHp: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n\n  hpRegenLowHp: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoTalents: Talents = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      talentSkillLevel: number,\n      _talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let skillParams = getTalentParams(\n          TalentType.Skill,\n          talentSkillLevel,\n          getTalentData('hutao')\n        );\n\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n        let flatAtkBonus = totalHp * skillParams[1];\n        if (flatAtkBonus > stats.baseAtk * skillParams[6]) {\n          flatAtkBonus = stats.baseAtk * skillParams[6];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport hutaoPassives from './HutaoPassive';\nimport hutaoTalents from './HutaoTalent';\nimport hutaoOptions from './HutaoOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Hutao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('hutao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return hutaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return hutaoOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return hutaoPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('jean');\n\nconst jeanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieldEnterExitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  fieldActivationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanTalents: Talents = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport jeanTalents from './JeanTalent';\n\nexport default class Jean extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('jean', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return jeanTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kaeya');\n\nconst kaeyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaTalents: Talents = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kaeyaTalents from './KaeyaTalent';\n\nexport default class Kaeya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kaeya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kaeyaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kazuha');\n\nconst kazuhaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[2],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst kazuhaTalents: Talents = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.elementalAbsorption = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionPlunge = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kazuhaTalents from './KazuhaTalent';\nimport kazuhaOptions from './KazuhaOption';\n\nexport default class Kazuha extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kazuha', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kazuhaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kazuhaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('keqing');\n\nconst keqingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingSkill: Record<string, TalentFn> = {\n  lightningStilettoDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  thunderclapSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Electro,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  consecutiveSlashDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 8,\n      element: Element.Electro,\n      params: Array(8).fill(\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1]\n      ),\n      stats,\n      modifier,\n    }),\n\n  lastAttackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingTalents: Talents = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport keqingTalents from './KeqingTalent';\n\nexport default class Keqing extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('keqing', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return keqingTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('klee');\n\nconst kleeAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeSkill: Record<string, TalentFn> = {\n  jumpyDumptyDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  mineDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeBurst: Record<string, TalentFn> = {\n  sparksNSplashDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeTalents: Talents = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kleeTalents from './KleeTalent';\n\nexport default class Klee extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('klee', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kleeTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('kokomi').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst kokomiAscension0: CharacterPassive = {\r\n  id: 'kokomiAscension0',\r\n  ascensionLevel: 0,\r\n  options: [],\r\n  statMixin: {\r\n    apply: (stats: Stats) => {\r\n      stats.critRate = (stats.critRate ?? 0) - 1;\r\n      if (stats.critRate < 0) {\r\n        stats.critRate = 0;\r\n      }\r\n\r\n      stats.healingBonus = 0.25 + (stats.healingBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiAscension4: CharacterPassive = {\r\n  id: 'kokomiAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  modifierMixin: {\r\n    apply: (modifier: DamageModifier) => {\r\n      modifier.kokomiHealingBonusDmg = a4Params[0];\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiPassives = [kokomiAscension0, kokomiAscension4];\r\nexport default kokomiPassives;\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  burstSingle,\r\n  chargedAttackSingle,\r\n  healingValue,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  ScalingType,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('kokomi');\r\n\r\nconst kokomiAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier: getKokomiChargedAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiSkill: Record<string, TalentFn> = {\r\n  hpRegen: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  rippleDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiSkillModifier(stats, modifier),\r\n    }),\r\n};\r\n\r\nconst kokomiBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      scalingType: ScalingType.Hp,\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiTalents: Talents = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getKokomiNormalAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const normalAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[3] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.normalAttackFlatDmg =\r\n    normalAttackBonusDmg + (newModifier.normalAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiChargedAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const chargedAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[4] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.chargedAttackFlatDmg =\r\n    chargedAttackBonusDmg + (newModifier.chargedAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiSkillModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const skillBonusDmg =\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[8] * stats.flatHp;\r\n  newModifier.skillFlatDmg = skillBonusDmg + (newModifier.skillFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value) {\r\n        modifier.kokomiBurst = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kokomiPassives from './KokomiPassive';\nimport kokomiTalents from './KokomiTalent';\nimport kokomiOptions from './KokomiOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Kokomi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kokomi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kokomiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kokomiOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return kokomiPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('lisa');\n\nconst lisaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack0: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack1: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack2: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack3: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaTalents: Talents = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport lisaTalents from './LisaTalent';\n\nexport default class Lisa extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('lisa', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return lisaTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { TalentType } from '../../talent/types';\n\nclass MonaOptionOmen\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('omen');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('mona')\n        );\n\n        stats.dmgBonus = burstParams[9] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst monaOptions = [MonaOptionOmen];\nexport default monaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('mona');\n\nconst monaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaSkill: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaBurst: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaTalents: Talents = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport monaOptions from './MonaOption';\nimport monaTalents from './MonaTalent';\n\nexport default class Mona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('mona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return monaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return monaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ningguang');\n\nconst ningguangAttack: Record<string, TalentFn> = {\n  normalAtkDmg: ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  starJadeDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  jadeScreenHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangBurst: Record<string, TalentFn> = {\n  dmgPerGem: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangTalents: Talents = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ningguangTalents from './NingguangTalent';\n\nexport default class Ningguang extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ningguang', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ningguangTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  skillSingle,\n  shieldHpValue,\n  healingValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('noelle');\n\nconst noelleAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  firstSwingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleTalents: Talents = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('noelle')\n        );\n\n        const totalDef =\n          (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n          (stats.flatDef ?? 0);\n\n        stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Geo;\n      }\n    },\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport noelleTalents from './NoelleTalent';\nimport noelleOptions from './NoelleOption';\n\nexport default class Noelle extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('noelle', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return noelleTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return noelleOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  healingValue,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('qiqi');\n\nconst qiqiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  heraldOfFrostDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiTalents: Talents = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport qiqiTalents from './QiqiTalent';\n\nexport default class Qiqi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('qiqi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return qiqiTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport { Priority } from '../../option/Mixin';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('raiden').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst raidenAscension4: CharacterPassive = {\r\n  id: 'raidenAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  statMixin: {\r\n    priority: Priority.Last,\r\n    apply: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = a4Params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst raidenPassives = [raidenAscension4];\r\nexport default raidenPassives;\r\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  normalAttackSingle,\r\n  chargedAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  burstMulti,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('raiden');\r\n\r\nconst raidenAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(3, 5),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[10],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenSkill: Record<string, TalentFn> = {\r\n  skillDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  coordinatedAtkDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenBurst: Record<string, TalentFn> = {\r\n  musouNoHitotachiDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[0] + getInitialResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[4] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[5] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[6] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(7, 9)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[9] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(10, 12)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[13] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[14] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[15] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenTalents: Talents = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getInitialResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[1] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n\r\nfunction getAttackResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[2] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentParams, getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value) {\r\n        const params = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('raiden')\r\n        );\r\n\r\n        const burstDmgBonus = params[3] * 90;\r\n        stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value < 0) modifier.resolveStacks = 0;\r\n      else if (this.value > 60) modifier.resolveStacks = 60;\r\n      else modifier.resolveStacks = this.value;\r\n    },\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport raidenPassives from './RaidenPassive';\nimport raidenTalents from './RaidenTalent';\nimport raidenOptions from './RaidenOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Raiden extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('raiden', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return raidenTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return raidenOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return raidenPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('razor');\n\nconst razorAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorTalents: Talents = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport razorTalents from './RazorTalent';\n\nexport default class Razor extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('razor', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return razorTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('rosaria');\n\nconst rosariaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n  iceLanceDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaTalents: Talents = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport rosariaTalents from './RosariaTalent';\n\nexport default class Rosaria extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('rosaria', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return rosariaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  atkBuffValue,\r\n  burstSingle,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  TalentFn,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('sara');\r\n\r\nconst saraAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraSkill: Record<string, TalentFn> = {\r\n  tenguJuuraiAmbushDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  atkBonus: ({ stats, modifier }: TalentProps) =>\r\n    atkBuffValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraBurst: Record<string, TalentFn> = {\r\n  tenguJuuraiTitanbreakerDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  tenguJuuraiStormclusterDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraTalents: Talents = {\r\n  attack: saraAttack,\r\n  skill: saraSkill,\r\n  burst: saraBurst,\r\n};\r\n\r\nexport default saraTalents;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport saraTalents from './SaraTalent';\n\nexport default class Sara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return saraTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sayu');\n\nconst sayuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuSkill: Record<string, TalentFn> = {\n  fuufuuWindwheelDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickPressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickHoldDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWindwheelElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n\n  fuufuuWhirlwindKickElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[4],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sayuBurst: Record<string, TalentFn> = {\n  activationDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  activationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuTalents: Talents = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sayuTalents from './SayuTalent';\nimport sayuOptions from './SayuOption';\n\nexport default class Sayu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sayu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sayuTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sayuOptions;\n  }\n}\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sucrose');\n\nconst sucroseAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sucroseTalents: Talents = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sucroseOptions from './SucroseOption';\nimport sucroseTalents from './SucroseTalent';\n\nexport default class Sucrose extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sucrose', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sucroseTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sucroseOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  typelessAttack,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('tartaglia');\n\nconst tartagliaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n\n  riptideFlashDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  riptideBurstDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaSkill: Record<string, TalentFn> = {\n  stanceChangeDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(8, 10),\n      stats,\n      modifier,\n    }),\n\n  riptideSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaBurst: Record<string, TalentFn> = {\n  burstDmgMelee: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgRanged: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  riptideBlastDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaTalents: Talents = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nexport const tartagliaAscension0: CharacterPassive = {\n  id: 'tartagliaAscension0',\n  ascensionLevel: 0,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.talentAttackLevel += 1;\n    },\n  },\n};\n\nconst tartagliaPassives = [tartagliaAscension0];\nexport default tartagliaPassives;\n","import { TeamPassive } from '../../passive/types';\nimport { tartagliaAscension0 } from './TartagliaPassive';\n\nconst tartagliaTeamPassive: TeamPassive = tartagliaAscension0;\nexport default tartagliaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport tartagliaTalents from './TartagliaTalent';\nimport tartagliaPassives from './TartagliaPassive';\nimport tartagliaTeamPassive from './TartagliaTeamPassive';\n\nexport default class Tartaglia extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('tartaglia', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return tartagliaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return tartagliaPassives;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return tartagliaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('thoma');\n\nconst thomaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  shieldHpMax: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieryCollapseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier: getThomaFieryCollapseModifier(stats, modifier),\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatBonus: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaTalents: Talents = {\n  attack: thomaAttack,\n  skill: thomaSkill,\n  burst: thomaBurst,\n};\n\nexport default thomaTalents;\n\n// Helper functions\n\nfunction getThomaFieryCollapseModifier(\n  stats: Stats,\n  modifier: DamageModifier\n): DamageModifier {\n  if (!modifier.thomaHpBonusDmg) {\n    return modifier;\n  }\n\n  const flatDmg = modifier.thomaHpBonusDmg * stats.flatHp + modifier.flatDmg;\n\n  return { ...modifier, flatDmg };\n}\n","import { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('thoma').passives;\nconst a4Params = a4Data.params;\n\nconst thomaAscension4: CharacterPassive = {\n  id: 'thomaAscension4',\n  ascensionLevel: 4,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.thomaHpBonusDmg = a4Params[0];\n    },\n  },\n};\n\nconst thomaPassives = [thomaAscension4];\nexport default thomaPassives;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport Constellation, {\n  ConstellationBurst,\n  ConstellationSkill,\n} from '../../constellation/Constellation';\n\nconst [, , , , , { params: c6Params }] = getTalentData('thoma').constellations;\n\nexport function ThomaOptionConstellation6(id?: string) {\n  return class ThomaOptionConstellation6\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super(id ?? 'thomaConstellation6');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = c6Params[0] + (stats.normalDmgBonus ?? 0);\n          stats.chargedDmgBonus = c6Params[0] + (stats.chargedDmgBonus ?? 0);\n          stats.plungeDmgBonus = c6Params[0] + (stats.plungeDmgBonus ?? 0);\n        }\n      },\n    };\n  };\n}\n\nconst thomaConstellation3 = ConstellationSkill(3);\nconst thomaConstellation5 = ConstellationBurst(5);\n\nconst thomaConstellation6: Constellation = {\n  constellationLevel: 6,\n  options: [ThomaOptionConstellation6()],\n};\n\nconst thomaConstellations = [\n  thomaConstellation3,\n  thomaConstellation5,\n  thomaConstellation6,\n];\nexport default thomaConstellations;\n","import DamageModifier from '../modifier/DamageModifer';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { StatMixin, ModifierMixin } from '../option/Mixin';\n\nexport default interface Constellation {\n  constellationLevel: number;\n  options?: typeof CharacterOption[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n\nexport function ConstellationSkill(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentSkillLevel += 3;\n      },\n    },\n  };\n}\n\nexport function ConstellationBurst(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentBurstLevel += 3;\n      },\n    },\n  };\n}\n","import { TeamPassive } from '../../passive/types';\nimport { ThomaOptionConstellation6 } from './ThomaConstellation';\n\nconst thomaTeamPassive: TeamPassive = {\n  id: 'thomaTeamPassive',\n  options: [ThomaOptionConstellation6('thomaConstellation6Team')],\n};\n\nexport default thomaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport thomaTalents from './ThomaTalent';\nimport thomaPassives from './ThomaPassive';\nimport Constellation from '../../constellation/Constellation';\nimport thomaConstellations from './ThomaConstellation';\nimport thomaTeamPassive from './ThomaTeamPassive';\n\nexport default class Thoma extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('thoma', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return thomaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return thomaPassives;\n  }\n\n  getAllConstellations(): Constellation[] {\n    return thomaConstellations;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return thomaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('venti');\n\nconst ventiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst ventiTalents: Talents = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ventiTalents from './VentiTalent';\nimport ventiOptions from './VentiOption';\n\nexport default class Venti extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('venti', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ventiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ventiOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiangling');\n\nconst xianglingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingSkill: Record<string, TalentFn> = {\n  guobaDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingBurst: Record<string, TalentFn> = {\n  swing1HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  swing2HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  swing3HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  pyronadoDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingTalents: Talents = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xianglingTalents from './XianglingTalent';\n\nexport default class Xiangling extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiangling', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xianglingTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('xiao')\n        );\n\n        stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiao');\n\nconst xiaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoTalents: Talents = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n};\n\nexport default xiaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xiaoOptions from './XiaoOption';\nimport xiaoTalents from './XiaoTalent';\n\nexport default class Xiao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xiaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return xiaoOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, TalentFn, Talents, Element, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('xingqiu');\n\nconst xingqiuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(7, 9),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuBurst: Record<string, TalentFn> = {\n  swordRainDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuTalents: Talents = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xingqiuTalents from './XingqiuTalent';\n\nexport default class Xingqiu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xingqiu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xingqiuTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xinyan');\n\nconst xinyanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanSkill: Record<string, TalentFn> = {\n  swingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel1: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel2: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel3: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Physical,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  pyroDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanTalents: Talents = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xinyanTalents from './XinyanTalent';\n\nexport default class Xinyan extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xinyan', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xinyanTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('yanfei')\n        );\n        stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('yanfei');\n\nconst yanfeiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal0: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal1: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal2: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal3: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal4: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[15],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[16],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[17],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiTalents: Talents = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yanfeiOptions from './YanfeiOption';\nimport yanfeiTalents from './YanfeiTalent';\n\nexport default class Yanfei extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yanfei', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yanfeiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yanfeiOptions;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionNormal = Element.Pyro;\n        modifier.yoimiyaSkill = true;\n      }\n    },\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [a1Data] = getTalentData('yoimiya').passives;\nconst a1Params = a1Data.params;\n\nclass YoimiyaOptionAscension1\n  extends CharacterOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('yoimiyaAscension1');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      let pyroDmgBonus = this.value * a1Params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    },\n  };\n}\n\nconst yoimiyaAscension1: CharacterPassive = {\n  id: 'yoimiyaAscension1',\n  ascensionLevel: 1,\n  options: [YoimiyaOptionAscension1],\n};\n\nconst yoimiyaPassives = [yoimiyaAscension1];\nexport default yoimiyaPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('yoimiya');\n\nconst yoimiyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[0],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[3],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  kindlingArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  aurousBlazeExplosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaTalents: Talents = {\n  attack: yoimiyaAttack,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalents;\n\n// Helper functions\n\nfunction getYoimiyaNormalAttackMultiplier(\n  multiplier: number,\n  modifier: DamageModifier\n): number {\n  if (!modifier.yoimiyaSkill) {\n    return multiplier;\n  }\n\n  return (\n    multiplier *\n    getTalentParams(TalentType.Skill, modifier.talentSkillLevel, talentData)[3]\n  );\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yoimiyaOptions from './YoimiyaOption';\nimport yoimiyaPassives from './YoimiyaPassive';\nimport yoimiyaTalents from './YoimiyaTalent';\n\nexport default class Yoimiya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yoimiya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yoimiyaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yoimiyaOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return yoimiyaPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('zhongli');\n\nconst zhongliAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliSkill: Record<string, TalentFn> = {\n  stoneSteeleDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  resonanceDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliTalents: Talents = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalents;\n","import { IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { TeamPassive } from '../../passive/types';\n\nclass ZhongliOptionShield extends CharacterOption implements IOptionBoolean {\n  value = false;\n\n  constructor() {\n    super('zhongliShield');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        Object.values(Element).forEach((element) =>\n          modifier.enemyResReduction.set(element, 0.2)\n        );\n      }\n    },\n  };\n}\n\nconst zhongliTeamPassive: TeamPassive = {\n  id: 'zhongliTeamPassive',\n  options: [ZhongliOptionShield],\n};\nexport default zhongliTeamPassive;\n","import Albedo from './albedo/Albedo';\nimport Aloy from './aloy/Aloy';\nimport Amber from './amber/Amber';\nimport Ayaka from './ayaka/Ayaka';\nimport Barbara from './barbara/Barbara';\nimport Beidou from './beidou/Beidou';\nimport Bennett from './bennett/Bennett';\nimport Character from './Character';\nimport Chongyun from './chongyun/Chongyun';\nimport Diluc from './diluc/Diluc';\nimport Diona from './diona/Diona';\nimport Eula from './eula/Eula';\nimport Fischl from './fischl/Fischl';\nimport Ganyu from './ganyu/Ganyu';\nimport Hutao from './hutao/Hutao';\nimport Jean from './jean/Jean';\nimport Kaeya from './kaeya/Kaeya';\nimport Kazuha from './kazuha/Kazuha';\nimport Keqing from './keqing/Keqing';\nimport Klee from './klee/Klee';\nimport Kokomi from './kokomi/Kokomi';\nimport Lisa from './lisa/Lisa';\nimport Mona from './mona/Mona';\nimport Ningguang from './ningguang/Ningguang';\nimport Noelle from './noelle/Noelle';\nimport Qiqi from './qiqi/Qiqi';\nimport Raiden from './raiden/Raiden';\nimport Razor from './razor/Razor';\nimport Rosaria from './rosaria/Rosaria';\nimport Sara from './sara/Sara';\nimport Sayu from './sayu/Sayu';\nimport Sucrose from './sucrose/Sucrose';\nimport Tartaglia from './tartaglia/Tartaglia';\nimport Thoma from './thoma/Thoma';\nimport Venti from './venti/Venti';\nimport Xiangling from './xiangling/Xiangling';\nimport Xiao from './xiao/Xiao';\nimport Xingqiu from './xingqiu/Xingqiu';\nimport Xinyan from './xinyan/Xinyan';\nimport Yanfei from './yanfei/Yanfei';\nimport Yoimiya from './yoimiya/Yoimiya';\nimport Zhongli from './zhongli/Zhongli';\n\nconst characters: Record<string, typeof Character> = {\n  albedo: Albedo,\n  aloy: Aloy,\n  amber: Amber,\n  ayaka: Ayaka,\n  barbara: Barbara,\n  beidou: Beidou,\n  bennett: Bennett,\n  chongyun: Chongyun,\n  diluc: Diluc,\n  diona: Diona,\n  eula: Eula,\n  fischl: Fischl,\n  ganyu: Ganyu,\n  hutao: Hutao,\n  jean: Jean,\n  kaeya: Kaeya,\n  kazuha: Kazuha,\n  keqing: Keqing,\n  klee: Klee,\n  kokomi: Kokomi,\n  lisa: Lisa,\n  mona: Mona,\n  ningguang: Ningguang,\n  noelle: Noelle,\n  qiqi: Qiqi,\n  raiden: Raiden,\n  razor: Razor,\n  rosaria: Rosaria,\n  sara: Sara,\n  sayu: Sayu,\n  sucrose: Sucrose,\n  tartaglia: Tartaglia,\n  thoma: Thoma,\n  venti: Venti,\n  xiangling: Xiangling,\n  xiao: Xiao,\n  xingqiu: Xingqiu,\n  xinyan: Xinyan,\n  yanfei: Yanfei,\n  yoimiya: Yoimiya,\n  zhongli: Zhongli,\n};\n\nfunction getCharacterConstructor(id: string): typeof Character {\n  return characters[id] ?? Character;\n}\n\nexport function initCharacter(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  constellationLevel?: number\n): Character {\n  const CharacterConstructor = getCharacterConstructor(id);\n\n  return new CharacterConstructor(id, level, hasAscended, constellationLevel);\n}\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport zhongliTalents from './ZhongliTalent';\nimport zhongliTeamPassive from './ZhongliTeamPassive';\n\nexport default class Zhongli extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('zhongli', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return zhongliTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return zhongliTeamPassive;\n  }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          type='number'\n          size='sm'\n          value={displayString}\n          onInput={this.handleInput}\n          className={`number-input ${this.props.className ?? ''}`}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\nimport Row from 'react-bootstrap/esm/Row';\n\nclass InputRow extends React.Component {\n  render() {\n    return <Row className='input-row no-gutters'>{this.props.children}</Row>;\n  }\n}\n\nexport default InputRow;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          as='select'\n          size='sm'\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={`picker ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </Form.Control>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../artifact/Artifact';\nimport { propMapping } from '../data/Data';\nimport { capitalize, getStatDisplayValue } from '../stat/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactRarity = (rarity: number) => {\n    this.props.artifact.rarity = rarity;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactLevel = (level: number) => {\n    this.props.artifact.level = level;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatInputValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-rarity`}\n            label='Rarity:'\n            defaultValue={1}\n            value={artifact.rarity}\n            onInput={this.setArtifactRarity}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-level`}\n            label='Level:'\n            defaultValue={0}\n            value={artifact.level}\n            onInput={this.setArtifactLevel}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label='Main Stat:'\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <p>\n            {getStatDisplayValue(\n              artifact.mainStat.stat,\n              artifact.mainStat.value\n            )}\n          </p>\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import { Stats } from '../data/types';\nimport { ModifierMixin } from '../option/Mixin';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport CritType from './CritType';\nimport Reaction from './Reaction';\n\nexport default interface DamageModifier\n  extends DamageModifierBase,\n    DamageModiferOptional {}\n\ninterface DamageModifierBase {\n  characterLevel: number;\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  enemyResReduction: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n}\n\ninterface DamageModiferOptional {\n  normalAttackFlatDmg?: number;\n  chargedAttackFlatDmg?: number;\n  skillFlatDmg?: number;\n\n  infusion?: Element;\n  infusionNormal?: Element;\n  infusionPlunge?: Element;\n\n  elementalAbsorption?: Element;\n\n  dionaHoldSkill?: boolean;\n\n  yoimiyaSkill?: boolean;\n\n  thomaHpBonusDmg?: number;\n\n  resolveStacks?: number;\n\n  kokomiBurst?: boolean;\n  kokomiHealingBonusDmg?: number;\n}\n\nexport type GetDamageModifierParams = {\n  characterLevel: number;\n  enemyLevel: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n  modifierMixins: ModifierMixin[];\n  stats: Stats;\n};\n\nexport function getDamageModifier({\n  characterLevel,\n  enemyLevel,\n  enemyRes,\n  critType,\n  reaction,\n  talentAttackLevel,\n  talentSkillLevel,\n  talentBurstLevel,\n  modifierMixins,\n  stats,\n}: GetDamageModifierParams): DamageModifier {\n  const modifier: DamageModifier = {\n    characterLevel,\n    enemyLevel,\n    enemyDefReduction: 0,\n    enemyRes,\n    enemyResReduction: new Resistance(),\n    critType: critType,\n    flatDmg: 0,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  };\n\n  // Apply modifier mixins\n  modifierMixins.forEach((mixin) => mixin.apply(modifier, stats));\n\n  return modifier;\n}\n","import { ArchaicPetra4PcOption } from '../../artifact/artifactSet/ArchaicPetra';\nimport { Instructor4PcOption } from '../../artifact/artifactSet/Instructor';\nimport { NoblesseOblige4PcOption } from '../../artifact/artifactSet/NoblesseOblige';\nimport { Tenacity4PcOption } from '../../artifact/artifactSet/Tenacity';\nimport { ViridescentVenerer4PcOption } from '../../artifact/artifactSet/ViridescentVenerer';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\n\nconst artifactTeamBuffs: Record<string, typeof ArtifactSetOption> = {\n  archaicPetra4Pc: ArchaicPetra4PcOption,\n  instructor4Pc: Instructor4PcOption,\n  noblesseOblige4Pc: NoblesseOblige4PcOption,\n  tenacity4Pc: Tenacity4PcOption,\n  viridescentVenerer4Pc: ViridescentVenerer4PcOption,\n};\n\nexport default artifactTeamBuffs;\n","import Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { Stats } from '../data/types';\nimport CritType from '../modifier/CritType';\nimport { getDamageModifier } from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport { getModifierMixins, getStatMixins } from '../option/Mixin';\nimport Option from '../option/Option';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Resistance from '../stat/Resistance';\nimport { getTotalStatsAt } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\nimport Weapon from '../weapon/Weapon';\n\nexport type CalculateTalentValueParams = {\n  talentType: string;\n  talentId: string;\n  options: Option[];\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n  artifactSets: ArtifactSet[];\n  artifactSetBonuses: Stats;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n  enemyLevel: number;\n  enemyRes: Resistance;\n  reaction: Reaction;\n  critType: CritType;\n  teamCharacters: Character[];\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n};\n\nexport function calculateTalentValue({\n  talentType,\n  talentId,\n  options,\n  character,\n  weapon,\n  artifacts,\n  artifactSets,\n  artifactSetBonuses,\n  talentAttackLevel,\n  talentSkillLevel,\n  talentBurstLevel,\n  enemyLevel,\n  enemyRes,\n  reaction,\n  critType,\n  teamCharacters,\n  characterOptions,\n  weaponOptions,\n  artifactSetOptions,\n  teamOptions,\n  artifactBuffOptions,\n}: CalculateTalentValueParams): TalentValue {\n  // Initialize a set of all options\n  const {\n    characterOptions: characterOptionsNew,\n    weaponOptions: weaponOptionsNew,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n  } = initializeAllOptions({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n  });\n\n  const allOptions = [\n    ...characterOptionsNew,\n    ...weaponOptionsNew,\n    ...artifactSetOptionsNew,\n    ...teamOptionsNew,\n    ...artifactBuffOptionsNew,\n  ];\n\n  // Override option values\n  options.forEach((option) => {\n    let newOption = allOptions.find((newOption) => newOption.id === option.id);\n    if (newOption !== undefined) {\n      setOptionValue(newOption, getOptionValue(option));\n    } else if (option.id === 'reaction') {\n      characterOptionsNew.push(option as ReactionOption);\n    }\n  });\n\n  // Calculate stats and modifier\n  const statMixins = getStatMixins({\n    character,\n    characterOptions: characterOptionsNew,\n    weapon,\n    weaponOptions: weaponOptionsNew,\n    artifactSets,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamCharacters,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n  });\n\n  const stats = getTotalStatsAt(\n    character,\n    weapon,\n    artifactSetBonuses,\n    artifacts,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    statMixins\n  );\n\n  const modifierMixins = getModifierMixins({\n    character,\n    characterOptions: characterOptionsNew,\n    weapon,\n    weaponOptions: weaponOptionsNew,\n    artifactSets,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamCharacters,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n  });\n\n  const modifier = getDamageModifier({\n    characterLevel: character.level,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n    stats,\n  });\n\n  // Calculate talent value\n  const talentFn = character.talentFns[talentType]?.[talentId];\n\n  const talentValue = talentFn?.({ stats, modifier }) ?? { damage: [NaN] };\n\n  return talentValue;\n}\n\ntype InitializeAllOptionsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n};\n\nexport function initializeAllOptions(params: InitializeAllOptionsParams) {\n  const characterOptions = [\n    ...params.character.getCharacterOptions(),\n    ...params.character.getPassiveOptions(\n      getAscensionLevel(params.character.level, params.character.hasAscended)\n    ),\n    ...params.character.getConstellationsOptions(\n      params.character.constellationLevel\n    ),\n  ];\n  params.characterOptions.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, getOptionValue(option));\n    }\n  });\n\n  const weaponOptions = params.weapon.getPassiveOptions();\n  params.weaponOptions.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, getOptionValue(option));\n    }\n  });\n\n  const artifactSetOptions = params.artifactSets.flatMap((artifactSet) =>\n    artifactSet.getOptions(artifactSet.pieces)\n  );\n  params.artifactSetOptions.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, getOptionValue(option));\n    }\n  });\n\n  const teamOptions = params.teamCharacters.flatMap((character) =>\n    character.getTeamOptions()\n  );\n  params.teamOptions.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, getOptionValue(option));\n    }\n  });\n\n  const artifactBuffOptions = params.artifactBuffOptions.flatMap((option) => {\n    const OptionConstructor = artifactTeamBuffs[option.id];\n    if (OptionConstructor !== undefined) {\n      let artifactOption = new OptionConstructor();\n      setOptionValue(artifactOption, getOptionValue(option));\n      return [artifactOption];\n    }\n\n    return [];\n  });\n\n  return {\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  };\n}\n","import Artifact from '../artifact/Artifact';\nimport { Attack } from '../component/DPSColumn';\nimport {\n  calculateTalentValue,\n  CalculateTalentValueParams,\n} from '../dps/DPSCalculator';\nimport { getStatMixins } from '../option/Mixin';\nimport { getTotalStatsAt } from '../stat/Stat';\n\nexport type RollDistribution = {\n  stat: string;\n  rolls: number;\n};\n\ntype SubstatOptimizerResult = {\n  subStatRolls: RollDistribution[];\n  artifacts: Artifact[];\n};\n\n// Average substat rolls, as per KQM guidelines\nexport const substats: Record<string, number> = {\n  hpBonus: 0.0496,\n  flatHp: 253.94,\n  atkBonus: 0.0496,\n  flatAtk: 16.54,\n  defBonus: 0.062,\n  flatDef: 19.68,\n  elementalMastery: 19.82,\n  energyRecharge: 0.0551,\n  critRate: 0.0331,\n  critDmg: 0.0662,\n};\n\n// Optimize substats according to KQM standardized guidelines\n// 20 preallocated fixed subs (2 of each substat)\n// maxRolls liquid subs (default/max = 20)\n// each sub type can have maximum 2 rolls per different main stat type\nexport function optimizeSubstats(\n  possibleStats: string[],\n  maxRolls: number,\n  erThreshold: number,\n  rotation: Attack[],\n  calcParams: Omit<\n    CalculateTalentValueParams,\n    'talentType' | 'talentId' | 'options'\n  >\n): SubstatOptimizerResult {\n  let maxDmg = 0;\n  let optimalSubstatRolls: RollDistribution[] = [];\n  let optimalArtifacts: Artifact[] = calcParams.artifacts;\n\n  // Roll ER to reach threshold\n  const baseArtifacts = generateBaseArtifacts(calcParams.artifacts);\n  const baseStatMixins = getStatMixins({ ...calcParams });\n  const baseTotalStats = getTotalStatsAt(\n    calcParams.character,\n    calcParams.weapon,\n    calcParams.artifactSetBonuses,\n    baseArtifacts,\n    calcParams.talentAttackLevel,\n    calcParams.talentSkillLevel,\n    calcParams.talentBurstLevel,\n    baseStatMixins\n  );\n  const baseEr = baseTotalStats.energyRecharge ?? 0;\n\n  let baseErRolls = Math.ceil((erThreshold - baseEr) / substats.energyRecharge);\n\n  const erMainStatCount = baseArtifacts\n    .map((artifact) => artifact.mainStat.stat)\n    .filter((mainStat) => mainStat === 'energyRecharge').length;\n\n  if (baseErRolls < 0) {\n    baseErRolls = 0;\n  } else if (baseErRolls > 2 * (5 - erMainStatCount)) {\n    baseErRolls = 2 * (5 - erMainStatCount);\n  }\n\n  // Generate all combinations\n  const combinations = generateRollCombinationsKqm(\n    possibleStats,\n    maxRolls - baseErRolls,\n    calcParams.artifacts.map((artifact) => artifact.mainStat.stat),\n    baseErRolls\n  );\n\n  combinations.forEach((combination) => {\n    // Add in ER threshold rolls\n    if (baseErRolls > 0) {\n      const erDistribution = combination.find(\n        ({ stat }) => stat === 'energyRecharge'\n      );\n      if (erDistribution === undefined) {\n        combination.push({ stat: 'energyRecharge', rolls: baseErRolls });\n      } else {\n        erDistribution.rolls += baseErRolls;\n      }\n    }\n\n    const artifacts = generateBaseArtifacts(calcParams.artifacts);\n\n    addRollsToArtifacts(combination, artifacts);\n\n    const damage = rotation.reduce((acc, attack) => {\n      const talentValue = calculateTalentValue({\n        ...attack,\n        ...calcParams,\n        artifacts,\n      });\n      const totalDmg = talentValue.damage.reduce(\n        (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n        0\n      );\n      const multiplier = !isNaN(attack.multiplier) ? attack.multiplier : 0;\n      return acc + totalDmg * multiplier;\n    }, 0);\n\n    // Update optimal rolls\n    if (damage > maxDmg) {\n      optimalSubstatRolls = combination;\n      optimalArtifacts = artifacts;\n      maxDmg = damage;\n    }\n  });\n\n  return {\n    subStatRolls: optimalSubstatRolls,\n    artifacts: optimalArtifacts,\n  };\n}\n\n// Recursive function to generate all substat combinations according to KQM 2*n rule\nfunction generateRollCombinationsKqm(\n  possibleStats: string[],\n  maxRolls: number,\n  mainStats: string[],\n  baseErRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const sameMainStatCount = mainStats.filter(\n    (mainStat) => possibleStats[0] === mainStat\n  ).length;\n  let currentMaxRolls = Math.min((5 - sameMainStatCount) * 2, maxRolls);\n  if (possibleStats[0] === 'energyRecharge') {\n    currentMaxRolls -= baseErRolls;\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = currentMaxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinationsKqm(\n      possibleStats.slice(1),\n      maxRolls - i,\n      mainStats,\n      baseErRolls\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n\n// Recursive function to generate all combinations of possibleStats.length numbers that sum to maxRolls\n// Generated combinations are not guaranteed to be valid substat combinations\n/*\nfunction generateRollCombinations(\n  possibleStats: string[],\n  maxRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = maxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinations(\n      possibleStats.slice(1),\n      maxRolls - i\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n*/\n\n// Generate artifacts with 2 of each substat\nfunction generateBaseArtifacts(prevArtifacts: Artifact[]): Artifact[] {\n  const artifacts = prevArtifacts.map((artifact) => {\n    return new Artifact(\n      artifact.type,\n      artifact.rarity,\n      artifact.level,\n      artifact.mainStat.stat\n    );\n  });\n\n  // Set artifact substats according to currentSubstatRolls\n  let iArtifact = 0;\n  let jArtifact = 0;\n  Object.entries(substats).forEach(([stat, value]) => {\n    artifacts[iArtifact].setSubStatProp(jArtifact, stat);\n    artifacts[iArtifact].setSubStatValue(jArtifact, value * 2);\n    if (++jArtifact >= 4) {\n      jArtifact = 0;\n      if (++iArtifact >= 5) {\n        // This really should not happen\n        iArtifact = 0;\n      }\n    }\n  });\n\n  return artifacts;\n}\n\n// Add liquid subs to fixed subs without replacing any fixed subs\nfunction addRollsToArtifacts(\n  combination: RollDistribution[],\n  artifacts: Artifact[]\n) {\n  const subStats = artifacts.flatMap((artifact) => artifact.subStats);\n  combination.forEach(({ stat, rolls }) => {\n    const subStat = subStats.find((inputStat) => inputStat.stat === stat);\n    if (subStat === undefined) {\n      let sIndex = 0;\n      artifacts\n        .find((artifact) =>\n          artifact.subStats.find((inputStat, i) => {\n            sIndex = i;\n            return isNaN(inputStat.value);\n          })\n        )\n        ?.setSubStatValue(sIndex, substats[stat] * rolls);\n    } else {\n      subStat.setValue(subStat.value + substats[stat] * rolls);\n    }\n  });\n}\n","import OptimizerWorker from 'workerize-loader!../optimization/OptimizerWorker'; // eslint-disable-line import/no-webpack-loader-syntax\n\nexport default OptimizerWorker;\n","import {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  WeaponPassiveData,\n  WeaponPassiveSetData,\n} from '../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getWeaponPassiveAt,\n  getWeaponPassiveData,\n} from '../data/Data';\nimport { getOptionValue, setOptionValue } from '../option';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../passive/types';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    refinement: number = 1\n  ) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n    this._refinement = refinement;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.passiveDataSet = getWeaponPassiveData(value);\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(\n        this.refinement,\n        this.passiveDataSet\n      );\n    }\n    this.passive = this.getPassive(this.refinement);\n    this.passiveOptions = this.getPassiveOptions();\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  passiveDataSet?: WeaponPassiveSetData;\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  private _refinement: number = 1;\n  get refinement(): number {\n    return this._refinement;\n  }\n  set refinement(value: number) {\n    this._refinement = value;\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(value, this.passiveDataSet);\n      this.passive = this.getPassive(value);\n      this.passiveOptions = this.getPassiveOptions(true);\n    }\n  }\n\n  stats: Stats = {};\n  passiveData?: WeaponPassiveData;\n  passive?: WeaponPassive;\n  passiveOptions: WeaponOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n\n  // Override in derived classes to implement special passives\n  // Only returns the extra passive bonuses, excluding the direct stat bonuses\n  // To be called when passive should update (e.g. id or refinement change)\n  getPassive(_refinement: number): WeaponPassive | undefined {\n    return;\n  }\n\n  // getPassive should be called before this if passives are updated\n  getPassiveOptions(shouldKeepValue: boolean = false) {\n    let newOptions = (this.passive?.options ?? []).map(\n      (Option) => new Option()\n    );\n\n    if (shouldKeepValue) {\n      this.passiveOptions.forEach((option) => {\n        let newOption = newOptions.find(\n          (newOption) => newOption.id === option.id\n        );\n        if (newOption !== undefined) {\n          setOptionValue(newOption, getOptionValue(option));\n        }\n      });\n    }\n\n    return newOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    let statMixins = [];\n\n    if (this.passive?.statMixin !== undefined) {\n      statMixins.push(this.passive.statMixin);\n    }\n\n    if (this.passiveData?.statBonuses !== undefined) {\n      this.passiveData.statBonuses.forEach(({ stat, value }) => {\n        statMixins.push({\n          apply: (stats: Stats) => {\n            stats[stat] = value + (stats[stat] ?? 0);\n          },\n        });\n      });\n    }\n\n    return statMixins;\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    if (this.passive?.modifierMixin === undefined) {\n      return [];\n    }\n\n    return [this.passive.modifierMixin];\n  }\n}\n","import Option from '../Option';\n\nexport default class WeaponOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport const watatsumiWavewalkerPassive =\n  (id: string) =>\n  (refinement: number): WeaponPassive => {\n    const params = getWeaponPassiveParams(id, refinement);\n\n    class WatatsumiWavewalkerOption\n      extends WeaponOption\n      implements IOptionNumber, IStatsApplicable\n    {\n      value = 0;\n\n      constructor() {\n        super('watatsumiWavewalkerPassive');\n      }\n\n      statMixin = {\n        apply: (stats: Stats) => {\n          if (this.value > 0) {\n            let burstDmgBonus = this.value * (params[0] / 100);\n            if (burstDmgBonus > params[1]) {\n              burstDmgBonus = params[1];\n            }\n            stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n          }\n        },\n      };\n    }\n\n    return {\n      id,\n      options: [WatatsumiWavewalkerOption],\n    };\n  };\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class Akuoumaru extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('akuoumaru', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('akuoumaru')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { dragonsBanePassive } from './DragonsBanePassive';\n\nexport default class DragonsBane extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('dragonsbane', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return dragonsBanePassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function dragonsBanePassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('dragonsbane', refinement);\n\n  class DragonsBaneOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('dragonsBanePassive');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'dragonsBane',\n    options: [DragonsBaneOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { engulfingLightningPassive } from './EngulfingLightningPassive';\n\nexport default class EngulfingLightning extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('engulfinglightning', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return engulfingLightningPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function engulfingLightningPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('engulfinglightning', refinement);\n\n  class EngulfingLightningOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('engulfingLightningEnergyRecharge');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.energyRecharge = params[2] + (stats.energyRecharge ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'engulfingLightning',\n    options: [EngulfingLightningOption],\n\n    statMixin: {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        let atkBonus = (stats.energyRecharge - 1) * params[0];\n        if (atkBonus > params[1]) {\n          atkBonus = params[1];\n        }\n\n        stats.atkBonus = atkBonus + (stats.atkBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { everlastingMoonglowPassive } from './EverlastingMoonglowPassive';\n\nexport default class EverlastingMoonglow extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('everlastingmoonglow', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return everlastingMoonglowPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function everlastingMoonglowPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('everlastingmoonglow', refinement);\n\n  return {\n    id: 'everlastingMoonglow',\n    options: [],\n    modifierMixin: {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        modifier.normalAttackFlatDmg =\n          params[1] * (stats.flatHp ?? 0) + (modifier.normalAttackFlatDmg ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { luxuriousSeaLordPassive } from './LuxuriousSeaLordPassive';\n\nexport default class LuxuriousSeaLord extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('luxurioussealord', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return luxuriousSeaLordPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function luxuriousSeaLordPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('luxurioussealord', refinement);\n\n  return {\n    id: 'luxuriousSeaLord',\n    options: [],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class MouunsMoon extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('mouunsmoon', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('mouunsmoon')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { polarStarPassive } from './PolarStarPassive';\n\nexport default class PolarStar extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('polarstar', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return polarStarPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function polarStarPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('polarstar', refinement);\n\n  class PolarStarOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('polarStarStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        let stacks = this.value;\n\n        if (stacks > 0) {\n          if (stacks > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[stacks + 1] + (stats.atkBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'polarStar',\n    options: [PolarStarOption],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { solarPearlPassive } from './SolarPearlPassive';\n\nexport default class SolarPearl extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('solarpearl', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return solarPearlPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function solarPearlPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('solarpearl', refinement);\n\n  class SolarPearlOptionNormalAttack\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlNormalAttack');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n          stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  class SolarPearlOptionSkillBurst\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlSkillBurst');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'solarPearl',\n    options: [SolarPearlOptionNormalAttack, SolarPearlOptionSkillBurst],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { staffOfHomaPassive } from './StaffOfHomaPassive';\n\nexport default class StaffOfHoma extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('staffofhoma', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return staffOfHomaPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function staffOfHomaPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('staffofhoma', refinement);\n\n  class StaffOfHomaOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('staffOfHomaAtkBonus');\n    }\n\n    statMixin = {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n\n        let flatAtkBonus = totalHp * params[1];\n        if (this.value) {\n          flatAtkBonus += totalHp * params[2];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      },\n    };\n  }\n\n  return {\n    id: 'staffOfHoma',\n    options: [StaffOfHomaOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { theCatchPassive } from './TheCatchPassive';\n\nexport default class TheCatch extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('thecatch', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return theCatchPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function theCatchPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('thecatch', refinement);\n\n  return {\n    id: 'theCatch',\n    options: [],\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        stats.burstCritRate = params[1] + (stats.burstCritRate ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { whiteblindPassive } from './WhiteblindPassive';\n\nexport default class Whiteblind extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('whiteblind', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return whiteblindPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function whiteblindPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('whiteblind', refinement);\n\n  class WhiteblindOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('whiteblindStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value > 0) {\n          let stacks = this.value;\n          if (this.value > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[0] * stacks + (stats.atkBonus ?? 0);\n          stats.defBonus = params[0] * stacks + (stats.defBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'whiteblind',\n    options: [WhiteblindOption],\n  };\n}\n","import Weapon from './Weapon';\nimport Akuoumaru from './watatsumi/Akuoumaru';\nimport DragonsBane from './dragonsbane/DragonsBane';\nimport EngulfingLightning from './engulfinglightning/EngulfingLightning';\nimport EverlastingMoonglow from './everlastingmoonglow/EverlastingMoonglow';\nimport LuxuriousSeaLord from './luxurioussealord/LuxuriousSeaLord';\nimport MouunsMoon from './watatsumi/MouunsMoon';\nimport PolarStar from './polarstar/PolarStar';\nimport SolarPearl from './solarpearl/SolarPearl';\nimport StaffOfHoma from './staffofhoma/StaffOfHoma';\nimport TheCatch from './thecatch/TheCatch';\nimport Whiteblind from './whiteblind/Whiteblind';\nimport WavebreakersFin from './watatsumi/WavebreakersFin';\n\nconst weapons: Record<string, typeof Weapon> = {\n  // Polearm\n  dragonsbane: DragonsBane,\n  engulfinglightning: EngulfingLightning,\n  staffofhoma: StaffOfHoma,\n  thecatch: TheCatch,\n  wavebreakersfin: WavebreakersFin,\n\n  // Catalyst\n  everlastingmoonglow: EverlastingMoonglow,\n  solarpearl: SolarPearl,\n\n  // Claymore\n  luxurioussealord: LuxuriousSeaLord,\n  whiteblind: Whiteblind,\n  akuoumaru: Akuoumaru,\n\n  // Bow\n  polarstar: PolarStar,\n  mouunsmoon: MouunsMoon,\n};\n\nfunction getWeaponConstructor(id: string): typeof Weapon {\n  return weapons[id] ?? Weapon;\n}\n\nexport function initWeapon(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  refinement?: number\n): Weapon {\n  const WeaponConstructor = getWeaponConstructor(id);\n\n  return new WeaponConstructor(id, level, hasAscended, refinement);\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class WavebreakersFin extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('wavebreakersfin', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('wavebreakersfin')(refinement);\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport Reaction from '../../modifier/Reaction';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ReactionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = Object.values(Reaction);\n\n  constructor() {\n    super('reaction');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.reaction = this.value as Reaction;\n      } else {\n        modifier.reaction = Reaction.None;\n      }\n    },\n  };\n}\n\nexport default ReactionOption;\n","import { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport { ArtifactType, InputStat } from '../artifact/types';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport { Attack } from '../component/DPSColumn';\nimport Option from '../option/Option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n  characterConstellationLevel?: number;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n  weaponRefinement?: number;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  teamCharacterIds?: string[];\n\n  characterOptions?: { id?: string; value?: unknown }[];\n  weaponOptions?: { id?: string; value?: unknown }[];\n  artifactSetOptions?: { id?: string; value?: unknown }[];\n  teamOptions?: { id?: string; value?: unknown }[];\n  artifactBuffOptions?: { id?: string; value?: unknown }[];\n\n  rotationTime?: number;\n  rotation?: AttackSave[];\n}\n\nexport type Saves = Record<string, Save>;\n\nexport interface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\ninterface AttackSave {\n  talentType?: string;\n  talentId?: string;\n  multiplier?: number;\n  options?: { id?: string; value?: unknown }[];\n}\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createArtifactSave(artifact: Artifact): ArtifactSave {\n  return {\n    type: artifact.type,\n    rarity: artifact.rarity,\n    level: artifact.level,\n    mainStat: artifact.mainStat.stat,\n    subStats: artifact.subStats.map((subStat) => createInputStatSave(subStat)),\n  };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n    characterConstellationLevel: appState.character.constellationLevel,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n    weaponRefinement: appState.weapon.refinement,\n\n    artifacts: appState.artifacts.map((artifact) =>\n      createArtifactSave(artifact)\n    ),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    teamCharacterIds: appState.teamCharacters.map((character) => character.id),\n\n    characterOptions: appState.characterOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    weaponOptions: appState.weaponOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactSetOptions: appState.artifactSetOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    teamOptions: appState.teamOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactBuffOptions: appState.artifactBuffOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n\n    rotationTime: appState.rotationTime,\n    rotation: appState.rotation.map((attack) => {\n      return {\n        talentType: attack.talentType,\n        talentId: attack.talentId,\n        multiplier: attack.multiplier,\n        options: attack.options.map((option) => {\n          return { id: option.id, value: getOptionValue(option) };\n        }),\n      };\n    }),\n  };\n\n  return save;\n}\n\nexport function unpackArtifactSave(save: ArtifactSave, i: number): Artifact {\n  const artifactType = save.type ?? Object.values(ArtifactType)[i];\n  let artifact = new Artifact(\n    artifactType,\n    save.rarity ?? 1,\n    save.level ?? 0,\n    save.mainStat ?? ''\n  );\n  artifact.subStats =\n    save.subStats?.map(\n      (subStat) =>\n        new InputStat(\n          subStat.stat ?? '',\n          subStat.value ?? NaN,\n          subStat.rawValue ?? NaN\n        )\n    ) ?? artifact.subStats;\n\n  return artifact;\n}\n\nexport function unpackSave(save: Save): AppState {\n  const character = initCharacter(\n    save.characterId,\n    save.characterLevel,\n    save.characterHasAscended,\n    save.characterConstellationLevel\n  );\n  const weapon = initWeapon(\n    save.weaponId,\n    save.weaponLevel,\n    save.weaponHasAscended,\n    save.weaponRefinement\n  );\n\n  const artifacts =\n    save.artifacts?.map((artifactSave, i) =>\n      unpackArtifactSave(artifactSave, i)\n    ) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map((artifactSet) =>\n    initArtifactSet(artifactSet.artifactSetId, artifactSet.artifactSetPieces)\n  ) ?? [initArtifactSet(), initArtifactSet(), initArtifactSet()];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const teamCharacters = save.teamCharacterIds?.map((id) =>\n    initCharacter(id)\n  ) ?? [initCharacter(), initCharacter(), initCharacter()];\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, option.value);\n    }\n  });\n\n  const weaponOptions = weapon.passiveOptions;\n  save.weaponOptions?.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, option.value);\n    }\n  });\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, option.value);\n    }\n  });\n\n  const teamOptions = teamCharacters.flatMap(\n    (character) => character.teamOptions\n  );\n  save.teamOptions?.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, option.value);\n    }\n  });\n\n  const artifactBuffOptions =\n    save.artifactBuffOptions?.flatMap((option) => {\n      const OptionConstructor = artifactTeamBuffs[option.id ?? ''];\n      if (OptionConstructor !== undefined) {\n        let artifactOption = new OptionConstructor();\n        setOptionValue(artifactOption, option.value);\n        return [artifactOption];\n      }\n\n      return [];\n    }) ?? [];\n\n  const allOptions = [\n    ...characterOptions,\n    ...weaponOptions,\n    ...artifactSetOptions,\n    ...teamOptions,\n    ...artifactBuffOptions,\n  ];\n\n  const rotationTime = save.rotationTime ?? 0;\n  const rotation: Attack[] =\n    save.rotation?.map((attackSave) => {\n      return {\n        talentType: attackSave.talentType ?? '',\n        talentId: attackSave.talentId ?? '',\n        multiplier: attackSave.multiplier ?? 1,\n        talentValue: { damage: [NaN] },\n        options:\n          attackSave.options\n            ?.map(({ id, value }) => {\n              const OptionConstructor = allOptions.find(\n                (option) => option.id === id\n              )?.constructor as { new (): Option };\n              let option;\n              if (OptionConstructor !== undefined) {\n                option = new OptionConstructor();\n                setOptionValue(option, value);\n              } else if (id === 'reaction') {\n                option = new ReactionOption();\n                setOptionValue(option, value);\n              }\n              return option;\n            })\n            ?.filter((option): option is Option => option !== undefined) ?? [],\n      };\n    }) ?? [];\n\n  return {\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    critType,\n    enemyLevel,\n    enemyRes,\n    reaction,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n    rotationTime,\n    rotation,\n  };\n}\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const appState = unpackSave(save);\n\n  setAppState(\n    appState,\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <div>\n        <Form.Check\n          type='checkbox'\n          className={`checkbox ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.isLabelShown() ? (\n            <Form.Check.Label>{this.props.label}</Form.Check.Label>\n          ) : (\n            <Form.Check.Label></Form.Check.Label>\n          )}\n\n          <Form.Check.Input\n            type='checkbox'\n            checked={value}\n            onChange={this.handleChange}\n          />\n        </Form.Check>\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\r\nimport Row from 'react-bootstrap/esm/Row';\r\n\r\nclass InputBlock extends React.Component {\r\n  render() {\r\n    return <Row className='input-block no-gutters'>{this.props.children}</Row>;\r\n  }\r\n}\r\n\r\nexport default InputBlock;\r\n","import React from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Button from 'react-bootstrap/esm/Button';\nimport Card from 'react-bootstrap/esm/Card';\nimport {\n  AppState,\n  GetDamageModifierFn,\n  GetModifierMixinsFn,\n  GetStatMixinsFn,\n} from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { propMapping } from '../data/Data';\nimport { Stats } from '../data/types';\nimport { RollDistribution, substats } from '../optimization/Optimization';\nimport { SubstatOptimizerResultSave } from '../optimization/OptimizerWorker';\nimport OptimizerWorker from '../optimization/OptimizerWorkerShim';\nimport { createSave, unpackArtifactSave } from '../save/Save';\nimport Checkbox from './Checkbox';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype OptimizerBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  getDamageModifier: GetDamageModifierFn;\n  getStatMixins: GetStatMixinsFn;\n  getModifierMixins: GetModifierMixinsFn;\n};\n\ntype OptimizerBlockState = {\n  maxRolls: number;\n  selectedSubstats: string[];\n  erThreshold: number;\n  substatRolls: RollDistribution[];\n  isOptimizing: boolean;\n};\n\nclass OptimizerBlock extends React.Component<\n  OptimizerBlockProps,\n  OptimizerBlockState\n> {\n  state: OptimizerBlockState = {\n    maxRolls: 20,\n    selectedSubstats: [],\n    erThreshold: 100,\n    substatRolls: [],\n    isOptimizing: false,\n  };\n\n  setMaxRolls = (maxRolls: number) => {\n    this.setState({ maxRolls });\n  };\n\n  setSelectedSubstats = (stat: string) => (selected: boolean) => {\n    if (selected) {\n      if (!this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: [...this.state.selectedSubstats, stat],\n        });\n      }\n    } else {\n      if (this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: this.state.selectedSubstats.filter(\n            (substat) => substat !== stat\n          ),\n        });\n      }\n    }\n  };\n\n  setErThreshold = (value: number) => {\n    if (isNaN(value)) {\n      this.setState({ erThreshold: 0 });\n    } else {\n      this.setState({ erThreshold: value });\n    }\n  };\n\n  onOptimizeClick = async () => {\n    this.setState({ substatRolls: [], isOptimizing: true });\n\n    const save = createSave('', this.props.appState);\n\n    // Spawns a web worker to optimize substats\n    const worker = OptimizerWorker();\n\n    const result: SubstatOptimizerResultSave = await worker.optimize({\n      possibleStats: this.state.selectedSubstats,\n      maxRolls: this.state.maxRolls,\n      erThreshold: this.state.erThreshold / 100,\n      save,\n    });\n\n    const artifacts = result.artifacts.map(unpackArtifactSave);\n\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n    this.setState({ substatRolls: result.subStatRolls, isOptimizing: false });\n  };\n\n  render() {\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='0'\n            className='bg-transparent border-0'\n          >\n            <h3>Substat Optimizer</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey='0'>\n            <Card.Body>\n              <InputBlock>\n                <p>Fixed Substats: 20</p>\n\n                <InputRow>\n                  <IntInput\n                    className='level-input'\n                    id={'optimizer-liquid-substats'}\n                    label='Liquid Substats:'\n                    defaultValue={20}\n                    value={this.state.maxRolls}\n                    onInput={this.setMaxRolls}\n                  />\n                </InputRow>\n              </InputBlock>\n\n              <InputBlock>\n                <p>Select substats to optimize:</p>\n                {Object.keys(substats).map((stat) => (\n                  <InputRow key={stat}>\n                    <Checkbox\n                      id={`optimizer-selected-substats-${stat}`}\n                      label={`${propMapping[stat].name}`}\n                      defaultValue={false}\n                      value={this.state.selectedSubstats.includes(stat)}\n                      onChange={this.setSelectedSubstats(stat)}\n                    />\n                  </InputRow>\n                ))}\n              </InputBlock>\n\n              <InputBlock>\n                <InputRow>\n                  <FloatInput\n                    className='stat-input'\n                    id={'optimizer-er-threshold'}\n                    label='ER Threshold:'\n                    defaultValue={100}\n                    value={this.state.erThreshold}\n                    onInput={this.setErThreshold}\n                  />\n                </InputRow>\n              </InputBlock>\n\n              <InputBlock>\n                <InputRow>\n                  <Button\n                    variant={\n                      !this.state.isOptimizing\n                        ? 'secondary'\n                        : 'outline-secondary'\n                    }\n                    size='sm'\n                    onClick={this.onOptimizeClick}\n                    disabled={this.state.isOptimizing}\n                  >\n                    {!this.state.isOptimizing ? 'Optimize' : 'Optimizing...'}\n                  </Button>\n                </InputRow>\n              </InputBlock>\n\n              {this.state.substatRolls.length > 0 && (\n                <InputBlock>\n                  <p>Liquid roll distribution:</p>\n                  {this.state.substatRolls.map(({ stat, rolls }) => (\n                    <p key={stat}>\n                      {propMapping[stat].name}: {rolls}\n                    </p>\n                  ))}\n                </InputBlock>\n              )}\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default OptimizerBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport {\n  AppState,\n  GetDamageModifierFn,\n  GetModifierMixinsFn,\n  GetStatMixinsFn,\n} from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { Stats } from '../data/types';\nimport ArtifactBlock from './ArtifactBlock';\nimport OptimizerBlock from './OptimizerBlock';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  getDamageModifier: GetDamageModifierFn;\n  getStatMixins: GetStatMixinsFn;\n  getModifierMixins: GetModifierMixinsFn;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Col\n        id='artifact-column'\n        className='artifact-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='artifact-heading'>\n          <h2>Artifacts</h2>\n        </div>\n        <OptimizerBlock {...this.props} />\n        <div className='result-block'>\n          {appState.artifacts.map((artifact) => (\n            <ArtifactBlock\n              artifact={artifact}\n              updateArtifactState={this.updateArtifactState}\n              key={artifact.type}\n            />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../option';\nimport { IOptionBoolean, IOptionNumber, IOptionPicker } from '../option/Option';\nimport { capitalize, getOptionName } from '../stat/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n  isLabelShown?: boolean;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n          isLabelShown={this.props.isLabelShown}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n          isLabelShown={this.props.isLabelShown}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          isLabelShown={this.props.isLabelShown}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport Option from '../option/Option';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\nimport { optionMapping } from '../data/Data';\nimport OptionInput from './OptionInput';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\n\ntype DPSOptionInputProps = {\n  setOption: (option?: Option) => void;\n  options: Option[];\n  option?: Option;\n  index: number;\n};\n\nclass DPSOptionInput extends React.Component<DPSOptionInputProps> {\n  setOptionId = (id: string) => {\n    const OptionConstructor = this.props.options.find(\n      (option) => option.id === id\n    )?.constructor as { new (): Option };\n\n    if (OptionConstructor !== undefined) {\n      this.props.setOption(new OptionConstructor());\n    } else if (id === 'reaction') {\n      this.props.setOption(new ReactionOption());\n    } else {\n      this.props.setOption();\n    }\n  };\n\n  updateOptions = () => {\n    this.props.setOption(this.props.option);\n  };\n\n  render() {\n    return (\n      <InputRow>\n        <Picker\n          id={`dps-attack-option-${this.props.index}`}\n          label=''\n          defaultValue=''\n          value={this.props.option?.id ?? ''}\n          onChange={this.setOptionId}\n          isLabelShown={false}\n          className='ml-5'\n        >\n          <Picker.Item value='' label='' />\n          <Picker.Item value='reaction' label='Reaction' />\n          {this.props.options.map((option) => (\n            <Picker.Item\n              key={option.id}\n              value={option.id}\n              label={optionMapping[option.id]}\n            />\n          ))}\n        </Picker>\n\n        {this.props.option && (\n          <OptionInput\n            option={this.props.option}\n            updateOptions={this.updateOptions}\n            isLabelShown={false}\n          />\n        )}\n      </InputRow>\n    );\n  }\n}\n\nexport default DPSOptionInput;\n","import React from 'react';\nimport InputRow from './InputRow';\nimport { Attack } from './DPSColumn';\nimport Picker from './Picker';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport IntInput from './IntInput';\nimport { TalentValueSet } from '../talent/types';\nimport DPSOptionInput from './DPSOptionInput';\nimport Option from '../option';\n\ntype DPSAttackInputProps = {\n  setAttack: (attack: Attack) => void;\n  attack: Attack;\n  index: number;\n  talentValues: TalentValueSet;\n  options: Option[];\n};\n\nclass DPSAttackInput extends React.Component<DPSAttackInputProps> {\n  setTalentType = (type: string) => {\n    const attack = { ...this.props.attack, talentType: type };\n    this.props.setAttack(attack);\n  };\n\n  setTalentId = (id: string) => {\n    const attack = { ...this.props.attack, talentId: id };\n    this.props.setAttack(attack);\n  };\n\n  setMultiplier = (multiplier: number) => {\n    const attack = { ...this.props.attack, multiplier };\n    this.props.setAttack(attack);\n  };\n\n  setOption = (i: number) => (option?: Option) => {\n    const options = [...this.props.attack.options];\n\n    if (option === undefined) {\n      options.splice(i, 1);\n    } else {\n      options[i] = option;\n    }\n\n    this.props.setAttack({ ...this.props.attack, options });\n  };\n\n  render() {\n    return (\n      <>\n        <InputRow>\n          <Picker\n            id={`dps-talent-type-${this.props.index}`}\n            label=''\n            defaultValue=''\n            value={this.props.attack.talentType}\n            onChange={this.setTalentType}\n            isLabelShown={false}\n          >\n            <Picker.Item value='' label='' />\n            {Object.keys(this.props.talentValues).map((type) => (\n              <Picker.Item\n                key={type}\n                value={type}\n                label={talentDescMapping[type]}\n              />\n            ))}\n          </Picker>\n\n          <Picker\n            id={`dps-talent-id-${this.props.index}`}\n            label=''\n            defaultValue=''\n            value={this.props.attack.talentId}\n            onChange={this.setTalentId}\n            isLabelShown={false}\n          >\n            <Picker.Item value='' label='' />\n            {Object.keys(\n              this.props.talentValues[this.props.attack.talentType] ?? {}\n            ).map((id) => (\n              <Picker.Item key={id} value={id} label={talentDescMapping[id]} />\n            ))}\n          </Picker>\n\n          {getDamageDisplayValue(this.props.attack.talentValue.damage)}\n\n          <IntInput\n            id={`dps-attack-multiplier-${this.props.index}`}\n            label='x'\n            defaultValue={1}\n            value={this.props.attack.multiplier}\n            onInput={this.setMultiplier}\n            className='level-input'\n          />\n        </InputRow>\n\n        {this.props.attack.options.map((option, i) => (\n          <DPSOptionInput\n            key={i}\n            setOption={this.setOption(i)}\n            options={this.props.options}\n            option={option}\n            index={i}\n          />\n        ))}\n\n        <DPSOptionInput\n          setOption={this.setOption(this.props.attack.options.length)}\n          options={this.props.options}\n          index={this.props.attack.options.length}\n        />\n      </>\n    );\n  }\n}\n\nexport default DPSAttackInput;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport {\n  calculateTalentValue,\n  initializeAllOptions,\n} from '../dps/DPSCalculator';\nimport Option from '../option/Option';\nimport { TalentValue, TalentValueSet } from '../talent/types';\nimport DPSAttackInput from './DPSAttackInput';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\n\nexport type Attack = {\n  talentType: string;\n  talentId: string;\n  multiplier: number;\n  talentValue: TalentValue;\n  options: Option[];\n};\n\nconst defaultAttack: Attack = {\n  talentType: '',\n  talentId: '',\n  multiplier: 1,\n  talentValue: { damage: [NaN] },\n  options: [],\n};\n\ntype DPSColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  artifactSetBonuses: Stats;\n  talentValues: TalentValueSet;\n};\n\nclass DPSColumn extends React.Component<DPSColumnProps> {\n  dpr: number = 0;\n  dps: number = NaN;\n\n  updateTalentValue = (attack: Attack) => {\n    attack.talentValue = calculateTalentValue({\n      ...attack,\n      ...this.props.appState,\n      artifactSetBonuses: this.props.artifactSetBonuses,\n    });\n  };\n\n  updateTalentValues = () => {\n    const rotation = this.props.appState.rotation;\n\n    rotation.forEach((attack) => this.updateTalentValue(attack));\n\n    this.dpr = rotation.reduce(\n      (acc, attack) =>\n        acc +\n        attack.talentValue.damage.reduce(\n          (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n          0\n        ) *\n          (!isNaN(attack.multiplier) ? attack.multiplier : 0),\n      0\n    );\n    this.dps = this.dpr / this.props.appState.rotationTime;\n  };\n\n  setRotationTime = (time: number) => {\n    this.props.setAppState({ rotationTime: time });\n  };\n\n  setAttack = (i: number) => (attack: Attack) => {\n    const rotation = this.props.appState.rotation;\n\n    if (attack.talentType === '') {\n      rotation.splice(i, 1);\n    } else {\n      rotation[i] = attack;\n    }\n\n    this.props.setAppState({ rotation });\n  };\n\n  render() {\n    this.updateTalentValues();\n\n    const {\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n      teamOptions,\n      artifactBuffOptions,\n    } = initializeAllOptions(this.props.appState);\n\n    const allOptions = [\n      ...characterOptions,\n      ...weaponOptions,\n      ...artifactSetOptions,\n      ...teamOptions,\n      ...artifactBuffOptions,\n    ];\n\n    return (\n      <Col\n        id='dps-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <InputBlock>\n          <h2>DPS Calculator</h2>\n\n          <InputRow>\n            <FloatInput\n              id='rotation-time-input'\n              label='Rotation Time:'\n              defaultValue={0}\n              value={this.props.appState.rotationTime}\n              onInput={this.setRotationTime}\n              className='level-input'\n            />\n          </InputRow>\n\n          <InputRow>\n            <p>DPR: {this.dpr.toFixed(0)}</p>\n          </InputRow>\n\n          <InputRow>\n            <p>DPS: {isFinite(this.dps) ? this.dps.toFixed(0) : '-'}</p>\n          </InputRow>\n\n          {this.props.appState.rotation.map((attack, i) => (\n            <DPSAttackInput\n              key={i}\n              setAttack={this.setAttack(i)}\n              attack={attack}\n              index={i}\n              talentValues={this.props.talentValues}\n              options={allOptions}\n            />\n          ))}\n\n          <DPSAttackInput\n            setAttack={this.setAttack(this.props.appState.rotation.length)}\n            attack={{ ...defaultAttack }}\n            index={this.props.appState.rotation.length}\n            talentValues={this.props.talentValues}\n            options={allOptions}\n          />\n        </InputBlock>\n      </Col>\n    );\n  }\n}\n\nexport default DPSColumn;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i] = initArtifactSet(id, artifactSets[i].pieces);\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </InputBlock>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const { level, hasAscended, constellationLevel } =\n      this.props.appState.character;\n    const character = initCharacter(id, level, hasAscended, constellationLevel);\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterConstellationLevel = (constellationLevel: number) => {\n    const character = this.props.appState.character;\n    character.constellationLevel = constellationLevel;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-constellation-level-input'\n            label='Constellation:'\n            defaultValue={0}\n            value={appState.character.constellationLevel}\n            onInput={this.setCharacterConstellationLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport Resistance from '../stat/Resistance';\nimport { capitalize } from '../stat/Stat';\nimport { Element } from '../talent/types';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  setReaction = (reaction: string) => {\n    this.props.updateTalentValues({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n    this.props.setAppState({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType, reaction } = this.props.appState;\n    return (\n      <InputBlock>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n\n        <InputRow>\n          <Picker\n            id='reaction-picker'\n            label='Reaction:'\n            defaultValue={Reaction.None}\n            value={reaction}\n            onChange={this.setReaction}\n          >\n            {Object.values(Reaction).map((reaction) => (\n              <Picker.Item\n                key={reaction}\n                label={capitalize(reaction)}\n                value={reaction}\n              />\n            ))}\n          </Picker>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Col from 'react-bootstrap/esm/Col';\nimport Form from 'react-bootstrap/esm/Form';\nimport Modal from 'react-bootstrap/esm/Modal';\nimport Row from 'react-bootstrap/esm/Row';\nimport { AppState } from '../App';\nimport {\n  createSave,\n  addSave,\n  getSave,\n  loadSave,\n  Saves,\n  deleteSave,\n} from '../save/Save';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype SaveBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  refreshApp: () => void;\n};\n\ntype SaveBlockState = {\n  saves: Saves;\n  saveInputName: string;\n  selectedSave: string;\n  showDeleteWarning: boolean;\n  showImportModal: boolean;\n  showExportModal: boolean;\n  saveJson: string;\n  hasCopied: boolean;\n  invalidJson: boolean;\n};\n\nclass SaveBlock extends React.Component<SaveBlockProps, SaveBlockState> {\n  state: SaveBlockState;\n\n  constructor(props: SaveBlockProps) {\n    super(props);\n\n    // Populate local storage if empty\n    if (window.localStorage.getItem('saves') === null) {\n      window.localStorage.setItem('saves', '{}');\n    }\n\n    // Initialize saves in memory\n    const saves = JSON.parse(window.localStorage.getItem('saves') ?? '{}');\n    // Initialize state\n    this.state = {\n      saves,\n      saveInputName: '',\n      selectedSave: '',\n      showDeleteWarning: false,\n      showImportModal: false,\n      showExportModal: false,\n      saveJson: '',\n      hasCopied: false,\n      invalidJson: false,\n    };\n  }\n\n  onSaveClick = () => {\n    if (this.state.saveInputName !== '') {\n      const save = createSave(this.state.saveInputName, this.props.appState);\n      const saves = this.state.saves;\n      addSave(save, saves);\n      this.setState({ saves });\n    }\n  };\n\n  onSaveInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveInputName: e.target.value });\n  };\n\n  onLoadClick = () => {\n    if (this.state.selectedSave !== '') {\n      const save = getSave(this.state.selectedSave, this.state.saves);\n      if (save !== undefined) {\n        loadSave(save, this.props.setAppState, this.props.refreshApp);\n      }\n    }\n  };\n\n  onLoadInputChange = (value: string) => {\n    this.setState({ selectedSave: value });\n  };\n\n  onDeleteClick = () => {\n    if (this.state.selectedSave !== '') {\n      this.setState({ showDeleteWarning: true });\n    }\n  };\n\n  onDeleteModalConfirm = () => {\n    const saves = this.state.saves;\n    deleteSave(this.state.selectedSave, saves);\n    this.setState({ saves });\n\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onDeleteModalHide = () => {\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onImportClick = () => {\n    this.setState({ showImportModal: true });\n  };\n\n  onImportModalHide = () => {\n    this.setState({ showImportModal: false, saveJson: '', invalidJson: false });\n  };\n\n  onImportTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ saveJson: e.target.value });\n  };\n\n  onImportSubmitClick = () => {\n    try {\n      const save = JSON.parse(this.state.saveJson);\n      loadSave(save, this.props.setAppState, this.props.refreshApp);\n      this.onImportModalHide();\n    } catch {\n      this.setState({ invalidJson: true });\n    }\n  };\n\n  onExportClick = () => {\n    const saveJson = JSON.stringify(createSave('', this.props.appState));\n    this.setState({ showExportModal: true, saveJson, invalidJson: false });\n  };\n\n  onExportModalHide = () => {\n    this.setState({ showExportModal: false, saveJson: '', hasCopied: false });\n  };\n\n  onCopyClick = () => {\n    navigator.clipboard.writeText(this.state.saveJson);\n    this.setState({ hasCopied: true });\n  };\n\n  render() {\n    return (\n      <InputBlock>\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onSaveClick}>\n            Save\n          </Button>\n\n          <Col className='save-name-col'>\n            <Form.Control\n              type='text'\n              size='sm'\n              placeholder='Save label (cannot be empty)'\n              onChange={this.onSaveInputChange}\n            />\n          </Col>\n        </InputRow>\n\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onLoadClick}>\n            Load\n          </Button>\n\n          <Picker\n            id='save-picker'\n            label=''\n            defaultValue=''\n            value={this.state.selectedSave}\n            onChange={this.onLoadInputChange}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {Object.values(this.state.saves).map((save) => (\n              <Picker.Item\n                label={save.label}\n                value={save.label}\n                key={save.label}\n              />\n            ))}\n          </Picker>\n\n          <>\n            <Button variant='danger' size='sm' onClick={this.onDeleteClick}>\n              Delete\n            </Button>\n\n            <Modal\n              show={this.state.showDeleteWarning}\n              onHide={this.onDeleteModalHide}\n            >\n              <Modal.Body>\n                Are you sure you want to delete the save configuration? This\n                action is irreversible!\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={this.onDeleteModalHide}>\n                  Cancel\n                </Button>\n                <Button variant='danger' onClick={this.onDeleteModalConfirm}>\n                  Delete\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        </InputRow>\n\n        <InputRow>\n          <>\n            <Button variant='secondary' size='sm' onClick={this.onImportClick}>\n              Import\n            </Button>\n\n            <Modal\n              size='lg'\n              show={this.state.showImportModal}\n              onHide={this.onImportModalHide}\n            >\n              <Modal.Header closeButton>\n                Import Configuration from JSON\n              </Modal.Header>\n              <Modal.Body>\n                <Col>\n                  <Row>\n                    <Form.Control\n                      as='textarea'\n                      rows={10}\n                      value={this.state.saveJson}\n                      onChange={this.onImportTextChange}\n                    />\n                  </Row>\n\n                  <Row className='mt-2'>\n                    <Button\n                      variant='secondary'\n                      size='sm'\n                      onClick={this.onImportSubmitClick}\n                      className='mr-2'\n                    >\n                      Import\n                    </Button>\n                    {this.state.invalidJson && 'Invalid JSON!'}\n                  </Row>\n                </Col>\n              </Modal.Body>\n            </Modal>\n          </>\n\n          <>\n            <Button variant='secondary' size='sm' onClick={this.onExportClick}>\n              Export\n            </Button>\n\n            <Modal\n              size='lg'\n              show={this.state.showExportModal}\n              onHide={this.onExportModalHide}\n            >\n              <Modal.Header closeButton>\n                Export Configuration as JSON\n              </Modal.Header>\n              <Modal.Body>\n                <Col>\n                  <Row>\n                    <Form.Control\n                      as='textarea'\n                      rows={10}\n                      value={this.state.saveJson}\n                      readOnly\n                    />\n                  </Row>\n\n                  <Row className='mt-2'>\n                    <Button\n                      variant={\n                        !this.state.hasCopied ? 'secondary' : 'outline-success'\n                      }\n                      size='sm'\n                      onClick={this.onCopyClick}\n                      disabled={this.state.hasCopied}\n                    >\n                      {!this.state.hasCopied\n                        ? 'Copy to Clipboard'\n                        : 'Copied to Clipboard!'}\n                    </Button>\n                  </Row>\n                </Col>\n              </Modal.Body>\n            </Modal>\n          </>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default SaveBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n  talentAttackLevelExtra: number;\n  talentSkillLevelExtra: number;\n  talentBurstLevelExtra: number;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n          {this.props.talentAttackLevelExtra > 0 &&\n            `+${this.props.talentAttackLevelExtra}`}\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n          {this.props.talentSkillLevelExtra > 0 &&\n            `+${this.props.talentSkillLevelExtra}`}\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n          {this.props.talentBurstLevelExtra > 0 &&\n            `+${this.props.talentBurstLevelExtra}`}\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Weapon from '../weapon/Weapon';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    weapon,\n    weaponOptions,\n  }: {\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n  }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const { weaponLevel, hasAscended, refinement } = this.props.appState.weapon;\n    const weapon = initWeapon(id, weaponLevel, hasAscended, refinement);\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponRefinement = (refinement: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.refinement = refinement;\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  updateOptions = () => {\n    const { weaponOptions } = this.props.appState;\n    this.props.updateTotalStats({ weaponOptions });\n    this.props.setAppState({ weaponOptions: [...weaponOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-refinement-input'\n            label='Refinement:'\n            defaultValue={1}\n            value={appState.weapon.refinement}\n            onInput={this.setWeaponRefinement}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.weaponOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React from 'react';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\nimport { optionMapping } from '../data/Data';\nimport OptionInput from './OptionInput';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\ntype TeamBuffOptionInputProps = {\n  setOption: (option?: ArtifactSetOption) => void;\n  options: Record<string, typeof ArtifactSetOption>;\n  option?: ArtifactSetOption;\n  index: number;\n};\n\nclass TeamBuffOptionInput extends React.Component<TeamBuffOptionInputProps> {\n  setOptionId = (id: string) => {\n    const OptionConstructor = this.props.options[id];\n\n    if (OptionConstructor !== undefined) {\n      this.props.setOption(new OptionConstructor());\n    } else {\n      this.props.setOption();\n    }\n  };\n\n  updateOptions = () => {\n    this.props.setOption(this.props.option);\n  };\n\n  render() {\n    return (\n      <InputRow>\n        <Picker\n          id={`team-buff-option-${this.props.index}`}\n          label=''\n          defaultValue=''\n          value={this.props.option?.id ?? ''}\n          onChange={this.setOptionId}\n          isLabelShown={false}\n        >\n          <Picker.Item value='' label='' />\n          {Object.keys(this.props.options).map((id) => (\n            <Picker.Item key={id} value={id} label={optionMapping[id]} />\n          ))}\n        </Picker>\n\n        {this.props.option && (\n          <OptionInput\n            option={this.props.option}\n            updateOptions={this.updateOptions}\n            isLabelShown={false}\n          />\n        )}\n      </InputRow>\n    );\n  }\n}\n\nexport default TeamBuffOptionInput;\n","import React, { Fragment } from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Card from 'react-bootstrap/esm/Card';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { initCharacter } from '../character/CharacterUtil';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\nimport CharacterPicker from './CharacterPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport OptionInput from './OptionInput';\nimport TeamBuffOptionInput from './TeamBuffOptionInput';\n\ntype TeamInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    teamCharacters?: Character[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass TeamInputBlock extends React.Component<TeamInputBlockProps> {\n  setCharacterId = (i: number) => (id: string) => {\n    const { teamCharacters } = this.props.appState;\n    teamCharacters[i] = initCharacter(id);\n    const teamOptions = teamCharacters.flatMap(\n      (character) => character.teamOptions\n    );\n    this.props.updateTotalStats({ teamCharacters, teamOptions });\n    this.props.setAppState({\n      teamCharacters: [...teamCharacters],\n      teamOptions,\n    });\n  };\n\n  updateTeamOptions = () => {\n    const { teamOptions } = this.props.appState;\n    this.props.updateTotalStats({ teamOptions });\n    this.props.setAppState({ teamOptions: [...teamOptions] });\n  };\n\n  setArtifactBuffOption = (i: number) => (option?: ArtifactSetOption) => {\n    const options = [...this.props.appState.artifactBuffOptions];\n\n    if (option === undefined) {\n      options.splice(i, 1);\n    } else {\n      options[i] = option;\n    }\n\n    this.props.updateTotalStats({ artifactBuffOptions: options });\n    this.props.setAppState({ artifactBuffOptions: options });\n  };\n\n  render() {\n    const { teamCharacters, artifactBuffOptions } = this.props.appState;\n\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='1'\n            className='bg-transparent border-0'\n          >\n            <h3>Team Buffs</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey='1'>\n            <Card.Body>\n              <InputBlock>\n                <InputRow>Party Members</InputRow>\n\n                {[0, 1, 2].map((i) => (\n                  <Fragment key={i}>\n                    <InputRow>\n                      <CharacterPicker\n                        characterId={teamCharacters[i].id}\n                        setCharacterId={this.setCharacterId(i)}\n                      />\n                    </InputRow>\n\n                    {teamCharacters[i].teamOptions.map((option) => (\n                      <InputRow key={option.id}>\n                        <OptionInput\n                          option={option}\n                          updateOptions={this.updateTeamOptions}\n                        />\n                      </InputRow>\n                    ))}\n                  </Fragment>\n                ))}\n              </InputBlock>\n\n              <InputBlock>\n                <InputRow>Artifact Buffs</InputRow>\n\n                {artifactBuffOptions.map((option, i) => (\n                  <TeamBuffOptionInput\n                    key={i}\n                    setOption={this.setArtifactBuffOption(i)}\n                    options={artifactTeamBuffs}\n                    option={option}\n                    index={i}\n                  />\n                ))}\n\n                <TeamBuffOptionInput\n                  setOption={this.setArtifactBuffOption(\n                    artifactBuffOptions.length\n                  )}\n                  options={artifactTeamBuffs}\n                  index={artifactBuffOptions.length}\n                />\n              </InputBlock>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default TeamInputBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport CritType from '../modifier/CritType';\nimport Resistance from '../stat/Resistance';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport SaveBlock from './SaveBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport TeamInputBlock from './TeamInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n    teamOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => void;\n  refreshApp: () => void;\n  talentAttackLevelExtra: number;\n  talentSkillLevelExtra: number;\n  talentBurstLevelExtra: number;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n      refreshApp,\n    } = this.props;\n\n    return (\n      <Col\n        id='input-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <SaveBlock\n          appState={appState}\n          setAppState={setAppState}\n          refreshApp={refreshApp}\n        />\n\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n          talentAttackLevelExtra={this.props.talentAttackLevelExtra}\n          talentSkillLevelExtra={this.props.talentSkillLevelExtra}\n          talentBurstLevelExtra={this.props.talentBurstLevelExtra}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n\n        <TeamInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../character/Character';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\nimport Weapon from '../weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Col\n        id='stat-column'\n        className='stat-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\n\ntype TalentBlockProps = {\n  type: string;\n  talentValues: Record<string, TalentValue>;\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{talentDescMapping[this.props.type]}</h3>\n        {Object.entries(this.props.talentValues).map(([id, { damage }]) => (\n          <p key={id}>\n            {talentDescMapping[id]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport { TalentValueSet } from '../talent/types';\nimport TalentBlock from './TalentBlock';\nimport Col from 'react-bootstrap/esm/Col';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const talentValues = this.props.talentValues;\n\n    return (\n      <Col\n        id='talent-column'\n        className='talent-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='result-block'>\n          <h2>Talents</h2>\n          {Object.entries(talentValues).map(([type, values]) => (\n            <TalentBlock key={type} type={type} talentValues={values} />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport Row from 'react-bootstrap/esm/Row';\nimport './App.css';\nimport Artifact from './artifact/Artifact';\nimport ArtifactSet from './artifact/ArtifactSet';\nimport {\n  getAllArtifactSetBonuses,\n  initArtifactSet,\n} from './artifact/ArtifactSetUtil';\nimport { ArtifactType } from './artifact/types';\nimport Character from './character/Character';\nimport { initCharacter } from './character/CharacterUtil';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport DPSColumn, { Attack } from './component/DPSColumn';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport { Stats } from './data/types';\nimport CritType from './modifier/CritType';\nimport DamageModifier, { getDamageModifier } from './modifier/DamageModifer';\nimport Reaction from './modifier/Reaction';\nimport ArtifactSetOption from './option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from './option/characterOptions/CharacterOption';\nimport {\n  getModifierMixins,\n  getStatMixins,\n  ModifierMixin,\n  StatMixin,\n} from './option/Mixin';\nimport WeaponOption from './option/weaponOptions/WeaponOption';\nimport Resistance from './stat/Resistance';\nimport { getTotalStatsAt } from './stat/Stat';\nimport { TalentValue, TalentValueSet } from './talent/types';\nimport Weapon from './weapon/Weapon';\nimport { initWeapon } from './weapon/WeaponUtil';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  teamCharacters: Character[];\n\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n\n  rotationTime: number;\n  rotation: Attack[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: initCharacter(),\n    weapon: initWeapon(),\n    artifacts: Object.values(ArtifactType).map(\n      (type) => new Artifact(type, 1, 0, '')\n    ),\n\n    artifactSets: [initArtifactSet(), initArtifactSet(), initArtifactSet()],\n\n    enemyLevel: 1,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    reaction: Reaction.None,\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    teamCharacters: [initCharacter(), initCharacter(), initCharacter()],\n\n    characterOptions: [],\n    weaponOptions: [],\n    artifactSetOptions: [],\n    teamOptions: [],\n    artifactBuffOptions: [],\n\n    rotationTime: 0,\n    rotation: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = {};\n\n  modifierMixins: ModifierMixin[] = [];\n  statMixins: StatMixin[] = [];\n\n  talentAttackLevelExtra: number = 0;\n  talentSkillLevelExtra: number = 0;\n  talentBurstLevelExtra: number = 0;\n\n  // \"Overrides\" getModifierMixins for extra functionality and defaults based on state\n  // Gets all modifier mixins and updates cache (modifierMixins)\n  getModifierMixins: GetModifierMixinsFn = ({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n    updateCache = true,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamCharacters?: Character[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n    updateCache?: boolean;\n  } = {}): ModifierMixin[] => {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined &&\n      teamCharacters === undefined &&\n      teamOptions === undefined &&\n      artifactBuffOptions === undefined\n    ) {\n      return this.modifierMixins;\n    }\n\n    const modifierMixins = getModifierMixins({\n      character: character ?? this.state.character,\n      characterOptions: characterOptions ?? this.state.characterOptions,\n      weapon: weapon ?? this.state.weapon,\n      weaponOptions: weaponOptions ?? this.state.weaponOptions,\n      artifactSets: artifactSets ?? this.state.artifactSets,\n      artifactSetOptions: artifactSetOptions ?? this.state.artifactSetOptions,\n      teamCharacters: teamCharacters ?? this.state.teamCharacters,\n      teamOptions: teamOptions ?? this.state.teamOptions,\n      artifactBuffOptions:\n        artifactBuffOptions ?? this.state.artifactBuffOptions,\n    });\n\n    if (updateCache) {\n      this.modifierMixins = modifierMixins;\n    }\n\n    return modifierMixins;\n  };\n\n  // \"Overrides\" getStatMixins for extra functionality and defaults based on state\n  // Gets all stat mixins and updates cache (statMixins)\n  getStatMixins: GetStatMixinsFn = ({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n    updateCache = true,\n  } = {}): StatMixin[] => {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined &&\n      teamCharacters === undefined &&\n      teamOptions === undefined &&\n      artifactBuffOptions === undefined\n    ) {\n      return this.statMixins;\n    }\n\n    const statMixins = getStatMixins({\n      character: character ?? this.state.character,\n      characterOptions: characterOptions ?? this.state.characterOptions,\n      weapon: weapon ?? this.state.weapon,\n      weaponOptions: weaponOptions ?? this.state.weaponOptions,\n      artifactSets: artifactSets ?? this.state.artifactSets,\n      artifactSetOptions: artifactSetOptions ?? this.state.artifactSetOptions,\n      teamCharacters: teamCharacters ?? this.state.teamCharacters,\n      teamOptions: teamOptions ?? this.state.teamOptions,\n      artifactBuffOptions:\n        artifactBuffOptions ?? this.state.artifactBuffOptions,\n    });\n\n    if (updateCache) {\n      this.statMixins = statMixins;\n    }\n\n    return statMixins;\n  };\n\n  // \"Overrides\" getDamageModifier for extra functionality and defaults based on state\n  getDamageModifier: GetDamageModifierFn = ({\n    characterLevel = this.state.character.level,\n    enemyLevel = this.state.enemyLevel,\n    enemyRes = this.state.enemyRes,\n    critType = this.state.critType,\n    reaction = this.state.reaction,\n    talentAttackLevel = this.state.talentAttackLevel,\n    talentSkillLevel = this.state.talentSkillLevel,\n    talentBurstLevel = this.state.talentBurstLevel,\n    modifierMixins = this.modifierMixins,\n  } = {}): DamageModifier => {\n    const modifier = getDamageModifier({\n      characterLevel,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n      stats: this.totalStats,\n    });\n\n    // Update extra talent levels (from constellations etc) for display\n    this.talentAttackLevelExtra =\n      modifier.talentAttackLevel -\n      (talentAttackLevel ?? this.state.talentAttackLevel);\n    this.talentSkillLevelExtra =\n      modifier.talentSkillLevel -\n      (talentSkillLevel ?? this.state.talentSkillLevel);\n    this.talentBurstLevelExtra =\n      modifier.talentBurstLevel -\n      (talentBurstLevel ?? this.state.talentBurstLevel);\n\n    return modifier;\n  };\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = getAllArtifactSetBonuses(newArtifactSets);\n\n    this.updateTotalStats({\n      artifactSets,\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSets?: ArtifactSet[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    teamCharacters?: Character[];\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => {\n    const statMixins = this.getStatMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n      teamCharacters,\n      teamOptions,\n      artifactBuffOptions,\n    });\n\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel,\n      statMixins\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      teamCharacters,\n      characterOptions,\n      artifactSetOptions,\n      teamOptions,\n      artifactBuffOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    weapon,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifactSets?: ArtifactSet[];\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    teamCharacters?: Character[];\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n\n    const modifierMixins = this.getModifierMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n      teamCharacters,\n      teamOptions,\n      artifactBuffOptions,\n    });\n\n    const damageModifier = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n    });\n\n    this.talentValues = {};\n    Object.entries(character.talentFns).forEach(([type, fns]) => {\n      this.talentValues[type] = Object.entries(fns).reduce((acc, [id, fn]) => {\n        acc[id] = fn({ stats: this.totalStats, modifier: damageModifier });\n        return acc;\n      }, {} as Record<string, TalentValue>);\n    });\n  };\n\n  refreshApp = () => {\n    this.getStatMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n      teamCharacters: this.state.teamCharacters,\n      teamOptions: this.state.teamOptions,\n      artifactBuffOptions: this.state.artifactBuffOptions,\n    });\n    this.getModifierMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n      teamCharacters: this.state.teamCharacters,\n      teamOptions: this.state.teamOptions,\n      artifactBuffOptions: this.state.artifactBuffOptions,\n    });\n\n    this.updateArtifactSetBonuses({});\n    this.setState({});\n  };\n\n  render() {\n    return (\n      <Container className='app px-0' fluid>\n        <Navbar sticky='top' bg='light' className='d-md-none'>\n          <Nav>\n            <Nav.Item>\n              <Nav.Link href='#input-column'>Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#artifact-column'>Artifacts</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#stat-column'>Stats</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#talent-column'>Talents</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar>\n\n        <Row className='mx-0 flex-md-nowrap'>\n          <InputColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n            updateTotalStats={this.updateTotalStats}\n            updateTalentValues={this.updateTalentValues}\n            refreshApp={this.refreshApp}\n            talentAttackLevelExtra={this.talentAttackLevelExtra}\n            talentSkillLevelExtra={this.talentSkillLevelExtra}\n            talentBurstLevelExtra={this.talentBurstLevelExtra}\n          />\n          <ArtifactColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateTotalStats={this.updateTotalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n            getDamageModifier={this.getDamageModifier}\n            getStatMixins={this.getStatMixins}\n            getModifierMixins={this.getModifierMixins}\n          />\n          <StatColumn\n            appState={this.state}\n            totalStats={this.totalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n          />\n          <TalentColumn talentValues={this.talentValues} />\n          <DPSColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            artifactSetBonuses={this.artifactSetBonuses}\n            talentValues={this.talentValues}\n          />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\n// Function type definitions (for convenience)\nexport type GetModifierMixinsFn = (params?: {\n  character?: Character;\n  characterOptions?: CharacterOption[];\n  weapon?: Weapon;\n  weaponOptions?: WeaponOption[];\n  artifactSets?: ArtifactSet[];\n  artifactSetOptions?: ArtifactSetOption[];\n  teamCharacters?: Character[];\n  teamOptions?: CharacterOption[];\n  artifactBuffOptions?: ArtifactSetOption[];\n  updateCache?: boolean;\n}) => ModifierMixin[];\n\nexport type GetStatMixinsFn = (params?: {\n  character?: Character;\n  characterOptions?: CharacterOption[];\n  weapon?: Weapon;\n  weaponOptions?: WeaponOption[];\n  artifactSets?: ArtifactSet[];\n  artifactSetOptions?: ArtifactSetOption[];\n  teamCharacters?: Character[];\n  teamOptions?: CharacterOption[];\n  artifactBuffOptions?: ArtifactSetOption[];\n  updateCache?: boolean;\n}) => StatMixin[];\n\nexport type GetDamageModifierFn = (params?: {\n  characterLevel?: number;\n  enemyLevel?: number;\n  enemyRes?: Resistance;\n  critType?: CritType;\n  reaction?: Reaction;\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n  modifierMixins?: ModifierMixin[];\n}) => DamageModifier;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}