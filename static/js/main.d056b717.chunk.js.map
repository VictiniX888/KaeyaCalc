{"version":3,"sources":["data/Data.ts","character/Character.ts","stat/Stat.ts","artifact/types.ts","artifact/Artifact.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/IntInput.tsx","component/Picker.tsx","component/ArtifactBlock.tsx","optimization/Optimization.ts","talent/types.ts","component/Checkbox.tsx","component/OptimizerBlock.tsx","component/ArtifactColumn.tsx","artifact/ArtifactSet.ts","artifact/artifactSet/ResolutionOfSojourner.ts","artifact/artifactSet/TinyMiracle.ts","option/Option.ts","option/artifactSetOptions/ArtifactSetOption.ts","artifact/artifactSet/MartialArtist.ts","artifact/artifactSet/Gambler.ts","artifact/artifactSet/GladiatorsFinale.ts","option/Mixin.ts","artifact/artifactSet/ViridescentVenerer.ts","artifact/artifactSet/WanderersTroupe.ts","artifact/artifactSet/CrimsonWitch.ts","artifact/artifactSet/NoblesseOblige.ts","artifact/artifactSet/EmblemOfSeveredFate.ts","artifact/artifactSet/BraveHeart.ts","artifact/artifactSet/Berserker.ts","artifact/artifactSet/Instructor.ts","artifact/artifactSet/BlizzardStrayer.ts","artifact/artifactSet/Thundersoother.ts","artifact/artifactSet/Lavawalker.ts","artifact/artifactSet/MaidenBeloved.ts","artifact/artifactSet/BloodstainedChivalry.ts","artifact/artifactSet/ArchaicPetra.ts","artifact/artifactSet/RetracingBolide.ts","artifact/artifactSet/HeartOfDepth.ts","artifact/artifactSet/Tenacity.ts","artifact/artifactSet/PaleFlame.ts","artifact/artifactSet/Shimenawa.ts","artifact/ArtifactSetUtil.ts","component/ArtifactSetPicker.tsx","component/InputBlock.tsx","option/OptionUtils.ts","option/index.ts","modifier/Reaction.ts","component/OptionInput.tsx","component/ArtifactSetInputBlock.tsx","stat/Resistance.ts","modifier/CritType.ts","talent/TalentUtil.ts","character/albedo/AlbedoTalent.ts","character/albedo/Albedo.ts","option/characterOptions/CharacterOption.ts","character/aloy/AloyOption.ts","character/aloy/AloyPassive.ts","character/aloy/AloyTalent.ts","character/aloy/Aloy.ts","character/amber/AmberTalent.ts","character/amber/Amber.ts","character/ayaka/AyakaOption.ts","character/ayaka/AyakaTalent.ts","character/ayaka/Ayaka.ts","character/barbara/BarbaraTalent.ts","character/barbara/Barbara.ts","character/beidou/BeidouPassive.ts","character/beidou/BeidouTalent.ts","character/beidou/Beidou.ts","character/bennett/BennettTalent.ts","character/bennett/BennettTeamOption.ts","character/bennett/Bennett.ts","character/chongyun/ChongyunOption.ts","character/chongyun/ChongyunTalent.ts","character/chongyun/Chongyun.ts","character/diluc/DilucTalent.ts","character/diluc/DilucOption.ts","character/diluc/Diluc.ts","character/diona/DionaTalent.ts","character/diona/Diona.ts","character/eula/EulaTalent.ts","character/eula/Eula.ts","character/fischl/FischlTalent.ts","character/fischl/Fischl.ts","character/ganyu/GanyuTalent.ts","character/ganyu/Ganyu.ts","character/hutao/HutaoPassive.ts","character/hutao/HutaoTalent.ts","character/hutao/HutaoOption.ts","character/hutao/Hutao.ts","character/jean/JeanTalent.ts","character/jean/Jean.ts","character/kaeya/KaeyaTalent.ts","character/kaeya/Kaeya.ts","character/kazuha/KazuhaTalent.ts","option/characterOptions/ElementalAbsorptionOption.ts","character/kazuha/KazuhaOption.ts","character/kazuha/Kazuha.ts","character/keqing/KeqingTalent.ts","character/keqing/Keqing.ts","character/klee/KleeTalent.ts","character/klee/Klee.ts","character/kokomi/KokomiPassive.ts","character/kokomi/KokomiTalent.ts","character/kokomi/KokomiOption.ts","character/kokomi/Kokomi.ts","character/lisa/LisaTalent.ts","character/lisa/Lisa.ts","character/mona/MonaOption.ts","character/mona/MonaTalent.ts","character/mona/Mona.ts","character/ningguang/NingguangTalent.ts","character/ningguang/Ningguang.ts","character/noelle/NoelleTalent.ts","character/noelle/NoelleOption.ts","character/noelle/Noelle.ts","character/qiqi/QiqiTalent.ts","character/qiqi/Qiqi.ts","character/raiden/RaidenPassive.ts","character/raiden/RaidenTalent.ts","character/raiden/RaidenOption.ts","character/raiden/Raiden.ts","character/razor/RazorTalent.ts","character/razor/Razor.ts","character/rosaria/RosariaTalent.ts","character/rosaria/Rosaria.ts","character/sara/SaraTalent.ts","character/sara/Sara.ts","character/sayu/SayuTalent.ts","character/sayu/SayuOption.ts","character/sayu/Sayu.ts","character/sucrose/SucroseOption.ts","character/sucrose/SucroseTalent.ts","character/sucrose/Sucrose.ts","character/tartaglia/TartagliaTalent.ts","character/tartaglia/Tartaglia.ts","character/venti/VentiTalent.ts","character/venti/VentiOption.ts","character/venti/Venti.ts","character/xiangling/XianglingTalent.ts","character/xiangling/Xiangling.ts","character/xiao/XiaoOption.ts","character/xiao/XiaoTalent.ts","character/xiao/Xiao.ts","character/xingqiu/XingqiuTalent.ts","character/xingqiu/Xingqiu.ts","character/xinyan/XinyanTalent.ts","character/xinyan/Xinyan.ts","character/yanfei/YanfeiOption.ts","character/yanfei/YanfeiTalent.ts","character/yanfei/Yanfei.ts","character/yoimiya/YoimiyaOption.ts","character/yoimiya/YoimiyaPassive.ts","character/yoimiya/YoimiyaTalent.ts","character/yoimiya/Yoimiya.ts","character/zhongli/ZhongliTalent.ts","character/zhongli/ZhongliTeamOption.ts","character/CharacterUtil.ts","character/zhongli/Zhongli.ts","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","weapon/Weapon.ts","option/weaponOptions/WeaponOption.ts","weapon/dragonsbane/DragonsBane.ts","weapon/dragonsbane/DragonsBanePassive.ts","weapon/engulfinglightning/EngulfingLightning.ts","weapon/engulfinglightning/EngulfingLightningPassive.ts","weapon/everlastingmoonglow/EverlastingMoonglow.ts","weapon/everlastingmoonglow/EverlastingMoonglowPassive.ts","weapon/luxurioussealord/LuxuriousSeaLord.ts","weapon/luxurioussealord/LuxuriousSeaLordPassive.ts","weapon/solarpearl/SolarPearl.ts","weapon/solarpearl/SolarPearlPassive.ts","weapon/WeaponUtil.ts","weapon/staffofhoma/StaffOfHoma.ts","weapon/staffofhoma/StaffOfHomaPassive.ts","weapon/thecatch/TheCatch.ts","weapon/thecatch/TheCatchPassive.ts","weapon/whiteblind/Whiteblind.ts","weapon/whiteblind/WhiteblindPassive.ts","option/characterOptions/ReactionOption.ts","component/SaveBlock.tsx","save/Save.ts","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/TeamInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","component/DPSOptionInput.tsx","component/DPSAttackInput.tsx","dps/DPSCalculator.ts","component/DPSColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","weaponPassiveData","weaponPassiveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getWeaponPassiveData","getWeaponPassiveParams","refinement","passive","passiveParams","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","getWeaponPassiveAt","Character","hasAscended","_id","name","baseStats","statCurveMapping","talentFns","_level","_hasAscended","innateStats","characterOptions","passiveOptions","teamOptions","this","value","data","getTalentFns","getInnateStatsAt","getCharacterOptions","ascensionLevel","getAscensionLevel","getPassives","getPassiveOptions","getTeamOptions","prevAscensionLevel","isNaN","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","multiplier","bonus","getCharacterOptionConstuctors","Option","getAllPassives","filter","flatMap","options","oldOptionIds","newOptions","includes","concat","keptOptionIds","option","statMixin","mixin","modifierMixin","getTeamOptionConstructors","unroll","getStatDisplayValue","prop","isPercentage","toFixed","Math","round","toString","getDamageDisplayValue","values","str","length","every","slice","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","talentAttackLevel","talentSkillLevel","talentBurstLevel","statMixins","characterStats","weaponStats","stats","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","energyRecharge","apply","totalStats","baseAtk","flatAtk","atkBonus","flatDef","baseDef","defBonus","flatHp","baseHp","hpBonus","critRate","critDmg","elementalMastery","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","shieldStrength","dmgBonus","normalDmgBonus","chargedDmgBonus","plungeDmgBonus","skillDmgBonus","burstDmgBonus","chargedCritRate","burstCritRate","overloadDmgBonus","burningDmgBonus","vaporizeDmgBonus","meltDmgBonus","capitalize","toUpperCase","ArtifactType","InputStat","rawValue","convertStatToDisplayValue","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","setMainStatValue","getArtifactMainStatValue","i","setProp","setInputValue","setValue","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","Form","Label","htmlFor","srOnly","label","Control","size","className","React","Component","FloatInput","parseFloat","InputRow","Row","children","IntInput","Picker","selectedValue","target","handleChange","onChange","as","Item","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactRarity","setArtifactLevel","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatInputValue","statObj","substats","optimizeSubstats","possibleStats","maxRolls","erThreshold","optimizeTalentType","optimizeTalentId","appState","damageModifier","maxDmg","optimalSubstatRolls","optimalArtifacts","baseArtifacts","generateBaseArtifacts","baseEr","baseErRolls","ceil","erMainStatCount","generateRollCombinationsKqm","combination","erDistribution","find","push","rolls","inputStat","sIndex","setSubStatValue","addRollsToArtifacts","talentDmg","modifier","damage","subStatRolls","mainStats","sameMainStatCount","currentMaxRolls","min","combinations","current","backCombinations","prevArtifacts","iArtifact","jArtifact","TalentType","Element","AttackType","ScalingType","Checkbox","checked","Check","Input","OptimizerBlock","substatRolls","selectedSubstats","targetTalentType","targetTalentId","setMaxRolls","setSelectedSubstats","selected","substat","setErThreshold","setTargetTalentType","setTargetTalentId","onOptimizeClick","result","updateTotalStats","setAppState","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","talentValues","Button","variant","onClick","ArtifactColumn","Col","md","xs","ArtifactSet","bonusThresholds","setBonusData","_pieces","setBonusSets","setBonuses","getSetBonusSetsAt","getSetBonusesAt","getOptions","prevPieces","getAllSetBonuses","setBonus","threshold","bonuses","statBonus","extraStats","ResolutionOfSojourner","resolutionOfSojourner4Pc","TinyMiracle","tinyMiracle2Pc","params2Pc","element","ArtifactSetOption","MartialArtist","martialArtist2Pc","martialArtist4Pc","params4Pc","Gambler","gambler2Pc","GladiatorsFinale","gladiatorsFinale4Pc","Priority","ViridescentVenerer","viridescentVenerer4Pc","choices","Cryo","Electro","Hydro","Pyro","enemyResReduction","add","WanderersTroupe","wanderersTroupe4Pc","CrimsonWitch","crimsonWitch4Pc","param","stacks","NoblesseOblige","noblesseOblige2Pc","noblesseOblige4Pc","EmblemOfSeveredFate","emblemOfSeveredFate4Pc","priority","Last","BraveHeart","braveHeart4Pc","Berserker","berserker4Pc","Instructor","instructor4Pc","BlizzardStrayer","blizzardStrayer4Pc","Thundersoother","thundersoother4Pc","Lavawalker","lavawalker4Pc","MaidenBeloved","maidenBeloved4Pc","healedBonus","BloodstainedChivalry","bloodstainedChivalry4Pc","ArchaicPetra","archaicPetra4Pc","RetracingBolide","retracingBolide4Pc","HeartOfDepth","heartOfDepth4Pc","Tenacity","tenacity4Pc","PaleFlame","paleFlame4Pc","Shimenawa","shimenawa4Pc","artifactSets","resolutionofsojourner","tinymiracle","martialartist","gambler","gladiatorsfinale","viridescentvenerer","wandererstroupe","crimsonwitchofflames","noblesseoblige","emblemofseveredfate","braveheart","berserker","instructor","blizzardstrayer","thundersoother","lavawalker","maidenbeloved","bloodstainedchivalry","archaicpetra","retracingbolide","heartofdepth","tenacityofthemillelith","paleflame","shimenawasreminiscence","getArtifactSetConstructor","initArtifactSet","ArtifactSetConstructor","ArtifactSetPicker","setArtifactSetId","index","artifactSetId","sort","name1","name2","localeCompare","InputBlock","isBooleanOption","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","Reaction","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","choice","ArtifactSetInputBlock","artifactSetOptions","artifactSet","updateArtifactSetBonuses","setArtifactSetPieces","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","Map","set","Anemo","Geo","Physical","get","prevValue","CritType","calculateBaseDamage","scalingType","flatDmg","Attack","Defense","Hp","calculateAmplifyingReactionMultiplier","reaction","amplifyingStrength","triggerElement","Melt","Vaporize","calculateAmplifyingStrengthMultiplier","reactionBonus","calculateTotalDamage","attackType","Normal","normalAttackFlatDmg","Charged","chargedAttackFlatDmg","Skill","skillFlatDmg","baseDmg","getDamageBonus","crit","critType","Crit","Average","Burst","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","calculateHp","flatBonus","normalAttackSingle","infusionNormal","infusion","normalAttackMulti","hits","damages","chargedAttackSingle","chargedAttackMulti","aimShot","aimShotCharged","plungeAttack","infusionPlunge","Plunge","skillSingle","skillMulti","burstSingle","burstMulti","typelessAttack","None","healingValue","flatHealing","calculateHealing","hpValue","shieldHpValue","dmgAbsorption","dionaHoldSkill","calculateDmgAbsorption","atkBuffValue","attackParams","skillParams","burstParams","albedoAttack","chargedDmg","plungeDmg","lowPlungeDmg","highPlungeDmg","albedoSkill","skillDmg","transientBlossomDmg","albedoBurst","burstDmg","fatalBlossomDmg","albedoTalents","Albedo","CharacterOption","AloyOptionCoil","_talentAttackLevel","_talentBurstLevel","aloyOptions","a1Data","a4Data","a1Params","a4Params","AloyOptionAscension1","aloyAscension1","AloyOptionAscension4","aloyAscension4","aloyPassives","aloyAttack","aimShotDmg","chargedAimShotDmg","aloySkill","freezeBombDmg","chillwaterBombletDmg","aloyBurst","aloyTalents","Aloy","amberAttack","amberSkill","explosionDmg","baronBunnyHp","amberBurst","dmgPerWave","totalDmg","talentValue","amberTalents","Amber","AyakaOptionInfusion","ayakaOptions","ayakaAttack","ayakaSkill","ayakaBurst","cuttingDmg","bloomDmg","ayakaTalents","Ayaka","barbaraTalents","hpRegenContinuous","hpRegenOnHit","dropletDmg","hpRegen","Barbara","beidouPassives","beidouTalents","chargedSpinDmg","chargedFinalDmg","shieldHp","dmgBonusOnHitTaken","lightningDmg","Beidou","bennettTalents","pressDmg","chargeLevel1Dmg","chargeLevel2Dmg","hpRegenContinuousPerSecond","BennettOptionAtkBuff","bennettTeamOptions","atkBuff","Bennett","chongyunOptions","chongyunTalents","Chongyun","dilucTalents","slashingDmg","dot","dilucOptions","_talentSkillLevel","passiveData","Diluc","dionaTalents","icyPawDmgPerPaw","shieldHpPress","shieldHpHold","continuousFieldDmg","hpRegenContinuousTime","Diona","eulaTalents","holdDmg","icewhirlBrandDmg","lightfallSwordBaseDmg","lightfallSwordStackDmg","Eula","fischlTalents","ozDmg","summoningDmg","fallingThunderDmg","Fischl","ganyuTalents","aimShotChargeLevel1","frostflakeArrowDmg","frostflakeArrowBloomDmg","iceLotusHp","iceShardDmg","Ganyu","hutaoPassives","hutaoTalents","bloodBlossomDmg","burstDmgLowHp","hpRegenLowHp","hutaoOptions","flatAtkBonus","Hutao","jeanTalents","fieldEnterExitDmg","fieldActivationHealing","Jean","kaeyaTalents","Kaeya","kazuhaTalents","dotElementalAbsorption","elementalAbsorption","ElementalAbsoprtionOption","kazuhaOptions","Kazuha","keqingTalents","lightningStilettoDmg","thunderclapSlashDmg","burstInitDmg","consecutiveSlashDmg","lastAttackDmg","Keqing","kleeTalents","jumpyDumptyDmg","mineDmg","sparksNSplashDmg","Klee","kokomiPassives","kokomiHealingBonusDmg","kokomiTalents","getKokomiNormalAttackModifier","getKokomiChargedAttackModifier","rippleDmg","getKokomiSkillModifier","kokomiBurst","newModifier","normalAttackBonusDmg","chargedAttackBonusDmg","skillBonusDmg","kokomiOptions","Kokomi","lisaTalents","holdDmgStack0","holdDmgStack1","holdDmgStack2","holdDmgStack3","Lisa","monaOptions","monaTalents","Mona","ningguangTalents","normalAtkDmg","starJadeDmg","jadeScreenHp","dmgPerGem","Ningguang","noelleTalents","healing","firstSwingDmg","noelleOptions","totalDef","Noelle","qiqiTalents","heraldOfFrostDmg","Qiqi","raidenPassives","raidenTalents","coordinatedAtkDmg","musouNoHitotachiDmg","getInitialResolveBonus","getAttackResolveBonus","resolveStacks","raidenOptions","Raiden","razorTalents","Razor","rosariaTalents","iceLanceDot","Rosaria","saraTalents","tenguJuuraiAmbushDmg","tenguJuuraiTitanbreakerDmg","tenguJuuraiStormclusterDmg","Sara","sayuTalents","fuufuuWindwheelDmg","fuufuuWhirlwindKickPressDmg","fuufuuWhirlwindKickHoldDmg","fuufuuWindwheelElementalDmg","fuufuuWhirlwindKickElementalDmg","activationDmg","activationHealing","mujimujiDarumaDmg","mujimujiDarumaHealing","sayuOptions","Sayu","sucroseOptions","sucroseTalents","Sucrose","tartagliaTalents","riptideFlashDmg","riptideBurstDmg","stanceChangeDmg","riptideSlashDmg","burstDmgMelee","burstDmgRanged","riptideBlastDmg","Tartaglia","ventiTalents","ventiOptions","Venti","xianglingTalents","guobaDmg","swing1HitDmg","swing2HitDmg","swing3HitDmg","pyronadoDmg","Xiangling","xiaoOptions","xiaoTalents","Xiao","xingqiuTalents","swordRainDmg","Xingqiu","xinyanTalents","swingDmg","shieldHpLevel1","shieldHpLevel2","shieldHpLevel3","pyroDot","Xinyan","yanfeiOptions","yanfeiTalents","chargedDmgSeal0","chargedDmgSeal1","chargedDmgSeal2","chargedDmgSeal3","chargedDmgSeal4","Yanfei","yoimiyaOptions","yoimiyaSkill","yoimiyaPassives","yoimiyaTalents","getYoimiyaNormalAttackMultiplier","kindlingArrowDmg","aurousBlazeExplosionDmg","Yoimiya","zhongliTalents","stoneSteeleDmg","resonanceDmg","zhongliTeamOptions","characters","albedo","aloy","amber","ayaka","barbara","beidou","bennett","chongyun","diluc","diona","eula","fischl","ganyu","hutao","jean","kaeya","kazuha","keqing","klee","kokomi","lisa","mona","ningguang","noelle","qiqi","raiden","razor","rosaria","sara","sayu","sucrose","tartaglia","venti","xiangling","xiao","xingqiu","xinyan","yanfei","yoimiya","zhongli","getCharacterConstructor","initCharacter","CharacterConstructor","CharacterPicker","setCharacterId","CharacterInputBlock","setCharacterLevel","setIsCharacterAscended","isAscended","ModifierInputBlock","setEnemyLevel","updateTalentValues","setEnemyRes","setCritType","setReaction","ToggleButtonGroup","ToggleButton","Weapon","rank","passiveDataSet","_weaponLevel","_refinement","getPassive","getStatsAt","weaponLevel","weaponStatCurves","shouldKeepValue","newOption","statBonuses","WeaponOption","DragonsBane","dragonsBanePassive","EngulfingLightning","engulfingLightningPassive","EverlastingMoonglow","everlastingMoonglowPassive","LuxuriousSeaLord","luxuriousSeaLordPassive","SolarPearl","solarPearlPassive","weapons","dragonsbane","engulfinglightning","staffofhoma","totalHp","staffOfHomaPassive","thecatch","theCatchPassive","everlastingmoonglow","solarpearl","luxurioussealord","whiteblind","whiteblindPassive","getWeaponConstructor","initWeapon","WeaponConstructor","ReactionOption","SaveBlock","onSaveClick","saveInputName","save","characterHasAscended","weaponHasAscended","weaponRefinement","artifactSetPieces","teamCharacterIds","teamCharacters","weaponOptions","rotationTime","rotation","talentType","talentId","saves","window","localStorage","setItem","JSON","stringify","addSave","onSaveInputChange","onLoadClick","selectedSave","refreshApp","savedArtifact","artifactType","characterOption","weaponOption","artifactSetOption","teamOption","allOptions","attackSave","OptionConstructor","constructor","loadSave","onLoadInputChange","onDeleteClick","showDeleteWarning","onModalConfirm","deleteSave","onModalHide","getItem","parse","placeholder","Modal","show","onHide","Footer","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","setIsWeaponAscended","setWeaponRefinement","TeamInputBlock","InputColumn","ArtifactSetStatBlock","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","TalentColumn","DPSOptionInput","setOptionId","setOption","DPSAttackInput","setTalentType","setAttack","setTalentId","setMultiplier","splice","calculateTalentValue","getDamageModifier","getStatMixins","getModifierMixins","initializeAllOptions","oldOption","updateCache","modifierMixins","talentFn","defaultAttack","DPSColumn","dpr","dps","updateTalentValue","dmg","setRotationTime","time","isFinite","App","characterPassiveMixins","getPassiveModifierMixins","weaponPassiveMixins","artifactSetMixins","characterOptionMixins","weaponOptionMixins","artifactSetOptionMixins","teamOptionMixins","unarrangedMixins","groupedMixins","array","getPassiveStatMixins","callback","newArtifactSets","newChar","fns","fn","Container","fluid","Navbar","sticky","bg","Nav","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d056b717.chunk.js","sourcesContent":["import type * as Data from './types';\nimport type { TalentType } from '../talent/types';\n\nimport characterDataRaw from './characterdata.json';\nimport characterAscensionBonusDataRaw from './characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from './characterstatcurvedata.json';\nimport weaponDataRaw from './weapondata.json';\nimport weaponAscensionBonusDataRaw from './weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from './weaponstatcurvedata.json';\nimport weaponPassiveDataRaw from './weaponpassivedata.json';\nimport talentDataRaw from './talentdata.json';\nimport artifactSetDataRaw from './artifactsetdata.json';\nimport artifactSetBonusDataRaw from './artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from './artifactmainstatdata.json';\n\nimport propMappingRaw from './propmapping.json';\nimport talentDescMappingRaw from './talentdescmapping.json';\nimport optionMappingRaw from './optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\nconst weaponPassiveData = weaponPassiveDataRaw as Record<\n  string,\n  Data.WeaponPassiveSetData\n>;\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getWeaponPassiveData(id: string) {\n  return getData(id, weaponPassiveData);\n}\n\nexport function getWeaponPassiveParams(id: string, refinement: number) {\n  return getWeaponPassiveData(id).passive[refinement]?.passiveParams ?? [];\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\nexport function getWeaponPassiveAt(\n  refinement: number,\n  passives: Data.WeaponPassiveSetData\n): Data.WeaponPassiveData | undefined {\n  return passives.passive[refinement];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n} from '../data/Data';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../data/types';\nimport type { Talents } from '../talent/types';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\n\nexport default class Character {\n  constructor(id: string, level: number = 1, hasAscended: boolean = false) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n    this.talentFns = this.getTalentFns();\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n    this.teamOptions = this.getTeamOptions();\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n  talentFns: Talents = {};\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n  teamOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Override in derived classes\n  getTalentFns(): Talents {\n    return {};\n  }\n\n  // Override in derived classes if character has base options\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return [];\n  }\n\n  getCharacterOptions(): CharacterOption[] {\n    return this.getCharacterOptionConstuctors().map((Option) => new Option());\n  }\n\n  // Override in derived classes\n  getAllPassives(): CharacterPassive[] {\n    return [];\n  }\n\n  // Returns passives that character should have based on their current ascension\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    return this.getAllPassives().filter(\n      (passive) => ascensionLevel >= passive.ascensionLevel\n    );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(ascensionLevel: number, prevAscensionLevel?: number) {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n\n    return characterOptions.concat(passiveOptions);\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  // Override in derived classes to implement team buffs\n  getTeamOptionConstructors(): typeof CharacterOption[] {\n    return [];\n  }\n\n  getTeamOptions(): CharacterOption[] {\n    return this.getTeamOptionConstructors().flatMap((Option) =>\n      new Option().unroll()\n    );\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from '../data/Data';\nimport { StatMixin } from '../option/Mixin';\nimport Weapon from '../weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputted value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\n// Returns a number representing the value to display (e.g. in stat inputs)\nexport function convertStatToDisplayValue(\n  value: number,\n  isPercentage: boolean\n) {\n  if (isPercentage) {\n    return value * 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin.apply(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n  if (combinedStats.burstCritRate !== undefined) {\n    totalStats.burstCritRate = combinedStats.burstCritRate;\n  }\n\n  if (combinedStats.overloadDmgBonus !== undefined) {\n    totalStats.overloadDmgBonus = combinedStats.overloadDmgBonus;\n  }\n  if (combinedStats.burningDmgBonus !== undefined) {\n    totalStats.burningDmgBonus = combinedStats.burningDmgBonus;\n  }\n  if (combinedStats.vaporizeDmgBonus !== undefined) {\n    totalStats.vaporizeDmgBonus = combinedStats.vaporizeDmgBonus;\n  }\n  if (combinedStats.meltDmgBonus !== undefined) {\n    totalStats.meltDmgBonus = combinedStats.meltDmgBonus;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatToDisplayValue, convertStatValue } from '../stat/Stat';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setInputValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n\n  setValue(value: number) {\n    this.value = value;\n    if (this.stat !== '') {\n      this.rawValue = convertStatToDisplayValue(\n        value,\n        propMapping[this.stat].isPercentage\n      );\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  pieces: number;\n  options?: typeof ArtifactSetOption[];\n  extraStats?: Stat[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stat, Stats } from '../data/types';\nimport { getArtifactMainStatValue } from '../data/Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatInputValue(i: number, value: number) {\n    this.subStats[i].setInputValue(value);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value + (stats[subStat.stat] ?? 0);\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          type='number'\n          size='sm'\n          value={displayString}\n          onInput={this.handleInput}\n          className={`number-input ${this.props.className ?? ''}`}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\nimport Row from 'react-bootstrap/esm/Row';\n\nclass InputRow extends React.Component {\n  render() {\n    return <Row className='input-row no-gutters'>{this.props.children}</Row>;\n  }\n}\n\nexport default InputRow;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          as='select'\n          size='sm'\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={`picker ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </Form.Control>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../artifact/Artifact';\nimport { propMapping } from '../data/Data';\nimport { capitalize, getStatDisplayValue } from '../stat/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactRarity = (rarity: number) => {\n    this.props.artifact.rarity = rarity;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactLevel = (level: number) => {\n    this.props.artifact.level = level;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatInputValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-rarity`}\n            label='Rarity:'\n            defaultValue={1}\n            value={artifact.rarity}\n            onInput={this.setArtifactRarity}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-level`}\n            label='Level:'\n            defaultValue={0}\n            value={artifact.level}\n            onInput={this.setArtifactLevel}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label='Main Stat:'\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <p>\n            {getStatDisplayValue(\n              artifact.mainStat.stat,\n              artifact.mainStat.value\n            )}\n          </p>\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { StatMixin } from '../option/Mixin';\nimport { getTotalStatsAt } from '../stat/Stat';\n\nexport type RollDistribution = {\n  stat: string;\n  rolls: number;\n};\n\ntype SubstatOptimzerResult = {\n  subStatRolls: RollDistribution[];\n  artifacts: Artifact[];\n};\n\n// Average substat rolls, as per KQM guidelines\nexport const substats: Record<string, number> = {\n  hpBonus: 0.0496,\n  flatHp: 253.94,\n  atkBonus: 0.0496,\n  flatAtk: 16.54,\n  defBonus: 0.062,\n  flatDef: 19.68,\n  elementalMastery: 19.82,\n  energyRecharge: 0.0551,\n  critRate: 0.0331,\n  critDmg: 0.0662,\n};\n\n// Optimize substats according to KQM standardized guidelines\n// 20 preallocated fixed subs (2 of each substat)\n// maxRolls liquid subs (default/max = 20)\n// each sub type can have maximum 2 rolls per different main stat type\nexport function optimizeSubstats(\n  possibleStats: string[],\n  maxRolls: number,\n  erThreshold: number,\n  optimizeTalentType: string,\n  optimizeTalentId: string,\n  appState: AppState,\n  artifactSetBonuses: Stats,\n  damageModifier: DamageModifier,\n  statMixins: StatMixin[]\n): SubstatOptimzerResult {\n  let maxDmg = 0;\n  let optimalSubstatRolls: RollDistribution[] = [];\n  let optimalArtifacts: Artifact[] = appState.artifacts;\n\n  // Roll ER to reach threshold\n  const baseArtifacts = generateBaseArtifacts(appState.artifacts);\n  const baseTotalStats = getTotalStatsAt(\n    appState.character,\n    appState.weapon,\n    artifactSetBonuses,\n    baseArtifacts,\n    appState.talentAttackLevel,\n    appState.talentSkillLevel,\n    appState.talentBurstLevel,\n    statMixins\n  );\n  const baseEr = baseTotalStats.energyRecharge ?? 0;\n\n  let baseErRolls = Math.ceil((erThreshold - baseEr) / substats.energyRecharge);\n\n  const erMainStatCount = baseArtifacts\n    .map((artifact) => artifact.mainStat.stat)\n    .filter((mainStat) => mainStat === 'energyRecharge').length;\n\n  if (baseErRolls < 0) {\n    baseErRolls = 0;\n  } else if (baseErRolls > 2 * (5 - erMainStatCount)) {\n    baseErRolls = 2 * (5 - erMainStatCount);\n  }\n\n  // Generate all combinations\n  const combinations = generateRollCombinationsKqm(\n    possibleStats,\n    maxRolls - baseErRolls,\n    appState.artifacts.map((artifact) => artifact.mainStat.stat),\n    baseErRolls\n  );\n\n  combinations.forEach((combination) => {\n    // Add in ER threshold rolls\n    if (baseErRolls > 0) {\n      const erDistribution = combination.find(\n        ({ stat }) => stat === 'energyRecharge'\n      );\n      if (erDistribution === undefined) {\n        combination.push({ stat: 'energyRecharge', rolls: baseErRolls });\n      } else {\n        erDistribution.rolls += baseErRolls;\n      }\n    }\n\n    const artifacts = generateBaseArtifacts(appState.artifacts);\n\n    addRollsToArtifacts(combination, artifacts);\n\n    const totalStats = getTotalStatsAt(\n      appState.character,\n      appState.weapon,\n      artifactSetBonuses,\n      artifacts,\n      appState.talentAttackLevel,\n      appState.talentSkillLevel,\n      appState.talentBurstLevel,\n      statMixins\n    );\n\n    // Calculate talent damage\n    const talentDmg =\n      appState.character.talentFns?.[optimizeTalentType]?.[optimizeTalentId]?.({\n        stats: totalStats,\n        modifier: damageModifier,\n      })?.damage?.[0] ?? 0;\n\n    // Update optimal rolls\n    if (talentDmg > maxDmg) {\n      optimalSubstatRolls = combination;\n      optimalArtifacts = artifacts;\n      maxDmg = talentDmg;\n    }\n  });\n\n  return {\n    subStatRolls: optimalSubstatRolls,\n    artifacts: optimalArtifacts,\n  };\n}\n\n// Recursive function to generate all substat combinations according to KQM 2*n rule\nfunction generateRollCombinationsKqm(\n  possibleStats: string[],\n  maxRolls: number,\n  mainStats: string[],\n  baseErRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const sameMainStatCount = mainStats.filter(\n    (mainStat) => possibleStats[0] === mainStat\n  ).length;\n  let currentMaxRolls = Math.min((5 - sameMainStatCount) * 2, maxRolls);\n  if (possibleStats[0] === 'energyRecharge') {\n    currentMaxRolls -= baseErRolls;\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = currentMaxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinationsKqm(\n      possibleStats.slice(1),\n      maxRolls - i,\n      mainStats,\n      baseErRolls\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n\n// Recursive function to generate all combinations of possibleStats.length numbers that sum to maxRolls\n// Generated combinations are not guaranteed to be valid substat combinations\n/*\nfunction generateRollCombinations(\n  possibleStats: string[],\n  maxRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = maxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinations(\n      possibleStats.slice(1),\n      maxRolls - i\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n*/\n\n// Generate artifacts with 2 of each substat\nfunction generateBaseArtifacts(prevArtifacts: Artifact[]): Artifact[] {\n  const artifacts = prevArtifacts.map((artifact) => {\n    return new Artifact(\n      artifact.type,\n      artifact.rarity,\n      artifact.level,\n      artifact.mainStat.stat\n    );\n  });\n\n  // Set artifact substats according to currentSubstatRolls\n  let iArtifact = 0;\n  let jArtifact = 0;\n  Object.entries(substats).forEach(([stat, value]) => {\n    artifacts[iArtifact].setSubStatProp(jArtifact, stat);\n    artifacts[iArtifact].setSubStatValue(jArtifact, value * 2);\n    if (++jArtifact >= 4) {\n      jArtifact = 0;\n      if (++iArtifact >= 5) {\n        // This really should not happen\n        iArtifact = 0;\n      }\n    }\n  });\n\n  return artifacts;\n}\n\n// Add liquid subs to fixed subs without replacing any fixed subs\nfunction addRollsToArtifacts(\n  combination: RollDistribution[],\n  artifacts: Artifact[]\n) {\n  const subStats = artifacts.flatMap((artifact) => artifact.subStats);\n  combination.forEach(({ stat, rolls }) => {\n    const subStat = subStats.find((inputStat) => inputStat.stat === stat);\n    if (subStat === undefined) {\n      let sIndex = 0;\n      artifacts\n        .find((artifact) =>\n          artifact.subStats.find((inputStat, i) => {\n            sIndex = i;\n            return isNaN(inputStat.value);\n          })\n        )\n        ?.setSubStatValue(sIndex, substats[stat] * rolls);\n    } else {\n      subStat.setValue(subStat.value + substats[stat] * rolls);\n    }\n  });\n}\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport type TalentFn = (props: TalentProps) => TalentValue;\n\nexport type Talents = Record<string, Record<string, TalentFn>>;\n\nexport type TalentValueSet = Record<string, Record<string, TalentValue>>;\n\nexport interface TalentValue {\n  damage: number[];\n  element?: Element;\n}\n\nexport interface TalentProps {\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  None = 'none',\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <div>\n        <Form.Check\n          type='checkbox'\n          className={`checkbox ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.isLabelShown() ? (\n            <Form.Check.Label>{this.props.label}</Form.Check.Label>\n          ) : (\n            <Form.Check.Label></Form.Check.Label>\n          )}\n\n          <Form.Check.Input\n            type='checkbox'\n            checked={value}\n            onChange={this.handleChange}\n          />\n        </Form.Check>\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Button from 'react-bootstrap/esm/Button';\nimport Card from 'react-bootstrap/esm/Card';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport { propMapping, talentDescMapping } from '../data/Data';\nimport DamageModifier from '../modifier/DamageModifer';\nimport {\n  optimizeSubstats,\n  RollDistribution,\n  substats,\n} from '../optimization/Optimization';\nimport { StatMixin } from '../option/Mixin';\nimport { TalentValueSet } from '../talent/types';\nimport Checkbox from './Checkbox';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptimizerBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  damageModifier: DamageModifier;\n  statMixins: StatMixin[];\n  talentValues: TalentValueSet;\n};\n\ntype OptimizerBlockState = {\n  maxRolls: number;\n  selectedSubstats: string[];\n  erThreshold: number;\n  targetTalentType: string;\n  targetTalentId: string;\n  substatRolls: RollDistribution[];\n};\n\nclass OptimizerBlock extends React.Component<\n  OptimizerBlockProps,\n  OptimizerBlockState\n> {\n  state: OptimizerBlockState = {\n    substatRolls: [],\n    selectedSubstats: [],\n    erThreshold: 100,\n    targetTalentType: '',\n    targetTalentId: '',\n    maxRolls: 20,\n  };\n\n  setMaxRolls = (maxRolls: number) => {\n    this.setState({ maxRolls });\n  };\n\n  setSelectedSubstats = (stat: string) => (selected: boolean) => {\n    if (selected) {\n      if (!this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: [...this.state.selectedSubstats, stat],\n        });\n      }\n    } else {\n      if (this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: this.state.selectedSubstats.filter(\n            (substat) => substat !== stat\n          ),\n        });\n      }\n    }\n  };\n\n  setErThreshold = (value: number) => {\n    if (isNaN(value)) {\n      this.setState({ erThreshold: 0 });\n    } else {\n      this.setState({ erThreshold: value });\n    }\n  };\n\n  setTargetTalentType = (value: string) => {\n    this.setState({ targetTalentType: value });\n  };\n\n  setTargetTalentId = (value: string) => {\n    this.setState({ targetTalentId: value });\n  };\n\n  onOptimizeClick = () => {\n    if (\n      this.state.targetTalentType !== undefined &&\n      this.state.targetTalentId !== ''\n    ) {\n      const result = optimizeSubstats(\n        this.state.selectedSubstats,\n        this.state.maxRolls,\n        this.state.erThreshold / 100,\n        this.state.targetTalentType,\n        this.state.targetTalentId,\n        this.props.appState,\n        this.props.artifactSetBonuses,\n        this.props.damageModifier,\n        this.props.statMixins\n      );\n\n      this.props.updateTotalStats({ artifacts: result.artifacts });\n      this.props.setAppState({ artifacts: result.artifacts });\n      this.setState({ substatRolls: result.subStatRolls });\n    }\n  };\n\n  render() {\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='0'\n            className='bg-transparent border-0'\n          >\n            <h3>Substat Optimizer</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n          <Accordion.Collapse eventKey='0'>\n            <Card.Body>\n              <div className='input-block'>\n                <p>Fixed Substats: 20</p>\n\n                <InputRow>\n                  <IntInput\n                    className='level-input'\n                    id={'optimizer-liquid-substats'}\n                    label='Liquid Substats:'\n                    defaultValue={20}\n                    value={this.state.maxRolls}\n                    onInput={this.setMaxRolls}\n                  />\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <p>Select substats to optimize:</p>\n                {Object.keys(substats).map((stat) => (\n                  <InputRow key={stat}>\n                    <Checkbox\n                      id={`optimizer-selected-substats-${stat}`}\n                      label={`${propMapping[stat].name}`}\n                      defaultValue={false}\n                      value={this.state.selectedSubstats.includes(stat)}\n                      onChange={this.setSelectedSubstats(stat)}\n                    />\n                  </InputRow>\n                ))}\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <FloatInput\n                    className='stat-input'\n                    id={'optimizer-er-threshold'}\n                    label='ER Threshold:'\n                    defaultValue={100}\n                    value={this.state.erThreshold}\n                    onInput={this.setErThreshold}\n                  />\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <Picker\n                    id={`optimizer-target-talent-type`}\n                    label='Target Talent Type:'\n                    defaultValue=''\n                    value={this.state.targetTalentType}\n                    onChange={this.setTargetTalentType}\n                  >\n                    <Picker.Item value='' label='' />\n                    {Object.keys(this.props.talentValues).map((type) => (\n                      <Picker.Item\n                        key={type}\n                        value={type}\n                        label={talentDescMapping[type]}\n                      />\n                    ))}\n                  </Picker>\n                </InputRow>\n\n                <InputRow>\n                  <Picker\n                    id={`optimizer-target-talent-id`}\n                    label='Target Talent Name:'\n                    defaultValue=''\n                    value={this.state.targetTalentId}\n                    onChange={this.setTargetTalentId}\n                  >\n                    <Picker.Item value='' label='' />\n                    {Object.keys(\n                      this.props.talentValues[this.state.targetTalentType] ?? {}\n                    ).map((id) => (\n                      <Picker.Item\n                        key={id}\n                        value={id}\n                        label={talentDescMapping[id]}\n                      />\n                    ))}\n                  </Picker>\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                <InputRow>\n                  <Button\n                    variant='secondary'\n                    size='sm'\n                    onClick={this.onOptimizeClick}\n                  >\n                    Optimize\n                  </Button>\n                </InputRow>\n              </div>\n\n              <div className='input-block'>\n                {this.state.substatRolls.length > 0 && (\n                  <p>Liquid roll distribution:</p>\n                )}\n\n                {this.state.substatRolls.map(({ stat, rolls }) => (\n                  <p key={stat}>\n                    {propMapping[stat].name}: {rolls}\n                  </p>\n                ))}\n              </div>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default OptimizerBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { StatMixin } from '../option/Mixin';\nimport { TalentValueSet } from '../talent/types';\nimport ArtifactBlock from './ArtifactBlock';\nimport OptimizerBlock from './OptimizerBlock';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n  damageModifier: DamageModifier;\n  statMixins: StatMixin[];\n  talentValues: TalentValueSet;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Col\n        id='artifact-column'\n        className='artifact-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='artifact-heading'>\n          <h2>Artifacts</h2>\n        </div>\n        <OptimizerBlock {...this.props} />\n        <div className='result-block'>\n          {appState.artifacts.map((artifact) => (\n            <ArtifactBlock\n              artifact={artifact}\n              updateArtifactState={this.updateArtifactState}\n              key={artifact.type}\n            />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import { getArtifactSetData, getArtifactSetBonusData } from '../data/Data';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../data/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces: number = 0) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  // Override in derived classes to implement special set bonuses\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [];\n  }\n\n  // Returns all special set bonuses that are active for given pieces\n  getSetBonusesAt(pieces: number): ArtifactSetBonus[] {\n    return this.getAllSetBonuses().filter(\n      (setBonus) => pieces >= setBonus.pieces\n    );\n  }\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n    });\n\n    // Special bonus stats, has to be handled individually\n    let extraStats = this.setBonuses.flatMap(\n      (setBonus) => setBonus.extraStats ?? []\n    );\n\n    extraStats.forEach((statBonus) => {\n      if (stats[statBonus.stat] !== undefined) {\n        stats[statBonus.stat] += statBonus.value;\n      } else {\n        stats[statBonus.stat] = statBonus.value;\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap(\n        (setBonus) => setBonus.options ?? []\n      );\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class ResolutionOfSojourner extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [resolutionOfSojourner4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('resolutionofsojourner', 4);\n\nconst resolutionOfSojourner4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  extraStats: [\n    {\n      stat: 'chargedCritRate',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class TinyMiracle extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tinyMiracle2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('tinymiracle', 2);\n\nconst tinyMiracle2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'].map(\n    (element) => {\n      return {\n        stat: `${element}Res`,\n        value: params2Pc[0],\n      };\n    }\n  ),\n};\n","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  statMixin: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  modifierMixin: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MartialArtist extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [martialArtist2Pc, martialArtist4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('martialartist', 2);\n\nconst martialArtist2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params2Pc[0],\n    },\n    {\n      stat: 'chargedDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('martialartist', 4);\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[2] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[2] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst martialArtist4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MartialArtist4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Gambler extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gambler2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('gambler', 2);\n\nconst gambler2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'skillDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class GladiatorsFinale extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gladiatorsFinale4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('gladiatorsfinale', 4);\n\nconst gladiatorsFinale4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for sword, polearm, claymore characters\n  // Did not make this an Option because this would likely not want to be disabled\n  // Calculation will be wrong if used on a catalyst, bow character\n  // Checking for that would require character weapon type to be implemented first\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport enum Priority {\n  Normal,\n  Last,\n}\n\ninterface Mixin {\n  priority?: Priority;\n}\n\nexport interface StatMixin extends Mixin {\n  apply: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number,\n    ascensionLevel: number\n  ) => void;\n}\n\n// Do not modify stats here, use StatMixin for that purpose\nexport interface ModifierMixin extends Mixin {\n  apply: (modifier: DamageModifier, stats: Stats) => void;\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionPicker, IModifierApplicable } from '../../option/Option';\n\nexport default class ViridescentVenerer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [viridescentVenerer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('viridescentvenerer', 4);\n\nclass ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.enemyResReduction.add(this.value as Element, params4Pc[1]);\n      }\n    },\n  };\n}\n\nconst viridescentVenerer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ViridescentVenerer4PcOption],\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class WanderersTroupe extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [wanderersTroupe4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('wandererstroupe', 4);\n\nconst wanderersTroupe4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for catalyst, bow characters\n  // See Gladiator's Finale for more details\n  extraStats: [\n    {\n      stat: 'chargedDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import {\n  getArtifactSetBonusData,\n  getArtifactSetBonusParams,\n} from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\n\nexport default class CrimsonWitch extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [crimsonWitch4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('crimsonwitchofflames', 4);\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n        const param = setBonusData[2].bonuses.find(\n          ({ stat }) => stat === 'pyroDmgBonus'\n        )?.value!!;\n\n        let stacks = this.value;\n        if (stacks > 3) stacks = 3;\n        stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst crimsonWitch4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [CrimsonWitch4PcOption],\n\n  extraStats: [\n    {\n      stat: 'overloadDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'burningDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'vaporizeDmgBonus',\n      value: params4Pc[1],\n    },\n    {\n      stat: 'meltDmgBonus',\n      value: params4Pc[2],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class NoblesseOblige extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [noblesseOblige2Pc, noblesseOblige4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('noblesseoblige', 2);\n\nconst noblesseOblige2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'burstDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('noblesseoblige', 4);\n\nclass NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst noblesseOblige4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [NoblesseOblige4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class EmblemOfSeveredFate extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [emblemOfSeveredFate4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('emblemofseveredfate', 4);\n\nconst emblemOfSeveredFate4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  statMixin: {\n    priority: Priority.Last,\n    apply: (stats: Stats) => {\n      let burstDmgBonus = params4Pc[0] * stats.energyRecharge;\n      if (burstDmgBonus > params4Pc[1]) {\n        burstDmgBonus = params4Pc[1];\n      }\n\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n    },\n  },\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BraveHeart extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [braveHeart4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('braveheart', 4);\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst braveHeart4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BraveHeart4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Berserker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [berserker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('berserker', 4);\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst berserker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Berserker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Instructor extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [instructor4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('instructor', 4);\n\nclass Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.elementalMastery = params4Pc[1] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst instructor4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Instructor4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BlizzardStrayer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [blizzardStrayer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('blizzardstrayer', 4);\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[1] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst blizzardStrayer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BlizzardStrayer4PcCryoOption, BlizzardStrayer4PcFrozenOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Thundersoother extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [thundersoother4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('thundersoother', 4);\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst thundersoother4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Thundersoother4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Lavawalker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [lavawalker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('lavawalker', 4);\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst lavawalker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Lavawalker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MaidenBeloved extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [maidenBeloved4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('maidenbeloved', 4);\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.healedBonus = params4Pc[0] + (stats.healedBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst maidenBeloved4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MaidenBeloved4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BloodstainedChivalry extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [bloodstainedChivalry4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n\nclass BloodstainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.chargedDmgBonus = params4Pc[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst bloodstainedChivalry4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BloodstainedChivalry4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionPicker, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class ArchaicPetra extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [archaicPetra4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('archaicpetra', 4);\n\nclass ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value !== '') {\n        stats[`${this.value}DmgBonus`] =\n          params4Pc[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n      }\n    },\n  };\n}\n\nconst archaicPetra4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ArchaicPetra4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class RetracingBolide extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [retracingBolide4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('retracingbolide', 4);\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst retracingBolide4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [RetracingBolide4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class HeartOfDepth extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [heartOfDepth4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('heartofdepth', 4);\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst heartOfDepth4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [HeartOfDepth4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Tenacity extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tenacity4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n\nclass Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.shieldStrength = params4Pc[1] + (stats.shieldStrength ?? 0);\n      }\n    },\n  };\n}\n\nconst tenacity4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Tenacity4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class PaleFlame extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [paleFlame4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('paleflame', 4);\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value >= 1) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n\n      if (this.value >= 2) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.physicalDmgBonus = params4Pc[3] + (stats.physicalDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst paleFlame4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [PaleFlame4PcOption],\n};\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Shimenawa extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [shimenawa4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('shimenawasreminiscence', 4);\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const param = params4Pc[1];\n        stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst shimenawa4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Shimenawa4PcOption],\n};\n","import ArtifactSet from './ArtifactSet';\nimport ResolutionOfSojourner from './artifactSet/ResolutionOfSojourner';\nimport TinyMiracle from './artifactSet/TinyMiracle';\nimport MartialArtist from './artifactSet/MartialArtist';\nimport Gambler from './artifactSet/Gambler';\nimport GladiatorsFinale from './artifactSet/GladiatorsFinale';\nimport ViridescentVenerer from './artifactSet/ViridescentVenerer';\nimport WanderersTroupe from './artifactSet/WanderersTroupe';\nimport CrimsonWitch from './artifactSet/CrimsonWitch';\nimport NoblesseOblige from './artifactSet/NoblesseOblige';\nimport EmblemOfSeveredFate from './artifactSet/EmblemOfSeveredFate';\nimport BraveHeart from './artifactSet/BraveHeart';\nimport Berserker from './artifactSet/Berserker';\nimport Instructor from './artifactSet/Instructor';\nimport BlizzardStrayer from './artifactSet/BlizzardStrayer';\nimport Thundersoother from './artifactSet/Thundersoother';\nimport Lavawalker from './artifactSet/Lavawalker';\nimport MaidenBeloved from './artifactSet/MaidenBeloved';\nimport BloodstainedChivalry from './artifactSet/BloodstainedChivalry';\nimport ArchaicPetra from './artifactSet/ArchaicPetra';\nimport RetracingBolide from './artifactSet/RetracingBolide';\nimport HeartOfDepth from './artifactSet/HeartOfDepth';\nimport Tenacity from './artifactSet/Tenacity';\nimport PaleFlame from './artifactSet/PaleFlame';\nimport Shimenawa from './artifactSet/Shimenawa';\n\nconst artifactSets: Record<string, typeof ArtifactSet> = {\n  resolutionofsojourner: ResolutionOfSojourner,\n  tinymiracle: TinyMiracle,\n  martialartist: MartialArtist,\n  gambler: Gambler,\n  gladiatorsfinale: GladiatorsFinale,\n  viridescentvenerer: ViridescentVenerer,\n  wandererstroupe: WanderersTroupe,\n  crimsonwitchofflames: CrimsonWitch,\n  noblesseoblige: NoblesseOblige,\n  emblemofseveredfate: EmblemOfSeveredFate,\n  braveheart: BraveHeart,\n  berserker: Berserker,\n  instructor: Instructor,\n  blizzardstrayer: BlizzardStrayer,\n  thundersoother: Thundersoother,\n  lavawalker: Lavawalker,\n  maidenbeloved: MaidenBeloved,\n  bloodstainedchivalry: BloodstainedChivalry,\n  archaicpetra: ArchaicPetra,\n  retracingbolide: RetracingBolide,\n  heartofdepth: HeartOfDepth,\n  tenacityofthemillelith: Tenacity,\n  paleflame: PaleFlame,\n  shimenawasreminiscence: Shimenawa,\n};\n\nfunction getArtifactSetConstructor(id: string): typeof ArtifactSet {\n  return artifactSets[id] ?? ArtifactSet;\n}\n\nexport function initArtifactSet(id: string = '', pieces?: number) {\n  const ArtifactSetConstructor = getArtifactSetConstructor(id);\n\n  return new ArtifactSetConstructor(id, pieces);\n}\n\n/* To be implemented\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\nRelic_ReactionWindEnhance,\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionFireEnhance,\n\n// Not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionElectricEnhance: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Requires info about team composition\nRelic_AbsorbTeamElemResist: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Probably can be implemented with a dropdown option for prev received elem dmg\nRelic_ElemDmgEnhanceElemResist: defaultSetBonus,\n*/\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import React from 'react';\r\nimport Row from 'react-bootstrap/esm/Row';\r\n\r\nclass InputBlock extends React.Component {\r\n  render() {\r\n    return <Row className='input-block no-gutters'>{this.props.children}</Row>;\r\n  }\r\n}\r\n\r\nexport default InputBlock;\r\n","import Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).statMixin !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (option as unknown as IModifierApplicable).modifierMixin !== undefined;\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import Option from './Option';\n\nexport default Option;\nexport * from './OptionUtils';\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n}\r\n\r\nexport default Reaction;\r\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../option';\nimport { IOptionBoolean, IOptionNumber, IOptionPicker } from '../option/Option';\nimport { capitalize, getOptionName } from '../stat/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n  isLabelShown?: boolean;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n          isLabelShown={this.props.isLabelShown}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n          isLabelShown={this.props.isLabelShown}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          isLabelShown={this.props.isLabelShown}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i] = initArtifactSet(id, artifactSets[i].pieces);\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </InputBlock>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import { Element } from '../talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import { Stats, TalentParams } from '../data/types';\nimport { AttackType, Element, ScalingType, TalentValue } from './types';\nimport Resistance from '../stat/Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport CritType from '../modifier/CritType';\n\n// Helper functions\n\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\n\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\n\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\n\nfunction calculateAmplifyingStrengthMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\n\nfunction calculateAmplifyingReactionMultiplier({\n  reaction,\n  stats,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  element: Element;\n}) {\n  const amplifyingStrength = calculateAmplifyingStrengthMultiplier(\n    reaction,\n    element\n  );\n\n  if (amplifyingStrength > 1) {\n    // Caulculate reactionbonus\n    let reactionBonus = 0;\n    switch (reaction) {\n      case Reaction.Vaporize:\n        reactionBonus = stats.vaporizeDmgBonus ?? 0;\n        break;\n      case Reaction.Melt:\n        reactionBonus = stats.meltDmgBonus ?? 0;\n        break;\n      default:\n        break;\n    }\n\n    // Calculate amplifying reaction multiplier\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingStrength * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\n\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let flatDmg = modifier.flatDmg;\n  if (attackType === AttackType.Normal) {\n    flatDmg += modifier.normalAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Charged) {\n    flatDmg += modifier.chargedAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Skill) {\n    flatDmg += modifier.skillFlatDmg ?? 0;\n  }\n\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === CritType.Crit) {\n    crit += stats.critDmg;\n  } else if (modifier.critType === CritType.Average) {\n    let critRate = stats.critRate;\n    if (attackType === AttackType.Charged) {\n      critRate += stats.chargedCritRate ?? 0;\n    } else if (attackType === AttackType.Burst) {\n      critRate += stats.burstCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateAmplifyingReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\n\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  const baseHealing = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n\n  // Incoming healing bonus is ignored because the healer's\n  // incoming healing bonus is not necessarily the same as the\n  // character being healed\n  return baseHealing * (1 + (stats.healingBonus ?? 0));\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n\n// Functions to calculate Talent Values\n\n// Used for all single-hit normal attacks\nexport function normalAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit normal attacks\nexport function normalAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: number[];\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for single-hit charged attacks\nexport function chargedAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for uncharged aim shots\nexport function aimShot({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const element = modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for charged aim shots\nexport function aimShotCharged({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier: multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all physical plunge attacks\nexport function plungeAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionPlunge ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Plunge,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all single-hit skill dmg\nexport function skillSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    scalingType,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit skills\nexport function skillMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for all single-hit burst dmg\nexport function burstSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    element,\n    multiplier,\n    scalingType,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit bursts\nexport function burstMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for damage that does not have an AttackType\nexport function typelessAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.None,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for healing skills/bursts\nexport function healingValue({\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const healing = calculateHealing({\n    stats,\n    multiplier,\n    flatHealing,\n    scalingType,\n  });\n\n  return {\n    damage: [healing],\n  };\n}\n\n// Used for all summons HP\nexport function hpValue({\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    damage: [hp],\n  };\n}\n\n// Used for all shields\nexport function shieldHpValue({\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    damage: [dmgAbsorption],\n  };\n}\n\n// Used for Bennett and Sara's ATK buffs\nexport function atkBuffValue({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const atkBonus = stats.baseAtk * multiplier;\n  return {\n    damage: [atkBonus],\n  };\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('albedo');\n\nconst albedoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  transientBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  fatalBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoTalents: Talents = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport albedoTalents from './AlbedoTalent';\n\nexport default class Albedo extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('albedo', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return albedoTalents;\n  }\n}\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  children: CharacterOption[];\n\n  constructor(id: string = '', children: typeof CharacterOption[] = []) {\n    super(id);\n    this.children = children.map((Option) => new Option());\n  }\n\n  unroll(): CharacterOption[] {\n    return [this, ...this.children.flatMap((option) => option.unroll())];\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentStatsAt } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { Element, TalentType } from '../../talent/types';\r\nimport {\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n  IModifierApplicable,\r\n} from '../../option/Option';\r\n\r\nclass AloyOptionCoil\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('coil');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value > 0) {\r\n        const skillParams = getTalentStatsAt(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('aloy')\r\n        );\r\n\r\n        if (this.value >= 4) {\r\n          // Rushing Ice state\r\n          stats.normalDmgBonus = skillParams[7] + (stats.normalDmgBonus ?? 0);\r\n        } else {\r\n          stats.normalDmgBonus =\r\n            skillParams[this.value + 3] + (stats.normalDmgBonus ?? 0);\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value >= 4) {\r\n        modifier.infusionNormal = Element.Cryo;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyOptions = [AloyOptionCoil];\r\nexport default aloyOptions;\r\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport {\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [a1Data, a4Data] = getTalentData('aloy').passives;\r\nconst a1Params = a1Data.params;\r\nconst a4Params = a4Data.params;\r\n\r\nclass AloyOptionAscension1\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('aloyAscension1');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value) {\r\n        stats.atkBonus = a1Params[0] * 2 + (stats.atkBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension1: CharacterPassive = {\r\n  id: 'aloyAscension1',\r\n  ascensionLevel: 1,\r\n  options: [AloyOptionAscension1],\r\n};\r\n\r\nclass AloyOptionAscension4\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('aloyAscension4');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value > 0) {\r\n        let stacks = this.value;\r\n        if (stacks > 10) {\r\n          stacks = 10;\r\n        }\r\n\r\n        const cryoDmgBonus = a4Params[0] * stacks;\r\n        stats.cryoDmgBonus = cryoDmgBonus + (stats.cryoDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension4: CharacterPassive = {\r\n  id: 'aloyAscension4',\r\n  ascensionLevel: 4,\r\n  options: [AloyOptionAscension4],\r\n};\r\n\r\nconst aloyPassives = [aloyAscension1, aloyAscension4];\r\nexport default aloyPassives;\r\n","import { Element, TalentFn, TalentProps, Talents } from '../../talent/types';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { getTalentData } from '../../data/Data';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('aloy');\r\n\r\nconst aloyAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: attackParams[modifier.talentAttackLevel].slice(0, 2),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Cryo,\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloySkill: Record<string, TalentFn> = {\r\n  freezeBombDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chillwaterBombletDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Cryo,\r\n      multiplier: burstParams[modifier.talentBurstLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyTalents: Talents = {\r\n  attack: aloyAttack,\r\n  skill: aloySkill,\r\n  burst: aloyBurst,\r\n};\r\n\r\nexport default aloyTalents;\r\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport aloyOptions from './AloyOption';\nimport aloyPassives from './AloyPassive';\nimport aloyTalents from './AloyTalent';\n\nexport default class Aloy extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('aloy', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return aloyTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return aloyOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return aloyPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, TalentFn, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('amber');\n\nconst amberAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst amberSkill: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  baronBunnyHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst amberBurst: Record<string, TalentFn> = {\n  dmgPerWave: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  totalDmg: ({ stats, modifier }: TalentProps) => {\n    const talentValue = burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    });\n    talentValue.damage[0] *= 18;\n    return talentValue;\n  },\n};\n\nconst amberTalents: Talents = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport amberTalents from './AmberTalent';\n\nexport default class Amber extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('amber', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return amberTalents;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { Element, TalentFn, TalentProps, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('ayaka');\n\nconst ayakaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(attackParams[modifier.talentAttackLevel][3]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 3,\n      params: Array(3).fill(attackParams[modifier.talentAttackLevel][7]),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaBurst: Record<string, TalentFn> = {\n  cuttingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  bloomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaTalents: Talents = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ayakaOptions from './AyakaOption';\nimport ayakaTalents from './AyakaTalent';\n\nexport default class Ayaka extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('ayaka', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return ayakaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ayakaOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('barbara');\n\nconst barbaraAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraSkill: Record<string, TalentFn> = {\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatHealing: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      flatHealing: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  dropletDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraBurst: Record<string, TalentFn> = {\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      flatHealing: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraTalents: Talents = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport barbaraTalents from './BarbaraTalent';\n\nexport default class Barbara extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('barbara', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return barbaraTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('beidou').passives;\nconst a4Params = a4Data.params;\n\nclass BeidouOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('beidouAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = a4Params[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = a4Params[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst beidouAscension4: CharacterPassive = {\n  id: 'beidouAscension4',\n  ascensionLevel: 4,\n  options: [BeidouOptionAscension4],\n};\n\nconst beidouPassives = [beidouAscension4];\nexport default beidouPassives;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  chargedAttackSingle,\n  shieldHpValue,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('beidou');\n\nconst beidouAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouSkill: Record<string, TalentFn> = {\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: skillParams[modifier.talentSkillLevel][1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  baseDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  dmgBonusOnHitTaken: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouBurst: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  lightningDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouTalents: Talents = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalents;\n","import { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport beidouPassives from './BeidouPassive';\nimport beidouTalents from './BeidouTalent';\n\nexport default class Beidou extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('beidou', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return beidouTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return beidouPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  atkBuffValue,\n  burstSingle,\n  chargedAttackMulti,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillMulti,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('bennett');\n\nconst bennettAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  chargeLevel1Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: skillParams[modifier.talentSkillLevel].slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n  chargeLevel2Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: skillParams[modifier.talentSkillLevel].slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousPerSecond: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      flatHealing: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  atkBonus: ({ stats, modifier }: TalentProps) =>\n    atkBuffValue({\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettTalents: Talents = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalents;\n","import {\n  IOptionBoolean,\n  IOptionNumber,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Stats } from '../../data/types';\nimport { getOptionValue } from '../../option/OptionUtils';\n\nclass BennettOptionAtkBuff extends CharacterOption implements IOptionNumber {\n  value = 0;\n\n  constructor() {\n    super('bennettAtkBuff');\n  }\n}\n\nclass BennettOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('bennettBurst', [BennettOptionAtkBuff]);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const atkBuff = getOptionValue(this.children[0]) as number;\n        stats.flatAtk = atkBuff + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n}\n\nconst bennettTeamOptions = [BennettOptionBurst];\nexport default bennettTeamOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport bennettTalents from './BennettTalent';\nimport bennettTeamOptions from './BennettTeamOption';\n\nexport default class Bennett extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('bennett', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return bennettTalents;\n  }\n\n  getTeamOptionConstructors(): typeof CharacterOption[] {\n    return bennettTeamOptions;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('chongyun');\n\nconst chongyunAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunTalents: Talents = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport chongyunOptions from './ChongyunOption';\nimport chongyunTalents from './ChongyunTalent';\n\nexport default class Chongyun extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('chongyun', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return chongyunTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return chongyunOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('diluc');\n\nconst dilucAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucSkill: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucTalents: Talents = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalents;\n","import { Stats } from '../../data/types';\nimport { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      _talentBurstLevel: number,\n      ascensionLevel: number\n    ) => {\n      if (this.value && ascensionLevel >= 4) {\n        const params = getTalentData('diluc').passives.find(\n          (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n        )?.params;\n        const pyroDmgBonus = params?.[1] ?? NaN;\n\n        stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dilucTalents from './DilucTalent';\nimport dilucOptions from './DilucOption';\n\nexport default class Diluc extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('diluc', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return dilucTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return dilucOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  shieldHpValue,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('diona');\n\nconst dionaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaSkill: Record<string, TalentFn> = {\n  icyPawDmgPerPaw: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpPress: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatBonus: skillParams[modifier.talentSkillLevel][2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  shieldHpHold: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatBonus: skillParams[modifier.talentSkillLevel][2],\n      element: Element.Cryo,\n      stats,\n      modifier: { ...modifier, dionaHoldSkill: true },\n    }),\n};\n\nconst dionaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  continuousFieldDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousTime: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaTalents: Talents = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dionaTalents from './DionaTalent';\n\nexport default class Diona extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('diona', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return dionaTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('eula');\n\nconst eulaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][4]),\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  icewhirlBrandDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordBaseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordStackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaTalents: Talents = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport eulaTalents from './EulaTalent';\n\nexport default class Eula extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('eula', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return eulaTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('fischl');\n\nconst fischlAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlSkill: Record<string, TalentFn> = {\n  ozDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  summoningDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlBurst: Record<string, TalentFn> = {\n  fallingThunderDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlTalents: Talents = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport fischlTalents from './FischlTalent';\n\nexport default class Fischl extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('fischl', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return fischlTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  hpValue,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('ganyu');\n\nconst ganyuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  aimShotChargeLevel1: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowBloomDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  iceLotusHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuBurst: Record<string, TalentFn> = {\n  iceShardDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuTalents: Talents = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ganyuTalents from './GanyuTalent';\n\nexport default class Ganyu extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('ganyu', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return ganyuTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('hutao').passives;\nconst a4Params = a4Data.params;\n\nclass HuTaoOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('hutaoAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.pyroDmgBonus = a4Params[1] + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst hutaoAscension4: CharacterPassive = {\n  id: 'hutaoAscension4',\n  ascensionLevel: 4,\n  options: [HuTaoOptionAscension4],\n};\n\nconst hutaoPassives = [hutaoAscension4];\nexport default hutaoPassives;\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('hutao');\n\nconst hutaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoSkill: Record<string, TalentFn> = {\n  bloodBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgLowHp: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n\n  hpRegenLowHp: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoTalents: Talents = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      talentSkillLevel: number,\n      _talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let skillParams = getTalentStatsAt(\n          TalentType.Skill,\n          talentSkillLevel,\n          getTalentData('hutao')\n        );\n\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n        let flatAtkBonus = totalHp * skillParams[1];\n        if (flatAtkBonus > stats.baseAtk * skillParams[6]) {\n          flatAtkBonus = stats.baseAtk * skillParams[6];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport hutaoPassives from './HutaoPassive';\nimport hutaoTalents from './HutaoTalent';\nimport hutaoOptions from './HutaoOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Hutao extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('hutao', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return hutaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return hutaoOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return hutaoPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('jean');\n\nconst jeanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  fieldEnterExitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  fieldActivationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: burstParams[modifier.talentBurstLevel][3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][4],\n      flatHealing: burstParams[modifier.talentBurstLevel][5],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanTalents: Talents = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport jeanTalents from './JeanTalent';\n\nexport default class Jean extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('jean', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return jeanTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('kaeya');\n\nconst kaeyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaTalents: Talents = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kaeyaTalents from './KaeyaTalent';\n\nexport default class Kaeya extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('kaeya', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return kaeyaTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport { Element, TalentFn, TalentProps, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('kazuha');\n\nconst kazuhaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(attackParams[modifier.talentAttackLevel][5]),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: burstParams[modifier.talentBurstLevel][2],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst kazuhaTalents: Talents = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.elementalAbsorption = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionPlunge = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kazuhaTalents from './KazuhaTalent';\nimport kazuhaOptions from './KazuhaOption';\n\nexport default class Kazuha extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('kazuha', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return kazuhaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kazuhaOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('keqing');\n\nconst keqingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingSkill: Record<string, TalentFn> = {\n  lightningStilettoDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  thunderclapSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Electro,\n      params: Array(2).fill(skillParams[modifier.talentSkillLevel][2]),\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  consecutiveSlashDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 8,\n      element: Element.Electro,\n      params: Array(8).fill(burstParams[modifier.talentBurstLevel][1]),\n      stats,\n      modifier,\n    }),\n\n  lastAttackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingTalents: Talents = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport keqingTalents from './KeqingTalent';\n\nexport default class Keqing extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('keqing', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return keqingTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('klee');\n\nconst kleeAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeSkill: Record<string, TalentFn> = {\n  jumpyDumptyDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  mineDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeBurst: Record<string, TalentFn> = {\n  sparksNSplashDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeTalents: Talents = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kleeTalents from './KleeTalent';\n\nexport default class Klee extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('klee', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return kleeTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('kokomi').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst kokomiAscension0: CharacterPassive = {\r\n  id: 'kokomiAscension0',\r\n  ascensionLevel: 0,\r\n  options: [],\r\n  statMixin: {\r\n    apply: (stats: Stats) => {\r\n      stats.critRate = (stats.critRate ?? 0) - 1;\r\n      if (stats.critRate < 0) {\r\n        stats.critRate = 0;\r\n      }\r\n\r\n      stats.healingBonus = 0.25 + (stats.healingBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiAscension4: CharacterPassive = {\r\n  id: 'kokomiAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  modifierMixin: {\r\n    apply: (modifier: DamageModifier) => {\r\n      modifier.kokomiHealingBonusDmg = a4Params[0];\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiPassives = [kokomiAscension0, kokomiAscension4];\r\nexport default kokomiPassives;\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  burstSingle,\r\n  chargedAttackSingle,\r\n  healingValue,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  ScalingType,\r\n} from '../../talent/types';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('kokomi');\r\n\r\nconst kokomiAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][0],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][1],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][3],\r\n      stats,\r\n      modifier: getKokomiChargedAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiSkill: Record<string, TalentFn> = {\r\n  hpRegen: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      flatHealing: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  rippleDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Hydro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][2],\r\n      stats,\r\n      modifier: getKokomiSkillModifier(stats, modifier),\r\n    }),\r\n};\r\n\r\nconst kokomiBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Hydro,\r\n      multiplier: burstParams[modifier.talentBurstLevel][0],\r\n      scalingType: ScalingType.Hp,\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: burstParams[modifier.talentBurstLevel][1],\r\n      flatHealing: burstParams[modifier.talentBurstLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiTalents: Talents = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getKokomiNormalAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const normalAttackBonusDmg =\r\n    (burstParams[newModifier.talentBurstLevel][3] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.normalAttackFlatDmg =\r\n    normalAttackBonusDmg + (newModifier.normalAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiChargedAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const chargedAttackBonusDmg =\r\n    (burstParams[newModifier.talentBurstLevel][4] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.chargedAttackFlatDmg =\r\n    chargedAttackBonusDmg + (newModifier.chargedAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiSkillModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const skillBonusDmg =\r\n    burstParams[newModifier.talentBurstLevel][8] * stats.flatHp;\r\n  newModifier.skillFlatDmg = skillBonusDmg + (newModifier.skillFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value) {\r\n        modifier.kokomiBurst = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kokomiPassives from './KokomiPassive';\nimport kokomiTalents from './KokomiTalent';\nimport kokomiOptions from './KokomiOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Kokomi extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('kokomi', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return kokomiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kokomiOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return kokomiPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('lisa');\n\nconst lisaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack0: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack1: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack2: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack3: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaTalents: Talents = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport lisaTalents from './LisaTalent';\n\nexport default class Lisa extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('lisa', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return lisaTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport { TalentType } from '../../talent/types';\n\nclass MonaOptionOmen\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('omen');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('mona')\n        );\n\n        stats.dmgBonus = burstParams[9] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst monaOptions = [MonaOptionOmen];\nexport default monaOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('mona');\n\nconst monaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaSkill: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaBurst: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaTalents: Talents = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport monaOptions from './MonaOption';\nimport monaTalents from './MonaTalent';\n\nexport default class Mona extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('mona', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return monaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return monaOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('ningguang');\n\nconst ningguangAttack: Record<string, TalentFn> = {\n  normalAtkDmg: ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  starJadeDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  jadeScreenHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangBurst: Record<string, TalentFn> = {\n  dmgPerGem: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangTalents: Talents = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ningguangTalents from './NingguangTalent';\n\nexport default class Ningguang extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('ningguang', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return ningguangTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  skillSingle,\n  shieldHpValue,\n  healingValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('noelle');\n\nconst noelleAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatBonus: skillParams[modifier.talentSkillLevel][6],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatHealing: skillParams[modifier.talentSkillLevel][7],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  firstSwingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleTalents: Talents = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('noelle')\n        );\n\n        const totalDef =\n          (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n          (stats.flatDef ?? 0);\n\n        stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Geo;\n      }\n    },\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport noelleTalents from './NoelleTalent';\nimport noelleOptions from './NoelleOption';\n\nexport default class Noelle extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('noelle', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return noelleTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return noelleOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  healingValue,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('qiqi');\n\nconst qiqiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][3]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][5]),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][7],\n      stats,\n      modifier,\n    }),\n\n  heraldOfFrostDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      flatHealing: skillParams[modifier.talentSkillLevel][1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      flatHealing: skillParams[modifier.talentSkillLevel][3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      flatHealing: burstParams[modifier.talentBurstLevel][1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiTalents: Talents = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport qiqiTalents from './QiqiTalent';\n\nexport default class Qiqi extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('qiqi', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return qiqiTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport { Priority } from '../../option/Mixin';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('raiden').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst raidenAscension4: CharacterPassive = {\r\n  id: 'raidenAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  statMixin: {\r\n    priority: Priority.Last,\r\n    apply: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = a4Params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst raidenPassives = [raidenAscension4];\r\nexport default raidenPassives;\r\n","import { getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  normalAttackSingle,\r\n  chargedAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  burstMulti,\r\n} from '../../talent/TalentUtil';\r\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('raiden');\r\n\r\nconst raidenAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: attackParams[modifier.talentAttackLevel].slice(3, 5),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][10],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenSkill: Record<string, TalentFn> = {\r\n  skillDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  coordinatedAtkDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenBurst: Record<string, TalentFn> = {\r\n  musouNoHitotachiDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][0] +\r\n        getInitialResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][4] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][5] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][6] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: burstParams[modifier.talentBurstLevel]\r\n        .slice(7, 9)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][9] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: burstParams[modifier.talentBurstLevel]\r\n        .slice(10, 12)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][13] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][14] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        burstParams[modifier.talentBurstLevel][15] +\r\n        getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenTalents: Talents = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getInitialResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    burstParams[modifier.talentBurstLevel][1] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n\r\nfunction getAttackResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    burstParams[modifier.talentBurstLevel][2] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value) {\r\n        const params = getTalentStatsAt(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('raiden')\r\n        );\r\n\r\n        const burstDmgBonus = params[3] * 90;\r\n        stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value < 0) modifier.resolveStacks = 0;\r\n      else if (this.value > 60) modifier.resolveStacks = 60;\r\n      else modifier.resolveStacks = this.value;\r\n    },\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport raidenPassives from './RaidenPassive';\nimport raidenTalents from './RaidenTalent';\nimport raidenOptions from './RaidenOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Raiden extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('raiden', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return raidenTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return raidenOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return raidenPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('razor');\n\nconst razorAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][0] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][1] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][2] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        attackParams[modifier.talentAttackLevel][3] *\n        burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorTalents: Talents = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport razorTalents from './RazorTalent';\n\nexport default class Razor extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('razor', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return razorTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('rosaria');\n\nconst rosariaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: skillParams[modifier.talentSkillLevel].slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: burstParams[modifier.talentBurstLevel].slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n  iceLanceDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaTalents: Talents = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport rosariaTalents from './RosariaTalent';\n\nexport default class Rosaria extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('rosaria', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return rosariaTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  atkBuffValue,\r\n  burstSingle,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { TalentProps, Element, TalentFn, Talents } from '../../talent/types';\r\n\r\nconst {\r\n  attack: attackParams,\r\n  skill: skillParams,\r\n  burst: burstParams,\r\n} = getTalentData('sara');\r\n\r\nconst saraAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: attackParams[modifier.talentAttackLevel][4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: attackParams[modifier.talentAttackLevel][5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Electro,\r\n      multiplier: attackParams[modifier.talentAttackLevel][6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: attackParams[modifier.talentAttackLevel][9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraSkill: Record<string, TalentFn> = {\r\n  tenguJuuraiAmbushDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: skillParams[modifier.talentSkillLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  atkBonus: ({ stats, modifier }: TalentProps) =>\r\n    atkBuffValue({\r\n      multiplier: skillParams[modifier.talentSkillLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraBurst: Record<string, TalentFn> = {\r\n  tenguJuuraiTitanbreakerDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: burstParams[modifier.talentBurstLevel][0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  tenguJuuraiStormclusterDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: burstParams[modifier.talentBurstLevel][1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraTalents: Talents = {\r\n  attack: saraAttack,\r\n  skill: saraSkill,\r\n  burst: saraBurst,\r\n};\r\n\r\nexport default saraTalents;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport saraTalents from './SaraTalent';\n\nexport default class Sara extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('sara', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return saraTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('sayu');\n\nconst sayuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuSkill: Record<string, TalentFn> = {\n  fuufuuWindwheelDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickPressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickHoldDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWindwheelElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: skillParams[modifier.talentSkillLevel][1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n\n  fuufuuWhirlwindKickElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: skillParams[modifier.talentSkillLevel][4],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sayuBurst: Record<string, TalentFn> = {\n  activationDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  activationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      flatHealing: burstParams[modifier.talentBurstLevel][1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: burstParams[modifier.talentBurstLevel][5],\n      flatHealing: burstParams[modifier.talentBurstLevel][4],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuTalents: Talents = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sayuTalents from './SayuTalent';\nimport sayuOptions from './SayuOption';\n\nexport default class Sayu extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('sayu', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return sayuTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sayuOptions;\n  }\n}\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('sucrose');\n\nconst sucroseAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: burstParams[modifier.talentBurstLevel][1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sucroseTalents: Talents = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sucroseOptions from './SucroseOption';\nimport sucroseTalents from './SucroseTalent';\n\nexport default class Sucrose extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('sucrose', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return sucroseTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sucroseOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  typelessAttack,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('tartaglia');\n\nconst tartagliaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n\n  riptideFlashDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  riptideBurstDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaSkill: Record<string, TalentFn> = {\n  stanceChangeDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: skillParams[modifier.talentSkillLevel].slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: skillParams[modifier.talentSkillLevel].slice(8, 10),\n      stats,\n      modifier,\n    }),\n\n  riptideSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: skillParams[modifier.talentSkillLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaBurst: Record<string, TalentFn> = {\n  burstDmgMelee: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgRanged: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  riptideBlastDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaTalents: Talents = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport tartagliaTalents from './TartagliaTalent';\n\nexport default class Tartaglia extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('tartaglia', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return tartagliaTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('venti');\n\nconst ventiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Anemo,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][2],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: burstParams[modifier.talentBurstLevel][1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst ventiTalents: Talents = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ventiTalents from './VentiTalent';\nimport ventiOptions from './VentiOption';\n\nexport default class Venti extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('venti', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return ventiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ventiOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('xiangling');\n\nconst xianglingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][2]),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(attackParams[modifier.talentAttackLevel][3]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingSkill: Record<string, TalentFn> = {\n  guobaDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingBurst: Record<string, TalentFn> = {\n  swing1HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  swing2HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n\n  swing3HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][2],\n      stats,\n      modifier,\n    }),\n\n  pyronadoDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][3],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingTalents: Talents = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xianglingTalents from './XianglingTalent';\n\nexport default class Xiangling extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('xiangling', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return xianglingTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('xiao')\n        );\n\n        stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst { attack: attackParams, skill: skillParams } = getTalentData('xiao');\n\nconst xiaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][0]),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(attackParams[modifier.talentAttackLevel][4]),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoTalents: Talents = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n};\n\nexport default xiaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xiaoOptions from './XiaoOption';\nimport xiaoTalents from './XiaoTalent';\n\nexport default class Xiao extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('xiao', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return xiaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return xiaoOptions;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, TalentFn, Talents, Element } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('xingqiu');\n\nconst xingqiuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: attackParams[modifier.talentAttackLevel].slice(7, 9),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: skillParams[modifier.talentSkillLevel].slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuBurst: Record<string, TalentFn> = {\n  swordRainDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuTalents: Talents = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xingqiuTalents from './XingqiuTalent';\n\nexport default class Xingqiu extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('xingqiu', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return xingqiuTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n} from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('xinyan');\n\nconst xinyanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanSkill: Record<string, TalentFn> = {\n  swingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel1: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      flatBonus: skillParams[modifier.talentSkillLevel][2],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel2: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      flatBonus: skillParams[modifier.talentSkillLevel][4],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel3: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      flatBonus: skillParams[modifier.talentSkillLevel][6],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][7],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Physical,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  pyroDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanTalents: Talents = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xinyanTalents from './XinyanTalent';\n\nexport default class Xinyan extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('xinyan', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return xinyanTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentStatsAt(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('yanfei')\n        );\n        stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('yanfei');\n\nconst yanfeiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal0: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal1: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal2: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal3: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal4: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][15],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][16],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][17],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiTalents: Talents = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yanfeiOptions from './YanfeiOption';\nimport yanfeiTalents from './YanfeiTalent';\n\nexport default class Yanfei extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('yanfei', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return yanfeiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yanfeiOptions;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionNormal = Element.Pyro;\n        modifier.yoimiyaSkill = true;\n      }\n    },\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [a1Data] = getTalentData('yoimiya').passives;\nconst a1Params = a1Data.params;\n\nclass YoimiyaOptionAscension1\n  extends CharacterOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('yoimiyaAscension1');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      let pyroDmgBonus = this.value * a1Params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    },\n  };\n}\n\nconst yoimiyaAscension1: CharacterPassive = {\n  id: 'yoimiyaAscension1',\n  ascensionLevel: 1,\n  options: [YoimiyaOptionAscension1],\n};\n\nconst yoimiyaPassives = [yoimiyaAscension1];\nexport default yoimiyaPassives;\n","import { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, TalentFn, Talents } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('yoimiya');\n\nconst yoimiyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          attackParams[modifier.talentAttackLevel][0],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        attackParams[modifier.talentAttackLevel][1],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        attackParams[modifier.talentAttackLevel][2],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          attackParams[modifier.talentAttackLevel][3],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        attackParams[modifier.talentAttackLevel][4],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  kindlingArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: attackParams[modifier.talentAttackLevel][7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n\n  aurousBlazeExplosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: burstParams[modifier.talentBurstLevel][1],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaTalents: Talents = {\n  attack: yoimiyaAttack,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalents;\n\n// Helper functions\n\nfunction getYoimiyaNormalAttackMultiplier(\n  multiplier: number,\n  modifier: DamageModifier\n): number {\n  if (!modifier.yoimiyaSkill) {\n    return multiplier;\n  }\n\n  return multiplier * skillParams[modifier.talentSkillLevel][3];\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yoimiyaOptions from './YoimiyaOption';\nimport yoimiyaPassives from './YoimiyaPassive';\nimport yoimiyaTalents from './YoimiyaTalent';\n\nexport default class Yoimiya extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('yoimiya', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return yoimiyaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yoimiyaOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return yoimiyaPassives;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn } from '../../talent/types';\n\nconst {\n  attack: attackParams,\n  skill: skillParams,\n  burst: burstParams,\n} = getTalentData('zhongli');\n\nconst zhongliAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(attackParams[modifier.talentAttackLevel][4]),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: attackParams[modifier.talentAttackLevel][6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: attackParams[modifier.talentAttackLevel][10],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliSkill: Record<string, TalentFn> = {\n  stoneSteeleDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][0],\n      stats,\n      modifier,\n    }),\n\n  resonanceDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][1],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][3],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: skillParams[modifier.talentSkillLevel][5],\n      flatBonus: skillParams[modifier.talentSkillLevel][4],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: burstParams[modifier.talentBurstLevel][0],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliTalents: Talents = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalents;\n","import { IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\n\nclass ZhongliOptionShield extends CharacterOption implements IOptionBoolean {\n  value = false;\n\n  constructor() {\n    super('zhongliShield');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        Object.values(Element).forEach((element) =>\n          modifier.enemyResReduction.set(element, 0.2)\n        );\n      }\n    },\n  };\n}\n\nconst zhongliTeamOptions = [ZhongliOptionShield];\nexport default zhongliTeamOptions;\n","import Albedo from './albedo/Albedo';\nimport Aloy from './aloy/Aloy';\nimport Amber from './amber/Amber';\nimport Ayaka from './ayaka/Ayaka';\nimport Barbara from './barbara/Barbara';\nimport Beidou from './beidou/Beidou';\nimport Bennett from './bennett/Bennett';\nimport Character from './Character';\nimport Chongyun from './chongyun/Chongyun';\nimport Diluc from './diluc/Diluc';\nimport Diona from './diona/Diona';\nimport Eula from './eula/Eula';\nimport Fischl from './fischl/Fischl';\nimport Ganyu from './ganyu/Ganyu';\nimport Hutao from './hutao/Hutao';\nimport Jean from './jean/Jean';\nimport Kaeya from './kaeya/Kaeya';\nimport Kazuha from './kazuha/Kazuha';\nimport Keqing from './keqing/Keqing';\nimport Klee from './klee/Klee';\nimport Kokomi from './kokomi/Kokomi';\nimport Lisa from './lisa/Lisa';\nimport Mona from './mona/Mona';\nimport Ningguang from './ningguang/Ningguang';\nimport Noelle from './noelle/Noelle';\nimport Qiqi from './qiqi/Qiqi';\nimport Raiden from './raiden/Raiden';\nimport Razor from './razor/Razor';\nimport Rosaria from './rosaria/Rosaria';\nimport Sara from './sara/Sara';\nimport Sayu from './sayu/Sayu';\nimport Sucrose from './sucrose/Sucrose';\nimport Tartaglia from './tartaglia/Tartaglia';\nimport Venti from './venti/Venti';\nimport Xiangling from './xiangling/Xiangling';\nimport Xiao from './xiao/Xiao';\nimport Xingqiu from './xingqiu/Xingqiu';\nimport Xinyan from './xinyan/Xinyan';\nimport Yanfei from './yanfei/Yanfei';\nimport Yoimiya from './yoimiya/Yoimiya';\nimport Zhongli from './zhongli/Zhongli';\n\nconst characters: Record<string, typeof Character> = {\n  albedo: Albedo,\n  aloy: Aloy,\n  amber: Amber,\n  ayaka: Ayaka,\n  barbara: Barbara,\n  beidou: Beidou,\n  bennett: Bennett,\n  chongyun: Chongyun,\n  diluc: Diluc,\n  diona: Diona,\n  eula: Eula,\n  fischl: Fischl,\n  ganyu: Ganyu,\n  hutao: Hutao,\n  jean: Jean,\n  kaeya: Kaeya,\n  kazuha: Kazuha,\n  keqing: Keqing,\n  klee: Klee,\n  kokomi: Kokomi,\n  lisa: Lisa,\n  mona: Mona,\n  ningguang: Ningguang,\n  noelle: Noelle,\n  qiqi: Qiqi,\n  raiden: Raiden,\n  razor: Razor,\n  rosaria: Rosaria,\n  sara: Sara,\n  sayu: Sayu,\n  sucrose: Sucrose,\n  tartaglia: Tartaglia,\n  venti: Venti,\n  xiangling: Xiangling,\n  xiao: Xiao,\n  xingqiu: Xingqiu,\n  xinyan: Xinyan,\n  yanfei: Yanfei,\n  yoimiya: Yoimiya,\n  zhongli: Zhongli,\n};\n\nfunction getCharacterConstructor(id: string): typeof Character {\n  return characters[id] ?? Character;\n}\n\nexport function initCharacter(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean\n): Character {\n  const CharacterConstructor = getCharacterConstructor(id);\n\n  return new CharacterConstructor(id, level, hasAscended);\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport zhongliTalents from './ZhongliTalent';\nimport zhongliTeamOptions from './ZhongliTeamOption';\n\nexport default class Zhongli extends Character {\n  constructor(_id: string, level?: number, hasAscended?: boolean) {\n    super('zhongli', level, hasAscended);\n  }\n\n  getTalentFns(): Talents {\n    return zhongliTalents;\n  }\n\n  getTeamOptionConstructors(): typeof CharacterOption[] {\n    return zhongliTeamOptions;\n  }\n}\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const { level, hasAscended } = this.props.appState.character;\n    const character = initCharacter(id, level, hasAscended);\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport Resistance from '../stat/Resistance';\nimport { capitalize } from '../stat/Stat';\nimport { Element } from '../talent/types';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  setReaction = (reaction: string) => {\n    this.props.updateTalentValues({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n    this.props.setAppState({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType, reaction } = this.props.appState;\n    return (\n      <InputBlock>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n\n        <InputRow>\n          <Picker\n            id='reaction-picker'\n            label='Reaction:'\n            defaultValue={Reaction.None}\n            value={reaction}\n            onChange={this.setReaction}\n          >\n            {Object.values(Reaction).map((reaction) => (\n              <Picker.Item\n                key={reaction}\n                label={capitalize(reaction)}\n                value={reaction}\n              />\n            ))}\n          </Picker>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  WeaponPassiveData,\n  WeaponPassiveSetData,\n} from '../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getWeaponPassiveAt,\n  getWeaponPassiveData,\n} from '../data/Data';\nimport { getOptionValue, setOptionValue } from '../option';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../passive/types';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    refinement: number = 1\n  ) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n    this._refinement = refinement;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.passiveDataSet = getWeaponPassiveData(value);\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(\n        this.refinement,\n        this.passiveDataSet\n      );\n    }\n    this.passive = this.getPassive(this.refinement);\n    this.passiveOptions = this.getPassiveOptions();\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  passiveDataSet?: WeaponPassiveSetData;\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  private _refinement: number = 1;\n  get refinement(): number {\n    return this._refinement;\n  }\n  set refinement(value: number) {\n    this._refinement = value;\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(value, this.passiveDataSet);\n      this.passive = this.getPassive(value);\n      this.passiveOptions = this.getPassiveOptions(true);\n    }\n  }\n\n  stats: Stats = {};\n  passiveData?: WeaponPassiveData;\n  passive?: WeaponPassive;\n  passiveOptions: WeaponOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n\n  // Override in derived classes to implement special passives\n  // Only returns the extra passive bonuses, excluding the direct stat bonuses\n  // To be called when passive should update (e.g. id or refinement change)\n  getPassive(_refinement: number): WeaponPassive | undefined {\n    return;\n  }\n\n  // getPassive should be called before this if passives are updated\n  getPassiveOptions(shouldKeepValue: boolean = false) {\n    let newOptions = (this.passive?.options ?? []).map(\n      (Option) => new Option()\n    );\n\n    if (shouldKeepValue) {\n      this.passiveOptions.forEach((option) => {\n        let newOption = newOptions.find(\n          (newOption) => newOption.id === option.id\n        );\n        if (newOption !== undefined) {\n          setOptionValue(newOption, getOptionValue(option));\n        }\n      });\n    }\n\n    return newOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    let statMixins = [];\n\n    if (this.passive?.statMixin !== undefined) {\n      statMixins.push(this.passive.statMixin);\n    }\n\n    if (this.passiveData?.statBonuses !== undefined) {\n      this.passiveData.statBonuses.forEach(({ stat, value }) => {\n        statMixins.push({\n          apply: (stats: Stats) => {\n            stats[stat] = value + (stats[stat] ?? 0);\n          },\n        });\n      });\n    }\n\n    return statMixins;\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    if (this.passive?.modifierMixin === undefined) {\n      return [];\n    }\n\n    return [this.passive.modifierMixin];\n  }\n}\n","import Option from '../Option';\n\nexport default class WeaponOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { dragonsBanePassive } from './DragonsBanePassive';\n\nexport default class DragonsBane extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('dragonsbane', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return dragonsBanePassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function dragonsBanePassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('dragonsbane', refinement);\n\n  class DragonsBaneOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('dragonsBanePassive');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'dragonsBane',\n    options: [DragonsBaneOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { engulfingLightningPassive } from './EngulfingLightningPassive';\n\nexport default class EngulfingLightning extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('engulfinglightning', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return engulfingLightningPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function engulfingLightningPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('engulfinglightning', refinement);\n\n  class EngulfingLightningOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('engulfingLightningEnergyRecharge');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.energyRecharge = params[2] + (stats.energyRecharge ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'engulfingLightning',\n    options: [EngulfingLightningOption],\n\n    statMixin: {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        let atkBonus = (stats.energyRecharge - 1) * params[0];\n        if (atkBonus > params[1]) {\n          atkBonus = params[1];\n        }\n\n        stats.atkBonus = atkBonus + (stats.atkBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { everlastingMoonglowPassive } from './EverlastingMoonglowPassive';\n\nexport default class EverlastingMoonglow extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('everlastingmoonglow', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return everlastingMoonglowPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function everlastingMoonglowPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('everlastingmoonglow', refinement);\n\n  return {\n    id: 'everlastingMoonglow',\n    options: [],\n    modifierMixin: {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        modifier.normalAttackFlatDmg =\n          params[1] * (stats.flatHp ?? 0) + (modifier.normalAttackFlatDmg ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { luxuriousSeaLordPassive } from './LuxuriousSeaLordPassive';\n\nexport default class LuxuriousSeaLord extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('luxurioussealord', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return luxuriousSeaLordPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function luxuriousSeaLordPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('luxurioussealord', refinement);\n\n  return {\n    id: 'luxuriousSeaLord',\n    options: [],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { solarPearlPassive } from './SolarPearlPassive';\n\nexport default class SolarPearl extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('solarpearl', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return solarPearlPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function solarPearlPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('solarpearl', refinement);\n\n  class SolarPearlOptionNormalAttack\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlNormalAttack');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n          stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  class SolarPearlOptionSkillBurst\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlSkillBurst');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'solarPearl',\n    options: [SolarPearlOptionNormalAttack, SolarPearlOptionSkillBurst],\n  };\n}\n","import Weapon from './Weapon';\nimport DragonsBane from './dragonsbane/DragonsBane';\nimport EngulfingLightning from './engulfinglightning/EngulfingLightning';\nimport EverlastingMoonglow from './everlastingmoonglow/EverlastingMoonglow';\nimport LuxuriousSeaLord from './luxurioussealord/LuxuriousSeaLord';\nimport SolarPearl from './solarpearl/SolarPearl';\nimport StaffOfHoma from './staffofhoma/StaffOfHoma';\nimport TheCatch from './thecatch/TheCatch';\nimport Whiteblind from './whiteblind/Whiteblind';\n\nconst weapons: Record<string, typeof Weapon> = {\n  // Polearm\n  dragonsbane: DragonsBane,\n  engulfinglightning: EngulfingLightning,\n  staffofhoma: StaffOfHoma,\n  thecatch: TheCatch,\n\n  // Catalyst\n  everlastingmoonglow: EverlastingMoonglow,\n  solarpearl: SolarPearl,\n\n  // Claymore\n  luxurioussealord: LuxuriousSeaLord,\n  whiteblind: Whiteblind,\n};\n\nfunction getWeaponConstructor(id: string): typeof Weapon {\n  return weapons[id] ?? Weapon;\n}\n\nexport function initWeapon(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  refinement?: number\n): Weapon {\n  const WeaponConstructor = getWeaponConstructor(id);\n\n  return new WeaponConstructor(id, level, hasAscended, refinement);\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { staffOfHomaPassive } from './StaffOfHomaPassive';\n\nexport default class StaffOfHoma extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('staffofhoma', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return staffOfHomaPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function staffOfHomaPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('staffofhoma', refinement);\n\n  class StaffOfHomaOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('staffOfHomaAtkBonus');\n    }\n\n    statMixin = {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n\n        let flatAtkBonus = totalHp * params[1];\n        if (this.value) {\n          flatAtkBonus += totalHp * params[2];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      },\n    };\n  }\n\n  return {\n    id: 'staffOfHoma',\n    options: [StaffOfHomaOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { theCatchPassive } from './TheCatchPassive';\n\nexport default class TheCatch extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('thecatch', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return theCatchPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function theCatchPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('thecatch', refinement);\n\n  return {\n    id: 'theCatch',\n    options: [],\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        stats.burstCritRate = params[1] + (stats.burstCritRate ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { whiteblindPassive } from './WhiteblindPassive';\n\nexport default class Whiteblind extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('whiteblind', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return whiteblindPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function whiteblindPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('whiteblind', refinement);\n\n  class WhiteblindOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('whiteblindStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value > 0) {\n          let stacks = this.value;\n          if (this.value > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[0] * stacks + (stats.atkBonus ?? 0);\n          stats.defBonus = params[0] * stacks + (stats.defBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'whiteblind',\n    options: [WhiteblindOption],\n  };\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport Reaction from '../../modifier/Reaction';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ReactionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = Object.values(Reaction);\n\n  constructor() {\n    super('reaction');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.reaction = this.value as Reaction;\n      } else {\n        modifier.reaction = Reaction.None;\n      }\n    },\n  };\n}\n\nexport default ReactionOption;\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Col from 'react-bootstrap/esm/Col';\nimport Form from 'react-bootstrap/esm/Form';\nimport Modal from 'react-bootstrap/esm/Modal';\nimport { AppState } from '../App';\nimport {\n  createSave,\n  addSave,\n  getSave,\n  loadSave,\n  Saves,\n  deleteSave,\n} from '../save/Save';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype SaveBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  refreshApp: () => void;\n};\n\ntype SaveBlockState = {\n  saves: Saves;\n  saveInputName: string;\n  selectedSave: string;\n  showDeleteWarning: boolean;\n};\n\nclass SaveBlock extends React.Component<SaveBlockProps, SaveBlockState> {\n  state: SaveBlockState;\n\n  constructor(props: SaveBlockProps) {\n    super(props);\n\n    // Populate local storage if empty\n    if (window.localStorage.getItem('saves') === null) {\n      window.localStorage.setItem('saves', '{}');\n    }\n\n    // Initialize saves in memory\n    const saves = JSON.parse(window.localStorage.getItem('saves') ?? '{}');\n    // Initialize state\n    this.state = {\n      saves,\n      saveInputName: '',\n      selectedSave: '',\n      showDeleteWarning: false,\n    };\n  }\n\n  onSaveClick = () => {\n    if (this.state.saveInputName !== '') {\n      const save = createSave(this.state.saveInputName, this.props.appState);\n      const saves = this.state.saves;\n      addSave(save, saves);\n      this.setState({ saves });\n    }\n  };\n\n  onSaveInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveInputName: e.target.value });\n  };\n\n  onLoadClick = () => {\n    if (this.state.selectedSave !== '') {\n      const save = getSave(this.state.selectedSave, this.state.saves);\n      if (save !== undefined) {\n        loadSave(save, this.props.setAppState, this.props.refreshApp);\n      }\n    }\n  };\n\n  onLoadInputChange = (value: string) => {\n    this.setState({ selectedSave: value });\n  };\n\n  onDeleteClick = () => {\n    if (this.state.selectedSave !== '') {\n      this.setState({ showDeleteWarning: true });\n    }\n  };\n\n  onModalConfirm = () => {\n    const saves = this.state.saves;\n    deleteSave(this.state.selectedSave, saves);\n    this.setState({ saves });\n\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onModalHide = () => {\n    this.setState({ showDeleteWarning: false });\n  };\n\n  render() {\n    return (\n      <InputBlock>\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onSaveClick}>\n            Save\n          </Button>\n\n          <Col className='save-name-col'>\n            <Form.Control\n              type='text'\n              size='sm'\n              placeholder='Save label (cannot be empty)'\n              onChange={this.onSaveInputChange}\n            />\n          </Col>\n        </InputRow>\n\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onLoadClick}>\n            Load\n          </Button>\n\n          <Picker\n            id='save-picker'\n            label=''\n            defaultValue=''\n            value={this.state.selectedSave}\n            onChange={this.onLoadInputChange}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {Object.values(this.state.saves).map((save) => (\n              <Picker.Item\n                label={save.label}\n                value={save.label}\n                key={save.label}\n              />\n            ))}\n          </Picker>\n\n          <>\n            <Button variant='danger' size='sm' onClick={this.onDeleteClick}>\n              Delete\n            </Button>\n\n            <Modal\n              show={this.state.showDeleteWarning}\n              onHide={this.onModalHide}\n            >\n              <Modal.Body>\n                Are you sure you want to delete the save configuration? This\n                action is irreversible!\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={this.onModalHide}>\n                  Cancel\n                </Button>\n                <Button variant='danger' onClick={this.onModalConfirm}>\n                  Delete\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default SaveBlock;\n","import { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport { ArtifactType, InputStat } from '../artifact/types';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport { Attack } from '../component/DPSColumn';\nimport Option from '../option/Option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n  weaponRefinement?: number;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  teamCharacterIds?: string[];\n\n  characterOptions?: { id?: string; value?: unknown }[];\n  weaponOptions?: { id?: string; value?: unknown }[];\n  artifactSetOptions?: { id?: string; value?: unknown }[];\n  teamOptions?: { id?: string; value?: unknown }[];\n\n  rotationTime?: number;\n  rotation?: AttackSave[];\n}\n\nexport type Saves = Record<string, Save>;\n\ninterface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\ninterface AttackSave {\n  talentType?: string;\n  talentId?: string;\n  multiplier?: number;\n  options?: { id?: string; value?: unknown }[];\n}\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n    weaponRefinement: appState.weapon.refinement,\n\n    artifacts: appState.artifacts.map((artifact) => {\n      return {\n        type: artifact.type,\n        rarity: artifact.rarity,\n        level: artifact.level,\n        mainStat: artifact.mainStat.stat,\n        subStats: artifact.subStats.map((subStat) =>\n          createInputStatSave(subStat)\n        ),\n      };\n    }),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    teamCharacterIds: appState.teamCharacters.map((character) => character.id),\n\n    characterOptions: appState.characterOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    weaponOptions: appState.weaponOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactSetOptions: appState.artifactSetOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    teamOptions: appState.teamOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n\n    rotationTime: appState.rotationTime,\n    rotation: appState.rotation.map((attack) => {\n      return {\n        talentType: attack.talentType,\n        talentId: attack.talentId,\n        multiplier: attack.multiplier,\n        options: attack.options.map((option) => {\n          return { id: option.id, value: getOptionValue(option) };\n        }),\n      };\n    }),\n  };\n\n  return save;\n}\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const character = initCharacter(\n    save.characterId,\n    save.characterLevel,\n    save.characterHasAscended\n  );\n  const weapon = initWeapon(\n    save.weaponId,\n    save.weaponLevel,\n    save.weaponHasAscended,\n    save.weaponRefinement\n  );\n\n  const artifacts =\n    save.artifacts?.map((savedArtifact, i) => {\n      const artifactType = savedArtifact.type ?? Object.values(ArtifactType)[i];\n      let artifact = new Artifact(\n        artifactType,\n        savedArtifact.rarity ?? 1,\n        savedArtifact.level ?? 0,\n        savedArtifact.mainStat ?? ''\n      );\n      artifact.subStats =\n        savedArtifact.subStats?.map(\n          (subStat) =>\n            new InputStat(\n              subStat.stat ?? '',\n              subStat.value ?? NaN,\n              subStat.rawValue ?? NaN\n            )\n        ) ?? artifact.subStats;\n\n      return artifact;\n    }) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map((artifactSet) =>\n    initArtifactSet(artifactSet.artifactSetId, artifactSet.artifactSetPieces)\n  ) ?? [initArtifactSet(), initArtifactSet(), initArtifactSet()];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const teamCharacters = save.teamCharacterIds?.map((id) =>\n    initCharacter(id)\n  ) ?? [initCharacter(), initCharacter(), initCharacter()];\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, option.value);\n    }\n  });\n\n  const weaponOptions = weapon.passiveOptions;\n  save.weaponOptions?.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, option.value);\n    }\n  });\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, option.value);\n    }\n  });\n\n  const teamOptions = teamCharacters.flatMap(\n    (character) => character.teamOptions\n  );\n  save.teamOptions?.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, option.value);\n    }\n  });\n\n  const allOptions = [\n    ...characterOptions,\n    ...weaponOptions,\n    ...artifactSetOptions,\n    ...teamOptions,\n  ];\n\n  const rotationTime = save.rotationTime ?? 0;\n  const rotation: Attack[] =\n    save.rotation?.map((attackSave) => {\n      return {\n        talentType: attackSave.talentType ?? '',\n        talentId: attackSave.talentId ?? '',\n        multiplier: attackSave.multiplier ?? 1,\n        talentValue: { damage: [NaN] },\n        options:\n          attackSave.options\n            ?.map(({ id, value }) => {\n              const OptionConstructor = allOptions.find(\n                (option) => option.id === id\n              )?.constructor as { new (): Option };\n              let option;\n              if (OptionConstructor !== undefined) {\n                option = new OptionConstructor();\n                setOptionValue(option, value);\n              } else if (id === 'reaction') {\n                option = new ReactionOption();\n                setOptionValue(option, value);\n              }\n              return option;\n            })\n            ?.filter((option): option is Option => option !== undefined) ?? [],\n      };\n    }) ?? [];\n\n  setAppState(\n    {\n      character,\n      weapon,\n      artifacts,\n      artifactSets,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      critType,\n      enemyLevel,\n      enemyRes,\n      reaction,\n      teamCharacters,\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n      teamOptions,\n      rotationTime,\n      rotation,\n    },\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Weapon from '../weapon/Weapon';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    weapon,\n    weaponOptions,\n  }: {\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n  }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const { weaponLevel, hasAscended, refinement } = this.props.appState.weapon;\n    const weapon = initWeapon(id, weaponLevel, hasAscended, refinement);\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponRefinement = (refinement: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.refinement = refinement;\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  updateOptions = () => {\n    const { weaponOptions } = this.props.appState;\n    this.props.updateTotalStats({ weaponOptions });\n    this.props.setAppState({ weaponOptions: [...weaponOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-refinement-input'\n            label='Refinement:'\n            defaultValue={1}\n            value={appState.weapon.refinement}\n            onInput={this.setWeaponRefinement}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.weaponOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React, { Fragment } from 'react';\nimport { AppState } from '../App';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport CharacterPicker from './CharacterPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport OptionInput from './OptionInput';\n\ntype TeamInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    teamOptions,\n  }: {\n    teamOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass TeamInputBlock extends React.Component<TeamInputBlockProps> {\n  setCharacterId = (i: number) => (id: string) => {\n    const { teamCharacters } = this.props.appState;\n    teamCharacters[i] = initCharacter(id);\n    const teamOptions = teamCharacters.flatMap(\n      (character) => character.teamOptions\n    );\n    this.props.updateTotalStats({ teamOptions });\n    this.props.setAppState({\n      teamCharacters: [...teamCharacters],\n      teamOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { teamOptions } = this.props.appState;\n    this.props.updateTotalStats({ teamOptions });\n    this.props.setAppState({ teamOptions: [...teamOptions] });\n  };\n\n  render() {\n    const { teamCharacters } = this.props.appState;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <p>Team Buffs</p>\n        </InputRow>\n\n        {[0, 1, 2].map((i) => (\n          <Fragment key={i}>\n            <InputRow>\n              <CharacterPicker\n                characterId={teamCharacters[i].id}\n                setCharacterId={this.setCharacterId(i)}\n              />\n            </InputRow>\n\n            {teamCharacters[i].teamOptions.map((option) => (\n              <InputRow key={option.id}>\n                <OptionInput\n                  option={option}\n                  updateOptions={this.updateOptions}\n                />\n              </InputRow>\n            ))}\n          </Fragment>\n        ))}\n      </InputBlock>\n    );\n  }\n}\n\nexport default TeamInputBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport CritType from '../modifier/CritType';\nimport Resistance from '../stat/Resistance';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport SaveBlock from './SaveBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport TeamInputBlock from './TeamInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n    teamOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  refreshApp: () => void;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n      refreshApp,\n    } = this.props;\n\n    return (\n      <Col\n        id='input-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <SaveBlock\n          appState={appState}\n          setAppState={setAppState}\n          refreshApp={refreshApp}\n        />\n\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n\n        <TeamInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../character/Character';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\nimport Weapon from '../weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Col\n        id='stat-column'\n        className='stat-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\n\ntype TalentBlockProps = {\n  type: string;\n  talentValues: Record<string, TalentValue>;\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{talentDescMapping[this.props.type]}</h3>\n        {Object.entries(this.props.talentValues).map(([id, { damage }]) => (\n          <p key={id}>\n            {talentDescMapping[id]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport { TalentValueSet } from '../talent/types';\nimport TalentBlock from './TalentBlock';\nimport Col from 'react-bootstrap/esm/Col';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const talentValues = this.props.talentValues;\n\n    return (\n      <Col\n        id='talent-column'\n        className='talent-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='result-block'>\n          <h2>Talents</h2>\n          {Object.entries(talentValues).map(([type, values]) => (\n            <TalentBlock key={type} type={type} talentValues={values} />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import React from 'react';\nimport Option from '../option/Option';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\nimport { optionMapping } from '../data/Data';\nimport OptionInput from './OptionInput';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\n\ntype DPSOptionInputProps = {\n  setOption: (option?: Option) => void;\n  options: Option[];\n  option?: Option;\n  index: number;\n};\n\nclass DPSOptionInput extends React.Component<DPSOptionInputProps> {\n  setOptionId = (id: string) => {\n    const OptionConstructor = this.props.options.find(\n      (option) => option.id === id\n    )?.constructor as { new (): Option };\n\n    if (OptionConstructor !== undefined) {\n      this.props.setOption(new OptionConstructor());\n    } else if (id === 'reaction') {\n      this.props.setOption(new ReactionOption());\n    } else {\n      this.props.setOption();\n    }\n  };\n\n  updateOptions = () => {\n    this.props.setOption(this.props.option);\n  };\n\n  render() {\n    return (\n      <InputRow>\n        <Picker\n          id={`dps-attack-option-${this.props.index}`}\n          label=''\n          defaultValue=''\n          value={this.props.option?.id ?? ''}\n          onChange={this.setOptionId}\n          isLabelShown={false}\n          className='ml-5'\n        >\n          <Picker.Item value='' label='' />\n          <Picker.Item value='reaction' label='Reaction' />\n          {this.props.options.map((option) => (\n            <Picker.Item\n              key={option.id}\n              value={option.id}\n              label={optionMapping[option.id]}\n            />\n          ))}\n        </Picker>\n\n        {this.props.option && (\n          <OptionInput\n            option={this.props.option}\n            updateOptions={this.updateOptions}\n            isLabelShown={false}\n          />\n        )}\n      </InputRow>\n    );\n  }\n}\n\nexport default DPSOptionInput;\n","import React from 'react';\nimport InputRow from './InputRow';\nimport { Attack } from './DPSColumn';\nimport Picker from './Picker';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport IntInput from './IntInput';\nimport { TalentValueSet } from '../talent/types';\nimport DPSOptionInput from './DPSOptionInput';\nimport Option from '../option';\n\ntype DPSAttackInputProps = {\n  setAttack: (attack: Attack) => void;\n  attack: Attack;\n  index: number;\n  talentValues: TalentValueSet;\n  options: Option[];\n};\n\nclass DPSAttackInput extends React.Component<DPSAttackInputProps> {\n  setTalentType = (type: string) => {\n    const attack = { ...this.props.attack, talentType: type };\n    this.props.setAttack(attack);\n  };\n\n  setTalentId = (id: string) => {\n    const attack = { ...this.props.attack, talentId: id };\n    this.props.setAttack(attack);\n  };\n\n  setMultiplier = (multiplier: number) => {\n    const attack = { ...this.props.attack, multiplier };\n    this.props.setAttack(attack);\n  };\n\n  setOption = (i: number) => (option?: Option) => {\n    const options = [...this.props.attack.options];\n\n    if (option === undefined) {\n      options.splice(i, 1);\n    } else {\n      options[i] = option;\n    }\n\n    this.props.setAttack({ ...this.props.attack, options });\n  };\n\n  render() {\n    return (\n      <>\n        <InputRow>\n          <Picker\n            id={`dps-talent-type-${this.props.index}`}\n            label=''\n            defaultValue=''\n            value={this.props.attack.talentType}\n            onChange={this.setTalentType}\n            isLabelShown={false}\n          >\n            <Picker.Item value='' label='' />\n            {Object.keys(this.props.talentValues).map((type) => (\n              <Picker.Item\n                key={type}\n                value={type}\n                label={talentDescMapping[type]}\n              />\n            ))}\n          </Picker>\n\n          <Picker\n            id={`dps-talent-id-${this.props.index}`}\n            label=''\n            defaultValue=''\n            value={this.props.attack.talentId}\n            onChange={this.setTalentId}\n            isLabelShown={false}\n          >\n            <Picker.Item value='' label='' />\n            {Object.keys(\n              this.props.talentValues[this.props.attack.talentType] ?? {}\n            ).map((id) => (\n              <Picker.Item key={id} value={id} label={talentDescMapping[id]} />\n            ))}\n          </Picker>\n\n          {getDamageDisplayValue(this.props.attack.talentValue.damage)}\n\n          <IntInput\n            id={`dps-attack-multiplier-${this.props.index}`}\n            label='x'\n            defaultValue={1}\n            value={this.props.attack.multiplier}\n            onInput={this.setMultiplier}\n            className='level-input'\n          />\n        </InputRow>\n\n        {this.props.attack.options.map((option, i) => (\n          <DPSOptionInput\n            key={i}\n            setOption={this.setOption(i)}\n            options={this.props.options}\n            option={option}\n            index={i}\n          />\n        ))}\n\n        <DPSOptionInput\n          setOption={this.setOption(this.props.attack.options.length)}\n          options={this.props.options}\n          index={this.props.attack.options.length}\n        />\n      </>\n    );\n  }\n}\n\nexport default DPSAttackInput;\n","import { AppState } from '../App';\nimport { getAscensionLevel } from '../character/Character';\nimport { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { getOptionValue, setOptionValue } from '../option';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { getTotalStatsAt } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\nimport Option from '../option/Option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\n\nexport function calculateTalentValue(\n  talentType: string,\n  talentId: string,\n  options: Option[],\n  appState: AppState,\n  artifactSetBonuses: Stats,\n  getDamageModifier: ({\n    modifierMixins,\n  }: {\n    modifierMixins: ModifierMixin[];\n  }) => DamageModifier,\n  getStatMixins: ({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache,\n  }: {\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => StatMixin[],\n  getModifierMixins: ({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache,\n  }: {\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => ModifierMixin[]\n): TalentValue {\n  // Initialize a set of all options\n  const { characterOptions, weaponOptions, artifactSetOptions, teamOptions } =\n    initializeAllOptions(appState);\n\n  const allOptions = [\n    ...characterOptions,\n    ...weaponOptions,\n    ...artifactSetOptions,\n    ...teamOptions,\n  ];\n\n  // Override option values\n  options.forEach((option) => {\n    let oldOption = allOptions.find((oldOption) => oldOption.id === option.id);\n    if (oldOption !== undefined) {\n      setOptionValue(oldOption, getOptionValue(option));\n    } else if (option.id === 'reaction') {\n      characterOptions.push(option as ReactionOption);\n    }\n  });\n\n  // Calculate stats and modifier\n  const statMixins = getStatMixins({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache: false,\n  });\n\n  const stats = getTotalStatsAt(\n    appState.character,\n    appState.weapon,\n    artifactSetBonuses,\n    appState.artifacts,\n    appState.talentAttackLevel,\n    appState.talentSkillLevel,\n    appState.talentBurstLevel,\n    statMixins\n  );\n\n  const modifierMixins = getModifierMixins({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache: false,\n  });\n\n  const modifier = getDamageModifier({ modifierMixins });\n\n  // Calculate talent value\n  const talentFn = appState.character.talentFns[talentType]?.[talentId];\n\n  const talentValue = talentFn?.({ stats, modifier }) ?? { damage: [NaN] };\n\n  return talentValue;\n}\n\nexport function initializeAllOptions(appState: AppState) {\n  const characterOptions = [\n    ...appState.character.getCharacterOptions(),\n    ...appState.character.getPassiveOptions(\n      getAscensionLevel(\n        appState.character.level,\n        appState.character.hasAscended\n      )\n    ),\n  ];\n  appState.characterOptions.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, getOptionValue(option));\n    }\n  });\n\n  const weaponOptions = appState.weapon.getPassiveOptions();\n  appState.weaponOptions.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, getOptionValue(option));\n    }\n  });\n\n  const artifactSetOptions = appState.artifactSets.flatMap((artifactSet) =>\n    artifactSet.getOptions(artifactSet.pieces)\n  );\n  appState.artifactSetOptions.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, getOptionValue(option));\n    }\n  });\n\n  const teamOptions = appState.teamCharacters.flatMap((character) =>\n    character.getTeamOptions()\n  );\n  appState.teamOptions.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, getOptionValue(option));\n    }\n  });\n\n  return {\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n  };\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport InputRow from './InputRow';\nimport FloatInput from './FloatInput';\nimport { TalentValue, TalentValueSet } from '../talent/types';\nimport DPSAttackInput from './DPSAttackInput';\nimport { AppState } from '../App';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { Stats } from '../data/types';\nimport {\n  calculateTalentValue,\n  initializeAllOptions,\n} from '../dps/DPSCalculator';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Option from '../option/Option';\n\nexport type Attack = {\n  talentType: string;\n  talentId: string;\n  multiplier: number;\n  talentValue: TalentValue;\n  options: Option[];\n};\n\nconst defaultAttack: Attack = {\n  talentType: '',\n  talentId: '',\n  multiplier: 1,\n  talentValue: { damage: [NaN] },\n  options: [],\n};\n\ntype DPSColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  artifactSetBonuses: Stats;\n  getDamageModifier: ({\n    modifierMixins,\n  }: {\n    modifierMixins: ModifierMixin[];\n  }) => DamageModifier;\n  getStatMixins: ({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache,\n  }: {\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => StatMixin[];\n  getModifierMixins: ({\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    updateCache,\n  }: {\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => ModifierMixin[];\n  talentValues: TalentValueSet;\n};\n\nclass DPSColumn extends React.Component<DPSColumnProps> {\n  dpr: number = 0;\n  dps: number = NaN;\n\n  updateTalentValue = (attack: Attack) => {\n    attack.talentValue = calculateTalentValue(\n      attack.talentType,\n      attack.talentId,\n      attack.options,\n      this.props.appState,\n      this.props.artifactSetBonuses,\n      this.props.getDamageModifier,\n      this.props.getStatMixins,\n      this.props.getModifierMixins\n    );\n  };\n\n  updateTalentValues = () => {\n    const rotation = this.props.appState.rotation;\n\n    rotation.forEach((attack) => this.updateTalentValue(attack));\n\n    this.dpr = rotation.reduce(\n      (acc, attack) =>\n        acc +\n        attack.talentValue.damage.reduce(\n          (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n          0\n        ) *\n          (!isNaN(attack.multiplier) ? attack.multiplier : 0),\n      0\n    );\n    this.dps = this.dpr / this.props.appState.rotationTime;\n  };\n\n  setRotationTime = (time: number) => {\n    this.props.setAppState({ rotationTime: time });\n  };\n\n  setAttack = (i: number) => (attack: Attack) => {\n    const rotation = this.props.appState.rotation;\n\n    if (attack.talentType === '') {\n      rotation.splice(i, 1);\n    } else {\n      rotation[i] = attack;\n    }\n\n    this.props.setAppState({ rotation });\n  };\n\n  render() {\n    this.updateTalentValues();\n\n    const { characterOptions, weaponOptions, artifactSetOptions, teamOptions } =\n      initializeAllOptions(this.props.appState);\n\n    const allOptions = [\n      ...characterOptions,\n      ...weaponOptions,\n      ...artifactSetOptions,\n      ...teamOptions,\n    ];\n\n    return (\n      <Col\n        id='dps-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <h2>DPS Calculator</h2>\n\n        <InputRow>\n          <FloatInput\n            id='rotation-time-input'\n            label='Rotation Time:'\n            defaultValue={0}\n            value={this.props.appState.rotationTime}\n            onInput={this.setRotationTime}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <p>DPR: {this.dpr.toFixed(0)}</p>\n        </InputRow>\n\n        <InputRow>\n          <p>DPS: {isFinite(this.dps) ? this.dps.toFixed(0) : '-'}</p>\n        </InputRow>\n\n        {this.props.appState.rotation.map((attack, i) => (\n          <DPSAttackInput\n            key={i}\n            setAttack={this.setAttack(i)}\n            attack={attack}\n            index={i}\n            talentValues={this.props.talentValues}\n            options={allOptions}\n          />\n        ))}\n\n        <DPSAttackInput\n          setAttack={this.setAttack(this.props.appState.rotation.length)}\n          attack={{ ...defaultAttack }}\n          index={this.props.appState.rotation.length}\n          talentValues={this.props.talentValues}\n          options={allOptions}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default DPSColumn;\n","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport Row from 'react-bootstrap/esm/Row';\nimport './App.css';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport DPSColumn, { Attack } from './component/DPSColumn';\nimport { Stats } from './data/types';\nimport Artifact from './artifact/Artifact';\nimport ArtifactSet from './artifact/ArtifactSet';\nimport { ArtifactType } from './artifact/types';\nimport Character from './character/Character';\nimport { initCharacter } from './character/CharacterUtil';\nimport CritType from './modifier/CritType';\nimport DamageModifier from './modifier/DamageModifer';\nimport Reaction from './modifier/Reaction';\nimport { isModifierApplicable, isStatsApplicable } from './option';\nimport { ModifierMixin, Priority, StatMixin } from './option/Mixin';\nimport { IModifierApplicable, IStatsApplicable } from './option/Option';\nimport WeaponOption from './option/weaponOptions/WeaponOption';\nimport Resistance from './stat/Resistance';\nimport { getTotalStatsAt } from './stat/Stat';\nimport { TalentValue, TalentValueSet } from './talent/types';\nimport Weapon from './weapon/Weapon';\nimport CharacterOption from './option/characterOptions/CharacterOption';\nimport ArtifactSetOption from './option/artifactSetOptions/ArtifactSetOption';\nimport { initArtifactSet } from './artifact/ArtifactSetUtil';\nimport { initWeapon } from './weapon/WeaponUtil';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  teamCharacters: Character[];\n\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamOptions: CharacterOption[];\n\n  rotationTime: number;\n  rotation: Attack[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: initCharacter(),\n    weapon: initWeapon(),\n    artifacts: Object.values(ArtifactType).map(\n      (type) => new Artifact(type, 1, 0, '')\n    ),\n\n    artifactSets: [initArtifactSet(), initArtifactSet(), initArtifactSet()],\n\n    enemyLevel: 1,\n    enemyDefReduction: 0,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    flatDmg: 0,\n    reaction: Reaction.None,\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    teamCharacters: [initCharacter(), initCharacter(), initCharacter()],\n\n    characterOptions: [],\n    weaponOptions: [],\n    artifactSetOptions: [],\n    teamOptions: [],\n\n    rotationTime: 0,\n    rotation: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = {};\n\n  modifierMixins: ModifierMixin[] = [];\n  statMixins: StatMixin[] = [];\n\n  // Gets all modifier mixins and updates cache (modifierMixins)\n  getModifierMixins = ({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamOptions,\n    updateCache = true,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined &&\n      teamOptions === undefined\n    ) {\n      return this.modifierMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveModifierMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveModifierMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getModifierMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const teamOptionMixins = (teamOptions ?? this.state.teamOptions)\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.modifierMixin);\n\n    const unarrangedMixins = characterPassiveMixins\n      .concat(weaponPassiveMixins)\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(weaponOptionMixins)\n      .concat(artifactSetOptionMixins)\n      .concat(teamOptionMixins);\n    const groupedMixins = new Map<Priority, ModifierMixin[]>();\n    unarrangedMixins.forEach((mixin) => {\n      const priority = mixin.priority ?? Priority.Normal;\n      const array = groupedMixins.get(priority);\n      if (!array) {\n        groupedMixins.set(priority, [mixin]);\n      } else {\n        array.push(mixin);\n      }\n    });\n\n    const modifierMixins = (groupedMixins.get(Priority.Normal) ?? []).concat(\n      groupedMixins.get(Priority.Last) ?? []\n    );\n\n    if (updateCache) {\n      this.modifierMixins = modifierMixins;\n    }\n\n    return modifierMixins;\n  };\n\n  // Gets all stat mixins and updates cache (statMixins)\n  getStatMixins = ({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamOptions,\n    updateCache = true,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    updateCache?: boolean;\n  }) => {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined &&\n      teamOptions === undefined\n    ) {\n      return this.statMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveStatMixins();\n\n    const weaponPassiveMixins = (\n      weapon ?? this.state.weapon\n    ).getPassiveStatMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getStatMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const weaponOptionMixins = (weaponOptions ?? this.state.weaponOptions)\n      .filter((option): option is WeaponOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const teamOptionMixins = (teamOptions ?? this.state.teamOptions)\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.statMixin);\n\n    const unarrangedMixins = characterPassiveMixins\n      .concat(weaponPassiveMixins)\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(weaponOptionMixins)\n      .concat(artifactSetOptionMixins)\n      .concat(teamOptionMixins);\n    const groupedMixins = new Map<Priority, StatMixin[]>();\n    unarrangedMixins.forEach((mixin) => {\n      const priority = mixin.priority ?? Priority.Normal;\n      const array = groupedMixins.get(priority);\n      if (!array) {\n        groupedMixins.set(priority, [mixin]);\n      } else {\n        array.push(mixin);\n      }\n    });\n\n    const statMixins = (groupedMixins.get(Priority.Normal) ?? []).concat(\n      groupedMixins.get(Priority.Last) ?? []\n    );\n\n    if (updateCache) {\n      this.statMixins = statMixins;\n    }\n\n    return statMixins;\n  };\n\n  getDamageModifier = ({\n    characterLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n  }: {\n    characterLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    modifierMixins?: ModifierMixin[];\n  } = {}): DamageModifier => {\n    const modifier: DamageModifier = {\n      characterLevel: characterLevel ?? this.state.character.level,\n      enemyLevel: enemyLevel ?? this.state.enemyLevel,\n      enemyDefReduction: this.state.enemyDefReduction,\n      enemyRes: enemyRes ?? this.state.enemyRes,\n      enemyResReduction: new Resistance(),\n      critType: critType ?? this.state.critType,\n      flatDmg: this.state.flatDmg,\n      reaction: reaction ?? this.state.reaction,\n      talentAttackLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n    };\n\n    // Apply modifier mixins\n    (modifierMixins ?? this.modifierMixins).forEach((mixin) =>\n      mixin.apply(modifier, this.totalStats)\n    );\n\n    return modifier;\n  };\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = newArtifactSets\n      .map((artifactSet) => artifactSet.stats)\n      .reduce((acc, stats) => {\n        Object.entries(stats).forEach(([stat, value]) => {\n          acc[stat] = value + (acc[stat] ?? 0);\n        });\n        return acc;\n      }, {} as Stats);\n\n    this.updateTotalStats({\n      artifactSets,\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSets?: ArtifactSet[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n  }) => {\n    const statMixins = this.getStatMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n      teamOptions,\n    });\n\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel,\n      statMixins\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      characterOptions,\n      artifactSetOptions,\n      teamOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    weapon,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifactSets?: ArtifactSet[];\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n\n    const modifierMixins = this.getModifierMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n      teamOptions,\n    });\n\n    const damageModifier = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n    });\n\n    this.talentValues = {};\n    Object.entries(character.talentFns).forEach(([type, fns]) => {\n      this.talentValues[type] = Object.entries(fns).reduce((acc, [id, fn]) => {\n        acc[id] = fn({ stats: this.totalStats, modifier: damageModifier });\n        return acc;\n      }, {} as Record<string, TalentValue>);\n    });\n  };\n\n  refreshApp = () => {\n    this.getStatMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n      teamOptions: this.state.teamOptions,\n    });\n    this.getModifierMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n      teamOptions: this.state.teamOptions,\n    });\n\n    this.updateArtifactSetBonuses({});\n    this.setState({});\n  };\n\n  render() {\n    return (\n      <Container className='app px-0' fluid>\n        <Navbar sticky='top' bg='light' className='d-md-none'>\n          <Nav>\n            <Nav.Item>\n              <Nav.Link href='#input-column'>Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#artifact-column'>Artifacts</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#stat-column'>Stats</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#talent-column'>Talents</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar>\n\n        <Row className='mx-0 flex-md-nowrap'>\n          <InputColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n            updateTotalStats={this.updateTotalStats}\n            updateTalentValues={this.updateTalentValues}\n            refreshApp={this.refreshApp}\n          />\n          <ArtifactColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateTotalStats={this.updateTotalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n            damageModifier={this.getDamageModifier()}\n            statMixins={this.statMixins}\n            talentValues={this.talentValues}\n          />\n          <StatColumn\n            appState={this.state}\n            totalStats={this.totalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n          />\n          <TalentColumn talentValues={this.talentValues} />\n          <DPSColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            artifactSetBonuses={this.artifactSetBonuses}\n            getDamageModifier={this.getDamageModifier}\n            getStatMixins={this.getStatMixins}\n            getModifierMixins={this.getModifierMixins}\n            talentValues={this.talentValues}\n          />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}