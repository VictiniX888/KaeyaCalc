{"version":3,"sources":["js/Character.js","js/Styles.js","App.js"],"names":["Character","id","characterMapping","characterData","characterLevelCurve","ascensionData","this","name","Name","baseHp","HpBase","baseAtk","AttackBase","baseDef","DefenseBase","PropGrowCurves","forEach","Type","GrowCurve","hpGrowthCurve","atkGrowthCurve","defGrowthCurve","ascensionId","AvatarPromoteId","level","hasAscended","ascensionLevel","ascensionBonuses","ascensionHp","ascensionAtk","ascensionDef","hpMultiplier","find","Value","atkMultiplier","defMultiplier","PromoteLevel","AddProps","undefined","PropType","Hp","Attack","Defense","styles","StyleSheet","create","container","display","flexDirection","alignItems","height","backgroundColor","inputColumn","padding","borderRightWidth","characterSelectRow","marginVertical","characterSelect","levelInputRow","levelInput","width","ascensionCheckRow","resultColumn","flexGrow","characterImage","resultText","App","renderCharacterList","sortedChars","Object","entries","sort","char1","char2","localeCompare","View","style","Text","selectedValue","state","characterId","onValueChange","value","_","setState","character","Item","label","map","renderCharacterImage","imageUrl","Image","source","uri","renderCharacterStats","characterStats","getStatsAt","characterLevel","isCharacterAscended","Math","round","loadedDataElements","characterMappingRaw","reduce","obj","Id","fetch","then","res","json","data","Level","CurveInfos","TextInput","defaultValue","onChangeText","text","textAsInt","parseInt","Checkbox","Component"],"mappings":"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","file":"static/js/app.77688970.chunk.js","sourcesContent":["export default class Character {\r\n    constructor(id, characterMapping, characterData, characterLevelCurve, ascensionData) {\r\n        this.id = id;\r\n        this.name = characterMapping[this.id].Name;\r\n        this.characterData = characterData[this.id];\r\n        this.characterLevelCurve = characterLevelCurve;\r\n        this.ascensionData = ascensionData;\r\n\r\n        this.baseHp = this.characterData.HpBase;\r\n        this.baseAtk = this.characterData.AttackBase;\r\n        this.baseDef = this.characterData.DefenseBase;\r\n\r\n        this.characterData.PropGrowCurves.forEach(({Type, GrowCurve}) => {\r\n            if (Type == 'FIGHT_PROP_BASE_HP') {\r\n                this.hpGrowthCurve = GrowCurve;\r\n            } else if (Type == 'FIGHT_PROP_BASE_ATTACK') {\r\n                this.atkGrowthCurve = GrowCurve;\r\n            } else if (Type == 'FIGHT_PROP_BASE_DEFENSE') {\r\n                this.defGrowthCurve = GrowCurve;\r\n            }\r\n        });\r\n\r\n        this.ascensionId = this.characterData.AvatarPromoteId;\r\n    }\r\n\r\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\r\n    getStatsAt(level, hasAscended) {\r\n        let hpMultiplier = this.characterLevelCurve[level].find(({Type}) => Type == this.hpGrowthCurve).Value;\r\n        let atkMultiplier = this.characterLevelCurve[level].find(({Type}) => Type == this.atkGrowthCurve).Value;\r\n        let defMultiplier = this.characterLevelCurve[level].find(({Type}) => Type == this.defGrowthCurve).Value;\r\n\r\n        let ascensionLevel;\r\n        if (level > 80 || (level == 80 && hasAscended)) {\r\n            ascensionLevel = 6;\r\n        } else if (level > 70 || (level == 70 && hasAscended)) {\r\n            ascensionLevel = 5;\r\n        } else if (level > 60 || (level == 60 && hasAscended)) {\r\n            ascensionLevel = 4;\r\n        } else if (level > 50 || (level == 50 && hasAscended)) {\r\n            ascensionLevel = 3;\r\n        } else if (level > 40 || (level == 40 && hasAscended)) {\r\n            ascensionLevel = 2;\r\n        } else if (level > 20 || (level == 20 && hasAscended)) {\r\n            ascensionLevel = 1;\r\n        } else {\r\n            ascensionLevel = 0;\r\n        }\r\n\r\n        let ascensionBonuses;\r\n        if (ascensionLevel > 0) {\r\n            ascensionBonuses = this.ascensionData.find(({AvatarPromoteId, PromoteLevel}) => AvatarPromoteId == this.ascensionId && PromoteLevel == ascensionLevel).AddProps;\r\n        }\r\n\r\n        let ascensionHp, ascensionAtk, ascensionDef;\r\n        if (ascensionBonuses !== undefined) {\r\n            ascensionBonuses.forEach(({PropType, Value}) => {\r\n                if (PropType == 'FIGHT_PROP_BASE_HP') {\r\n                    ascensionHp = Value;\r\n                } else if (PropType == 'FIGHT_PROP_BASE_ATTACK') {\r\n                    ascensionAtk = Value;\r\n                } else if (PropType == 'FIGHT_PROP_BASE_DEFENSE') {\r\n                    ascensionDef = Value;\r\n                }\r\n            });\r\n        } else {\r\n            ascensionHp = 0;\r\n            ascensionAtk = 0;\r\n            ascensionDef = 0;\r\n        }\r\n\r\n        let totalHp = this.baseHp * hpMultiplier + ascensionHp;\r\n        let totalAtk = this.baseAtk * atkMultiplier + ascensionAtk;\r\n        let totalDef = this.baseDef * defMultiplier + ascensionDef;\r\n        \r\n        return {\r\n            Hp: totalHp,\r\n            Attack: totalAtk,\r\n            Defense: totalDef,\r\n        }\r\n    }\r\n}","import { StyleSheet } from 'react-native';\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'stretch',\r\n\r\n        height: '100%',\r\n\r\n        backgroundColor: '#fff',\r\n    },\r\n\r\n    inputColumn: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n\r\n        padding: '1%',\r\n\r\n        borderRightWidth: 1,\r\n\r\n        backgroundColor: '#ccc',\r\n    },\r\n\r\n    characterSelectRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n\r\n        marginVertical: '0.25em',\r\n    },\r\n\r\n    characterSelect: {\r\n\r\n    },\r\n\r\n    levelInputRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n\r\n        marginVertical: '0.25em',\r\n    },\r\n\r\n    levelInput: {\r\n        width: '2em',\r\n\r\n    },\r\n\r\n    ascensionCheckRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n\r\n        marginVertical: '0.25em',\r\n    },\r\n\r\n    resultColumn: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        flexGrow: 1,\r\n\r\n        padding: '1%',\r\n\r\n        backgroundColor: '#eee',\r\n    },\r\n\r\n    characterImage: {\r\n        marginVertical: '0.25em',\r\n    },\r\n\r\n    resultText: {\r\n        marginVertical: '0.25em',\r\n    }\r\n});\r\n\r\nexport default styles;","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { Image, Text, TextInput, View } from 'react-native';\n\nimport Character from './js/Character.js';\nimport characterMappingRaw from './static/characterdata.json';\n\nimport styles from './js/Styles.js';\n\nexport default class App extends Component {\n  characterData;\n  characterLevelCurve;\n  ascensionData;\n\n  constructor() {\n    super();\n\n    this.state = {\n      loadedDataElements: 0,\n      characterId: undefined,\n      character: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n    }\n\n    this.characterMapping = characterMappingRaw.reduce((map, obj) => {\n      map[obj.Id] = obj;\n      return map;\n    }, {});\n  }\n\n  // Called when component is mounted for the first time\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/AvatarExcelConfigData.json')\n      .then(res => res.json())\n      .then(data => data.reduce((map, obj) => {\n        map[obj.Id] = obj;\n        return map;\n      }, {}))\n      .then(obj => {\n        this.characterData = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      });\n    \n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/AvatarCurveExcelConfigData.json')\n      .then(res => res.json())\n      .then(data => data.reduce((map, obj) => {\n        map[obj.Level] = obj.CurveInfos;\n        return map;\n      }, {}))\n      .then(obj => {\n        this.characterLevelCurve = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      });\n\n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/AvatarPromoteExcelConfigData.json')\n      .then(res => res.json())\n      .then(obj => this.ascensionData = obj)\n      .then(obj => {\n        this.ascensionData = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      }); \n  }\n\n  renderCharacterList = () => {\n    let sortedChars = Object.entries(this.characterMapping).sort(([, char1], [, char2]) => char1.Name.localeCompare(char2.Name));\n    \n    return (\n      <View style={styles.characterSelectRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.setState({\n                characterId: value,\n                character: new Character(value, this.characterMapping, this.characterData, this.characterLevelCurve, this.ascensionData),\n              })\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {sortedChars.map(([id, character]) => <Picker.Item label={character.Name} value={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.state.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  renderCharacterStats = () => {\n    let characterStats = this.state.character.getStatsAt(this.state.characterLevel, this.state.isCharacterAscended);\n    return (\n      <View>\n        {this.renderCharacterImage()}\n        <Text style={styles.resultText}>Selected character: {this.state.character.name}</Text>\n        <Text style={styles.resultText}>Character HP: {Math.round(characterStats.Hp)}</Text>\n        <Text style={styles.resultText}>Character ATK: {Math.round(characterStats.Attack)}</Text>\n        <Text style={styles.resultText}>Character DEF: {Math.round(characterStats.Defense)}</Text>\n      </View>\n    )\n  }\n\n  render() {\n    let hasLoaded = this.state.loadedDataElements == 3;\n    if (hasLoaded) {\n      return (\n        <View style={styles.container}>\n          <View style={styles.inputColumn}>\n            {this.renderCharacterList()}\n\n            <View style={styles.levelInputRow}>\n              <Text>Level: </Text>\n              <TextInput \n                style={styles.levelInput}\n                defaultValue={this.state.characterLevel} \n                onChangeText={text => {\n                  let textAsInt = parseInt(text);\n                  if (textAsInt >= 1 && textAsInt <= 90) {\n                    this.setState({characterLevel: textAsInt});\n                  }\n                }}\n              />\n            </View>\n\n            <View style={styles.ascensionCheckRow}>\n              <Text>Ascended? </Text>\n              <Checkbox\n                onValueChange={value => this.setState({isCharacterAscended: value})}\n                value={this.state.isCharacterAscended}\n              />\n            </View>\n\n          </View>\n\n          <View style={styles.resultColumn}>\n            {this.state.character ? this.renderCharacterStats() : null}\n          </View>\n\n        </View>\n      )\n    } else {\n      return (\n        <View style={styles.container}>\n          <Text>Loading...</Text>\n        </View>\n      )\n    }\n  }\n}\n\n\n"],"sourceRoot":""}