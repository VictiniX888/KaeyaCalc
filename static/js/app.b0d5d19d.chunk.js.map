{"version":3,"sources":["js/Character.js","App.js"],"names":["Character","name","characterMapping","characterData","characterLevelCurve","ascensionData","this","id","Id","level","hasAscended","ascensionLevel","baseAtk","AttackBase","growthCurve","PropGrowCurves","find","Type","GrowCurve","atkMultiplier","Value","ascensionId","AvatarPromoteId","ascensionBonuses","PromoteLevel","AddProps","undefined","PropType","App","renderCharacterList","item","TouchableOpacity","onPress","setState","characterName","character","Text","renderCharacterStats","View","state","getAtkAt","characterLevel","isCharacterAscended","loadedDataElements","characterMappingRaw","reduce","map","obj","Name","fetch","then","res","json","data","Level","CurveInfos","style","styles","container","FlatList","Object","keys","renderItem","TextInput","defaultValue","onChangeText","text","textAsInt","parseInt","Switch","onValueChange","value","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","file":"static/js/app.b0d5d19d.chunk.js","sourcesContent":["export default class Character {\r\n    constructor(name, characterMapping, characterData, characterLevelCurve, ascensionData) {\r\n        this.name = name;\r\n        this.id = characterMapping[this.name].Id;\r\n        this.characterData = characterData[this.id];\r\n        this.characterLevelCurve = characterLevelCurve;\r\n        this.ascensionData = ascensionData;\r\n    }\r\n\r\n    getAtkAt(level, hasAscended) {\r\n        const baseAtk = this.characterData.AttackBase;\r\n        const growthCurve = this.characterData.PropGrowCurves.find(({Type}) => Type == 'FIGHT_PROP_BASE_ATTACK').GrowCurve;\r\n        const atkMultiplier = this.characterLevelCurve[level].find(({Type}) => Type == growthCurve).Value;\r\n\r\n        let ascensionLevel;\r\n        if (level > 80 || (level == 80 && hasAscended)) {\r\n            ascensionLevel = 6;\r\n        } else if (level > 70 || (level == 70 && hasAscended)) {\r\n            ascensionLevel = 5;\r\n        } else if (level > 60 || (level == 60 && hasAscended)) {\r\n            ascensionLevel = 4;\r\n        } else if (level > 50 || (level == 50 && hasAscended)) {\r\n            ascensionLevel = 3;\r\n        } else if (level > 40 || (level == 40 && hasAscended)) {\r\n            ascensionLevel = 2;\r\n        } else if (level > 20 || (level == 20 && hasAscended)) {\r\n            ascensionLevel = 1;\r\n        } else {\r\n            ascensionLevel = 0;\r\n        }\r\n        const ascensionId = this.characterData.AvatarPromoteId;\r\n\r\n        const ascensionBonuses = (ascensionLevel > 0) ? this.ascensionData.find(({AvatarPromoteId, PromoteLevel}) => AvatarPromoteId == ascensionId && PromoteLevel == ascensionLevel).AddProps : undefined;\r\n        const ascensionAtk = ascensionBonuses ? ascensionBonuses.find(({PropType}) => PropType == 'FIGHT_PROP_BASE_ATTACK').Value : 0;\r\n\r\n        const totalAtk = baseAtk * atkMultiplier + ascensionAtk;\r\n        return totalAtk;\r\n    }\r\n}","import { setStatusBarStyle, StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport { FlatList, StyleSheet, Switch, Text, TextInput, TouchableOpacity, View } from 'react-native';\n\nimport Character from './js/Character.js';\nimport characterMappingRaw from './static/characterdata.json';\n\nexport default class App extends Component {\n  characterData;\n  characterLevelCurve;\n  ascensionData;\n\n  constructor() {\n    super();\n    this.state = {\n      loadedDataElements: 0,\n      characterName: \"\",\n      character: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n    }\n\n    this.characterMapping = characterMappingRaw.reduce((map, obj) => {\n      map[obj.Name] = obj;\n      return map;\n    }, {});\n  }\n\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/AvatarExcelConfigData.json')\n      .then(res => res.json())\n      .then(data => data.reduce((map, obj) => {\n        map[obj.Id] = obj;\n        return map;\n      }, {}))\n      .then(obj => {\n        this.characterData = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      });\n    \n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/AvatarCurveExcelConfigData.json')\n      .then(res => res.json())\n      .then(data => data.reduce((map, obj) => {\n        map[obj.Level] = obj.CurveInfos;\n        return map;\n      }, {}))\n      .then(obj => {\n        this.characterLevelCurve = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      });\n\n    fetch('https://raw.githubusercontent.com/Dimbreath/GenshinData/main/Excel/AvatarPromoteExcelConfigData.json')\n      .then(res => res.json())\n      .then(obj => this.ascensionData = obj)\n      .then(obj => {\n        this.ascensionData = obj;\n        this.setState((state) => { return {loadedDataElements: state.loadedDataElements + 1} });\n      }); \n  }\n\n  renderCharacterList = ({item}) => {\n    return (\n      <TouchableOpacity onPress={() => this.setState({\n        characterName: item,\n        character: new Character(item, this.characterMapping, this.characterData, this.characterLevelCurve, this.ascensionData),\n      })}>\n        <Text>{item}</Text>\n      </TouchableOpacity>\n    );\n  }\n\n  renderCharacterStats = () => {\n    return (\n      <View>\n        <Text>Selected character: {this.state.characterName}</Text>\n        <Text>Character ATK: {this.state.character.getAtkAt(this.state.characterLevel, this.state.isCharacterAscended)}</Text>\n      </View>\n    )\n  }\n\n  render() {\n    let hasLoaded = this.state.loadedDataElements == 3;\n    if (hasLoaded) {\n      return (\n        <View style={styles.container}>\n\n          <View>\n            <FlatList data={Object.keys(this.characterMapping)} renderItem={this.renderCharacterList} />\n          </View>\n\n          <View>\n            <TextInput \n              defaultValue={this.state.characterLevel} \n              onChangeText={text => {\n                let textAsInt = parseInt(text);\n                if (textAsInt >= 1 && textAsInt <= 90) {\n                  this.setState({characterLevel: textAsInt});\n                }\n              }}\n            />\n            <Switch \n              onValueChange={value => {\n                this.setState({isCharacterAscended: value});\n              }}\n              value={this.state.isCharacterAscended}\n            />\n          </View>\n\n          {this.state.character ? this.renderCharacterStats() : null}\n\n        </View>\n      )\n    } else {\n      return (\n        <View style={styles.container}>\n          <Text>Loading...</Text>\n        </View>\n      )\n    }\n    if (this.state.ascensionData == undefined || this.state.characterLevelCurve == undefined || this.state.characterData == undefined) {\n      return (\n        <View style={styles.container}>\n          <Text>Loading...</Text>\n        </View>\n      )\n    } else {\n      let character = new Character('Kaeya', this.characterMapping, this.state.characterData, this.state.characterLevelCurve, this.state.ascensionData);\n      console.log(this.state.ascensionData == undefined || this.state.characterLevelCurve == undefined || this.state.characterData == undefined);\n      return (\n        <View style={styles.container}>\n          <View>\n            <FlatList data={this.characterMapping} renderItem={it => <Text>{it.id}{console.log(\"hi\")}</Text>} extraData={this.state.ascensionData == undefined || this.state.characterLevelCurve == undefined || this.state.characterData == undefined} />\n          </View>\n\n          <View>\n            <Text>{character.getAtkAt(70, true)}</Text>\n          </View>\n        </View>\n      );\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"sourceRoot":""}