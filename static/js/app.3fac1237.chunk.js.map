{"version":3,"sources":["js/Data.js","js/Resistance.js","js/Talent.js","js/TalentOption.js","js/Character.js","js/Weapon.js","js/Stat.js","js/Artifact.js","js/ArtifactSetBonus.js","js/ArtifactSet.js","js/DamageModifer.js","js/Styles.js","App.js"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talents","attack","curveAcc","params","skill","burst","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","getArtifactSetData","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","this","value","isNaN","defaultTalent","calculateBaseDamage","stats","multiplier","scalingType","flatDmg","flatAtk","flatDef","flatHp","calculateTotalDamage","element","attackType","modifier","baseDmg","dmgBonus","normalDmgBonus","chargedDmgBonus","plungeDmgBonus","getDamageBonus","crit","critType","critDmg","Math","min","critRate","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","enemyResReduction","calculateHp","flatBonus","normalAttackDefault","hits","talentValues","i","damage","push","description","normalAttackMulti","hitCount","damages","hit","chargedAttackDefault","chargedAttackMulti","chargedAttackHeavy","plungeAttackDefault","attackLightDefault","normalHits","slice","attackLightMulti","chargedHits","length","attackHeavyDefault","attackBowDefault","chargedElement","aimShotDefault","skillBase","skillDefault","skillMultiBase","burstBase","burstDefault","burstMultiBase","healingSkillBase","flatHealing","calculateHealing","hpBase","shieldBase","dmgAbsorption","shieldStrength","dionaHoldSkill","calculateDmgAbsorption","lisaAttack","lisaSkill","talentDmg","lisaBurst","barbaraAttack","barbaraSkill","barbaraBurst","kaeyaAttack","kaeyaSkill","kaeyaBurst","dilucAttack","infusion","dilucSkill","talentDamage","dilucBurst","razorAttack","razorSkill","razorBurst","attackParams","talentAttackLevel","amberAttack","amberSkill","amberBurst","ventiAttack","ventiSkill","ventiBurst","xianglingAttack","xianglingSkill","xianglingBurst","beidouAttack","beidouSkill","beidouBurst","xingqiuAttack","concat","xingqiuSkill","xingqiuBurst","xiaoAttack","burstParams","talentBurstLevel","modifiedStats","xiaoSkill","xiaoBurst","ningguangAttack","normalAtkDmg","starJadeDmg","ningguangSkill","ningguangBurst","kleeAttack","kleeSkill","kleeBurst","zhongliAttack","zhongliSkill","zhongliBurst","fischlAttack","fischlSkill","fischlBurst","bennettAttack","bennettSkill","bennettBurst","atkBonus","baseAtk","tartagliaAttack","riptideFlashDmg","riptideBurstDmg","tartagliaSkill","tartagliaBurst","noelleAttack","noelleSkill","skillDamage","noelleBurst","qiqiAttack","qiqiSkill","qiqiBurst","chongyunAttack","chongyunSkill","chongyunBurst","ganyuAttack","aimedShotDmg","chargedDmg","ganyuSkill","ganyuBurst","albedoAttack","albedoSkill","transientBlossomDmg","albedoBurst","dionaAttack","dionaSkill","holdModifier","dionaBurst","monaAttack","monaSkill","monaBurst","keqingAttack","hit4Dmg","hit5Dmg","keqingSkill","keqingBurst","consecutiveSlashDmg","sucroseAttack","sucroseSkill","sucroseBurst","xinyanAttack","xinyanSkill","xinyanBurst","rosariaAttack","rosariaSkill","rosariaBurst","hutaoAttack","skillParams","talentSkillLevel","hit6Dmg","hutaoSkill","hutaoBurst","forEach","yanfeiAttack","brilliance","yanfeiSkill","yanfeiBurst","eulaAttack","attackHeavyMulti","eulaSkill","eulaBurst","lightfallSwordParams","lightfallSwordTalent","TalentOption","dilucTalentOptions","xiaoTalentOptions","noelleTalentOptions","chongyunTalentOptions","hutaoTalentOptions","yanfeiTalentOptions","Character","data","name","baseStats","statCurveMapping","hasAscended","innateStats","Object","keys","obj","stat","charStatCurves","entries","curve","bonus","talentLevel","totalStats","toLowerCase","damageFn","options","talentOptions","Weapon","rank","weaponLevel","weaponStats","weaponStatCurves","getStatDisplayValue","isPercentage","toFixed","round","getDamageDisplayValue","values","str","every","convertStatValue","getTalentDescription","desc","talentDescMapping","getTotalStatsAt","weapon","weaponHasAscended","character","characterHasAscended","artifactSetBonuses","artifacts","characterStats","getStatsAt","getInnateStatsAt","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","baseDef","defBonus","baseHp","hpBonus","elementalMastery","energyRecharge","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","Artifact","mainStat","rawValue","subStats","statObj","statUtils","subStat","mainStatProps","Flower","Feather","Sands","Goblet","Circlet","subStatProps","defaultSetBonus","ArtifactSet","bonusThresholds","setBonuses","getArtifactSetBonusData","pieces","filter","threshold","getSetBonusesAt","setBonus","bonuses","statBonus","extraBonus","bonusExtra","bonusFn","extraBonuses","DamageModifier","modifiers","reaction","StyleSheet","create","container","display","flexDirection","alignItems","fontSize","height","backgroundColor","inputColumn","padding","borderRightWidth","inputRow","marginVertical","levelInput","width","statInput","buttonGroupContainer","marginTop","marginBottom","marginLeft","marginRight","borderRadius","borderColor","buttonGroupButtonContainer","borderRightColor","buttonGroupText","fontWeight","color","buttonGroupSelectedButton","buttonGroupSelectedText","resultColumn","resultBlockNoBorder","resultBlock","borderBottomWidth","artifactBlockNoBorder","paddingTop","paddingBottom","artifactBlock","borderStyle","characterImage","titleText","artifactType","artifactStatType","resultText","fillerColumn","flexGrow","App","elements","renderInputColumn","View","renderCharacterList","style","styles","Text","TextInput","defaultValue","state","onChangeText","text","setState","parseInt","setCharacterState","Checkbox","onValueChange","isCharacterAscended","renderWeaponList","setWeaponState","isWeaponAscended","artifactSets","_","renderArtifactSetInput","setAllTalentState","buttons","containerStyle","buttonContainerStyle","textStyle","selectedButtonStyle","selectedTextStyle","selectedIndex","onPress","key","toUpperCase","set","parseFloat","characterSelect","selectedValue","getTalentOptions","Item","label","characters","weapons","setArtifactSetState","renderCharacterImage","imageUrl","Image","source","uri","getDamageModifier","getTotalStats","talentAttackDamage","getTalentDamageAt","talentSkillDamage","talentBurstDamage","isweaponAscended","artifactSetStats","setStats","setArtifactState","setTalentState","artifactFlower","artifactFeather","artifactSands","artifactGoblet","artifactCirclet","renderCharacterStats","renderWeaponStats","renderArtifactSetStats","renderArtifactMainStat","setStat","prop","renderArtifactSubStats","index","renderArtifactStat","isLast","renderAllArtifactStats","renderTotalStats","renderTalentDamage","renderTalentOptions","FlatList","keyExtractor","item","renderItem","talentOptionMapping","renderAllTalentDamage","sort","name1","name2","localeCompare","artifactSet1Id","artifactSet1Pc","artifactSet2Id","artifactSet2Pc","artifactSet3Id","artifactSet3Pc","Component"],"mappings":"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","file":"static/js/app.3fac1237.chunk.js","sourcesContent":["import characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\nimport talentDataRaw from '../data/talentdata.json';\nimport artifactSetDataRaw from '../data/artifactsetdata.json';\nimport artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\nexport { default as propMapping } from '../data/propmapping.json';\nexport { default as talentDescMapping } from '../data/talentdescmapping.json';\nexport { default as talentOptionMapping } from '../data/talentoptionmapping.json';\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(characterDataRaw);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(characterAscensionBonusDataRaw);\nconst characterStatCurveData = processCharacterStatCurveData(characterStatCurveDataRaw);\nconst weaponData = processWeaponData(weaponDataRaw);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(weaponAscensionBonusDataRaw);\nconst weaponStatCurveData = processWeaponStatCurveData(weaponStatCurveDataRaw);\nconst talentData = processTalentData(talentDataRaw);\nconst artifactSetData = processArtifactSetData(artifactSetDataRaw);\nconst artifactSetBonusData = processArtifactSetBonusData(artifactSetBonusDataRaw);\n\n// Pre-processed data, lists\nlet sortedCharacterList;    // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList;       // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList;  // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.id] = charData;\n        return acc;\n    }, {});\n}\n\nfunction processCharacterAscensionBonusData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.characterId] = charData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processCharacterStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.id] = weaponData;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponAscensionBonusData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processWeaponStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processTalentData(rawData) {\n    return rawData.reduce((acc, talentDataRaw) => {\n        let talentData = {...talentDataRaw.talents};\n\n        talentData.attack = talentData.attack.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.skill = talentData.skill.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.burst = talentData.burst.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n\n        acc[talentDataRaw.characterId] = talentData;\n        return acc;\n    }, {});\n}\n\nfunction processArtifactSetData(rawData) {\n    return rawData.reduce((acc, setData) => {\n        acc[setData.id] = setData;\n        return acc;\n    }, {});\n}\n\nfunction processArtifactSetBonusData(rawData) {\n    return rawData.reduce((acc, setData) => {\n        acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n            bonusAcc[bonusData.bonusThreshold] = bonusData;\n            return bonusAcc;\n        }, {});\n        return acc;\n    }, {});\n}\n\n// Helper functions for accessing data properties\nfunction getData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getAscensionBonusData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getStatCurveAt(level, statCurves) {\n    return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id) {\n    return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id) {\n    return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level) {\n    return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id) {\n    return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id) {\n    return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level) {\n    return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(level, ascensionBonuses) {\n    return ascensionBonuses[level];\n}\n\nexport function getTalentData(id) {\n    return talentData[id];\n}\n\nconst emptyTalentParams = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(type, level, talents) {\n    const talentStats = talents[type][level];\n    if (talentStats !== undefined) {\n        return talentStats;\n    } else {\n        return emptyTalentParams;\n    }\n}\n\nexport function getArtifactSetData(id) {\n    return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id) {\n    return getData(id, artifactSetBonusData);\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n    if (sortedCharacterList === undefined) {\n        sortedCharacterList = Object.entries(characterData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n    if (sortedWeaponList === undefined) {\n        sortedWeaponList = Object.entries(weaponData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n    if (sortedArtifactSetList === undefined) {\n        sortedArtifactSetList = Object.entries(artifactSetData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedArtifactSetList;\n}\n","export default class Resistance {\n    constructor({\n        anemo = 0,\n        cryo = 0,\n        electro = 0,\n        geo = 0,\n        hydro = 0,\n        pyro = 0,\n        physical = 0,\n    }) {\n        this.anemo = anemo / 100;\n        this.cryo = cryo / 100;\n        this.electro = electro / 100;\n        this.geo = geo / 100;\n        this.hydro = hydro / 100;\n        this.pyro = pyro / 100;\n        this.physical = physical / 100;\n    }\n\n    set(type, value) {\n        if (!isNaN(value)) {\n            this[type] = value / 100;\n        } else {\n            this[type] = 0;\n        }\n    }\n\n    add(type, value) {\n        if (!isNaN(value)) {\n            this[type] += value / 100;\n        }\n    }\n}","import { getTalentData, getTalentStatsAt } from './Data.js';\nimport Resistance from './Resistance.js';\n\n// Placeholder function\nexport function defaultTalent() {\n    return [];\n}\n\n// Internal functions\n\nfunction getDamageBonus({ stats, element, attackType }) {\n    let dmgBonus = 1;\n    dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n    if (attackType === 'normal') {\n        dmgBonus += stats.normalDmgBonus ?? 0;\n    } else if (attackType === 'charged') {\n        dmgBonus += stats.chargedDmgBonus ?? 0;\n    } else if (attackType === 'plunge') {\n        dmgBonus += stats.plungeDmgBonus ?? 0;\n    }\n\n    return dmgBonus;\n}\n\nfunction calculateBaseDamage({ stats, multiplier, scalingType, flatDmg = 0 }) {\n    if (scalingType == 'attack') {\n        return stats.flatAtk * multiplier + flatDmg;\n    } else if (scalingType == 'defense') {\n        return stats.flatDef * multiplier + flatDmg;\n    } else if (scalingType == 'hp') {\n        return stats.flatHp * multiplier + flatDmg;\n    } else {\n        return NaN;\n    }\n}\n\nfunction calculateResMultiplier({ element, res = new Resistance({}), resReduction = new Resistance({}) }) {\n    let totalRes = res[element] - resReduction[element];\n    \n    if (totalRes < 0) {\n        return 1 - (totalRes / 2);\n    } else if (totalRes < 0.75) {\n        return 1 - totalRes;\n    } else {\n        return 1 / (4 * totalRes + 1);\n    }\n}\n\nfunction calculateTotalDamage({ stats, multiplier, element, scalingType = 'attack', attackType = 'none', modifier }) {\n    let baseDmg = calculateBaseDamage({ stats, multiplier, scalingType, flatDmg: modifier.flatDmg });\n    let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n    let crit = 1;\n    if (modifier.critType === 'crit') {\n        crit += stats.critDmg;\n    } else if (modifier.critType === 'average') {\n        crit += Math.min(1, stats.critRate) * stats.critDmg;\n    }\n\n    let enemyDefMultiplier = (modifier.characterLevel + 100) / ((modifier.characterLevel + 100) + (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n    let enemyResMultiplier = calculateResMultiplier({ element, res: modifier.enemyRes, resReduction: modifier.enemyResReduction });\n    \n    // TODO: reactionBonus\n\n    return baseDmg * dmgBonus * crit * enemyDefMultiplier * enemyResMultiplier;\n} \n\nfunction calculateHealing({ stats, multiplier, flatHealing, scalingType = 'hp' }) {\n    // TODO: Add healing bonus\n    return calculateBaseDamage({ stats, multiplier, scalingType, flatDmg: flatHealing });\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({ stats, multiplier, flatBonus, scalingType = 'hp' }) {\n    if (scalingType == 'attack') {\n        return stats.flatAtk * multiplier + flatBonus;\n    } else if (scalingType == 'defense') {\n        return stats.flatDef * multiplier + flatBonus;\n    } else if (scalingType == 'hp') {\n        return stats.flatHp * multiplier + flatBonus;\n    } else {\n        return NaN;\n    }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({ stats, multiplier, flatBonus, element, scalingType = 'hp', modifier }) {\n    let dmgAbsorption = calculateHp({ stats, multiplier, flatBonus, scalingType });\n\n    // Geo Shields\n    if (element === 'geo') dmgAbsorption *= 1.5;\n\n    // Shield bonus from external sources\n    if (stats.shieldStrength !== undefined) dmgAbsorption *= (1 + stats.shieldStrength);\n\n    // Character-specific bonuses\n\n    // Diona Hold Skill\n    if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n    return dmgAbsorption;\n}\n\n// Used for all default normal attacks\nfunction normalAttackDefault({ hits, element, params, stats, modifier }) {\n    let talentValues = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            attackType: 'normal',\n            modifier,\n        });\n        \n        talentValues.push({\n            description: `${i+1}HitDmg`,\n            damage: [damage],\n        });\n    }\n\n    return talentValues;\n}\n\n// Used for all normal attacks with multiple damage instances in 1 hit e.g. polearms\nfunction normalAttackMulti({ hits = [], element, params, stats, modifier }) {\n    let talentValues = hits.map((hitCount, i) => {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element,\n            attackType: 'normal',\n            modifier,\n        });\n\n        let damages = [];\n        for (let hit = 0; hit < hitCount; hit++) {\n            damages.push(damage);\n        }\n\n        return {\n            description: `${i+1}HitDmg`,\n            damage: damages,\n        };\n    });\n\n    return talentValues;\n}\n\n// Used for all 1-hit charged attacks\nfunction chargedAttackDefault({ element, params, stats, modifier }) {\n    let damage = calculateTotalDamage({ \n        stats, \n        multiplier: params[0], \n        element, \n        attackType: 'charged',\n        modifier,\n     });\n\n    return [{\n        description: 'chargedDmg',\n        damage: [damage],\n    }];\n}\n\n// Used for multi-hit charged attacks\nfunction chargedAttackMulti({ hits, element, params, stats, modifier }) {\n    let damages = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            attackType: 'charged',\n            modifier,\n        });\n        damages.push(damage);\n    }\n\n    return [{\n        description: `chargedDmg`,\n        damage: damages,\n    }];\n}\n\n// Used for all default claymore charged attacks\nfunction chargedAttackHeavy({ element = 'physical', params, stats, modifier }) {\n    let descriptions = ['chargedSpinDmg', 'chargedFinalDmg'];\n    return descriptions.map((description, i) => {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            attackType: 'charged',\n            modifier,\n        });\n\n        return {\n            description: description,\n            damage: [damage],\n        };\n    });\n}\n\n// Used for all default plunge attacks\nfunction plungeAttackDefault({ element, params, stats, modifier }) {\n    let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n    return descriptions.map((description, i) => {\n        let damage = calculateTotalDamage({ \n            stats,\n            multiplier: params[i], \n            element,\n            attackType: 'plunge',\n            modifier \n        });\n\n        return {\n            description: description,\n            damage: [damage],\n        };\n    });\n}\n\n// Used for all default sword/polearm/catalyst attacks\nfunction attackLightDefault({ normalHits, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault({ \n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits), \n        stats, \n        modifier \n    }));\n\n    talentValues.push(...chargedAttackDefault({\n        element,\n        params: params.slice(normalHits, normalHits + 1), \n        stats, \n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits + 1 + 1), \n        stats, \n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all default sword/polearm attacks with multi damage instances\nfunction attackLightMulti({ normalHits = [], chargedHits = 1, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackMulti({ \n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits.length), \n        stats, \n        modifier \n    }));\n\n    if (chargedHits === 1) {\n        talentValues.push(...chargedAttackDefault({\n            element,\n            params: params.slice(normalHits.length, normalHits.length + 1), \n            stats, \n            modifier,\n        }));\n    } else {\n        talentValues.push(...chargedAttackMulti({\n            hits: chargedHits,\n            element,\n            params: params.slice(normalHits.length, normalHits.length + chargedHits), \n            stats, \n            modifier,\n        }));\n    }\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits.length + chargedHits + 1), \n        stats, \n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all default claymore attacks\nfunction attackHeavyDefault({ normalHits, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault({\n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...chargedAttackHeavy({\n        element,\n        params: params.slice(normalHits, normalHits + 2),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits + 2 + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all claymore attacks with multi damage instances\nfunction attackHeavyMulti({ normalHits = [], element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackMulti({\n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits.length), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...chargedAttackHeavy({\n        params: params.slice(normalHits.length, normalHits.length + 2), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits.length + 2 + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all debault bow aim shots (include charged shots)\nfunction aimShotDefault({ chargedElement, params, stats, modifier }) {\n    let talentValues = [];\n\n    let damage = calculateTotalDamage({ \n        stats, \n        multiplier: params[0], \n        element: 'physical', \n        attackType: 'normal',\n        modifier,\n    });\n    talentValues.push({\n            description: 'aimShotDmg',\n            damage: [damage],\n    });\n\n    damage = calculateTotalDamage({\n        stats,\n        multiplier: params[1],\n        element: chargedElement,\n        attackType: 'charged',\n        modifier,\n    });\n    talentValues.push({\n        description: 'chargedAimShotDmg',\n        damage: [damage],\n    });\n\n    return talentValues;\n}\n\n// Used for all default bow attacks\nfunction attackBowDefault({ normalHits, chargedElement, params, stats, modifier }) {\n    let talentValues = [];\n    \n    talentValues.push(...normalAttackDefault({\n        hits: normalHits,\n        element: 'physical',\n        params: params.slice(0, normalHits),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...aimShotDefault({\n        chargedElement,\n        params: params.slice(normalHits, normalHits + 2),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(normalHits + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Base function for all damage skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction skillBase({ description, element, multiplier, stats, modifier }) {\n    let damage = calculateTotalDamage({\n        element,\n        multiplier,\n        attackType: 'skill',\n        stats, \n        modifier,\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Used for all default skill that only does 1-hit elemental dmg\nfunction skillDefault({ element, params, stats, modifier }) {\n    return [skillBase({\n        description: 'skillDmg',\n        element,\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Base function for damage skills with multiple damage instances\nfunction skillMultiBase({ description, hits, element, params, stats, modifier }) {\n    let damages = [];\n    \n    for (let i = 0; i < hits; i++) {\n        damages.push(calculateTotalDamage({\n            element,\n            multiplier: params[i],\n            attackType: 'skill',\n            stats,\n            modifier,\n        }));\n    }\n\n    return {\n        description,\n        damage: damages,\n    };\n}\n\n// Base function for all damage bursts. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction burstBase({ description, element, multiplier, stats, modifier }) {\n    let damage = calculateTotalDamage({\n        element,\n        multiplier,\n        attackType: 'burst',\n        stats, \n        modifier,\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Used for all default burst that only does 1-hit elemental dmg\nfunction burstDefault({ element, params, stats, modifier }) {\n    return [burstBase({\n        description: 'burstDmg',\n        element,\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Base function for bursts with multiple damage instances\nfunction burstMultiBase({ description, hits, element, params, stats, modifier }) {\n    let damages = [];\n    \n    for (let i = 0; i < hits; i++) {\n        damages.push(calculateTotalDamage({\n            element,\n            multiplier: params[i],\n            attackType: 'burst',\n            stats,\n            modifier,\n        }));\n    }\n\n    return {\n        description,\n        damage: damages,\n    };\n}\n\n// Base function for all healing skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction healingSkillBase({ description, scalingType = 'hp', params, stats, modifier }) {\n    let damage = calculateHealing({\n        stats,\n        multiplier: params[0],\n        flatHealing: params[1],\n        scalingType,\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Base function for all shields/summon HP\nfunction hpBase({ description, multiplier, flatBonus, scalingType = 'hp', stats, modifier }) {\n    let hp = calculateHp({\n        stats,\n        multiplier,\n        flatBonus,\n        scalingType,\n    });\n\n    return {\n        description,\n        damage: [hp],\n    };\n}\n\nfunction shieldBase({ description, multiplier, flatBonus, element, scalingType = 'hp', stats, modifier }) {\n    let dmgAbsorption = calculateDmgAbsorption({\n        stats,\n        multiplier,\n        flatBonus,\n        element,\n        scalingType,\n        modifier,\n    });\n\n    return {\n        description,\n        damage: [dmgAbsorption],\n    };\n}\n\n// Public functions\n// Access using talent[characterId + type]\n\n// Lisa\nexport function lisaAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function lisaSkill({ params, stats, modifier }) {\n    let talentDmg = [];\n\n    talentDmg.push(skillBase({\n        description: 'pressDmg',\n        element: 'electro',\n        multiplier: params[5],\n        stats,\n        modifier,\n    }));\n\n    for (let i = 0; i <= 3; i++) {\n        talentDmg.push(skillBase({\n            description: `holdDmgStack${i}`,\n            element: 'electro',\n            multiplier: params[i],\n            stats, \n            modifier,\n        }));\n    }\n\n    return talentDmg;\n}\n\nexport function lisaBurst({ params, stats, modifier }) {\n    return burstDefault({\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Barbara\nexport function barbaraAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'hydro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function barbaraSkill({ params, stats, modifier }) {\n    let talentDmg = [\n        healingSkillBase({\n            description: 'hpRegenContinuous',\n            params: params.slice(0, 2),\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenOnHit',\n            params: params.slice(2, 4),\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'dropletDmg',\n            element: 'hydro',\n            multiplier: params[4],\n            stats,\n            modifier,\n        }),\n    ];\n\n    return talentDmg;\n}\n\nexport function barbaraBurst({ params, stats, modifier }) {\n    return [\n        healingSkillBase({\n            description: 'hpRegen',\n            params,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Kaeya\nexport function kaeyaAttack({ params, stats, modifier }) {\n    return attackLightMulti({ \n        normalHits: [1, 1, 1, 1, 1], \n        chargedHits: 2, \n        params, \n        stats, \n        modifier,\n    });\n}\n\nexport function kaeyaSkill({ params, stats, modifier }) {\n    return skillDefault({ \n        element: 'cryo', \n        params, \n        stats, \n        modifier \n    });\n}\n\nexport function kaeyaBurst({ params, stats, modifier }) {\n    return burstDefault({ \n        element: 'cryo', \n        params, \n        stats, \n        modifier,\n    });\n}\n\n// Diluc\nexport function dilucAttack({ params, stats, modifier }) {\n    let element = modifier.infusion ? 'pyro' : 'physical';\n    return attackHeavyDefault({\n        normalHits: 4,\n        element,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function dilucSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n    for (let i = 0; i < 3; i++) {\n        talentDamage.push(skillBase({\n            description: `${i+1}HitDmg`,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    return talentDamage;\n}\n\nexport function dilucBurst({ params, stats, modifier }) {\n    let descriptions = ['slashingDmg', 'dot', 'explosionDmg'];\n    let talentDamage = descriptions.map((description, i) => {\n        return burstBase({\n            description,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n\n    return talentDamage;\n}\n\n// Razor\nexport function razorAttack({ params, stats, modifier }) {\n    return attackHeavyDefault({\n        normalHits: 4,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function razorSkill({ params, stats, modifier }) {\n    let descriptions = ['pressDmg', 'holdDmg'];\n    return descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'electro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n}\n\nexport function razorBurst({ params, stats, modifier }) {\n    let talentDamage = burstDefault({\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n\n    let attackParams = getTalentStatsAt('attack', modifier.talentAttackLevel, getTalentData('razor'));\n\n    for (let i = 0; i < 4; i++) {\n        talentDamage.push(burstBase({\n            description: `${i+1}HitDmgSoulCompanion`,\n            element: 'electro',\n            multiplier: params[1] * attackParams[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    return talentDamage;\n}\n\n// Amber\nexport function amberAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 5,\n        chargedElement: 'pyro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function amberSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'explosionDmg',\n        element: 'electro',\n        multiplier: params[1],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(hpBase({\n        description: 'baronBunnyHp',\n        multiplier: params[0],\n        flatBonus: 0,\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function amberBurst({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(burstBase({\n        description: 'dmgPerWave',\n        element: 'pyro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push({\n        description: 'totalDmg',\n        damage: [talentDamage[0].damage[0] * 18],\n    });\n\n    return talentDamage;\n}\n\n// Venti\nexport function ventiAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 6,\n        chargedElement: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function ventiSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'pressDmg',\n            element: 'anemo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'holdDmg',\n            element: 'anemo',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function ventiBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'dot',\n            element: 'anemo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        // Not sure how the elemental absorption dmg is calculated\n        burstBase({\n            description: 'dotElementalAbsorption',\n            element: 'none',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Xiangling\nexport function xianglingAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 2, 4, 1],\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function xianglingSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'guobaDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function xianglingBurst({ params, stats, modifier }) {\n    let talentDamage = []\n\n    for (let i = 0; i < 3; i++) {\n        talentDamage.push(burstBase({\n            description: `swing${i+1}HitDmg`,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    talentDamage.push(burstBase({\n        description: 'pyronadoDmg',\n        element: 'pyro',\n        multiplier: params[3],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\n// Beidou\nexport function beidouAttack({ params, stats, modifier }) {\n    return attackHeavyDefault({\n        normalHits: 5,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function beidouSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(shieldBase({\n        description: 'shieldHp',\n        multiplier: params[0],\n        flatBonus: params[1],\n        element: 'electro',\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(skillBase({\n        description: 'baseDmg',\n        element: 'electro',\n        multiplier: params[2],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(skillBase({\n        description: 'dmgBonusOnHitTaken',\n        element: 'electro',\n        multiplier: params[3],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function beidouBurst({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(burstBase({\n        description: 'skillDmg',\n        element: 'electro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(burstBase({\n        description: 'lightningDmg',\n        element: 'electro',\n        multiplier: params[1],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\n// Xingqiu\nexport function xingqiuAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 2, 1, 2],\n        chargedHits: 2,\n        params: params.slice(0, 3).concat(params.slice(4, 6)).concat(params.slice(7)),\n        stats,\n        modifier,\n    });\n}\n\nexport function xingqiuSkill({ params, stats, modifier }) {\n    return [skillMultiBase({\n        description: 'skillDmg',\n        hits: 2,\n        element: 'hydro',\n        params,\n        stats,\n        modifier,\n    })];\n}\n\nexport function xingqiuBurst({ params, stats, modifier }) {\n    return [burstBase({\n        description: 'swordRainDmg',\n        element: 'hydro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Xiao\nexport function xiaoAttack({ params, stats, modifier }) {\n    if (modifier.infusion) {\n        let burstParams = getTalentStatsAt('burst', modifier.talentBurstLevel, getTalentData('xiao'));\n        let modifiedStats = {...stats};\n\n        if (modifiedStats.normalDmgBonus === undefined) {\n            modifiedStats.normalDmgBonus = burstParams[0];\n        } else {\n            modifiedStats.normalDmgBonus += burstParams[0];\n        }\n\n        if (modifiedStats.chargedDmgBonus === undefined) {\n            modifiedStats.chargedDmgBonus = burstParams[0];\n        } else {\n            modifiedStats.chargedDmgBonus += burstParams[0];\n        }\n\n        if (modifiedStats.plungeDmgBonus === undefined) {\n            modifiedStats.plungeDmgBonus = burstParams[0];\n        } else {\n            modifiedStats.plungeDmgBonus += burstParams[0];\n        }\n\n        return attackLightMulti({\n            normalHits: [2, 1, 1, 2, 1, 1],\n            element: 'anemo',\n            params: params.slice(1, 5).concat(params.slice(6)),\n            stats: modifiedStats,\n            modifier,\n        });\n    } else {\n        return attackLightMulti({\n            normalHits: [2, 1, 1, 2, 1, 1],\n            params: params.slice(1, 5).concat(params.slice(6)),\n            stats,\n            modifier,\n        });\n    }\n}\n\nexport function xiaoSkill({ params, stats, modifier }) {\n    return skillDefault({\n        element: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function xiaoBurst({ params, stats, modifier }) {\n    return defaultTalent();\n}\n\n// Ningguang\nexport function ningguangAttack({ params, stats, modifier }) {\n    let talentDmg = []; \n\n    // Ningguang's normal attack has no combo\n    let normalAtkDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[0],\n        element: 'geo',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDmg.push({\n        description: 'normalAtkDmg',\n        damage: [normalAtkDmg],\n    });\n\n    talentDmg.push(...chargedAttackDefault({\n        element: 'geo',\n        params: params.slice(1, 2),\n        stats,\n        modifier,\n    }));\n\n    // Ningguang's charged attack dmg per star jade\n    let starJadeDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[2],\n        element: 'geo',\n        attackType: 'charged',\n        modifier,\n    });\n    talentDmg.push({\n        description: 'starJadeDmg',\n        damage: [starJadeDmg],\n    });\n\n    talentDmg.push(...plungeAttackDefault({\n        element: 'geo',\n        params: params.slice(4),\n        stats,\n        modifier,\n    }));\n\n    return talentDmg;\n}\n\nexport function ningguangSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'skillDmg',\n        element: 'geo',\n        multiplier: params[1],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(hpBase({\n        description: 'jadeScreenHp',\n        multiplier: params[2],\n        flatBonus: 0,\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function ningguangBurst({ params, stats, modifier }) {\n    return [burstBase({\n        description: 'dmgPerGem',\n        element: 'geo',\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Klee\nexport function kleeAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 3,\n        element: 'pyro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function kleeSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'jumpyDumptyDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'mineDmg',\n            element: 'pyro',\n            multiplier: params[3],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function kleeBurst({ params, stats, modifier }) {\n    return [burstBase({\n        description: 'sparksNSplashDmg',\n        element: 'pyro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Zhongli\nexport function zhongliAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 1, 1, 4, 1],\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function zhongliSkill({ params, stats, modifier }) {\n    let descriptions = ['stoneSteeleDmg', 'resonanceDmg'];\n\n    let talentDamage = descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'geo',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n\n    talentDamage.push(skillBase({\n        description: 'holdDmg',\n        element: 'geo',\n        multiplier: params[3],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(shieldBase({\n        description: 'shieldHp',\n        multiplier: params[5],\n        flatBonus: params[4],\n        element: 'geo',\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function zhongliBurst({ params, stats, modifier }) {\n    return burstDefault({\n        element: 'geo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Fischl\nexport function fischlAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 5,\n        chargedElement: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function fischlSkill({ params, stats, modifier }) {\n    let descriptions = ['ozDmg', 'summoningDmg'];\n    return descriptions.map((description, i) => skillBase({\n        description,\n        element: 'electro',\n        multiplier: params[i],\n        stats,\n        modifier,\n    }));\n}\n\nexport function fischlBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'fallingThunderDmg',\n            element: 'electro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Bennett\nexport function bennettAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 1, 1, 1],\n        chargedHits: 2,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function bennettSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'pressDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillMultiBase({\n            description: 'chargeLevel1Dmg',\n            hits: 2,\n            element: 'pyro',\n            params: params.slice(1, 3),\n            stats,\n            modifier,\n        }),\n\n        skillMultiBase({\n            description: 'chargeLevel2Dmg',\n            hits: 2,\n            element: 'pyro',\n            params: params.slice(3, 5),\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'explosionDmg',\n            element: 'pyro',\n            multiplier: params[5],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function bennettBurst({ params, stats, modifier }) {\n    let talentDamage = [\n        burstBase({\n            description: 'burstDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenContinuousPerSecond',\n            params: params.slice(1, 3),\n            stats,\n            modifier,\n        }),\n    ];\n\n    // ATK Bonus\n    let atkBonus = stats.baseAtk * params[3];\n    talentDamage.push({\n        description: 'atkBonus',\n        damage: [atkBonus],\n    });\n\n    return talentDamage;\n}\n\n// Tartaglia\nexport function tartagliaAttack({ params, stats, modifier }) {\n    let talentDamage = attackBowDefault({\n        normalHits: 6,\n        chargedElement: 'hydro',\n        params: params.slice(0, 8).concat(params.slice(10)),\n        stats,\n        modifier,\n    });\n\n    let riptideFlashDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[8],\n        element: 'hydro',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'riptideFlashDmg',\n        damage: [riptideFlashDmg],\n    });\n\n    let riptideBurstDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[9],\n        element: 'hydro',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'riptideBurstDmg',\n        damage: [riptideBurstDmg],\n    });\n\n    return talentDamage;\n}\n\nexport function tartagliaSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'stanceChangeDmg',\n        element: 'hydro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(...normalAttackMulti({\n        hits: [1, 1, 1, 1, 1, 2],\n        element: 'hydro',\n        params: params.slice(1, 8),\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(...chargedAttackMulti({\n        hits: 2,\n        element: 'hydro',\n        params: params.slice(8, 10),\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(skillBase({\n        description: 'riptideSlashDmg',\n        element: 'hydro',\n        multiplier: params[10],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function tartagliaBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmgMelee',\n            element: 'hydro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'burstDmgRanged',\n            element: 'hydro',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'riptideBlastDmg',\n            element: 'hydro',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Noelle\nexport function noelleAttack({ params, stats, modifier }) {\n    if (modifier.infusion) {\n        let burstParams = getTalentStatsAt('burst', modifier.talentBurstLevel, getTalentData('noelle'));\n        let modifiedStats = {\n            ...stats,\n            flatAtk: stats.flatAtk + stats.flatDef * burstParams[2],\n        };\n\n        return attackHeavyDefault({\n            normalHits: 4,\n            element: 'geo',\n            params,\n            stats: modifiedStats,\n            modifier,\n        });\n    } else {\n        return attackHeavyDefault({\n            normalHits: 4,\n            params,\n            stats,\n            modifier,\n        }); \n    }\n}\n\nexport function noelleSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    let skillDamage = calculateTotalDamage({\n        stats,\n        multiplier: params[5],\n        element: 'geo',\n        scalingType: 'defense',\n        attackType: 'skill',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'skillDmg',\n        damage: [skillDamage],\n    });\n\n    talentDamage.push(shieldBase({\n        description: 'shieldHp',\n        multiplier: params[0],\n        flatBonus: params[6],\n        element: 'geo',\n        scalingType: 'defense',\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(healingSkillBase({\n        description: 'healing',\n        params: [params[1], params[7]],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function noelleBurst({ params, stats, modifier }) {\n    let modifiedStats = {\n        ...stats,\n        flatAtk: stats.flatAtk + stats.flatDef * params[2]\n    };\n\n    return [\n        burstBase({\n            description: 'burstInitDmg',\n            element: 'geo',\n            multiplier: params[0],\n            stats: modifiedStats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'firstSwingDmg',\n            element: 'geo',\n            multiplier: params[1],\n            stats: modifiedStats,\n            modifier,\n        }),\n    ]\n}\n\n// Qiqi\nexport function qiqiAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 2, 2, 1],\n        chargedHits: 2,\n        params: params.slice(0, 6).concat(params[5]).concat(params.slice(6)),\n        stats,\n        modifier,\n    });\n}\n\nexport function qiqiSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'skillDmg',\n            element: 'cryo',\n            multiplier: params[7],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'heraldOfFrostDmg',\n            element: 'cryo',\n            multiplier: params[4],\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenOnHit',\n            scalingType: 'attack',\n            params: params.slice(0, 2),\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenContinuous',\n            scalingType: 'attack',\n            params: params.slice(2, 4),\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function qiqiBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmg',\n            element: 'cryo',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'healing',\n            scalingType: 'attack',\n            params,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Chongyun\nexport function chongyunAttack({ params, stats, modifier }) {\n    if (modifier.infusion) {\n        return attackHeavyDefault({\n            normalHits: 4,\n            element: 'cryo',\n            params,\n            stats,\n            modifier,\n        });\n    } else {\n        return attackHeavyDefault({\n            normalHits: 4,\n            params,\n            stats,\n            modifier,\n        });\n    }\n}\n\nexport function chongyunSkill({ params, stats, modifier }) {\n    return skillDefault({\n        element: 'cryo',\n        params: params,\n        stats,\n        modifier,\n    });\n}\n\nexport function chongyunBurst({ params, stats, modifier }) {\n    return burstDefault({\n        element: 'cryo',\n        params: params,\n        stats,\n        modifier,\n    });\n}\n\n// Ganyu\nexport function ganyuAttack({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    // Normal attack\n    talentDamage.push(...normalAttackDefault({\n        hits: 6,\n        element: 'physical',\n        params,\n        stats,\n        modifier,\n    }));\n\n    // Charged attack\n    let aimedShotDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[6],\n        element: 'physical',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'aimShotDmg',\n        damage: [aimedShotDmg],\n    });\n\n    let chargedDescriptions = ['aimShotChargeLevel1', 'frostflakeArrowDmg', 'frostflakeArrowBloomDmg'];\n    let chargedDmg = chargedDescriptions.map((description, i) => {\n        let damage = calculateTotalDamage({\n            stats,\n            multiplier: params[i+7],\n            element: 'cryo',\n            attackType: 'charged',\n            modifier,\n        });\n\n        return {\n            description,\n            damage: [damage],\n        };\n    });\n    talentDamage.push(...chargedDmg);\n\n    talentDamage.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(10),\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function ganyuSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'skillDmg',\n            element: 'cryo',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n\n        hpBase({\n            description: 'iceLotusHp',\n            multiplier: params[0],\n            flatBonus: 0,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function ganyuBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'iceShardDmg',\n            element: 'cryo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Albedo\nexport function albedoAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 1, 1, 1],\n        chargedHits: 2,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function albedoSkill({ params, stats, modifier }) {\n    let talentDmg = [];\n\n    talentDmg.push(skillBase({\n        description: 'skillDmg',\n        element: 'geo',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    let transientBlossomDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[1],\n        element: 'geo',\n        scalingType: 'defense',\n        attackType: 'skill',\n        modifier,\n    });\n    talentDmg.push({\n        description: 'transientBlossomDmg',\n        damage: [transientBlossomDmg],\n    });\n\n    return talentDmg;\n}\n\nexport function albedoBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmg',\n            element: 'geo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'fatalBlossomDmg',\n            element: 'geo',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Diona\nexport function dionaAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 5,\n        chargedElement: 'cryo',\n        params: params.slice(0, 5).concat(params.slice(6)),\n        stats,\n        modifier,\n    });\n}\n\nexport function dionaSkill({ params, stats, modifier }) {\n    let holdModifier = {\n        ...modifier,\n        dionaHoldSkill: true,\n    }\n\n    return [\n        skillBase({\n            description: 'icyPawDmgPerPaw',\n            element: 'cryo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        shieldBase({\n            description: 'shieldHpPress',\n            multiplier: params[1],\n            flatBonus: params[2],\n            element: 'cryo',\n            stats,\n            modifier,\n        }),\n\n        shieldBase({\n            description: 'shieldHpHold',\n            multiplier: params[1],\n            flatBonus: params[2],\n            element: 'cryo',\n            stats,\n            modifier: holdModifier,\n        }),\n    ];\n}\n\nexport function dionaBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmg',\n            element: 'cryo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'continuousFieldDmg',\n            element: 'cryo',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenContinuousTime',\n            params: params.slice(2),\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Mona\nexport function monaAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'hyrdo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function monaSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'dot',\n            element: 'hydro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'explosionDmg',\n            element: 'hydro',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function monaBurst({ params, stats, modifier }) {\n    let modifiedStats = { ...stats };\n    if (modifiedStats.dmgBonus !== undefined) {\n        modifiedStats.dmgBonus += params[9];\n    } else {\n        modifiedStats.dmgBonus = params[9];\n    }\n\n    return [\n        burstBase({\n            description: 'explosionDmg',\n            element: 'hydro',\n            multiplier: params[1],\n            stats: modifiedStats,\n            modifier,\n        }),\n    ];\n}\n\n// Keqing\nexport function keqingAttack({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    // Normal attack\n    for (let i = 0; i < 3; i++) {\n        let damage = calculateTotalDamage({\n            stats,\n            multiplier: params[i],\n            element: 'physical',\n            attackType: 'normal',\n            modifier,\n        });\n        talentDamage.push({\n            description: `${i+1}HitDmg`,\n            damage: [damage],\n        });\n    }\n\n    let hit4Dmg = [];\n    for (let i = 3; i < 5; i++) {\n        hit4Dmg.push(calculateTotalDamage({\n            stats,\n            multiplier: params[i],\n            element: 'physical',\n            attackType: 'normal',\n            modifier,\n        }));\n    }\n    talentDamage.push({\n        description: '4HitDmg',\n        damage: hit4Dmg,\n    });\n\n    let hit5Dmg = [calculateTotalDamage({\n        stats,\n        multiplier: params[5],\n        element: 'physical',\n        attackType: 'normal',\n        modifier,\n    })];\n    talentDamage.push({\n        description: `5HitDmg`,\n        damage: hit5Dmg,\n    });\n\n    // Charged attack\n    talentDamage.push(...chargedAttackMulti({\n        hits: 2,\n        element: 'physical',\n        params: params.slice(6, 8),\n        stats,\n        modifier,\n    }));\n\n    // Plunge attack\n    talentDamage.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(9, 12),\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function keqingSkill({ params, stats, modifier }) {\n    let descriptions = ['lightningStilettoDmg', 'slashingDmg'];\n    let talentDamage = descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'electro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n\n    talentDamage.push(skillMultiBase({\n        description: 'thunderclapSlashDmg',\n        hits: 2,\n        element: 'electro',\n        params: [params[2], params[2]],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function keqingBurst({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(burstBase({\n        description: 'burstInitDmg',\n        element: 'electro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    let consecutiveSlashDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[1],\n        element: 'electro',\n        attackType: 'burst',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'consecutiveSlashDmg',\n        damage: Array(8).fill(consecutiveSlashDmg),\n    });\n\n    talentDamage.push(burstBase({\n        description: 'lastAttackDmg',\n        element: 'electro',\n        multiplier: params[2],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\n// Sucrose\nexport function sucroseAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function sucroseSkill({ params, stats, modifier }) {\n    return skillDefault({\n        element: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function sucroseBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'dot',\n            element: 'anemo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        // Not sure how the elemental absorption dmg is calculated\n        burstBase({\n            description: 'dotElementalAbsorption',\n            element: 'none',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Xinyan\nexport function xinyanAttack({ params, stats, modifier }) {\n    return attackHeavyDefault({\n        normalHits: 4,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function xinyanSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'swingDmg',\n        element: 'pyro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    // Shields\n    for (let i = 0; i < 3; i++) {\n        talentDamage.push(shieldBase({\n            description: `shieldHpLevel${i+1}`,\n            multiplier: params[2 * i + 1],\n            flatBonus: params[2 * i + 2],\n            element: 'pyro',\n            scalingType: 'defense',\n            stats,\n            modifier,\n        }));\n    }\n\n    talentDamage.push(skillBase({\n        description: 'dot',\n        element: 'pyro',\n        multiplier: params[7],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function xinyanBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmg',\n            element: 'physical',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'pyroDot',\n            element: 'pyro',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Rosaria\nexport function rosariaAttack({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    // Normal attack\n    talentDamage.push(...normalAttackMulti({\n        hits: [1, 1, 2, 1],\n        element: 'physical',\n        params,\n        stats,\n        modifier,\n    }));\n\n    let hit5Dmg = [];\n    for (let i = 4; i < 6; i++) {\n        hit5Dmg.push(calculateTotalDamage({\n            stats,\n            multiplier: params[i],\n            element: 'physical',\n            attackType: 'normal',\n            modifier,\n        }));\n    }\n    talentDamage.push({\n        description: '5HitDmg',\n        damage: hit5Dmg,\n    });\n\n    // Charged attack\n    talentDamage.push(...chargedAttackDefault({\n        element: 'physical',\n        params: params.slice(6, 7),\n        stats,\n        modifier,\n    }));\n\n    // Plunge attack\n    talentDamage.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(8, 11),\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function rosariaSkill({ params, stats, modifier }) {\n    return [\n        skillMultiBase({\n            description: 'skillDmg',\n            hits: 2,\n            element: 'cryo',\n            params,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function rosariaBurst({ params, stats, modifier }) {\n    return [\n        burstMultiBase({\n            description: 'burstDmg',\n            hits: 2,\n            element: 'cryo',\n            params,\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'iceLanceDot',\n            element: 'cyro',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Hu Tao\nexport function hutaoAttack({ params, stats, modifier }) {\n    let element = 'physical';\n    let modifiedStats = { ...stats };\n    \n    if (modifier.infusion) {\n        element = 'pyro';\n\n        let skillParams = getTalentStatsAt('skill', modifier.talentSkillLevel, getTalentData('hutao'));\n        modifiedStats.flatAtk += skillParams[1] * stats.flatHp;\n    }\n\n    let talentDamage = [];\n\n    // Normal attack\n    talentDamage.push(...normalAttackDefault({\n        hits: 4,\n        element,\n        params,\n        stats: modifiedStats,\n        modifier,\n    }));\n\n    let hit5Dmg = [];\n    for (let i = 4; i < 6; i++) {\n        hit5Dmg.push(calculateTotalDamage({\n            stats: modifiedStats,\n            multiplier: params[i],\n            element,\n            attackType: 'normal',\n            modifier,\n        }));\n    }\n    talentDamage.push({\n        description: '5HitDmg',\n        damage: hit5Dmg,\n    });\n\n    let hit6Dmg = [calculateTotalDamage({\n        stats: modifiedStats,\n        multiplier: params[6],\n        element,\n        attackType: 'normal',\n        modifier,\n    })];\n    talentDamage.push({\n        description: '6HitDmg',\n        damage: hit6Dmg,\n    });\n\n    // Charged attack\n    talentDamage.push(...chargedAttackDefault({\n        element,\n        params: params.slice(7, 8),\n        stats: modifiedStats,\n        modifier,\n    }));\n\n    // Plunge attack\n    talentDamage.push(...plungeAttackDefault({\n        element,\n        params: params.slice(9, 12),\n        stats: modifiedStats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function hutaoSkill({ params, stats, modifier }) {\n    let modifiedStats = { ...stats };\n    if (modifier.infusion) {\n        modifiedStats.flatAtk += params[1] * stats.flatHp;\n    }\n\n    return [\n        skillBase({\n            description: 'bloodBlossomDmg',\n            element: 'pyro',\n            multiplier: params[2],\n            stats: modifiedStats,\n            modifier,\n        }),\n    ];\n}\n\nexport function hutaoBurst({ params, stats, modifier }) {\n    let modifiedStats = { ...stats };\n    if (modifier.infusion) {\n        let skillParams = getTalentStatsAt('skill', modifier.talentSkillLevel, getTalentData('hutao'));\n        modifiedStats.flatAtk += skillParams[1] * stats.flatHp;\n    }\n\n    let talentDamage = [];\n\n    let dmgDescriptions = ['burstDmg', 'burstDmgLowHp'];\n    dmgDescriptions.forEach((description, i) => {\n        talentDamage.push(burstBase({\n            description,\n            element: 'pyro',\n            multiplier: params[i],\n            stats: modifiedStats,\n            modifier,\n        }));\n    });\n\n    let regenDescriptions = ['hpRegen', 'hpRegenLowHp'];\n    regenDescriptions.forEach((description, i) => {\n        talentDamage.push(healingSkillBase({\n            description,\n            params: [params[i+2], 0],\n            stats: modifiedStats,\n            modifier,\n        }));\n    });\n\n    return talentDamage;\n}\n\n// Yanfei\nexport function yanfeiAttack({ params, stats, modifier }) {\n    let modifiedStats = { ...stats };\n    if (modifier.brilliance) {\n        let burstParams = getTalentStatsAt('burst', modifier.talentBurstLevel, getTalentData('yanfei'));\n\n        if (modifiedStats.chargedDmgBonus === undefined) {\n            modifiedStats.chargedDmgBonus = burstParams[1];\n        } else {\n            modifiedStats.chargedDmgBonus += burstParams[1];\n        }\n    }\n\n    let talentDamage = [];\n\n    // Normal attack\n    talentDamage.push(...normalAttackDefault({\n        hits: 3,\n        element: 'pyro',\n        params,\n        stats: modifiedStats,\n        modifier,\n    }));\n\n    // Charged attack\n    for (let i = 0; i < 5; i++) {\n        let damage = calculateTotalDamage({\n            stats: modifiedStats,\n            multiplier: params[i+3],\n            element: 'pyro',\n            attackType: 'charged',\n            modifier,\n        });\n        talentDamage.push({\n            description: `chargedDmgSeal${i}`,\n            damage: [damage],\n        });\n    }\n\n    // Plunge attack\n    talentDamage.push(...plungeAttackDefault({\n        element: 'pyro',\n        params: params.slice(15, 18),\n        stats: modifiedStats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function yanfeiSkill({ stats, params, modifier }) {\n    return skillDefault({\n        element: 'pyro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function yanfeiBurst({ stats, params, modifier }) {\n    return burstDefault({\n        element: 'pyro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Eula\nexport function eulaAttack({ params, stats, modifier }) {\n    return attackHeavyMulti({ \n        normalHits: [1, 1, 2, 1, 2], \n        params, \n        stats, \n        modifier\n    });\n}\n\nexport function eulaSkill({ params, stats, modifier }) {\n    let descriptions = ['pressDmg', 'holdDmg', 'icewhirlBrandDmg'];\n    return descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'cryo',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n}\n\nexport function eulaBurst({ params, stats, modifier }) {\n    let talentDmg = [];\n    talentDmg.push(...burstDefault({\n        element: 'cryo', \n        params, \n        stats,\n        modifier,\n    }));\n    \n    let descriptions = ['lightfallSwordBaseDmg', 'lightfallSwordStackDmg'];\n    let lightfallSwordParams = params.slice(1, 3);\n    let lightfallSwordTalent = descriptions.map((description, i) => {\n        return burstBase({\n            description,\n            element: 'physical',\n            multiplier: lightfallSwordParams[i],\n            stats,\n            modifier,\n        });\n    });\n\n    talentDmg.push(...lightfallSwordTalent);\n\n    return talentDmg;\n}\n","export default class TalentOption {\n    constructor(id, type = 'boolean', value) {\n        this.id = id;\n        this.type = type;\n        this.value = value;\n    }\n}\n\n// Diluc\nexport const dilucTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n\n// Xiao\nexport const xiaoTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n\n// Noelle\nexport const noelleTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n\n// Chongyun\nexport const chongyunTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n\n// Hu Tao\nexport const hutaoTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n\n// Yanfei\nexport const yanfeiTalentOptions = [new TalentOption('brilliance', 'boolean', false)];\n","import { \n    getCharacterData as getData, \n    getCharacterAscensionBonusData as getAscensionBonusData, \n    getCharacterStatCurveAt as getStatCurveAt, \n    getAscensionBonusAt,\n    getTalentData,\n    getTalentStatsAt,\n} from './Data.js';\n\nimport * as talents from './Talent.js';\nimport * as talentOptions from './TalentOption.js';\n\nexport default class Character {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n\n        this.talents = getTalentData(id);\n    }\n\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n    getInnateStatsAt(level, hasAscended) {\n        if (isNaN(level) || level < 1 || level > 90) {\n            // Return nulls if level is invalid\n            let innateStats;\n            if (this.innateStats !== undefined) {\n                // Copy all of innateStats' properties to a new object and initialize them to null\n                innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                innateStats = {};\n            }\n            \n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n            \n            return innateStats;\n        } \n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\n        else if (level === this.level && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.innateStats;\n        } else {\n\n            // Initialize stats with character level 1 base stats\n            let innateStats = {...this.baseStats};\n\n            let charStatCurves = getStatCurveAt(level);\n\n            // Calculate stats from character level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = charStatCurves[curve];\n                innateStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from character ascension\n            let ascensionLevel;\n            if (level > 80 || (level == 80 && hasAscended)) {\n                ascensionLevel = 6;\n            } else if (level > 70 || (level == 70 && hasAscended)) {\n                ascensionLevel = 5;\n            } else if (level > 60 || (level == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (level > 50 || (level == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (level > 40 || (level == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (level > 20 || (level == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n\n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in innateStats) {\n                        innateStats[stat] += bonus;\n                    } else {\n                        innateStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n\n            return innateStats;\n        }\n    }\n\n    // Return an Object with description and damage properties\n    getTalentDamageAt({ type, talentLevel, totalStats, modifier }) {\n        const params = getTalentStatsAt(type.toLowerCase(), talentLevel, this.talents);\n\n        let damageFn = talents[this.id + type];\n        if (damageFn === undefined) {\n            damageFn = talents['defaultTalent'];\n        }\n\n        let damage = damageFn({\n            params,\n            stats: totalStats,\n            modifier,\n        });\n\n        return damage;\n    }\n\n    getTalentOptions() {\n        let options = talentOptions[this.id + 'TalentOptions'];\n        if (options !== undefined) {\n            return options;\n        } else {\n            return [];\n        }\n    }\n}\n","import { getWeaponData as getData, getWeaponAscensionBonusData as getAscensionBonusData, getWeaponStatCurveAt as getStatCurveAt, getAscensionBonusAt } from './Data.js';\n\nexport default class Weapon {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.type = data.type;\n        this.rank = data.rank;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n    }\n\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n    getStatsAt(weaponLevel, hasAscended) {\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.rank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\n            // Return nulls if weapon level is invalid\n            let weaponStats;\n            if (this.stats !== undefined) {\n                // Copy all of stats' properties to a new object and initialize them to null\n                weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                weaponStats = {};\n            }\n            \n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n        // If getStatsAt has not been called before, this.weaponLevel, this.hasAscended, and this.stats will be undefined\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.stats;\n        } else {\n\n            // Level 1 weapon stats\n            let weaponStats = {...this.baseStats};\n\n            let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n            // Calculate stats from weapon level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = weaponStatCurves[curve];\n                weaponStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from weapon ascension\n            let ascensionLevel;\n            // Only 3-star and above weapons can be ascended beyond level 70\n            if (this.rank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\n                ascensionLevel = 6;\n            } else if (this.rank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\n                ascensionLevel = 5;\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n            \n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in weaponStats) {\n                        weaponStats[stat] += bonus;\n                    } else {\n                        weaponStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n    }\n}\n","import { talentDescMapping, talentOptionMapping } from './Data.js';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value, isPercentage) {\n    if (value != null) {\n        if (isPercentage) {\n            return (value * 100).toFixed(1) + \"%\";\n        } else {\n            return Math.round(value);\n        }\n    } else {\n        return \"-\";\n    }\n};\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values) {\n    let str = '';\n\n    if (values.length === 0) {\n        return str;\n    }\n\n    if (isNaN(values[0])) {\n        return '-';\n    } else {\n        str += Math.round(values[0]);\n    }\n\n    if (values.length >= 3 && values.every(value => value === values[0])) {\n        // All elements are the same, simplify to ${damage} x${count}\n        str += ' x ' + values.length;\n    } else {\n        // Less than 3 elements, or elements are different\n        values.slice(1).forEach(value => {\n            if (isNaN(value)) {\n                return '-';\n            } else {\n                str += ' + ' + Math.round(value);\n            }\n        });\n    }\n\n    return str;\n}\n\n// Returns the display name of a talent option\nexport function getTalentOptionName(id) {\n    return talentOptionMapping[id];\n}\n\n// Returns a Number representing the inputed value of a stat\n// Returns null if the input is not a valid stat value\nexport function convertStatValue(value, isPercentage) {\n    if (isPercentage) {\n        return value / 100;\n    } else {\n        return value;\n    }\n};\n\nexport function getTalentDescription(desc) {\n    return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended) {\n\n    let weaponStats;\n    if (weapon !== undefined) {\n        weaponStats = weapon.getStatsAt(weaponLevel, weaponHasAscended);\n    } else {\n        weaponStats = {};\n    }\n\n    let characterStats;\n    if (character !== undefined) {\n        characterStats = character.getInnateStatsAt(characterLevel, characterHasAscended);\n    } else {\n        characterStats = {};\n    }\n    \n    // Merges weaponStats and innateStats into a new baseStats object\n    let baseStats = {...weaponStats};\n    Object.entries(characterStats).map(([stat, value]) => {\n        if (baseStats[stat] === undefined) {\n            baseStats[stat] = value;\n        } else {\n            baseStats[stat] += value;\n        }\n    });\n    \n    return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended, artifactSetBonuses, artifacts) {\n    \n    let baseStats = getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended);\n    let combinedStats = {...baseStats};\n\n    // Merge base stats and artifact set bonuses\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n        if (combinedStats[stat] === undefined) {\n            combinedStats[stat] = value;\n        } else {\n            combinedStats[stat] += value;\n        }\n    });\n    \n    // Merge artifact bonuses into separate object\n    let artifactStats = {};\n    artifacts.forEach(artifact => {\n        Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n            if (artifactStats[stat] === undefined) {\n                artifactStats[stat] = value;\n            } else {\n                artifactStats[stat] += value;\n            }\n        });\n    });\n\n    // Merge base stats and artifact bonuses\n    Object.entries(artifactStats).forEach(([stat, value]) => {\n        if (combinedStats[stat] === undefined) {\n            combinedStats[stat] = value;\n        } else {\n            combinedStats[stat] += value;\n        }\n    });\n\n    // Calculate total stats\n    let totalStats = {};\n\n    totalStats.baseAtk = (combinedStats.baseAtk ? combinedStats.baseAtk : 0);\n\n    totalStats.flatAtk = (combinedStats.baseAtk ? combinedStats.baseAtk : 0) \n        * (1 + (combinedStats.atkBonus ? combinedStats.atkBonus : 0))\n        + (combinedStats.flatAtk ? combinedStats.flatAtk : 0);\n    totalStats.flatDef = (combinedStats.baseDef ? combinedStats.baseDef : 0) \n        * (1 + (combinedStats.defBonus ? combinedStats.defBonus : 0))\n        + (combinedStats.flatDef ? combinedStats.flatDef : 0);\n    totalStats.flatHp = (combinedStats.baseHp ? combinedStats.baseHp : 0) \n        * (1 + (combinedStats.hpBonus ? combinedStats.hpBonus : 0))\n        + (combinedStats.flatHp ? combinedStats.flatHp : 0);\n    totalStats.critRate = combinedStats.critRate ? combinedStats.critRate : 0;\n    totalStats.critDmg = combinedStats.critDmg ? combinedStats.critDmg : 0;\n    totalStats.elementalMastery = combinedStats.elementalMastery ? combinedStats.elementalMastery : 0;\n    totalStats.energyRecharge = 1 + (combinedStats.energyRecharge ? combinedStats.energyRecharge : 0);\n    \n    combinedStats.anemoDmgBonus ? totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus : null;\n    combinedStats.cryoDmgBonus ? totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus : null;\n    combinedStats.electroDmgBonus ? totalStats.electroDmgBonus = combinedStats.electroDmgBonus : null;\n    combinedStats.geoDmgBonus ? totalStats.geoDmgBonus = combinedStats.geoDmgBonus : null;\n    combinedStats.hydroDmgBonus ? totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus : null;\n    combinedStats.pyroDmgBonus ? totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus : null;\n    combinedStats.physicalDmgBonus ? totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus : null;\n\n    combinedStats.anemoRes ? totalStats.anemoRes = combinedStats.anemoRes : null;\n    combinedStats.cryoRes ? totalStats.cryoRes = combinedStats.cryoRes : null;\n    combinedStats.electroRes ? totalStats.electroRes = combinedStats.electroRes : null;\n    combinedStats.geoRes ? totalStats.geoRes = combinedStats.geoRes : null;\n    combinedStats.hydroRes ? totalStats.hydroRes = combinedStats.hydroRes : null;\n    combinedStats.pyroRes ? totalStats.pyroRes = combinedStats.pyroRes : null;\n    combinedStats.physicalRes ? totalStats.physicalRes = combinedStats.physicalRes : null;\n\n    combinedStats.healingBonus ? totalStats.healingBonus = combinedStats.healingBonus : null;\n\n    return totalStats;\n}\n\nexport function capitalize(str) {\n    return str[0].toUpperCase().concat(str.slice(1));\n}","import * as statUtils from './Stat.js';\n\nexport default class Artifact {\n    mainStat = {\n        stat: 0,\n        rawValue: NaN,\n        value: NaN,\n    };\n\n    subStats = [\n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }\n    ];\n\n    constructor(type) {\n        this.type = type;\n    }\n\n    // Can be called with one of the two of stat and value (the other will be undefined)\n    setStat(statObj, stat, value, isPercentage = false) {\n        if (stat == undefined && value != undefined) {\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        } else if (stat != undefined && value == undefined) {\n            statObj.stat = stat;\n            statObj.value = statUtils.convertStatValue(statObj.rawValue, isPercentage);\n        } else if (stat != undefined && value != undefined) {\n            statObj.stat = stat;\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        }\n    }\n\n    /*\n    setMainStat(stat, value, isPercentage = false) {\n        this.setStat(this.mainStat, stat, value, isPercentage);\n    }\n\n    // Set substat in a spefiic position\n    setSubStat(pos, stat, value, isPercentage = false) {\n        this.setStat(this.subStats[pos], stat, value, isPercentage);\n    }\n    */\n\n    // Returns object containing stat: value mapping, including both main stat and substats\n    getStats() {\n        let stats = {};\n\n        if (this.mainStat.stat != 0) {\n            if (!isNaN(this.mainStat.value)) {\n                stats[this.mainStat.stat] = this.mainStat.value;\n            } else {\n                stats[this.mainStat.stat] = null;\n            }\n        }\n        \n        this.subStats.forEach(subStat => {\n            if (subStat.stat != 0) {\n                if (!isNaN(subStat.value)) {\n                    stats[subStat.stat] = subStat.value;\n                } else {\n                    stats[subStat.stat] = null;\n                }\n            }\n        });\n\n        return stats;\n    }\n}\n\nexport const mainStatProps = {\n    Flower: [\n        'flatHp',\n    ],\n\n    Feather: [\n        'flatAtk',\n    ],\n\n    Sands: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'energyRecharge',\n    ],\n\n    Goblet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'anemoDmgBonus',\n        'cryoDmgBonus',\n        'electroDmgBonus',\n        'geoDmgBonus',\n        'hydroDmgBonus',\n        'pyroDmgBonus',\n        'physicalDmgBonus',\n    ],\n\n    Circlet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'critRate',\n        'critDmg',\n        'healingBonus',\n    ],\n}\n\nexport const subStatProps = [\n    'flatHp',\n    'flatAtk',\n    'flatDef',\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n    'critRate',\n    'critDmg',\n]","// Placeholder function\nexport function defaultSetBonus() {\n    return [];\n}","import { getArtifactSetData, getArtifactSetBonusData } from './Data.js';\nimport * as extraBonuses from './ArtifactSetBonus.js';\n\nexport default class ArtifactSet {\n    constructor(id) {\n        this.id = id;\n\n        const data = getArtifactSetData(id);\n        this.name = data.name;\n        this.bonusThresholds = data.bonusThresholds;\n\n        this.setBonuses = getArtifactSetBonusData(id);\n    }\n\n    getSetBonusesAt(pieces) {\n        return this.bonusThresholds.filter(threshold => pieces >= threshold)\n            .map(threshold => this.setBonuses[threshold]);\n    }\n\n    getStatsAt(pieces) {\n        let stats = {};\n        \n        let setBonuses = this.getSetBonusesAt(pieces);\n        setBonuses.forEach(setBonus => {\n            // Normal stat bonuses\n            setBonus.bonuses.forEach(statBonus => {\n                if (stats[statBonus.stat] !== undefined) {\n                    stats[statBonus.stat] += statBonus.value;\n                } else {\n                    stats[statBonus.stat] = statBonus.value;\n                }\n            });\n\n            // Special bonuses, has to be handled individually\n            let extraBonus = setBonus.bonusExtra;\n            if (extraBonus.type !== '') {\n                let bonusFn = extraBonuses[extraBonus.type];\n                if (bonusFn === undefined) {\n                    bonusFn = extraBonuses['defaultSetBonus'];\n                }\n\n                let params = extraBonus.params;\n\n                let statBonuses = bonusFn(params);\n                \n                statBonuses.forEach(statBonus => {\n                    if (stats[statBonus.stat] !== undefined) {\n                        stats[statBonus.stat] += statBonus.value;\n                    } else {\n                        stats[statBonus.stat] = statBonus.value;\n                    }\n                });\n            }\n        });\n        \n        return stats;\n    }\n}\n","import Resistance from \"./Resistance\";\n\nexport default class DamageModifier {\n    constructor({\n        characterLevel,\n        enemyLevel = 1,\n        enemyDefReduction = 0,\n        enemyRes = new Resistance({}),\n        enemyResReduction = new Resistance({}),\n        modifiers = {},\n        critType = 'none',\n        flatDmg = 0,\n        reaction = 'none',\n        talentAttackLevel,\n        talentSkillLevel,\n        talentBurstLevel,\n        talentOptions = [],\n    }) {\n        this.characterLevel = characterLevel;\n        this.enemyLevel = enemyLevel;\n        this.enemyDefReduction = enemyDefReduction;\n        this.enemyRes = enemyRes;\n        this.enemyResReduction = enemyResReduction;\n        this.modifiers = modifiers;\n        this.critType = critType;\n        this.flatDmg = flatDmg;\n        this.reaction = reaction;\n        this.talentAttackLevel = talentAttackLevel;\n        this.talentSkillLevel = talentSkillLevel;\n        this.talentBurstLevel = talentBurstLevel;\n\n        talentOptions.forEach(({id, value}) => {\n            this[id] = value;\n        });\n    }\n}","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n\n        fontSize: 14,\n\n        height: '100%',\n\n        backgroundColor: '#fff',\n    },\n\n    inputColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '1%',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#ccc',\n    },\n\n    inputRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    levelInput: {\n        width: '2em',\n    },\n\n    statInput: {\n        width: '3em',\n    },\n\n    buttonGroupContainer: {\n        height: 'initial',\n\n        marginTop: 0,\n        marginBottom: 0,\n        marginLeft: 0,\n        marginRight: 0,\n\n        borderRadius: 2,\n        borderColor: '#000',\n\n        backgroundColor: '#ccc',\n    },\n\n    buttonGroupButtonContainer: {\n        borderRightColor: '#000',\n        width: '4em',\n    },\n\n    buttonGroupText: {\n        fontSize: '1em',\n        fontWeight: 400,\n        color: '#000',\n    },\n\n    buttonGroupSelectedButton: {\n        backgroundColor: '#eee',\n    },\n\n    buttonGroupSelectedText: {\n        color: '#000',\n    },\n\n    resultColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#eee',\n    },\n\n    resultBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n    },\n\n    resultBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n        borderBottomWidth: 1,\n    },\n\n    artifactBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n    },\n\n    artifactBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n\n        borderStyle: 'dashed',\n        borderBottomWidth: 1,  \n    },\n\n    characterImage: {\n        marginVertical: '0.25em',\n    },\n\n    titleText: {\n        fontSize: '1.5em',\n        fontWeight: '200',\n\n        marginVertical: '0.17em',\n    },\n\n    artifactType: {\n        fontSize: '1.2em',\n        fontWeight: '200',\n\n        marginVertical: '0.21em',\n    },\n\n    artifactStatType: {\n        marginVertical: '0.25em',\n    },\n\n    resultText: {\n        marginVertical: '0.25em',\n    },\n\n    fillerColumn: {\n        flexGrow: 1,\n\n        backgroundColor: '#eee',\n    },\n});\n","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport { ButtonGroup } from 'react-native-elements';\nimport React, { Component } from 'react';\nimport { FlatList, Image, Text, TextInput, View } from 'react-native';\n\nimport Character from './js/Character.js';\nimport Weapon from './js/Weapon.js';\nimport Artifact, { mainStatProps, subStatProps } from './js/Artifact.js';\nimport ArtifactSet from './js/ArtifactSet.js';\nimport DamageModifier from './js/DamageModifer.js';\nimport TalentOption from './js/TalentOption.js';\nimport Resistance from './js/Resistance.js';\nimport * as statUtils from './js/Stat.js';\nimport * as data from './js/Data.js';\n\nimport styles from './js/Styles.js';\n\nexport default class App extends Component {\n\n  // Constants\n  elements = ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro', 'physical'];\n\n  // Class properties\n  character;\n  weapon;\n  artifactSetStats;\n  artifactFlower;\n  artifactFeather;\n  artifactSands;\n  artifactGoblet;\n  artifactCirclet;\n\n  constructor() {\n    super();  \n\n    // Initialize sorted list of characters and weapons\n    this.characters = data.getSortedCharacterList();\n    this.weapons = data.getSortedWeaponList();\n    this.artifacts = data.getSortedArtifactSetList();\n\n    this.artifactFlower = new Artifact('Flower');\n    this.artifactFeather = new Artifact('Feather');\n    this.artifactSands = new Artifact('Sands');\n    this.artifactGoblet = new Artifact('Goblet');\n    this.artifactCirclet = new Artifact('Circlet');\n\n    this.artifactSets = [0, 0, 0];\n\n    this.state = {\n      characterId: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n\n      weaponId: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n\n      artifactSet1Id: undefined,\n      artifactSet1Pc: undefined,\n      artifactSet2Id: undefined,\n      artifactSet2Pc: undefined,\n      artifactSet3Id: undefined,\n      artifactSet3Pc: undefined,\n\n      talentAttackLevel: 1,\n      talentSkillLevel: 1,\n      talentBurstLevel: 1,\n\n      critType: 'none',\n      enemyLevel: 1,\n      enemyRes: new Resistance({}),\n\n      characterStats: undefined,\n      weaponStats: undefined,\n      totalStats: undefined,\n\n      talentAttackDamage: undefined,\n      talentSkillDamage: undefined,\n      talentBurstDamage: undefined,\n\n      talentOptions: [],\n    }\n  }\n\n  renderInputColumn = () => {\n    return (\n      <View>\n        {this.renderCharacterList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.characterLevel} \n            onChangeText={text => {\n              this.setState({ characterLevel: parseInt(text) }, this.setCharacterState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isCharacterAscended: value }, this.setCharacterState)}\n            value={this.state.isCharacterAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        {this.renderWeaponList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.weaponLevel} \n            onChangeText={text => {\n              this.setState({ weaponLevel: parseInt(text) }, this.setWeaponState)\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isWeaponAscended: value }, this.setWeaponState)}\n            value={this.state.isWeaponAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        <Text>Artifact Sets</Text>\n        {this.artifactSets.map((_, i) => this.renderArtifactSetInput(i))}\n\n        <Text> </Text>\n\n        <View style={styles.inputRow}>\n          <Text>Attack Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentAttackLevel} \n            onChangeText={text => {\n              this.setState({ talentAttackLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Skill Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentSkillLevel} \n            onChangeText={text => {\n              this.setState({ talentSkillLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Burst Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentBurstLevel} \n            onChangeText={text => {\n              this.setState({ talentBurstLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n\n        <Text> </Text>\n\n        <View style={styles.inputRow}>\n          <Text>Crit: </Text>\n            <ButtonGroup\n              buttons={['None', 'Crit', 'Average']}\n              containerStyle={styles.buttonGroupContainer}\n              buttonContainerStyle={styles.buttonGroupButtonContainer}\n              textStyle={styles.buttonGroupText}\n              selectedButtonStyle={styles.buttonGroupSelectedButton}\n              selectedTextStyle={styles.buttonGroupSelectedText}\n\n              selectedIndex={(() => {\n                if (this.state.critType === 'crit') {\n                  return 1;\n                } else if (this.state.critType === 'average') {\n                  return 2;\n                } else {\n                  return 0;\n                }\n              })()}\n\n              onPress={(selectedIndex) => {\n                if (selectedIndex === 1) {\n                  this.setState({ critType: 'crit' }, this.setAllTalentState);\n                } else if (selectedIndex === 2) {\n                  this.setState({ critType: 'average' }, this.setAllTalentState);\n                } else {\n                  this.setState({ critType: 'none' }, this.setAllTalentState);\n                }\n              }}\n            />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Enemy Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.enemyLevel} \n            onChangeText={text => {\n              this.setState({ enemyLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n\n        {\n          this.elements.map(element => {\n            return (\n              <View style={styles.inputRow} key={element}>\n                <Text>Enemy {statUtils.capitalize(element)} RES: </Text>\n                <TextInput \n                  style={styles.levelInput}\n                  defaultValue={this.state.enemyRes[element]} \n                  onChangeText={text => {\n                    this.state.enemyRes.set(element, parseFloat(text));\n                    let enemyRes = this.state.enemyRes;\n                    this.setState({ enemyRes }, this.setAllTalentState);\n                  }}\n                />\n                <Text>%</Text>\n              </View>\n            )\n          })\n        }\n\n      </View>\n    )\n  }\n\n  renderCharacterList = () => {    \n    return (\n      <View style={styles.inputRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.character = new Character(value);\n              this.setState({\n                characterId: value,\n                talentOptions: this.character.getTalentOptions()\n              }, this.setCharacterState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.characters.map(id => <Picker.Item label={data.getCharacterData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    return (\n      <View style={styles.inputRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.weapon = new Weapon(value);\n              this.setState({ weaponId: value }, this.setWeaponState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.weapons.map(id => <Picker.Item label={data.getWeaponData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderArtifactSetInput = (i) => {\n    return (\n      <View style={styles.inputRow} key={i}>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state[`artifactSet${i+1}Id`]}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.artifactSets[i] = new ArtifactSet(value);\n              this.setState({ [`artifactSet${i+1}Id`]: value }, this.setArtifactSetState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.artifacts.map(id => <Picker.Item label={data.getArtifactSetData(id).name} value={id} key={id} />)}\n        </Picker>\n\n        <Text> : </Text>\n\n        <TextInput\n          style={styles.levelInput}\n          defaultValue={this.state[`artifactSet${i+1}Pc`]} \n          onChangeText={text => {\n            this.setState({ [`artifactSet${i+1}Pc`]: parseInt(text) }, this.setArtifactSetState);\n          }}\n        />\n\n        <Text>pc</Text>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  getDamageModifier = () => {\n    let modifier = new DamageModifier({ \n      characterLevel: this.state.characterLevel,\n      critType: this.state.critType,\n      enemyLevel: this.state.enemyLevel,\n      enemyRes: this.state.enemyRes,\n      talentAttackLevel: this.state.talentAttackLevel,\n      talentSkillLevel: this.state.talentSkillLevel,\n      talentBurstLevel: this.state.talentBurstLevel,\n      talentOptions: this.state.talentOptions,\n    });\n\n    return modifier;\n  }\n\n  setCharacterState = () => {\n    if (this.character !== undefined) {\n      let stats = this.character.getInnateStatsAt(this.state.characterLevel, this.state.isCharacterAscended);\n      let totalStats = this.getTotalStats();\n      let modifier = this.getDamageModifier();\n\n      let talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats,\n        modifier,\n      });\n\n      let talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats,\n        modifier,\n      });\n      \n      let talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats,\n        modifier,\n      });\n\n      this.setState({ \n        characterStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setWeaponState = () => {\n    if (this.weapon !== undefined) {\n      let stats = this.weapon.getStatsAt(this.state.weaponLevel, this.state.isweaponAscended);\n      let totalStats = this.getTotalStats();\n      let modifier = this.getDamageModifier();\n\n      let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n      if (this.character !== undefined) {\n        talentAttackDamage = this.character.getTalentDamageAt({\n          type: 'Attack', \n          talentLevel: this.state.talentAttackLevel, \n          totalStats,\n          modifier,\n        });\n  \n        talentSkillDamage = this.character.getTalentDamageAt({\n          type: 'Skill', \n          talentLevel: this.state.talentSkillLevel, \n          totalStats,\n          modifier,\n        });\n        \n        talentBurstDamage = this.character.getTalentDamageAt({\n          type: 'Burst', \n          talentLevel: this.state.talentBurstLevel, \n          totalStats,\n          modifier,\n        });\n      }\n\n      this.setState({ \n        weaponStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setArtifactSetState = () => {\n    if (!this.artifactSets.every(value => value === 0)) {\n      this.artifactSetStats = this.artifactSets.reduce((acc, set, i) => {\n        if (set !== 0) {\n          let setStats = set.getStatsAt(this.state[`artifactSet${i+1}Pc`]);\n          Object.entries(setStats).forEach(([stat, value]) => {\n            if (acc[stat] !== undefined) {\n              acc[stat] += value;\n            } else {\n              acc[stat] = value;\n            }\n          });\n          return acc;\n        } else {\n          return acc;\n        }\n      }, {});\n\n      this.setArtifactState();\n    }\n  }\n\n  setArtifactState = (type) => {\n    let totalStats = this.getTotalStats();\n    let modifier = this.getDamageModifier();\n\n    let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n    if (this.character !== undefined) {\n      talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats,\n        modifier,\n      });\n\n      talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats,\n        modifier,\n      });\n      \n      talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats,\n        modifier,\n      });\n    }\n\n    this.setState({\n      totalStats: totalStats,\n      talentAttackDamage: talentAttackDamage,\n      talentSkillDamage: talentSkillDamage,\n      talentBurstDamage: talentBurstDamage,\n    });\n  }\n\n  setTalentState = (type) => {\n    if (this.character !== undefined) {\n      let talentDmg = this.character.getTalentDamageAt({\n        type, \n        talentLevel: this.state[`talent${type}Level`], \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      this.setState({ [`talent${type}Damage`]: talentDmg });\n    }\n  }\n\n  // Not used in setCharacterState, setWeaponState, or setArtifactState to reduce number of setState calls\n  // Does not call setTalentState to reduce number of setState calls\n  setAllTalentState = () => {\n    if (this.character !== undefined) {\n      let talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      let talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n      \n      let talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      this.setState({\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  getTotalStats = () => {\n    let artifacts = [this.artifactFlower, this.artifactFeather, this.artifactSands, this.artifactGoblet, this.artifactCirclet];\n\n    let stats = statUtils.getTotalStatsAt(\n      this.weapon, \n      this.state.weaponLevel, \n      this.state.isWeaponAscended, \n      this.character,\n      this.state.characterLevel,\n      this.state.isCharacterAscended,\n      this.artifactSetStats,\n      artifacts,\n    );\n\n    return stats;\n  }\n\n  renderCharacterStats = () => {\n    return (\n      this.character ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Character</Text>\n          {this.renderCharacterImage()}\n          <Text style={styles.resultText}>{this.character ? this.character.name : ''}</Text>\n          {\n            this.state.characterStats ? (\n              Object.entries(this.state.characterStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderWeaponStats = () => {\n    return (\n      this.weapon ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Weapon</Text>\n          <Text style={styles.resultText}>{this.weapon ? this.weapon.name : ''}</Text>\n          {\n            this.state.weaponStats ? (\n              Object.entries(this.state.weaponStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderArtifactSetStats = () => {\n    let stats = this.artifactSetStats;\n\n    return stats ? (\n      <View style={styles.resultBlock}>\n        <Text style={styles.titleText}>Artifact Sets</Text>\n        {\n          Object.entries(stats).map(([stat, value]) => {\n            return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n          })\n        }\n      </View>\n    ) : null;\n  }\n\n  renderArtifactMainStat = (type) => {\n    return (\n      <View style={styles.inputRow}>\n        <Picker\n          selectedValue={this['artifact' + type].mainStat.stat}\n          onValueChange={(stat, _) => {\n            if (stat != 0) {\n              let mainStat = this['artifact' + type].mainStat;\n              this['artifact' + type].setStat(mainStat, stat, undefined, data.propMapping[stat].isPercentage);\n              // Update total stats\n              this.setArtifactState(type);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {mainStatProps[type].map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n        </Picker>\n\n        <Text> : </Text>\n\n        <TextInput \n          style={styles.statInput} \n          onChangeText={text => {\n            let mainStat = this['artifact' + type].mainStat;\n            if (mainStat.stat) {\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), data.propMapping[mainStat.stat].isPercentage);\n            } else {\n              // If stat type is not yet set\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), false);\n            }\n\n            // Update total stats\n            this.setArtifactState(type);\n          }}\n        />\n      </View>\n    )\n  }\n\n  renderArtifactSubStats = (type) => {\n    return (\n      <View>\n        {\n          this['artifact' + type].subStats.map((subStat, index) => {\n            return (\n              <View style={styles.inputRow} key={index}>\n                <Picker\n                  selectedValue={subStat.stat}\n                  onValueChange={(stat, _) => {\n                    if (stat != 0) {\n                      this['artifact' + type].setStat(subStat, stat, undefined, data.propMapping[stat].isPercentage);     \n                      // Update total stats\n                      this.setArtifactState(type);\n                    }\n                  }}\n                >\n                  <Picker.Item label='' value={0} />\n                  {subStatProps.map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n                </Picker>\n\n                <Text> : </Text>\n\n                <TextInput \n                  style={styles.statInput} \n                  onChangeText={text => {\n                    let stat = subStat.stat;\n                    if (stat) {\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), data.propMapping[stat].isPercentage);\n                    } else {\n                      // If stat type is not yet set\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), false);\n                    }\n                    // Update total stats\n                    this.setArtifactState(type);\n                  }}\n                />\n              </View>\n            )\n          })\n        }\n      </View>\n    )\n  }\n\n  renderArtifactStat = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n\n        <Text style={styles.artifactStatType}>Main Stat</Text>\n        {this.renderArtifactMainStat(type)}\n\n        <Text style={styles.artifactStatType}>Substats</Text>\n        {this.renderArtifactSubStats(type)}\n      </View>\n    )\n  }\n\n  renderAllArtifactStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Artifacts</Text>\n        {this.renderArtifactStat('Flower')}\n        {this.renderArtifactStat('Feather')}\n        {this.renderArtifactStat('Sands')}\n        {this.renderArtifactStat('Goblet')}\n        {this.renderArtifactStat('Circlet', true)}\n      </View>\n    )\n  }\n\n  renderTotalStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Stat Total</Text>\n        {\n          this.state.totalStats ? (\n            Object.entries(this.state.totalStats).map(([stat, value]) => {\n              if (stat != 'baseAtk') {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              } else {\n                return null;\n              }\n            })\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  renderTalentDamage = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n        {\n          this.state['talent' + type + 'Damage'] ? (\n            this.state['talent' + type + 'Damage'].map(({description, damage}, index) => {\n              return (\n                <Text style={styles.resultText} key={index}>{statUtils.getTalentDescription(description)}: {statUtils.getDamageDisplayValue(damage)}</Text>\n              )\n            })\n          ) : null\n        }\n      </View>\n\n    )\n  }\n\n  renderTalentOptions = () => {\n    return (\n      <FlatList\n        data={this.state.talentOptions}\n        keyExtractor={item => item.id}\n        renderItem={({item, index}) => {\n          if (item.type === 'boolean') {\n            return (\n              <View style={styles.inputRow}>\n                <Text>{statUtils.getTalentOptionName(item.id)}: </Text>\n                <Checkbox\n                  onValueChange={value => {\n                    let talentOptions = [...this.state.talentOptions];\n                    talentOptions[index] = new TalentOption(item.id, item.type, value);\n                    this.setState({ talentOptions }, this.setAllTalentState);\n                  }}\n                  value={item.value}\n                />\n              </View>\n            );\n          } else {\n            return null;\n          }\n        }}\n      />\n    )\n  }\n\n  renderAllTalentDamage = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Talents</Text>\n\n        {this.renderTalentDamage('Attack')}\n        {this.renderTalentDamage('Skill')}\n        {this.renderTalentDamage('Burst', true)}\n        {this.renderTalentOptions()}\n      </View>\n    )\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.inputColumn}>\n          {this.renderInputColumn()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderCharacterStats()}\n          {this.renderWeaponStats()}\n          {this.renderArtifactSetStats()}\n          {this.renderAllArtifactStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderTotalStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderAllTalentDamage()}\n        </View>\n\n        <View style={styles.fillerColumn}>\n        </View>\n\n      </View>\n    )\n  }\n}\n"],"sourceRoot":""}