{"version":3,"sources":["js/Data.ts","js/talent/types.ts","js/Resistance.ts","js/talent/DefaultTalent.ts","js/talent/Talent.ts","js/modifier/Reaction.ts","js/talent/AyakaTalent.ts","js/talent/JeanTalent.ts","js/talent/LisaTalent.ts","js/talent/BarbaraTalent.ts","js/talent/KaeyaTalent.ts","js/talent/DilucTalent.ts","js/talent/RazorTalent.ts","js/talent/AmberTalent.ts","js/talent/VentiTalent.ts","js/talent/XianglingTalent.ts","js/talent/BeidouTalent.ts","js/talent/XingqiuTalent.ts","js/talent/XiaoTalent.ts","js/talent/NingguangTalent.ts","js/talent/KleeTalent.ts","js/talent/ZhongliTalent.ts","js/talent/FischlTalent.ts","js/talent/BennettTalent.ts","js/talent/TartagliaTalent.ts","js/talent/NoelleTalent.ts","js/talent/QiqiTalent.ts","js/talent/ChongyunTalent.ts","js/talent/GanyuTalent.ts","js/talent/AlbedoTalent.ts","js/talent/DionaTalent.ts","js/talent/MonaTalent.ts","js/talent/KeqingTalent.ts","js/talent/SucroseTalent.ts","js/talent/XinyanTalent.ts","js/talent/RosariaTalent.ts","js/talent/HutaoTalent.ts","js/talent/KazuhaTalent.ts","js/talent/YanfeiTalent.ts","js/talent/YoimiyaTalent.ts","js/talent/EulaTalent.ts","js/talent/TalentUtil.ts","js/talent/RaidenTalent.ts","js/talent/SayuTalent.ts","js/option/Option.ts","js/option/artifactSetOptions/ArtifactSetOption.ts","js/option/artifactSetOptions/ArchaicPetraOption.ts","js/option/artifactSetOptions/BerserkerOption.ts","js/option/artifactSetOptions/BlizzardStrayerOption.ts","js/option/artifactSetOptions/BloodstainedChivalryOption.ts","js/option/artifactSetOptions/BraveHeartOption.ts","js/option/artifactSetOptions/CrimsonWitchOption.ts","js/option/artifactSetOptions/HeartOfDepthOption.ts","js/option/artifactSetOptions/InstructorOption.ts","js/option/artifactSetOptions/LavawalkerOption.ts","js/option/artifactSetOptions/MaidenBelovedOption.ts","js/option/artifactSetOptions/MartialArtistOption.ts","js/option/artifactSetOptions/NoblesseObligeOption.ts","js/option/artifactSetOptions/PaleFlameOption.ts","js/option/artifactSetOptions/RetracingBolideOption.ts","js/option/artifactSetOptions/ShimenawaOption.ts","js/option/artifactSetOptions/TenacityOption.ts","js/option/artifactSetOptions/ThundersootherOption.ts","js/option/artifactSetOptions/ViridescentVenererOption.ts","js/option/characterOptions/CharacterOption.ts","js/option/characterOptions/AyakaOption.ts","js/option/characterOptions/ChongyunOption.ts","js/option/characterOptions/DilucOption.ts","js/option/characterOptions/HuTaoOption.ts","js/option/characterOptions/ElementalAbsorptionOption.ts","js/option/characterOptions/KazuhaOption.ts","js/option/characterOptions/NoelleOption.ts","js/option/characterOptions/RaidenOption.ts","js/option/characterOptions/SayuOption.ts","js/option/characterOptions/SucroseOption.ts","js/option/characterOptions/index.ts","js/option/characterOptions/VentiOption.ts","js/option/characterOptions/XiaoOption.ts","js/option/characterOptions/YanfeiOption.ts","js/option/characterOptions/YoimiyaOption.ts","js/option/OptionUtils.ts","js/passive/characterPassives/CharacterPassive.ts","js/passive/characterPassives/YoimiyaPassive.ts","js/passive/characterPassives/RaidenPassive.ts","js/character/Character.ts","js/Stat.ts","js/artifact/types.ts","js/artifact/Artifact.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/Picker.tsx","js/modifier/CritType.ts","component/ArtifactBlock.tsx","component/Column.tsx","component/ArtifactColumn.tsx","component/ArtifactSetPicker.tsx","component/IntInput.tsx","component/Checkbox.tsx","component/OptionInput.tsx","component/ArtifactSetInputBlock.tsx","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","js/artifact/ArtifactSetBonus.ts","js/artifact/ArtifactSet.ts","js/weapon/Weapon.ts","save/Save.ts","component/SaveBlock.tsx","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","TalentType","Element","AttackType","ScalingType","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","this","Map","set","Anemo","Cryo","Electro","Geo","Hydro","Pyro","Physical","element","get","value","isNaN","prevValue","defaultTalentFn","Reaction","defaultTalent","ayaka","stats","modifier","attackLightMulti","normalHits","chargedHits","infusion","slice","concat","skillDefault","burstBase","description","multiplier","jean","attackLightDefault","healingSkillBase","scalingType","Attack","lisa","talentDmg","push","skillBase","i","burstDefault","barbara","kaeya","diluc","attackHeavyDefault","talentDamage","razor","attackParams","talentAttackLevel","amber","attackBowDefault","chargedElement","hpBase","flatBonus","damage","venti","talentValues","elementalAbsorption","xiangling","beidou","shieldBase","xingqiu","skillMultiBase","hits","xiao","ningguang","normalAtkDmg","calculateTotalDamage","attackType","Normal","chargedAttackDefault","starJadeDmg","Charged","plungeAttackDefault","klee","zhongli","fischl","bennett","atkBonus","baseAtk","tartaglia","riptideFlashDmg","riptideBurstDmg","normalAttackMulti","chargedAttackMulti","noelle","skillDamage","Defense","Skill","qiqi","chongyun","ganyu","normalAttackDefault","aimedShotDmg","chargedDmg","albedo","transientBlossomDmg","diona","holdModifier","dionaHoldSkill","mona","modifiedStats","dmgBonus","keqing","hit4Dmg","hit5Dmg","consecutiveSlashDmg","Burst","sucrose","xinyan","rosaria","burstMultiBase","hutao","hit6Dmg","forEach","kazuha","hit3Dmg","hit5DmgSingle","infusionPlunge","yanfei","yoimiya","normalAttackParams","yoimiyaSkill","skillParams","talentSkillLevel","param","chargedAimedShotDmg","kindlingArrowDmg","eula","length","chargedAttackHeavy","attackHeavyMulti","lightfallSwordParams","lightfallSwordTalent","raiden","newStats","resolveBonus","resolveStacks","sayu","elementalParams","calculateBaseDamage","flatDmg","flatAtk","flatDef","Hp","flatHp","calculateReactionMultiplier","reaction","reactionBonus","amplifyingMultiplier","triggerElement","Melt","Vaporize","calculateAmplifyingMultiplier","elementalMastery","baseDmg","getDamageBonus","crit","critType","critDmg","critRate","chargedCritRate","Math","min","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","enemyResReduction","calculateHp","hitCount","damages","hit","Plunge","aimShotDefault","flatHealing","calculateHealing","dmgAbsorption","shieldStrength","calculateDmgAbsorption","Option","ArtifactSetOption","threshold","archaicPetraOptions","choices","applyOnStats","berserkerOptions","blizzardStrayerOptions","bloodstainedChivalryOptions","chargedDmgBonus","braveHeartOptions","crimsonWitchOptions","bonuses","find","stat","stacks","pyroDmgBonus","heartOfDepthOptions","normalDmgBonus","instructorOptions","lavawalkerOptions","maidenBelovedOptions","healedBonus","martialArtistOptions","noblesseObligeOptions","paleFlameOptions","physicalDmgBonus","retracingBolideOptions","shimenawaOptions","plungeDmgBonus","tenacityOptions","thundersootherOptions","viridescentVenererOptions","applyOnModifier","add","CharacterOption","ayakaOptions","chongyunOptions","dilucOptions","_talentAttackLevel","_talentSkillLevel","_talentBurstLevel","ascensionLevel","passiveData","hutaoOptions","totalHp","baseHp","hpBonus","ElementalAbsoprtionOption","kazuhaOptions","noelleOptions","talentBurstLevel","burstParams","totalDef","baseDef","defBonus","raidenOptions","burstDmgBonus","sayuOptions","sucroseOptions","characterOptions","defaultOptions","isBooleanOption","option","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","includes","characterPassives","Yoimiya_PermanentSkill_1","options","Shougun_PermanentSkill_2","statMixin","energyRecharge","electroDmgBonus","defaultPassiveFn","Character","hasAscended","_id","name","baseStats","statCurveMapping","_level","_hasAscended","innateStats","passiveOptions","data","getInnateStatsAt","getCharacterOptions","getAscensionLevel","getPassives","getPassiveOptions","prevAscensionLevel","Object","keys","obj","charStatCurves","entries","curve","bonus","talentLevel","totalStats","getTalentFn","damageFn","filter","flatMap","passiveId","getCharacterPassiveFn","oldOptionIds","newOptions","keptOptionIds","mixin","modifierMixin","getStatDisplayValue","isPercentage","toFixed","round","toString","getDamageDisplayValue","values","str","every","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","statMixins","characterStats","weaponStats","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","anemoDmgBonus","cryoDmgBonus","geoDmgBonus","hydroDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","skillDmgBonus","capitalize","toUpperCase","ArtifactType","InputStat","rawValue","Artifact","mainStat","subStats","prop","setProp","setValue","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","htmlFor","className","label","React","Component","FloatInput","parseFloat","InputRow","children","Picker","selectedValue","target","handleChange","onChange","Item","CritType","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactMainStatValue","setMainStatValue","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatValue","statObj","Column","ArtifactColumn","appState","updateTotalStats","setAppState","ArtifactSetPicker","setArtifactSetId","index","artifactSetId","sort","name1","name2","localeCompare","IntInput","Checkbox","checked","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","choice","ArtifactSetInputBlock","artifactSets","artifactSetOptions","artifactSet","updateArtifactSetBonuses","setArtifactSetPieces","CharacterPicker","setCharacterId","CharacterInputBlock","getOptions","setCharacterLevel","setIsCharacterAscended","isAscended","ModifierInputBlock","setEnemyLevel","updateTalentValues","setEnemyRes","setCritType","setReaction","ToggleButtonGroup","size","ToggleButton","variant","None","defaultSetBonus","Relic_ExtraAtkCritUp","extraStatsFn","Relic_AllElemResistUp","Relic_AtkAndExtraAtkUp","Relic_SkillDamageUp","Relic_MeleeAttackUp","Relci_RangerAttackUp","Relic_ElementalBurstUp","Relic_ElementalBurstUpByChargeEfficiency","Relic_GiantKiller","Relic_LowHPGainExtraCritRate","Relic_SkillEnhanceNormalAtkAndExtraAtk","Relic_ReactionGainExtraElemMasteryForTeam","Relic_CriticUpAgainstIceAndFrozen","Relic_DamageUpAgainstElectric","Relic_DamageUpAgainstFireAndBurning","Relic_SkillEnhanceCured","Relic_TeamAtkupAfterElementalBurst","Relic_KillEnhanceExtraAtk","Relic_ElementDmgUpAfterCrystalShield","Relic_ShieldEnhanceAtk","Relic_WaterSkillEnhanceNormalAtkAndExtraAtk","Relic_ShieldCostUpWhenElementalArtHit","Relic_AttackUpWhenNormalAtkAndExtraAtkHit","Relic_NormalDamageUpIfCostEnergy","Relic_ReactionWindEnhance","Relic_ReactionFireEnhance","Relic_ReactionElectricEnhance","Relic_AbsorbTeamElemResist","Relic_ElemDmgEnhanceElemResist","Relic_KillingRefreshSkill","Relic_UltGainEnergyForTeam","Relic_RestoreEnergyGainExtraEnergyForTeam","Relic_ChestHealSelf","Relic_CoinHealSelf","Relic_UltHealSelf","Relic_FireResistance","Relic_WaterResistance","Relic_ElectricResistance","Relic_IceResistance","ArtifactSet","bonusThresholds","setBonusData","_pieces","setBonusSets","setBonuses","getSetBonusSetsAt","getSetBonuses","prevPieces","setBonus","statBonus","extraBonus","extraBonusSet","extraBonuses","setBonusType","Weapon","rank","_weaponLevel","getStatsAt","weaponLevel","weaponStatCurves","createInputStatSave","SaveBlock","onSaveClick","saveInputName","save","characterHasAscended","weaponHasAscended","artifactSetPieces","saves","window","localStorage","setItem","JSON","stringify","addSave","onSaveInputChange","onLoadClick","selectedSave","refreshApp","savedArtifact","artifactType","characterOption","artifactSetOption","loadSave","onLoadInputChange","onDeleteClick","showDeleteWarning","onModalConfirm","deleteSave","onModalHide","getItem","parse","Button","onClick","Form","Control","placeholder","Modal","show","onHide","Body","Footer","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","setIsWeaponAscended","InputColumn","ArtifactSetStatBlock","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","TalentColumn","App","modifierMixins","callback","newArtifactSets","getStatMixins","newChar","getModifierMixins","damageModifer","getDamageModifier","getTalentDamageAt","characterPassiveMixins","getPassiveModifierMixins","artifactSetMixins","characterOptionMixins","artifactSetOptionMixins","getPassiveStatMixins","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcab2b2c.chunk.js","sourcesContent":["import type * as Data from '../data/types';\nimport type { TalentType } from './talent/types';\n\nimport characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\nimport talentDataRaw from '../data/talentdata.json';\nimport artifactSetDataRaw from '../data/artifactsetdata.json';\nimport artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\n\nimport propMappingRaw from '../data/propmapping.json';\nimport talentDescMappingRaw from '../data/talentdescmapping.json';\nimport optionMappingRaw from '../data/optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData(id: string, dataObj: Record<string, any>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport interface TalentValue {\n  description: string;\n  damage: number[];\n}\n\nexport interface TalentValueSet {\n  attack: TalentValue[];\n  skill: TalentValue[];\n  burst: TalentValue[];\n}\n\nexport interface TalentProps {\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { Element } from './talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","import Talent from './Talent';\nimport { TalentValue } from './types';\n\nconst defaultTalent: Talent = {\n  attack: defaultTalentFn,\n  skill: defaultTalentFn,\n  burst: defaultTalentFn,\n};\n\nexport default defaultTalent;\n\n// Placeholder function\nexport function defaultTalentFn(): TalentValue[] {\n  return [];\n}\n","import { TalentProps, TalentValue } from './types';\n\nimport defaultTalent from './DefaultTalent';\nimport lisaTalent from './LisaTalent';\nimport barbaraTalent from './BarbaraTalent';\nimport kaeyaTalent from './KaeyaTalent';\nimport dilucTalent from './DilucTalent';\nimport razorTalent from './RazorTalent';\nimport amberTalent from './AmberTalent';\nimport ventiTalent from './VentiTalent';\nimport xianglingTalent from './XianglingTalent';\nimport beidouTalent from './BeidouTalent';\nimport xingqiuTalent from './XingqiuTalent';\nimport xiaoTalent from './XiaoTalent';\nimport ningguangTalent from './NingguangTalent';\nimport kleeTalent from './KleeTalent';\nimport zhongliTalent from './ZhongliTalent';\nimport fischlTalent from './FischlTalent';\nimport bennettTalent from './BennettTalent';\nimport tartagliaTalent from './TartagliaTalent';\nimport noelleTalent from './NoelleTalent';\nimport qiqiTalent from './QiqiTalent';\nimport chongyunTalent from './ChongyunTalent';\nimport ganyuTalent from './GanyuTalent';\nimport albedoTalent from './AlbedoTalent';\nimport dionaTalent from './DionaTalent';\nimport monaTalent from './MonaTalent';\nimport keqingTalent from './KeqingTalent';\nimport sucroseTalent from './SucroseTalent';\nimport xinyanTalent from './XinyanTalent';\nimport rosariaTalent from './RosariaTalent';\nimport hutaoTalent from './HutaoTalent';\nimport yanfeiTalent from './YanfeiTalent';\nimport eulaTalent from './EulaTalent';\nimport jeanTalent from './JeanTalent';\nimport ayakaTalent from './AyakaTalent';\nimport yoimiyaTalent from './YoimiyaTalent';\nimport sayuTalent from './SayuTalent';\nimport kazuhaTalent from './KazuhaTalent';\nimport raidenTalent from './RaidenTalent';\n\nexport default interface Talent {\n  attack: (props: TalentProps) => TalentValue[];\n  skill: (props: TalentProps) => TalentValue[];\n  burst: (props: TalentProps) => TalentValue[];\n}\n\nexport const talents: Record<string, Talent> = {\n  defaultTalent,\n  ayaka: ayakaTalent,\n  jean: jeanTalent,\n  lisa: lisaTalent,\n  barbara: barbaraTalent,\n  kaeya: kaeyaTalent,\n  diluc: dilucTalent,\n  razor: razorTalent,\n  amber: amberTalent,\n  venti: ventiTalent,\n  xiangling: xianglingTalent,\n  beidou: beidouTalent,\n  xingqiu: xingqiuTalent,\n  xiao: xiaoTalent,\n  ningguang: ningguangTalent,\n  klee: kleeTalent,\n  zhongli: zhongliTalent,\n  fischl: fischlTalent,\n  bennett: bennettTalent,\n  tartaglia: tartagliaTalent,\n  noelle: noelleTalent,\n  qiqi: qiqiTalent,\n  chongyun: chongyunTalent,\n  ganyu: ganyuTalent,\n  albedo: albedoTalent,\n  diona: dionaTalent,\n  mona: monaTalent,\n  keqing: keqingTalent,\n  sucrose: sucroseTalent,\n  xinyan: xinyanTalent,\n  rosaria: rosariaTalent,\n  hutao: hutaoTalent,\n  kazuha: kazuhaTalent,\n  yanfei: yanfeiTalent,\n  yoimiya: yoimiyaTalent,\n  eula: eulaTalent,\n  raiden: raidenTalent,\n  sayu: sayuTalent,\n};\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n}\r\n\r\nexport default Reaction;\r\n","import Talent from './Talent';\nimport { attackLightMulti, burstBase, skillDefault } from './TalentUtil';\nimport { Element, TalentProps } from './types';\n\nconst ayakaTalent: Talent = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalent;\n\nfunction ayakaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 3, 1],\n    chargedHits: 3,\n    element: modifier.infusion ?? Element.Physical,\n    params: params\n      .slice(0, 4)\n      .concat([params[6], params[7], params[7]])\n      .concat(params.slice(7, 12)),\n    stats,\n    modifier,\n  });\n}\n\nfunction ayakaSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction ayakaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'cuttingDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'bloomDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightDefault,\n  burstBase,\n  healingSkillBase,\n  skillDefault,\n} from './TalentUtil';\nimport { Element, ScalingType, TalentProps } from './types';\n\nconst jeanTalent: Talent = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalent;\n\nfunction jeanAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({ normalHits: 5, params, stats, modifier });\n}\n\nfunction jeanSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({ element: Element.Anemo, params, stats, modifier });\n}\n\nfunction jeanBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'fieldEnterExitDmg',\n      element: Element.Anemo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'fieldActivationHealing',\n      scalingType: ScalingType.Attack,\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      scalingType: ScalingType.Attack,\n      params: params.slice(4, 6),\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst lisaTalent: Talent = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalent;\n\nfunction lisaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction lisaSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  talentDmg.push(\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Electro,\n      multiplier: params[5],\n      stats,\n      modifier,\n    })\n  );\n\n  for (let i = 0; i <= 3; i++) {\n    talentDmg.push(\n      skillBase({\n        description: `holdDmgStack${i}`,\n        element: Element.Electro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDmg;\n}\n\nfunction lisaBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackLightDefault, healingSkillBase, skillBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst barbaraTalent: Talent = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalent;\n\nfunction barbaraAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Hydro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction barbaraSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      params: params.slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenOnHit',\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'dropletDmg',\n      element: Element.Hydro,\n      multiplier: params[4],\n      stats,\n      modifier,\n    }),\n  ];\n\n  return talentDmg;\n}\n\nfunction barbaraBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    healingSkillBase({\n      description: 'hpRegen',\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillDefault, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst kaeyaTalent: Talent = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalent;\n\nfunction kaeyaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kaeyaSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kaeyaBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackHeavyDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst dilucTalent: Talent = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalent;\n\nfunction dilucAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction dilucSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      skillBase({\n        description: `${i + 1}HitDmg`,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDamage;\n}\n\nfunction dilucBurst({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['slashingDmg', 'dot', 'explosionDmg'];\n  let talentDamage = descriptions.map((description, i) => {\n    return burstBase({\n      description,\n      element: Element.Pyro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  return talentDamage;\n}\n","import { getTalentStatsAt, getTalentData } from '../Data';\nimport Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  skillBase,\n  burstDefault,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, TalentType, Element } from './types';\n\nconst razorTalent: Talent = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalent;\n\nfunction razorAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 4,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction razorSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['pressDmg', 'holdDmg'];\n  return descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n}\n\nfunction razorBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = burstDefault({\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n\n  let attackParams = getTalentStatsAt(\n    TalentType.Attack,\n    modifier.talentAttackLevel,\n    getTalentData('razor')\n  );\n\n  for (let i = 0; i < 4; i++) {\n    talentDamage.push(\n      burstBase({\n        description: `${i + 1}HitDmgSoulCompanion`,\n        element: Element.Electro,\n        multiplier: params[1] * attackParams[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, hpBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst amberTalent: Talent = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalent;\n\nfunction amberAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction amberSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Electro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    hpBase({\n      description: 'baronBunnyHp',\n      multiplier: params[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction amberBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'dmgPerWave',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push({\n    description: 'totalDmg',\n    damage: [talentDamage[0].damage[0] * 18],\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst ventiTalent: Talent = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalent;\n\nfunction ventiAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 6,\n    chargedElement: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction ventiSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'holdDmg',\n      element: Element.Anemo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction ventiBurst({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n  talentValues.push(\n    burstBase({\n      description: 'dot',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[1],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentValues;\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xianglingTalent: Talent = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalent;\n\nfunction xianglingAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 4, 1],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xianglingSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'guobaDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction xianglingBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      burstBase({\n        description: `swing${i + 1}HitDmg`,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentDamage.push(\n    burstBase({\n      description: 'pyronadoDmg',\n      element: Element.Pyro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  shieldBase,\n  skillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst beidouTalent: Talent = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalent;\n\nfunction beidouAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 5,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction beidouSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[0],\n      flatBonus: params[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'baseDmg',\n      element: Element.Electro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'dmgBonusOnHitTaken',\n      element: Element.Electro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction beidouBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'skillDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    burstBase({\n      description: 'lightningDmg',\n      element: Element.Electro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillMultiBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xingqiuTalent: Talent = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalent;\n\nfunction xingqiuAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 1, 2],\n    chargedHits: 2,\n    params: params\n      .slice(0, 3)\n      .concat(params.slice(4, 6))\n      .concat(params.slice(7)),\n    stats,\n    modifier,\n  });\n}\n\nfunction xingqiuSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillMultiBase({\n      description: 'skillDmg',\n      hits: 2,\n      element: Element.Hydro,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction xingqiuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'swordRainDmg',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import { defaultTalentFn } from './DefaultTalent';\nimport Talent from './Talent';\nimport { attackLightMulti, skillDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xiaoTalent: Talent = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n  burst: xiaoBurst,\n};\n\nexport default xiaoTalent;\n\nfunction xiaoAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  return attackLightMulti({\n    normalHits: [2, 1, 1, 2, 1, 1],\n    element,\n    params: params.slice(1, 5).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction xiaoSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xiaoBurst({ params, stats, modifier }: TalentProps) {\n  return defaultTalentFn();\n}\n","import Talent from './Talent';\nimport {\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillBase,\n  hpBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst ningguangTalent: Talent = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalent;\n\nfunction ningguangAttack({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  // Ningguang's normal attack has no combo\n  let normalAtkDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element: Element.Geo,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'normalAtkDmg',\n    damage: [normalAtkDmg],\n  });\n\n  talentDmg.push(\n    ...chargedAttackDefault({\n      element: Element.Geo,\n      params: params.slice(1, 2),\n      stats,\n      modifier,\n    })\n  );\n\n  // Ningguang's charged attack dmg per star jade\n  let starJadeDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[2],\n    element: Element.Geo,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'starJadeDmg',\n    damage: [starJadeDmg],\n  });\n\n  talentDmg.push(\n    ...plungeAttackDefault({\n      element: Element.Geo,\n      params: params.slice(4),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDmg;\n}\n\nfunction ningguangSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    hpBase({\n      description: 'jadeScreenHp',\n      multiplier: params[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction ningguangBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'dmgPerGem',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst kleeTalent: Talent = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalent;\n\nfunction kleeAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 3,\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kleeSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'jumpyDumptyDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'mineDmg',\n      element: Element.Pyro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction kleeBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'sparksNSplashDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  shieldBase,\n  burstDefault,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst zhongliTalent: Talent = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalent;\n\nfunction zhongliAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 4, 1],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction zhongliSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['stoneSteeleDmg', 'resonanceDmg'];\n\n  let talentDamage = descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Geo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDamage.push(\n    skillBase({\n      description: 'holdDmg',\n      element: Element.Geo,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[5],\n      flatBonus: params[4],\n      element: Element.Geo,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction zhongliBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Geo,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst fischlTalent: Talent = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalent;\n\nfunction fischlAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction fischlSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['ozDmg', 'summoningDmg'];\n  return descriptions.map((description, i) =>\n    skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n}\n\nfunction fischlBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'fallingThunderDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  skillMultiBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst bennettTalent: Talent = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalent;\n\nfunction bennettAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction bennettSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillMultiBase({\n      description: 'chargeLevel1Dmg',\n      hits: 2,\n      element: Element.Pyro,\n      params: params.slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n    skillMultiBase({\n      description: 'chargeLevel2Dmg',\n      hits: 2,\n      element: Element.Pyro,\n      params: params.slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Pyro,\n      multiplier: params[5],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction bennettBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuousPerSecond',\n      params: params.slice(1, 3),\n      stats,\n      modifier,\n    }),\n  ];\n\n  // ATK Bonus\n  let atkBonus = stats.baseAtk * params[3];\n  talentDamage.push({\n    description: 'atkBonus',\n    damage: [atkBonus],\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  attackBowDefault,\n  calculateTotalDamage,\n  skillBase,\n  normalAttackMulti,\n  chargedAttackMulti,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst tartagliaTalent: Talent = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalent;\n\nfunction tartagliaAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = attackBowDefault({\n    normalHits: 6,\n    chargedElement: Element.Hydro,\n    params: params.slice(0, 8).concat(params.slice(10)),\n    stats,\n    modifier,\n  });\n\n  let riptideFlashDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[8],\n    element: Element.Hydro,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'riptideFlashDmg',\n    damage: [riptideFlashDmg],\n  });\n\n  let riptideBurstDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[9],\n    element: Element.Hydro,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'riptideBurstDmg',\n    damage: [riptideBurstDmg],\n  });\n\n  return talentDamage;\n}\n\nfunction tartagliaSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'stanceChangeDmg',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    ...normalAttackMulti({\n      hits: [1, 1, 1, 1, 1, 2],\n      element: Element.Hydro,\n      params: params.slice(1, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: params.slice(8, 10),\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'riptideSlashDmg',\n      element: Element.Hydro,\n      multiplier: params[10],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction tartagliaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmgMelee',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'burstDmgRanged',\n      element: Element.Hydro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'riptideBlastDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  calculateTotalDamage,\n  shieldBase,\n  healingSkillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, AttackType, Element } from './types';\n\nconst noelleTalent: Talent = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalent;\n\nfunction noelleAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction noelleSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  let skillDamage = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Geo,\n    scalingType: ScalingType.Defense,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'skillDmg',\n    damage: [skillDamage],\n  });\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[0],\n      flatBonus: params[6],\n      element: Element.Geo,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    healingSkillBase({\n      description: 'healing',\n      params: [params[1], params[7]],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction noelleBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstInitDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'firstSwingDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  healingSkillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, Element } from './types';\n\nconst qiqiTalent: Talent = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalent;\n\nfunction qiqiAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 2, 1],\n    chargedHits: 2,\n    params: params.slice(0, 6).concat(params[5]).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction qiqiSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Cryo,\n      multiplier: params[7],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'heraldOfFrostDmg',\n      element: Element.Cryo,\n      multiplier: params[4],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenOnHit',\n      scalingType: ScalingType.Attack,\n      params: params.slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      scalingType: ScalingType.Attack,\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction qiqiBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Cryo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'healing',\n      scalingType: ScalingType.Attack,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackHeavyDefault, skillDefault, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst chongyunTalent: Talent = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalent;\n\nfunction chongyunAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction chongyunSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params: params,\n    stats,\n    modifier,\n  });\n}\n\nfunction chongyunBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Cryo,\n    params: params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  plungeAttackDefault,\n  skillBase,\n  hpBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst ganyuTalent: Talent = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalent;\n\nfunction ganyuAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 6,\n      element: Element.Physical,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  let aimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[6],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'aimShotDmg',\n    damage: [aimedShotDmg],\n  });\n\n  let chargedDescriptions = [\n    'aimShotChargeLevel1',\n    'frostflakeArrowDmg',\n    'frostflakeArrowBloomDmg',\n  ];\n  let chargedDmg = chargedDescriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i + 7],\n      element: Element.Cryo,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n\n    return {\n      description,\n      damage: [damage],\n    };\n  });\n  talentDamage.push(...chargedDmg);\n\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(10),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction ganyuSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    hpBase({\n      description: 'iceLotusHp',\n      multiplier: params[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction ganyuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'iceShardDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  calculateTotalDamage,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, AttackType, Element } from './types';\n\nconst albedoTalent: Talent = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalent;\n\nfunction albedoAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction albedoSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  talentDmg.push(\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  let transientBlossomDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: Element.Geo,\n    scalingType: ScalingType.Defense,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'transientBlossomDmg',\n    damage: [transientBlossomDmg],\n  });\n\n  return talentDmg;\n}\n\nfunction albedoBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'fatalBlossomDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackBowDefault,\n  skillBase,\n  shieldBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst dionaTalent: Talent = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalent;\n\nfunction dionaAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Cryo,\n    params: params.slice(0, 5).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction dionaSkill({ params, stats, modifier }: TalentProps) {\n  let holdModifier = {\n    ...modifier,\n    dionaHoldSkill: true,\n  };\n\n  return [\n    skillBase({\n      description: 'icyPawDmgPerPaw',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    shieldBase({\n      description: 'shieldHpPress',\n      multiplier: params[1],\n      flatBonus: params[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n    shieldBase({\n      description: 'shieldHpHold',\n      multiplier: params[1],\n      flatBonus: params[2],\n      element: Element.Cryo,\n      stats,\n      modifier: holdModifier,\n    }),\n  ];\n}\n\nfunction dionaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'continuousFieldDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuousTime',\n      params: params.slice(2),\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst monaTalent: Talent = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalent;\n\nfunction monaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Hydro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction monaSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'dot',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction monaBurst({ params, stats, modifier }: TalentProps) {\n  let modifiedStats = { ...stats };\n  if (modifiedStats.dmgBonus !== undefined) {\n    modifiedStats.dmgBonus += params[9];\n  } else {\n    modifiedStats.dmgBonus = params[9];\n  }\n\n  return [\n    burstBase({\n      description: 'explosionDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats: modifiedStats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  calculateTotalDamage,\n  chargedAttackMulti,\n  plungeAttackDefault,\n  skillBase,\n  skillMultiBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst keqingTalent: Talent = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalent;\n\nfunction keqingAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  for (let i = 0; i < 3; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentDamage.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit4Dmg = [];\n  for (let i = 3; i < 5; i++) {\n    hit4Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '4HitDmg',\n    damage: hit4Dmg,\n  });\n\n  let hit5Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[5],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentDamage.push({\n    description: `5HitDmg`,\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Physical,\n      params: params.slice(6, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction keqingSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['lightningStilettoDmg', 'slashingDmg'];\n  let talentDamage = descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDamage.push(\n    skillMultiBase({\n      description: 'thunderclapSlashDmg',\n      hits: 2,\n      element: Element.Electro,\n      params: [params[2], params[2]],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction keqingBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'burstInitDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  let consecutiveSlashDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: Element.Electro,\n    attackType: AttackType.Burst,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'consecutiveSlashDmg',\n    damage: Array(8).fill(consecutiveSlashDmg),\n  });\n\n  talentDamage.push(\n    burstBase({\n      description: 'lastAttackDmg',\n      element: Element.Electro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillDefault, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst sucroseTalent: Talent = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalent;\n\nfunction sucroseAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction sucroseSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction sucroseBurst({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n  talentValues.push(\n    burstBase({\n      description: 'dot',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[1],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentValues;\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  skillBase,\n  shieldBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, Element } from './types';\n\nconst xinyanTalent: Talent = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalent;\n\nfunction xinyanAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 4,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xinyanSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'swingDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  // Shields\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      shieldBase({\n        description: `shieldHpLevel${i + 1}`,\n        multiplier: params[2 * i + 1],\n        flatBonus: params[2 * i + 2],\n        element: Element.Pyro,\n        scalingType: ScalingType.Defense,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentDamage.push(\n    skillBase({\n      description: 'dot',\n      element: Element.Pyro,\n      multiplier: params[7],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction xinyanBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Physical,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'pyroDot',\n      element: Element.Pyro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  normalAttackMulti,\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillMultiBase,\n  burstMultiBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst rosariaTalent: Talent = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalent;\n\nfunction rosariaAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackMulti({\n      hits: [1, 1, 2, 1],\n      element: Element.Physical,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let hit5Dmg = [];\n  for (let i = 4; i < 6; i++) {\n    hit5Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '5HitDmg',\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackDefault({\n      element: Element.Physical,\n      params: params.slice(6, 7),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(8, 11),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction rosariaSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillMultiBase({\n      description: 'skillDmg',\n      hits: 2,\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction rosariaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstMultiBase({\n      description: 'burstDmg',\n      hits: 2,\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'iceLanceDot',\n      element: Element.Cryo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, TalentValue, Element } from './types';\n\nconst hutaoTalent: Talent = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalent;\n\nfunction hutaoAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 4,\n      element,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let hit5Dmg = [];\n  for (let i = 4; i < 6; i++) {\n    hit5Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '5HitDmg',\n    damage: hit5Dmg,\n  });\n\n  let hit6Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[6],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentDamage.push({\n    description: '6HitDmg',\n    damage: hit6Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackDefault({\n      element,\n      params: params.slice(7, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction hutaoSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'bloodBlossomDmg',\n      element: Element.Pyro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction hutaoBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage: TalentValue[] = [];\n\n  let dmgDescriptions = ['burstDmg', 'burstDmgLowHp'];\n  dmgDescriptions.forEach((description, i) => {\n    talentDamage.push(\n      burstBase({\n        description,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  });\n\n  let regenDescriptions = ['hpRegen', 'hpRegenLowHp'];\n  regenDescriptions.forEach((description, i) => {\n    talentDamage.push(\n      healingSkillBase({\n        description,\n        params: [params[i + 2], 0],\n        stats,\n        modifier,\n      })\n    );\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  chargedAttackMulti,\n  plungeAttackDefault,\n  skillBase,\n} from './TalentUtil';\nimport { AttackType, Element, TalentProps, TalentValue } from './types';\n\nconst kazuhaTalent: Talent = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalent;\n\nfunction kazuhaAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues: TalentValue[] = [];\n\n  // Normal attack\n  for (let i = 0; i < 2; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit3Dmg = [];\n  for (let i = 2; i < 4; i++) {\n    hit3Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentValues.push({\n    description: '3HitDmg',\n    damage: hit3Dmg,\n  });\n\n  let hit4Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[4],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentValues.push({\n    description: `4HitDmg`,\n    damage: hit4Dmg,\n  });\n\n  let hit5Dmg = [];\n  const hit5DmgSingle = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  for (let i = 0; i < 3; i++) {\n    hit5Dmg.push(hit5DmgSingle);\n  }\n  talentValues.push({\n    description: `5HitDmg`,\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentValues.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Physical,\n      params: params.slice(6, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: modifier.infusionPlunge ?? Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction kazuhaSkill({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['pressDmg', 'holdDmg'];\n  return descriptions.map((description, i) =>\n    skillBase({\n      description,\n      element: Element.Anemo,\n      multiplier: params[i * 2],\n      stats,\n      modifier,\n    })\n  );\n}\n\nfunction kazuhaBurst({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['slashingDmg', 'dot'];\n  let talentValues = descriptions.map((description, i) =>\n    burstBase({\n      description,\n      element: Element.Anemo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[2],\n        stats,\n        modifier,\n      })\n    );\n  }\n  return talentValues;\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  plungeAttackDefault,\n  skillDefault,\n  burstDefault,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst yanfeiTalent: Talent = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalent;\n\nfunction yanfeiAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 3,\n      element: Element.Pyro,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  for (let i = 0; i < 5; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i + 3],\n      element: Element.Pyro,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    talentDamage.push({\n      description: `chargedDmgSeal${i}`,\n      damage: [damage],\n    });\n  }\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Pyro,\n      params: params.slice(15, 18),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction yanfeiSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction yanfeiBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import { getTalentData, getTalentStatsAt } from '../Data';\nimport { defaultTalentFn } from './DefaultTalent';\nimport Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  normalAttackMulti,\n  plungeAttackDefault,\n} from './TalentUtil';\nimport { AttackType, Element, TalentProps, TalentType } from './types';\n\nconst yoimiyaTalent: Talent = {\n  attack: yoimiyaAttack,\n  skill: yoimiyaSkill,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalent;\n\nfunction yoimiyaAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n\n  // Normal attack\n  let normalAttackParams = params.slice(0, 5);\n  if (modifier.yoimiyaSkill) {\n    const skillParams = getTalentStatsAt(\n      TalentType.Skill,\n      modifier.talentSkillLevel,\n      getTalentData('yoimiya')\n    );\n    normalAttackParams = normalAttackParams.map(\n      (param) => param * skillParams[3]\n    );\n  }\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: [2, 1, 1, 2, 1],\n      element: modifier.infusion ?? Element.Physical,\n      params: normalAttackParams,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  let aimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentValues.push({\n    description: 'aimShotDmg',\n    damage: [aimedShotDmg],\n  });\n\n  let chargedAimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[6],\n    element: Element.Pyro,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'chargedAimShotDmg',\n    damage: [chargedAimedShotDmg],\n  });\n\n  let kindlingArrowDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[7],\n    element: Element.Pyro,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'kindlingArrowDmg',\n    damage: [kindlingArrowDmg],\n  });\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(8, 11),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction yoimiyaSkill({ params, stats, modifier }: TalentProps) {\n  return defaultTalentFn();\n}\n\nfunction yoimiyaBurst({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['burstDmg', 'aurousBlazeExplosionDmg'];\n\n  return descriptions.map((description, i) =>\n    burstBase({\n      description,\n      element: Element.Pyro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyMulti,\n  skillBase,\n  burstDefault,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst eulaTalent: Talent = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalent;\n\nfunction eulaAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyMulti({\n    normalHits: [1, 1, 2, 1, 2],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction eulaSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['pressDmg', 'holdDmg', 'icewhirlBrandDmg'];\n  return descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Cryo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n}\n\nfunction eulaBurst({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n  talentDmg.push(\n    ...burstDefault({\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let descriptions = ['lightfallSwordBaseDmg', 'lightfallSwordStackDmg'];\n  let lightfallSwordParams = params.slice(1, 3);\n  let lightfallSwordTalent = descriptions.map((description, i) => {\n    return burstBase({\n      description,\n      element: Element.Physical,\n      multiplier: lightfallSwordParams[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDmg.push(...lightfallSwordTalent);\n\n  return talentDmg;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport {\n  AttackType,\n  Element,\n  ScalingType,\n  TalentType,\n  TalentValue,\n} from './types';\nimport Resistance from '../Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { talents } from './Talent';\nimport Reaction from '../modifier/Reaction';\n\n// Function to get specified talent\nexport function getTalentFn(characterId: string, type: TalentType) {\n  return talents[characterId]?.[type] ?? talents.defaultTalent[type];\n}\n\n// Functions to calculate Talent Values\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\nfunction calculateAmplifyingMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\nfunction calculateReactionMultiplier({\n  reaction,\n  stats,\n  reactionBonus,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  reactionBonus: number;\n  element: Element;\n}) {\n  const amplifyingMultiplier = calculateAmplifyingMultiplier(reaction, element);\n  if (amplifyingMultiplier > 1) {\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingMultiplier * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: modifier.flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === 'crit') {\n    crit += stats.critDmg;\n  } else if (modifier.critType === 'average') {\n    let critRate = stats.critRate;\n    if (attackType === 'charged') {\n      critRate += stats.chargedCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    reactionBonus: 0,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  // TODO: Add healing bonus\n  return calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n}\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n// Used for all default normal attacks\nexport function normalAttackDefault({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues: TalentValue[] = [];\n  for (let i = 0; i < hits; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  return talentValues;\n}\n// Used for all normal attacks with multiple damage instances in 1 hit e.g. polearms\nexport function normalAttackMulti({\n  hits = [],\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits?: number[];\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = hits.map((hitCount, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n\n    let damages = [];\n    for (let hit = 0; hit < hitCount; hit++) {\n      damages.push(damage);\n    }\n\n    return {\n      description: `${i + 1}HitDmg`,\n      damage: damages,\n    } as TalentValue;\n  });\n\n  return talentValues;\n}\n// Used for all 1-hit charged attacks\nexport function chargedAttackDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return [\n    {\n      description: 'chargedDmg',\n      damage: [damage],\n    },\n  ] as TalentValue[];\n}\n// Used for multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n  for (let i = 0; i < hits; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return [\n    {\n      description: `chargedDmg`,\n      damage: damages,\n    },\n  ] as TalentValue[];\n}\n// Used for all default claymore charged attacks\nexport function chargedAttackHeavy({\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let descriptions = ['chargedSpinDmg', 'chargedFinalDmg'];\n  return descriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n\n    return {\n      description: description,\n      damage: [damage],\n    } as TalentValue;\n  });\n}\n// Used for all default plunge attacks\nexport function plungeAttackDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n  return descriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Plunge,\n      modifier,\n    });\n\n    return {\n      description: description,\n      damage: [damage],\n    } as TalentValue;\n  });\n}\n// Used for all default sword/polearm/catalyst attacks\nexport function attackLightDefault({\n  normalHits,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackDefault({\n      element,\n      params: params.slice(normalHits, normalHits + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits + 1 + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all default sword/polearm attacks with multi damage instances\nexport function attackLightMulti({\n  normalHits = [],\n  chargedHits = 1,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits?: number[];\n  chargedHits?: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits.length),\n      stats,\n      modifier,\n    })\n  );\n\n  if (chargedHits === 1) {\n    talentValues.push(\n      ...chargedAttackDefault({\n        element,\n        params: params.slice(normalHits.length, normalHits.length + 1),\n        stats,\n        modifier,\n      })\n    );\n  } else {\n    talentValues.push(\n      ...chargedAttackMulti({\n        hits: chargedHits,\n        element,\n        params: params.slice(\n          normalHits.length,\n          normalHits.length + chargedHits\n        ),\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits.length + chargedHits + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all default claymore attacks\nexport function attackHeavyDefault({\n  normalHits,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackHeavy({\n      element,\n      params: params.slice(normalHits, normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits + 2 + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all claymore attacks with multi damage instances\nexport function attackHeavyMulti({\n  normalHits = [],\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits?: number[];\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits.length),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackHeavy({\n      params: params.slice(normalHits.length, normalHits.length + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits.length + 2 + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all debault bow aim shots (include charged shots)\nfunction aimShotDefault({\n  chargedElement,\n  params,\n  stats,\n  modifier,\n}: {\n  chargedElement: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues: TalentValue[] = [];\n\n  let damage = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentValues.push({\n    description: 'aimShotDmg',\n    damage: [damage],\n  });\n\n  damage = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: chargedElement,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'chargedAimShotDmg',\n    damage: [damage],\n  });\n\n  return talentValues;\n}\n// Used for all default bow attacks\nexport function attackBowDefault({\n  normalHits,\n  chargedElement,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  chargedElement: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element: Element.Physical,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...aimShotDefault({\n      chargedElement,\n      params: params.slice(normalHits, normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Base function for all damage skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function skillBase({\n  description,\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  description: string;\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    element,\n    multiplier,\n    attackType: AttackType.Skill,\n    stats,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Used for all default skill that only does 1-hit elemental dmg\nexport function skillDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n// Base function for damage skills with multiple damage instances\nexport function skillMultiBase({\n  description,\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    description,\n    damage: damages,\n  } as TalentValue;\n}\n// Base function for all damage bursts. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function burstBase({\n  description,\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  description: string;\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    element,\n    multiplier,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Used for all default burst that only does 1-hit elemental dmg\nexport function burstDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n// Base function for bursts with multiple damage instances\nexport function burstMultiBase({\n  description,\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    description,\n    damage: damages,\n  } as TalentValue;\n}\n// Base function for all healing skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function healingSkillBase({\n  description,\n  scalingType = ScalingType.Hp,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  scalingType?: ScalingType;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateHealing({\n    stats,\n    multiplier: params[0],\n    flatHealing: params[1],\n    scalingType,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Base function for all shields/summon HP\nexport function hpBase({\n  description,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  description: string;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    description,\n    damage: [hp],\n  } as TalentValue;\n}\nexport function shieldBase({\n  description,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  description: string;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [dmgAbsorption],\n  } as TalentValue;\n}\n","import { Stats } from '../../data/types';\r\nimport Talent from './Talent';\r\nimport {\r\n  attackLightMulti,\r\n  burstBase,\r\n  burstMultiBase,\r\n  skillBase,\r\n} from './TalentUtil';\r\nimport { Element, TalentProps, TalentValue } from './types';\r\n\r\nconst raidenTalent: Talent = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalent;\r\n\r\nfunction raidenAttack({ params, stats, modifier }: TalentProps) {\r\n  return attackLightMulti({\r\n    normalHits: [1, 1, 1, 2, 1],\r\n    params: params.slice(0, 4).concat(params.slice(5)),\r\n    stats,\r\n    modifier,\r\n  });\r\n}\r\n\r\nfunction raidenSkill({ params, stats, modifier }: TalentProps) {\r\n  return [\r\n    skillBase({\r\n      description: 'skillDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n    skillBase({\r\n      description: 'coordinatedAtkDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n  ];\r\n}\r\n\r\nfunction raidenBurst({ params, stats, modifier }: TalentProps) {\r\n  let newStats: Stats = { ...stats };\r\n  const resolveBonus = params[1] + params[2] * (modifier.resolveStacks ?? 0);\r\n  newStats.dmgBonus = resolveBonus + (newStats.dmgBonus ?? 0);\r\n\r\n  let talentValues: TalentValue[] = [];\r\n\r\n  // Musou no Hitotachi\r\n  talentValues.push(\r\n    burstBase({\r\n      description: 'musouNoHitotachiDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[0],\r\n      stats: newStats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  /* Musou Isshin: assuming attacks are not considered normal, charged or plunge DMG */\r\n  // 1-3 hit\r\n  for (let i = 0; i < 3; i++) {\r\n    talentValues.push(\r\n      burstBase({\r\n        description: `${i + 1}HitDmg`,\r\n        element: Element.Electro,\r\n        multiplier: params[i + 4],\r\n        stats: newStats,\r\n        modifier,\r\n      })\r\n    );\r\n  }\r\n\r\n  // 4 hit\r\n  talentValues.push(\r\n    burstMultiBase({\r\n      description: '4HitDmg',\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: params.slice(7, 9),\r\n      stats: newStats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  // 5 hit\r\n  talentValues.push(\r\n    burstBase({\r\n      description: '5HitDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[9],\r\n      stats: newStats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  // Charged attack\r\n  talentValues.push(\r\n    burstMultiBase({\r\n      description: 'chargedDmg',\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: params.slice(10, 12),\r\n      stats: newStats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  // Plunge\r\n  let plungeDescriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\r\n  plungeDescriptions.forEach((description, i) => {\r\n    talentValues.push(\r\n      burstBase({\r\n        description,\r\n        element: Element.Electro,\r\n        multiplier: params[13 + i],\r\n        stats: newStats,\r\n        modifier,\r\n      })\r\n    );\r\n  });\r\n\r\n  return talentValues;\r\n}\r\n","import Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  chargedAttackHeavy,\n  healingSkillBase,\n  plungeAttackDefault,\n  skillBase,\n} from './TalentUtil';\nimport {\n  AttackType,\n  Element,\n  ScalingType,\n  TalentProps,\n  TalentValue,\n} from './types';\n\nconst sayuTalent: Talent = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalent;\n\nfunction sayuAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues: TalentValue[] = [];\n\n  // Normal attack\n  for (let i = 0; i < 2; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit3Dmg = [];\n  for (let i = 2; i < 4; i++) {\n    hit3Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentValues.push({\n    description: '3HitDmg',\n    damage: hit3Dmg,\n  });\n\n  let hit4Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[4],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentValues.push({\n    description: `4HitDmg`,\n    damage: hit4Dmg,\n  });\n\n  // Charged attack\n  talentValues.push(\n    ...chargedAttackHeavy({ params: params.slice(5, 7), stats, modifier })\n  );\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction sayuSkill({ params, stats, modifier }: TalentProps) {\n  const talentValues: TalentValue[] = [];\n\n  const skillDescriptions = [\n    'fuufuuWindwheelDmg',\n    'fuufuuWhirlwindKickPressDmg',\n    'fuufuuWhirlwindKickHoldDmg',\n  ];\n  const skillParams = [params[0], params[2], params[3]];\n\n  skillDescriptions.forEach((description, i) =>\n    talentValues.push(\n      skillBase({\n        description,\n        element: Element.Anemo,\n        multiplier: skillParams[i],\n        stats,\n        modifier,\n      })\n    )\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    const elementalAbsorption = modifier.elementalAbsorption;\n    const elementalDescriptions = [\n      'fuufuuWindwheelElementalDmg',\n      'fuufuuWhirlwindKickElementalDmg',\n    ];\n    const elementalParams = [params[1], params[4]];\n\n    elementalDescriptions.forEach((description, i) =>\n      talentValues.push(\n        skillBase({\n          description,\n          element: elementalAbsorption,\n          multiplier: elementalParams[i],\n          stats,\n          modifier,\n        })\n      )\n    );\n  }\n\n  return talentValues;\n}\n\nfunction sayuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'activationDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'activationHealing',\n      scalingType: ScalingType.Attack,\n      params: [params[2], params[1]],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'mujimujiDarumaDmg',\n      element: Element.Anemo,\n      multiplier: params[3],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'mujimujiDarumaHealing',\n      scalingType: ScalingType.Attack,\n      params: [params[5], params[4]],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  applyOnStats: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  applyOnModifier: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionPicker, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value !== '') {\n      const params = getArtifactSetBonusParams('archaicpetra', 4);\n      stats[`${this.value}DmgBonus`] =\n        params[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n    }\n  };\n}\n\nconst archaicPetraOptions = [ArchaicPetra4PcOption];\nexport default archaicPetraOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('berserker', 4);\n      stats.critRate = params[0] + (stats.critRate ?? 0);\n    }\n  };\n}\n\nconst berserkerOptions = [Berserker4PcOption];\nexport default berserkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n      stats.critRate = params[0] + (stats.critRate ?? 0);\n    }\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n      stats.critRate = params[1] + (stats.critRate ?? 0);\n    }\n  };\n}\n\nconst blizzardStrayerOptions = [\n  BlizzardStrayer4PcCryoOption,\n  BlizzardStrayer4PcFrozenOption,\n];\nexport default blizzardStrayerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BloodStainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n      stats.chargedDmgBonus = params[1] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst bloodstainedChivalryOptions = [BloodStainedChivalry4PcOption];\nexport default bloodstainedChivalryOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('braveheart', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  };\n}\n\nconst braveHeartOptions = [BraveHeart4PcOption];\nexport default braveHeartOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusData } from '../../Data';\nimport { IOptionNumber, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value > 0) {\n      const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n      const param = setBonusData[2].bonuses.find(\n        ({ stat }) => stat === 'pyroDmgBonus'\n      )?.value!!;\n\n      let stacks = this.value;\n      if (stacks > 3) stacks = 3;\n      stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n    }\n  };\n}\n\nconst crimsonWitchOptions = [CrimsonWitch4PcOption];\nexport default crimsonWitchOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('heartofdepth', 4);\n      stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst heartOfDepthOptions = [HeartOfDepth4PcOption];\nexport default heartOfDepthOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('instructor', 4);\n      stats.elementalMastery = params[1] + (stats.elementalMastery ?? 0);\n    }\n  };\n}\n\nconst instructorOptions = [Instructor4PcOption];\nexport default instructorOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('lavawalker', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  };\n}\n\nconst lavawalkerOptions = [Lavawalker4PcOption];\nexport default lavawalkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('maidenbeloved', 4);\n      stats.healedBonus = params[0] + (stats.healedBonus ?? 0);\n    }\n  };\n}\n\nconst maidenBelovedOptions = [MaidenBeloved4PcOption];\nexport default maidenBelovedOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('martialartist', 4);\n      stats.normalDmgBonus = params[2] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[2] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst martialArtistOptions = [MartialArtist4PcOption];\nexport default martialArtistOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('noblesseoblige', 4);\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n    }\n  };\n}\n\nconst noblesseObligeOptions = [NoblesseOblige4PcOption];\nexport default noblesseObligeOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionNumber, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    const params = getArtifactSetBonusParams('paleflame', 4);\n\n    if (this.value >= 1) {\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n    }\n\n    if (this.value >= 2) {\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      stats.physicalDmgBonus = params[3] + (stats.physicalDmgBonus ?? 0);\n    }\n  };\n}\n\nconst paleFlameOptions = [PaleFlame4PcOption];\nexport default paleFlameOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('retracingbolide', 4);\n      stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst retracingBolideOptions = [RetracingBolide4PcOption];\nexport default retracingBolideOptions;\n","import { Stats } from '../../../data/types';\nimport { getArtifactSetBonusData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport ArtifactSetOption from './ArtifactSetOption';\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const setBonusData = getArtifactSetBonusData('shimenawasreminiscence');\n      const param = setBonusData[4].bonusExtra.params[1];\n      stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n      stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n    }\n  };\n}\n\nconst shimenawaOptions = [Shimenawa4PcOption];\nexport default shimenawaOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      stats.shieldStrength = params[1] + (stats.shieldStrength ?? 0);\n    }\n  };\n}\n\nconst tenacityOptions = [Tenacity4PcOption];\nexport default tenacityOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('thundersoother', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  };\n}\n\nconst thundersootherOptions = [Thundersoother4PcOption];\nexport default thundersootherOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\n\nclass ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value !== '') {\n      const params = getArtifactSetBonusParams('viridescentvenerer', 4);\n      modifier.enemyResReduction.add(this.value as Element, params[1]);\n    }\n  };\n}\n\nconst viridescentVenererOptions = [ViridescentVenerer4PcOption];\nexport default viridescentVenererOptions;\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Cryo;\n    }\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Cryo;\n    }\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { Stats } from '../../../data/types';\nimport { getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n    }\n  };\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    _talentBurstLevel: number,\n    ascensionLevel: number\n  ) => {\n    if (this.value && ascensionLevel >= 4) {\n      const params = getTalentData('diluc').passives.find(\n        (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n      )?.params;\n      const pyroDmgBonus = params?.[1] ?? NaN;\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    }\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    talentSkillLevel: number,\n    _talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      let skillParams = getTalentStatsAt(\n        TalentType.Skill,\n        talentSkillLevel,\n        getTalentData('hutao')\n      );\n\n      const totalHp =\n        (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) + (stats.flatHp ?? 0);\n      stats.flatAtk = (stats.flatAtk ?? 0) + totalHp * skillParams[1];\n    }\n  };\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n    }\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value !== '') {\n      modifier.elementalAbsorption = this.value as Element;\n    }\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\nimport ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusionPlunge = Element.Anemo;\n    }\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      let burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('noelle')\n      );\n\n      const totalDef =\n        (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n        (stats.flatDef ?? 0);\n\n      stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n    }\n  };\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Geo;\n    }\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import { Stats } from '../../../data/types';\r\nimport { getTalentStatsAt, getTalentData } from '../../Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../Option';\r\nimport CharacterOption from './CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  applyOnStats = (\r\n    stats: Stats,\r\n    _talentAttackLevel: number,\r\n    talentSkillLevel: number,\r\n    _talentBurstLevel: number\r\n  ) => {\r\n    if (this.value) {\r\n      const params = getTalentStatsAt(\r\n        TalentType.Skill,\r\n        talentSkillLevel,\r\n        getTalentData('raiden')\r\n      );\r\n\r\n      const burstDmgBonus = params[3] * 90;\r\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n    }\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  applyOnModifier = (modifier: DamageModifier) => {\r\n    if (this.value < 0) modifier.resolveStacks = 0;\r\n    else if (this.value > 60) modifier.resolveStacks = 60;\r\n    else modifier.resolveStacks = this.value;\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import ayakaOptions from './AyakaOption';\nimport CharacterOption from './CharacterOption';\nimport chongyunOptions from './ChongyunOption';\nimport dilucOptions from './DilucOption';\nimport hutaoOptions from './HuTaoOption';\nimport kazuhaOptions from './KazuhaOption';\nimport noelleOptions from './NoelleOption';\nimport raidenOptions from './RaidenOption';\nimport sayuOptions from './SayuOption';\nimport sucroseOptions from './SucroseOption';\nimport ventiOptions from './VentiOption';\nimport xiaoOptions from './XiaoOption';\nimport yanfeiOptions from './YanfeiOption';\nimport yoimiyaOptions from './YoimiyaOption';\n\nexport { default as CharacterOption } from './CharacterOption';\n\nexport const characterOptions: Record<string, typeof CharacterOption[]> = {\n  ayaka: ayakaOptions,\n  diluc: dilucOptions,\n  venti: ventiOptions,\n  xiao: xiaoOptions,\n  noelle: noelleOptions,\n  chongyun: chongyunOptions,\n  sucrose: sucroseOptions,\n  hutao: hutaoOptions,\n  kazuha: kazuhaOptions,\n  yanfei: yanfeiOptions,\n  yoimiya: yoimiyaOptions,\n  raiden: raidenOptions,\n  sayu: sayuOptions,\n};\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      let burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('xiao')\n      );\n\n      stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n      stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n    }\n  };\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Anemo;\n    }\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      const burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('yanfei')\n      );\n      stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n      modifier.yoimiyaSkill = true;\n    }\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { artifactSetOptions } from './artifactSetOptions';\nimport { characterOptions } from './characterOptions';\nimport Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nconst defaultOptions: typeof Option[] = [];\n\nexport function getCharacterOptions(id: string) {\n  return characterOptions[id] ?? defaultOptions;\n}\n\nexport function getArtifactSetOptions(id: string) {\n  return artifactSetOptions[id] ?? defaultOptions;\n}\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).applyOnStats !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (\n    (option as unknown as IModifierApplicable).applyOnModifier !== undefined\n  );\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import { CharacterPassive, CharacterPassiveFn } from '../types';\nimport { raidenAscension4 } from './RaidenPassive';\nimport { yoimiyaAscension1 } from './YoimiyaPassive';\n\nconst characterPassives: Record<string, CharacterPassiveFn> = {\n  Yoimiya_PermanentSkill_1: yoimiyaAscension1,\n  Shougun_PermanentSkill_2: raidenAscension4,\n};\n\nfunction defaultPassiveFn(): CharacterPassive[] {\n  return [];\n}\n\nexport function getCharacterPassiveFn(passiveId: string) {\n  return characterPassives[passiveId] ?? defaultPassiveFn;\n}\n","import { Stats, TalentParams } from '../../../data/types';\nimport { CharacterOption } from '../../option/characterOptions';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../types';\n\nexport function yoimiyaAscension1(params: TalentParams): CharacterPassive {\n  class YoimiyaOptionAscension1\n    extends CharacterOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('yoimiyaAscension1');\n    }\n\n    applyOnStats = (stats: Stats) => {\n      let pyroDmgBonus = this.value * params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    };\n  }\n\n  return {\n    id: 'yoimiyaAscension1',\n    options: [YoimiyaOptionAscension1],\n  };\n}\n","import { Stats, TalentParams } from '../../../data/types';\r\nimport { CharacterPassive } from '../types';\r\n\r\nexport function raidenAscension4(params: TalentParams): CharacterPassive {\r\n  return {\r\n    id: 'raidenAscension4',\r\n    options: [],\r\n    statMixin: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  };\r\n}\r\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n  getTalentStatsAt,\n} from '../Data';\n\nimport { getTalentFn } from '../talent';\nimport { getCharacterOptions } from '../option';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../../data/types';\nimport type DamageModifier from '../modifier/DamageModifer';\nimport type { TalentType } from '../talent/types';\nimport { getCharacterPassiveFn } from '../passive/characterPassives/CharacterPassive';\nimport { CharacterOption } from '../option/characterOptions';\nimport { CharacterPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\n\nexport default class Character {\n  constructor(id: string, level: number, hasAscended: boolean) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Return an Object with description and damage properties\n  getTalentDamageAt({\n    type,\n    talentLevel,\n    totalStats,\n    modifier,\n  }: {\n    type: TalentType;\n    talentLevel: number;\n    totalStats: Stats;\n    modifier: DamageModifier;\n  }) {\n    if (this.talents === undefined) {\n      return [];\n    }\n\n    const params = getTalentStatsAt(type, talentLevel, this.talents);\n\n    let damageFn = getTalentFn(this.id, type);\n\n    let damage = damageFn({\n      params,\n      stats: totalStats,\n      modifier,\n    });\n\n    return damage;\n  }\n\n  getCharacterOptions() {\n    return getCharacterOptions(this.id).map((Option) => new Option());\n  }\n\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    if (this.talents === undefined) {\n      return [];\n    }\n\n    const passiveDatas = this.talents.passives;\n\n    return passiveDatas\n      .filter((passiveData) => ascensionLevel >= passiveData.ascensionLevel)\n      .flatMap((passiveData) =>\n        getCharacterPassiveFn(passiveData.id)(passiveData.params)\n      );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(ascensionLevel: number, prevAscensionLevel?: number) {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n\n    return characterOptions.concat(passiveOptions);\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from './artifact/Artifact';\nimport Character, { getAscensionLevel } from './character/Character';\nimport { talentDescMapping, optionMapping } from './Data';\nimport { StatMixin } from './option/Mixin';\nimport Weapon from './weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value: number, isPercentage: boolean) {\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputed value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../../data/types';\nimport { propMapping } from '../Data';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatValue } from '../Stat';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  options: typeof ArtifactSetOption[];\n  extraStatsFn?: ArtifactSetBonusFunction;\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stats } from '../../data/types';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  mainStat: InputStat = new InputStat();\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(type: ArtifactType) {\n    this.type = type;\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.setProp(prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.setValue(value);\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value;\n        } else {\n          stats[subStat.stat] = NaN;\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import React from 'react';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <input\n          type='number'\n          value={displayString}\n          onInput={this.handleInput}\n          className={this.props.className}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\n\nclass InputRow extends React.Component {\n  render() {\n    return <div className='input-row'>{this.props.children}</div>;\n  }\n}\n\nexport default InputRow;\n","import React from 'react';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <select\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={this.props.className}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </select>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../js/artifact/Artifact';\nimport { propMapping } from '../js/Data';\nimport { capitalize } from '../js/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactMainStatValue = (value: number) => {\n    this.props.artifact.setMainStatValue(value);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <p>Main Stat</p>\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label=''\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <FloatInput\n            id={`artifact-${artifact.type}-main-stat-value`}\n            label=''\n            defaultValue={NaN}\n            value={artifact.mainStat.rawValue}\n            onInput={this.setArtifactMainStatValue}\n            isLabelShown={false}\n            className='stat-input'\n          />\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import React from 'react';\n\ntype ColumnProps = {\n  className?: string;\n};\n\nclass Column extends React.Component<ColumnProps> {\n  render() {\n    return (\n      <div className={`column ${this.props.className ?? ''}`}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Column;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactBlock from './ArtifactBlock';\nimport Column from './Column';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Column className='input-column'>\n        <h2>Artifacts</h2>\n        {appState.artifacts.map((artifact) => (\n          <ArtifactBlock\n            artifact={artifact}\n            updateArtifactState={this.updateArtifactState}\n            key={artifact.type}\n          />\n        ))}\n      </Column>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <input\n          type='checkbox'\n          checked={value}\n          onChange={this.handleChange}\n          className={this.props.className}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../js/option';\nimport {\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n} from '../js/option/Option';\nimport { capitalize, getOptionName } from '../js/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport { ArtifactSetOption } from '../js/option/artifactSetOptions';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].id = id;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../js/character/Character';\nimport { CharacterOption } from '../js/option/characterOptions';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const character = this.props.appState.character;\n    character.id = id;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../js/modifier/CritType';\nimport Reaction from '../js/modifier/Reaction';\nimport Resistance from '../js/Resistance';\nimport { capitalize } from '../js/Stat';\nimport { Element } from '../js/talent/types';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  setReaction = (reaction: string) => {\n    this.props.updateTalentValues({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n    this.props.setAppState({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType, reaction } = this.props.appState;\n    return (\n      <div className='input-block'>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n\n        <InputRow>\n          <Picker\n            id='reaction-picker'\n            label='Reaction:'\n            defaultValue={Reaction.None}\n            value={reaction}\n            onChange={this.setReaction}\n          >\n            {Object.values(Reaction).map((reaction) => (\n              <Picker.Item\n                key={reaction}\n                label={capitalize(reaction)}\n                value={reaction}\n              />\n            ))}\n          </Picker>\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../Data';\nimport archaicPetraOptions from '../option/artifactSetOptions/ArchaicPetraOption';\nimport berserkerOptions from '../option/artifactSetOptions/BerserkerOption';\nimport blizzardStrayerOptions from '../option/artifactSetOptions/BlizzardStrayerOption';\nimport bloodstainedChivalryOptions from '../option/artifactSetOptions/BloodstainedChivalryOption';\nimport braveHeartOptions from '../option/artifactSetOptions/BraveHeartOption';\nimport crimsonWitchOptions from '../option/artifactSetOptions/CrimsonWitchOption';\nimport heartOfDepthOptions from '../option/artifactSetOptions/HeartOfDepthOption';\nimport instructorOptions from '../option/artifactSetOptions/InstructorOption';\nimport lavawalkerOptions from '../option/artifactSetOptions/LavawalkerOption';\nimport maidenBelovedOptions from '../option/artifactSetOptions/MaidenBelovedOption';\nimport martialArtistOptions from '../option/artifactSetOptions/MartialArtistOption';\nimport noblesseObligeOptions from '../option/artifactSetOptions/NoblesseObligeOption';\nimport paleFlameOptions from '../option/artifactSetOptions/PaleFlameOption';\nimport retracingBolideOptions from '../option/artifactSetOptions/RetracingBolideOption';\nimport shimenawaOptions from '../option/artifactSetOptions/ShimenawaOption';\nimport tenacityOptions from '../option/artifactSetOptions/TenacityOption';\nimport thundersootherOptions from '../option/artifactSetOptions/ThundersootherOption';\nimport viridescentVenererOptions from '../option/artifactSetOptions/ViridescentVenererOption';\nimport { ArtifactSetBonus } from './types';\n\n// Placeholder function\nconst defaultSetBonus: ArtifactSetBonus = { options: [] };\n\nconst Relic_ExtraAtkCritUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'chargedCritRate',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_AllElemResistUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    const elements = ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'];\n    return elements.map((element) => {\n      return {\n        stat: `${element}Res`,\n        value: params[0],\n      };\n    });\n  },\n};\n\nconst Relic_AtkAndExtraAtkUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'normalDmgBonus',\n        value: params[0],\n      },\n      {\n        stat: 'chargedDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_SkillDamageUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'skillDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_MeleeAttackUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    // Only for sword, polearm, claymore characters\n    // Did not make this an Option because this would likely not want to be disabled\n    // Calculation will be wrong if used on a catalyst, bow character\n    // Checking for that would require character weapon type to be implemented first\n    return [\n      {\n        stat: 'normalDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\n// Elemental Res shred implemented through Options\nconst Relic_ReactionWindEnhance: ArtifactSetBonus = {\n  options: viridescentVenererOptions,\n};\n\nconst Relci_RangerAttackUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    // Typo is present in the game data\n    // Only for catalyst, bow characters\n    // See Relic_MeleeAttackUp for more details\n    return [\n      {\n        stat: 'chargedDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\n// Pyro Dmg Bonus implemented through Options\nconst Relic_ReactionFireEnhance: ArtifactSetBonus = {\n  options: crimsonWitchOptions,\n};\n\nconst Relic_ElementalBurstUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'burstDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_ElementalBurstUpByChargeEfficiency: ArtifactSetBonus = {\n  options: [],\n\n  statMixin: (stats: Stats) => {\n    const params = getArtifactSetBonusParams('emblemofseveredfate', 4);\n    let burstDmgBonus = params[0] * stats.energyRecharge;\n    if (burstDmgBonus > params[1]) {\n      burstDmgBonus = params[1];\n    }\n\n    stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n  },\n};\n\nconst Relic_GiantKiller: ArtifactSetBonus = {\n  options: braveHeartOptions,\n};\n\nconst Relic_LowHPGainExtraCritRate: ArtifactSetBonus = {\n  options: berserkerOptions,\n};\n\nconst Relic_SkillEnhanceNormalAtkAndExtraAtk: ArtifactSetBonus = {\n  options: martialArtistOptions,\n};\n\nconst Relic_ReactionGainExtraElemMasteryForTeam: ArtifactSetBonus = {\n  options: instructorOptions,\n};\n\nconst Relic_CriticUpAgainstIceAndFrozen: ArtifactSetBonus = {\n  options: blizzardStrayerOptions,\n};\n\nconst Relic_DamageUpAgainstElectric: ArtifactSetBonus = {\n  options: thundersootherOptions,\n};\n\nconst Relic_DamageUpAgainstFireAndBurning: ArtifactSetBonus = {\n  options: lavawalkerOptions,\n};\n\nconst Relic_SkillEnhanceCured: ArtifactSetBonus = {\n  options: maidenBelovedOptions,\n};\n\nconst Relic_TeamAtkupAfterElementalBurst: ArtifactSetBonus = {\n  options: noblesseObligeOptions,\n};\n\nconst Relic_KillEnhanceExtraAtk: ArtifactSetBonus = {\n  options: bloodstainedChivalryOptions,\n};\n\nconst Relic_ElementDmgUpAfterCrystalShield: ArtifactSetBonus = {\n  options: archaicPetraOptions,\n};\n\nconst Relic_ShieldEnhanceAtk: ArtifactSetBonus = {\n  options: retracingBolideOptions,\n};\n\nconst Relic_WaterSkillEnhanceNormalAtkAndExtraAtk: ArtifactSetBonus = {\n  options: heartOfDepthOptions,\n};\n\nconst Relic_ShieldCostUpWhenElementalArtHit: ArtifactSetBonus = {\n  options: tenacityOptions,\n};\n\nconst Relic_AttackUpWhenNormalAtkAndExtraAtkHit: ArtifactSetBonus = {\n  options: paleFlameOptions,\n};\n\nconst Relic_NormalDamageUpIfCostEnergy: ArtifactSetBonus = {\n  options: shimenawaOptions,\n};\n\nexport const artifactSetBonuses: Record<string, ArtifactSetBonus> = {\n  defaultSetBonus,\n  Relic_ExtraAtkCritUp,\n  Relic_AllElemResistUp,\n  Relic_AtkAndExtraAtkUp,\n  Relic_SkillDamageUp,\n  Relic_MeleeAttackUp,\n  Relci_RangerAttackUp,\n  Relic_ElementalBurstUp,\n  Relic_ElementalBurstUpByChargeEfficiency,\n\n  // Options only\n  Relic_GiantKiller,\n  Relic_LowHPGainExtraCritRate,\n  Relic_SkillEnhanceNormalAtkAndExtraAtk,\n  Relic_ReactionGainExtraElemMasteryForTeam,\n  Relic_CriticUpAgainstIceAndFrozen,\n  Relic_DamageUpAgainstElectric,\n  Relic_DamageUpAgainstFireAndBurning,\n  Relic_SkillEnhanceCured,\n  Relic_TeamAtkupAfterElementalBurst,\n  Relic_KillEnhanceExtraAtk,\n  Relic_ElementDmgUpAfterCrystalShield,\n  Relic_ShieldEnhanceAtk,\n  Relic_WaterSkillEnhanceNormalAtkAndExtraAtk,\n  Relic_ShieldCostUpWhenElementalArtHit,\n  Relic_AttackUpWhenNormalAtkAndExtraAtkHit,\n  Relic_NormalDamageUpIfCostEnergy,\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n  Relic_ReactionWindEnhance,\n\n  // Reaction Dmg Up not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionFireEnhance,\n\n  // Not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionElectricEnhance: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Requires info about team composition\n  Relic_AbsorbTeamElemResist: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Probably can be implemented with a dropdown option for prev received elem dmg\n  Relic_ElemDmgEnhanceElemResist: defaultSetBonus,\n\n  // Not implemented. CD reduction effect.\n  Relic_KillingRefreshSkill: defaultSetBonus,\n\n  // Not implemented. Energy effect.\n  Relic_UltGainEnergyForTeam: defaultSetBonus,\n  Relic_RestoreEnergyGainExtraEnergyForTeam: defaultSetBonus,\n\n  // Not implemented. Healing effect when opening chests.\n  Relic_ChestHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when getting Mora.\n  Relic_CoinHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when burst.\n  Relic_UltHealSelf: defaultSetBonus,\n\n  // Not implemented. Element duration reduction.\n  Relic_FireResistance: defaultSetBonus,\n  Relic_WaterResistance: defaultSetBonus,\n  Relic_ElectricResistance: defaultSetBonus,\n  Relic_IceResistance: defaultSetBonus,\n};\n","import { getArtifactSetData, getArtifactSetBonusData } from '../Data';\nimport { artifactSetBonuses as extraBonuses } from './ArtifactSetBonus';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../../data/types';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces?: number) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.stats = this.getStats();\n    this.setBonuses = this.getSetBonuses();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.stats = this.getStats();\n    this.setBonuses = this.getSetBonuses();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n\n      // Special bonuses, has to be handled individually\n      let extraBonus = setBonus?.bonusExtra;\n      if (extraBonus !== undefined && extraBonus.type !== '') {\n        let extraBonusSet =\n          extraBonuses[extraBonus.type] ?? extraBonuses['defaultSetBonus'];\n\n        let params = extraBonus.params;\n\n        let extraStats = extraBonusSet.extraStatsFn?.(params) ?? [];\n\n        extraStats.forEach((statBonus) => {\n          if (stats[statBonus.stat] !== undefined) {\n            stats[statBonus.stat] += statBonus.value;\n          } else {\n            stats[statBonus.stat] = statBonus.value;\n          }\n        });\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap((setBonus) => setBonus.options);\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options)\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getSetBonuses(): ArtifactSetBonus[] {\n    const setBonusSets = this.setBonusSets;\n    return setBonusSets.map((setBonusSet) => {\n      const setBonusType = setBonusSet?.bonusExtra.type;\n      return extraBonuses[setBonusType] ?? extraBonuses['defaultSetBonus'];\n    });\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","import { AscensionBonus, StatCurveMapping, Stats } from '../../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n} from '../Data';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(id: string, level: number, hasAscended: boolean) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  stats: Stats = {};\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n}\n","import { AppState } from '../App';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport { ArtifactType, InputStat } from '../js/artifact/types';\nimport Character from '../js/character/Character';\nimport CritType from '../js/modifier/CritType';\nimport Reaction from '../js/modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../js/option';\nimport Resistance from '../js/Resistance';\nimport { Element } from '../js/talent/types';\nimport Weapon from '../js/weapon/Weapon';\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  characterOptions?: { id?: string; value?: unknown }[];\n  artifactSetOptions?: { id?: string; value?: unknown }[];\n}\n\nexport type Saves = Record<string, Save>;\n\ninterface ArtifactSave {\n  type?: ArtifactType;\n  mainStat?: InputStatSave;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n\n    artifacts: appState.artifacts.map((artifact) => {\n      return {\n        type: artifact.type,\n        mainStat: createInputStatSave(artifact.mainStat),\n        subStats: artifact.subStats.map((subStat) =>\n          createInputStatSave(subStat)\n        ),\n      };\n    }),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    characterOptions: appState.characterOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactSetOptions: appState.artifactSetOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n  };\n\n  return save;\n}\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const character = new Character(\n    save.characterId ?? '',\n    save.characterLevel ?? 1,\n    save.characterHasAscended ?? false\n  );\n  const weapon = new Weapon(\n    save.weaponId ?? '',\n    save.weaponLevel ?? 1,\n    save.weaponHasAscended ?? false\n  );\n\n  const artifacts =\n    save.artifacts?.map((savedArtifact, i) => {\n      const artifactType = savedArtifact.type ?? Object.values(ArtifactType)[i];\n      let artifact = new Artifact(artifactType);\n      artifact.mainStat = new InputStat(\n        savedArtifact.mainStat?.stat ?? '',\n        savedArtifact.mainStat?.value ?? NaN,\n        savedArtifact.mainStat?.rawValue ?? NaN\n      );\n      artifact.subStats =\n        savedArtifact.subStats?.map(\n          (subStat) =>\n            new InputStat(\n              subStat.stat ?? '',\n              subStat.value ?? NaN,\n              subStat.rawValue ?? NaN\n            )\n        ) ?? artifact.subStats;\n\n      return artifact;\n    }) ?? Object.values(ArtifactType).map((type) => new Artifact(type));\n\n  const artifactSets = save.artifactSets?.map(\n    (artifactSet) =>\n      new ArtifactSet(\n        artifactSet.artifactSetId ?? '',\n        artifactSet.artifactSetPieces ?? 0\n      )\n  ) ?? [new ArtifactSet(''), new ArtifactSet(''), new ArtifactSet('')];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, option.value);\n    }\n  });\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, option.value);\n    }\n  });\n\n  setAppState(\n    {\n      character,\n      weapon,\n      artifacts,\n      artifactSets,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      critType,\n      enemyLevel,\n      enemyRes,\n      reaction,\n      characterOptions,\n      artifactSetOptions,\n    },\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Form from 'react-bootstrap/esm/Form';\nimport Modal from 'react-bootstrap/esm/Modal';\nimport { AppState } from '../App';\nimport {\n  createSave,\n  addSave,\n  getSave,\n  loadSave,\n  Saves,\n  deleteSave,\n} from '../save/Save';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype SaveBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  refreshApp: () => void;\n};\n\ntype SaveBlockState = {\n  saves: Saves;\n  saveInputName: string;\n  selectedSave: string;\n  showDeleteWarning: boolean;\n};\n\nclass SaveBlock extends React.Component<SaveBlockProps, SaveBlockState> {\n  state: SaveBlockState;\n\n  constructor(props: SaveBlockProps) {\n    super(props);\n\n    // Populate local storage if empty\n    if (window.localStorage.getItem('saves') === null) {\n      window.localStorage.setItem('saves', '{}');\n    }\n\n    // Initialize saves in memory\n    const saves = JSON.parse(window.localStorage.getItem('saves') ?? '{}');\n    // Initialize state\n    this.state = {\n      saves,\n      saveInputName: '',\n      selectedSave: '',\n      showDeleteWarning: false,\n    };\n  }\n\n  onSaveClick = () => {\n    if (this.state.saveInputName !== '') {\n      const save = createSave(this.state.saveInputName, this.props.appState);\n      const saves = this.state.saves;\n      addSave(save, saves);\n      this.setState({ saves });\n    }\n  };\n\n  onSaveInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveInputName: e.target.value });\n  };\n\n  onLoadClick = () => {\n    if (this.state.selectedSave !== '') {\n      const save = getSave(this.state.selectedSave, this.state.saves);\n      if (save !== undefined) {\n        loadSave(save, this.props.setAppState, this.props.refreshApp);\n      }\n    }\n  };\n\n  onLoadInputChange = (value: string) => {\n    this.setState({ selectedSave: value });\n  };\n\n  onDeleteClick = () => {\n    if (this.state.selectedSave !== '') {\n      this.setState({ showDeleteWarning: true });\n    }\n  };\n\n  onModalConfirm = () => {\n    const saves = this.state.saves;\n    deleteSave(this.state.selectedSave, saves);\n    this.setState({ saves });\n\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onModalHide = () => {\n    this.setState({ showDeleteWarning: false });\n  };\n\n  render() {\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onSaveClick}>\n            Save\n          </Button>\n\n          <Form.Control\n            type='text'\n            size='sm'\n            placeholder='Save label (cannot be empty)'\n            onChange={this.onSaveInputChange}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onLoadClick}>\n            Load\n          </Button>\n\n          <Picker\n            id='save-picker'\n            label=''\n            defaultValue=''\n            value={this.state.selectedSave}\n            onChange={this.onLoadInputChange}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {Object.values(this.state.saves).map((save) => (\n              <Picker.Item\n                label={save.label}\n                value={save.label}\n                key={save.label}\n              />\n            ))}\n          </Picker>\n\n          <>\n            <Button variant='danger' size='sm' onClick={this.onDeleteClick}>\n              Delete\n            </Button>\n\n            <Modal\n              show={this.state.showDeleteWarning}\n              onHide={this.onModalHide}\n            >\n              <Modal.Body>\n                Are you sure you want to delete the save configuration? This\n                action is irreversible!\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={this.onModalHide}>\n                  Cancel\n                </Button>\n                <Button variant='danger' onClick={this.onModalConfirm}>\n                  Delete\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default SaveBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <div className='input-block'>\n        {' '}\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Weapon from '../js/weapon/Weapon';\nimport Checkbox from './Checkbox';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ weapon }: { weapon?: Weapon }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const weapon = this.props.appState.weapon;\n    weapon.id = id;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport Character from '../js/character/Character';\nimport CritType from '../js/modifier/CritType';\nimport { ArtifactSetOption } from '../js/option/artifactSetOptions';\nimport { CharacterOption } from '../js/option/characterOptions';\nimport Resistance from '../js/Resistance';\nimport Weapon from '../js/weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport Column from './Column';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport SaveBlock from './SaveBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  refreshApp: () => void;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n      refreshApp,\n    } = this.props;\n\n    return (\n      <Column className='input-column'>\n        <SaveBlock\n          appState={appState}\n          setAppState={setAppState}\n          refreshApp={refreshApp}\n        />\n\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n      </Column>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}:{' '}\n              {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../js/character/Character';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}:{' '}\n            {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}:{' '}\n                {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\nimport Weapon from '../js/weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}:{' '}\n            {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport Column from './Column';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Column className='stat-column'>\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Column>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../js/Data';\nimport { capitalize, getDamageDisplayValue } from '../js/Stat';\nimport { TalentType, TalentValue } from '../js/talent/types';\n\ntype TalentBlockProps = {\n  type: TalentType;\n  talentValues: TalentValue[];\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(this.props.type)}</h3>\n        {this.props.talentValues.map(({ description, damage }) => (\n          <p key={description}>\n            {talentDescMapping[description]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport Column from './Column';\nimport { TalentType, TalentValueSet } from '../js/talent/types';\nimport TalentBlock from './TalentBlock';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const { attack, skill, burst } = this.props.talentValues;\n\n    return (\n      <Column className='talent-column'>\n        <div className='result-block'>\n          <h2>Talents</h2>\n          <TalentBlock type={TalentType.Attack} talentValues={attack} />\n          <TalentBlock type={TalentType.Skill} talentValues={skill} />\n          <TalentBlock type={TalentType.Burst} talentValues={burst} />\n        </div>\n      </Column>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import React from 'react';\nimport './App.css';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport Column from './component/Column';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport { Stats } from './data/types';\nimport Artifact from './js/artifact/Artifact';\nimport ArtifactSet from './js/artifact/ArtifactSet';\nimport { ArtifactType } from './js/artifact/types';\nimport Character from './js/character/Character';\nimport CritType from './js/modifier/CritType';\nimport DamageModifier from './js/modifier/DamageModifer';\nimport Reaction from './js/modifier/Reaction';\nimport { isModifierApplicable, isStatsApplicable } from './js/option';\nimport { ArtifactSetOption } from './js/option/artifactSetOptions';\nimport { CharacterOption } from './js/option/characterOptions';\nimport { ModifierMixin, StatMixin } from './js/option/Mixin';\nimport { IModifierApplicable, IStatsApplicable } from './js/option/Option';\nimport Resistance from './js/Resistance';\nimport { getTotalStatsAt } from './js/Stat';\nimport { TalentType, TalentValueSet } from './js/talent/types';\nimport Weapon from './js/weapon/Weapon';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  characterOptions: CharacterOption[];\n  artifactSetOptions: ArtifactSetOption[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: new Character('', 1, false),\n    weapon: new Weapon('', 1, false),\n    artifacts: Object.values(ArtifactType).map((type) => new Artifact(type)),\n\n    artifactSets: [\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n    ],\n\n    enemyLevel: 1,\n    enemyDefReduction: 0,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    flatDmg: 0,\n    reaction: Reaction.None,\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    characterOptions: [],\n    artifactSetOptions: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = { attack: [], skill: [], burst: [] };\n\n  modifierMixins: ModifierMixin[] = [];\n  statMixins: StatMixin[] = [];\n\n  // Gets all modifier mixins and updates cache (modifierMixins)\n  getModifierMixins({\n    character,\n    characterOptions,\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined\n    ) {\n      return this.modifierMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveModifierMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getModifierMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.applyOnModifier);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.applyOnModifier);\n\n    this.modifierMixins = characterPassiveMixins\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(artifactSetOptionMixins);\n\n    return this.modifierMixins;\n  }\n\n  // Gets all stat mixins and updates cache (statMixins)\n  getStatMixins({\n    character,\n    characterOptions,\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      artifactSetOptions === undefined\n    ) {\n      return this.statMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveStatMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getStatMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.applyOnStats);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.applyOnStats);\n\n    this.statMixins = characterPassiveMixins\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(artifactSetOptionMixins);\n\n    return this.statMixins;\n  }\n\n  getDamageModifier({\n    characterLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n  }: {\n    characterLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    modifierMixins?: ModifierMixin[];\n  } = {}): DamageModifier {\n    const modifier: DamageModifier = {\n      characterLevel: characterLevel ?? this.state.character.level,\n      enemyLevel: enemyLevel ?? this.state.enemyLevel,\n      enemyDefReduction: this.state.enemyDefReduction,\n      enemyRes: enemyRes ?? this.state.enemyRes,\n      enemyResReduction: new Resistance(),\n      critType: critType ?? this.state.critType,\n      flatDmg: this.state.flatDmg,\n      reaction: reaction ?? this.state.reaction,\n      talentAttackLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n    };\n\n    // Apply modifier mixins\n    modifierMixins?.forEach((mixin) => mixin(modifier));\n\n    return modifier;\n  }\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = newArtifactSets\n      .map((artifactSet) => artifactSet.stats)\n      .reduce((acc, stats) => {\n        Object.entries(stats).forEach(([stat, value]) => {\n          acc[stat] = value + (acc[stat] ?? 0);\n        });\n        return acc;\n      }, {} as Stats);\n\n    this.updateTotalStats({\n      artifactSets,\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSets?: ArtifactSet[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const statMixins = this.getStatMixins({\n      character,\n      characterOptions,\n      artifactSets,\n      artifactSetOptions,\n    });\n\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel,\n      statMixins\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      characterOptions,\n      artifactSetOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    artifactSets?: ArtifactSet[];\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n\n    const modifierMixins = this.getModifierMixins({\n      character,\n      characterOptions,\n      artifactSets,\n      artifactSetOptions,\n    });\n\n    const damageModifer = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n    });\n\n    this.talentValues.attack = character.getTalentDamageAt({\n      type: TalentType.Attack,\n      talentLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n    this.talentValues.skill = character.getTalentDamageAt({\n      type: TalentType.Skill,\n      talentLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n    this.talentValues.burst = character.getTalentDamageAt({\n      type: TalentType.Burst,\n      talentLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n  };\n\n  refreshApp = () => {\n    this.getStatMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      artifactSetOptions: this.state.artifactSetOptions,\n    });\n    this.getModifierMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      artifactSetOptions: this.state.artifactSetOptions,\n    });\n\n    this.updateArtifactSetBonuses({});\n    this.setState({});\n  };\n\n  render() {\n    return (\n      <div className='app'>\n        <InputColumn\n          appState={this.state}\n          setAppState={this.setAppState}\n          updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n          updateTotalStats={this.updateTotalStats}\n          updateTalentValues={this.updateTalentValues}\n          refreshApp={this.refreshApp}\n        />\n        <ArtifactColumn\n          appState={this.state}\n          setAppState={this.setAppState}\n          updateTotalStats={this.updateTotalStats}\n        />\n        <StatColumn\n          appState={this.state}\n          totalStats={this.totalStats}\n          artifactSetBonuses={this.artifactSetBonuses}\n        />\n        <TalentColumn talentValues={this.talentValues} />\n        <Column></Column>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}