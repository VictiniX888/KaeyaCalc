{"version":3,"sources":["js/Data.ts","js/talent/types.ts","js/option/Option.ts","js/option/artifactSetOptions/ArtifactSetOption.ts","js/option/artifactSetOptions/ArchaicPetraOption.ts","js/option/artifactSetOptions/BerserkerOption.ts","js/option/artifactSetOptions/BlizzardStrayerOption.ts","js/option/artifactSetOptions/BloodstainedChivalryOption.ts","js/option/artifactSetOptions/BraveHeartOption.ts","js/option/artifactSetOptions/CrimsonWitchOption.ts","js/option/artifactSetOptions/HeartOfDepthOption.ts","js/option/artifactSetOptions/InstructorOption.ts","js/option/artifactSetOptions/LavawalkerOption.ts","js/option/artifactSetOptions/MaidenBelovedOption.ts","js/option/artifactSetOptions/MartialArtistOption.ts","js/option/artifactSetOptions/NoblesseObligeOption.ts","js/option/artifactSetOptions/PaleFlameOption.ts","js/option/artifactSetOptions/RetracingBolideOption.ts","js/option/artifactSetOptions/TenacityOption.ts","js/option/artifactSetOptions/ThundersootherOption.ts","js/option/artifactSetOptions/index.ts","js/option/artifactSetOptions/ViridescentVenererOption.ts","js/option/characterOptions/CharacterOption.ts","js/option/characterOptions/ChongyunOption.ts","js/option/characterOptions/DilucOption.ts","js/option/characterOptions/HuTaoOption.ts","js/option/characterOptions/NoelleOption.ts","js/option/characterOptions/index.ts","js/option/characterOptions/XiaoOption.ts","js/option/characterOptions/YanfeiOption.ts","js/option/OptionUtils.ts","js/Stat.ts","js/artifact/types.ts","js/artifact/Artifact.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/Picker.tsx","component/ArtifactBlock.tsx","component/Column.tsx","component/ArtifactColumn.tsx","component/ArtifactSetPicker.tsx","component/IntInput.tsx","component/Checkbox.tsx","component/OptionInput.tsx","component/ArtifactSetInputBlock.tsx","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","js/artifact/ArtifactSetBonus.ts","js/artifact/ArtifactSet.ts","js/Resistance.ts","js/talent/DefaultTalent.ts","js/talent/Talent.ts","js/talent/LisaTalent.ts","js/talent/BarbaraTalent.ts","js/talent/KaeyaTalent.ts","js/talent/DilucTalent.ts","js/talent/RazorTalent.ts","js/talent/AmberTalent.ts","js/talent/VentiTalent.ts","js/talent/XianglingTalent.ts","js/talent/BeidouTalent.ts","js/talent/XingqiuTalent.ts","js/talent/XiaoTalent.ts","js/talent/NingguangTalent.ts","js/talent/KleeTalent.ts","js/talent/ZhongliTalent.ts","js/talent/FischlTalent.ts","js/talent/BennettTalent.ts","js/talent/TartagliaTalent.ts","js/talent/NoelleTalent.ts","js/talent/QiqiTalent.ts","js/talent/ChongyunTalent.ts","js/talent/GanyuTalent.ts","js/talent/AlbedoTalent.ts","js/talent/DionaTalent.ts","js/talent/MonaTalent.ts","js/talent/KeqingTalent.ts","js/talent/SucroseTalent.ts","js/talent/XinyanTalent.ts","js/talent/RosariaTalent.ts","js/talent/HutaoTalent.ts","js/talent/YanfeiTalent.ts","js/talent/EulaTalent.ts","js/talent/TalentUtil.ts","js/modifier/CritType.ts","js/Character.ts","js/weapon/Weapon.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","TalentType","Element","AttackType","ScalingType","Option","this","ArtifactSetOption","threshold","archaicPetraOptions","value","choices","stats","berserkerOptions","critRate","blizzardStrayerOptions","bloodstainedChivalryOptions","chargedDmgBonus","braveHeartOptions","dmgBonus","crimsonWitchOptions","param","bonuses","find","stat","pyroDmgBonus","heartOfDepthOptions","normalDmgBonus","instructorOptions","elementalMastery","lavawalkerOptions","maidenBelovedOptions","healedBonus","martialArtistOptions","noblesseObligeOptions","atkBonus","paleFlameOptions","physicalDmgBonus","retracingBolideOptions","tenacityOptions","shieldStrength","thundersootherOptions","artifactSetOptions","braveheart","berserker","martialartist","instructor","blizzardstrayer","thundersoother","lavawalker","maidenbeloved","viridescentvenerer","Cryo","Electro","Hydro","Pyro","modifier","enemyResReduction","add","crimsonwitchofflames","noblesseoblige","bloodstainedchivalry","archaicpetra","retracingbolide","heartofdepth","tenacityofthemillelith","paleflame","CharacterOption","chongyunOptions","infusion","dilucOptions","hutaoOptions","_talentAttackLevel","talentSkillLevel","_talentBurstLevel","skillParams","Skill","flatAtk","flatHp","noelleOptions","_talentSkillLevel","talentBurstLevel","burstParams","Burst","totalDef","baseDef","defBonus","flatDef","Geo","characterOptions","diluc","xiao","plungeDmgBonus","Anemo","noelle","chongyun","hutao","yanfei","defaultOptions","getArtifactSetOptions","isStatsApplicable","option","applyOnStats","isModifierApplicable","applyOnModifier","getStatDisplayValue","isPercentage","isNaN","toFixed","Math","round","toString","getDamageDisplayValue","values","str","length","every","slice","forEach","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","talentAttackLevel","baseStats","characterStats","weaponStats","innateStats","Object","entries","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","totalStats","baseAtk","baseHp","hpBonus","critDmg","energyRecharge","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","skillDmgBonus","burstDmgBonus","chargedCritRate","capitalize","toUpperCase","concat","ArtifactType","InputStat","rawValue","Artifact","mainStat","subStats","prop","setProp","setValue","i","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","htmlFor","className","label","React","Component","FloatInput","parseFloat","InputRow","children","Picker","selectedValue","target","handleChange","onChange","Item","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactMainStatValue","setMainStatValue","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatValue","name","statObj","Column","ArtifactColumn","appState","updateTotalStats","setAppState","ArtifactSetPicker","setArtifactSetId","index","artifactSetId","sort","name1","name2","localeCompare","data","IntInput","Checkbox","checked","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","isBooleanOption","isPickerOption","choice","isNumberOption","ArtifactSetInputBlock","artifactSets","flatMap","artifactSet","options","updateArtifactSetBonuses","setArtifactSetPieces","console","log","CharacterPicker","setCharacterId","CharacterInputBlock","getOptions","setCharacterLevel","setIsCharacterAscended","isAscended","hasAscended","ModifierInputBlock","setEnemyLevel","updateTalentValues","enemyLevel","setEnemyRes","enemyRes","set","setCritType","critType","ToggleButtonGroup","size","ToggleButton","variant","element","get","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","weaponLevel","setIsWeaponAscended","InputColumn","ArtifactSetStatBlock","keys","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","talentValues","description","damage","TalentColumn","Attack","defaultSetBonus","Relic_ExtraAtkCritUp","Relic_AllElemResistUp","Relic_AtkAndExtraAtkUp","Relic_SkillDamageUp","Relic_MeleeAttackUp","Relci_RangerAttackUp","Relic_ElementalBurstUp","Relic_GiantKiller","Relic_LowHPGainExtraCritRate","Relic_SkillEnhanceNormalAtkAndExtraAtk","Relic_ReactionGainExtraElemMasteryForTeam","Relic_CriticUpAgainstIceAndFrozen","Relic_DamageUpAgainstElectric","Relic_DamageUpAgainstFireAndBurning","Relic_SkillEnhanceCured","Relic_TeamAtkupAfterElementalBurst","Relic_KillEnhanceExtraAtk","Relic_ElementDmgUpAfterCrystalShield","Relic_ShieldEnhanceAtk","Relic_WaterSkillEnhanceNormalAtkAndExtraAtk","Relic_ShieldCostUpWhenElementalArtHit","Relic_AttackUpWhenNormalAtkAndExtraAtkHit","Relic_ReactionWindEnhance","Relic_ReactionFireEnhance","Relic_ReactionElectricEnhance","Relic_AbsorbTeamElemResist","Relic_ElemDmgEnhanceElemResist","Relic_KillingRefreshSkill","Relic_UltGainEnergyForTeam","Relic_RestoreEnergyGainExtraEnergyForTeam","Relic_ChestHealSelf","Relic_CoinHealSelf","Relic_UltHealSelf","Relic_FireResistance","Relic_WaterResistance","Relic_ElectricResistance","Relic_IceResistance","ArtifactSet","_id","bonusThresholds","setBonuses","_pieces","getStatsAt","prevPieces","filter","getSetBonusesAt","setBonus","statBonus","extraBonus","extraBonuses","newOptions","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","Map","Physical","prevValue","defaultTalentFn","defaultTalent","lisa","attackLightDefault","normalHits","talentDmg","push","skillBase","multiplier","burstDefault","barbara","healingSkillBase","kaeya","attackLightMulti","chargedHits","skillDefault","attackHeavyDefault","talentDamage","burstBase","razor","attackParams","amber","attackBowDefault","chargedElement","hpBase","flatBonus","venti","xiangling","beidou","shieldBase","xingqiu","skillMultiBase","hits","ningguang","normalAtkDmg","calculateTotalDamage","attackType","Normal","chargedAttackDefault","starJadeDmg","Charged","plungeAttackDefault","klee","zhongli","fischl","bennett","tartaglia","riptideFlashDmg","riptideBurstDmg","normalAttackMulti","chargedAttackMulti","skillDamage","scalingType","Defense","qiqi","ganyu","normalAttackDefault","aimedShotDmg","chargedDmg","albedo","transientBlossomDmg","diona","holdModifier","dionaHoldSkill","mona","modifiedStats","keqing","hit4Dmg","hit5Dmg","consecutiveSlashDmg","sucrose","xinyan","rosaria","burstMultiBase","hit6Dmg","eula","chargedAttackHeavy","attackHeavyMulti","lightfallSwordParams","lightfallSwordTalent","calculateBaseDamage","flatDmg","Hp","baseDmg","getDamageBonus","crit","min","characterLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","calculateHp","hitCount","damages","hit","Plunge","aimShotDefault","flatHealing","calculateHealing","dmgAbsorption","calculateDmgAbsorption","CritType","Character","statCurveMapping","_level","_hasAscended","getInnateStatsAt","obj","charStatCurves","curve","bonus","talentLevel","getTalentFn","damageFn","getCharacterOptions","Weapon","rank","_weaponLevel","weaponStatCurves","App","None","reaction","callback","newArtifactSets","newChar","damageModifer","getDamageModifier","getTalentDamageAt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc212c71.chunk.js","sourcesContent":["import type * as Data from '../data/types';\nimport type { TalentType } from './talent/types';\n\nimport characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\nimport talentDataRaw from '../data/talentdata.json';\nimport artifactSetDataRaw from '../data/artifactsetdata.json';\nimport artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\n\nimport propMappingRaw from '../data/propmapping.json';\nimport talentDescMappingRaw from '../data/talentdescmapping.json';\nimport optionMappingRaw from '../data/optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonus>);\n}\n\n// Helper functions for accessing data properties\nfunction getData(id: string, dataObj: Record<string, any>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonus {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport interface TalentValue {\n  description: string;\n  damage: number[];\n}\n\nexport interface TalentValueSet {\n  attack: TalentValue[];\n  skill: TalentValue[];\n  burst: TalentValue[];\n}\n\nexport interface TalentProps {\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { Stats } from '../../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  applyOnStats: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number\n  ) => void;\n}\n\nexport interface IModifierApplicable {\n  applyOnModifier: (modifier: DamageModifier) => void;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionPicker, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value !== '') {\n      const params = getArtifactSetBonusParams('archaicpetra', 4);\n      stats[`${this.value}DmgBonus`] =\n        params[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n    }\n  }\n}\n\nconst archaicPetraOptions = [ArchaicPetra4PcOption];\nexport default archaicPetraOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('berserker', 4);\n      stats.critRate = params[0] + (stats.critRate ?? 0);\n    }\n  }\n}\n\nconst berserkerOptions = [Berserker4PcOption];\nexport default berserkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n      stats.critRate = params[0] + (stats.critRate ?? 0);\n    }\n  }\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n      stats.critRate = params[1] + (stats.critRate ?? 0);\n    }\n  }\n}\n\nconst blizzardStrayerOptions = [\n  BlizzardStrayer4PcCryoOption,\n  BlizzardStrayer4PcFrozenOption,\n];\nexport default blizzardStrayerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BloodStainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n      stats.chargedDmgBonus = params[1] + (stats.chargedDmgBonus ?? 0);\n    }\n  }\n}\n\nconst bloodstainedChivalryOptions = [BloodStainedChivalry4PcOption];\nexport default bloodstainedChivalryOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('braveheart', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  }\n}\n\nconst braveHeartOptions = [BraveHeart4PcOption];\nexport default braveHeartOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('crimsonWitch4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n      const param = setBonusData[2].bonuses.find(\n        ({ stat }) => stat === 'pyroDmgBonus'\n      )?.value!!;\n\n      stats.pyroDmgBonus = param / 2 + (stats.pyroDmgBonus ?? 0);\n    }\n  }\n}\n\nconst crimsonWitchOptions = [CrimsonWitch4PcOption];\nexport default crimsonWitchOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('heartofdepth', 4);\n      stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n    }\n  }\n}\n\nconst heartOfDepthOptions = [HeartOfDepth4PcOption];\nexport default heartOfDepthOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('instructor', 4);\n      stats.elementalMastery = params[1] + (stats.elementalMastery ?? 0);\n    }\n  }\n}\n\nconst instructorOptions = [Instructor4PcOption];\nexport default instructorOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('lavawalker', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  }\n}\n\nconst lavawalkerOptions = [Lavawalker4PcOption];\nexport default lavawalkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('maidenbeloved', 4);\n      stats.healedBonus = params[0] + (stats.healedBonus ?? 0);\n    }\n  }\n}\n\nconst maidenBelovedOptions = [MaidenBeloved4PcOption];\nexport default maidenBelovedOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('martialartist', 4);\n      stats.normalDmgBonus = params[2] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[2] + (stats.chargedDmgBonus ?? 0);\n    }\n  }\n}\n\nconst martialArtistOptions = [MartialArtist4PcOption];\nexport default martialArtistOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('noblesseoblige', 4);\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n    }\n  }\n}\n\nconst noblesseObligeOptions = [NoblesseOblige4PcOption];\nexport default noblesseObligeOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionNumber, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    const params = getArtifactSetBonusParams('paleflame', 4);\n\n    if (this.value >= 1) {\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n    }\n\n    if (this.value >= 2) {\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      stats.physicalDmgBonus = params[3] + (stats.physicalDmgBonus ?? 0);\n    }\n  }\n}\n\nconst paleFlameOptions = [PaleFlame4PcOption];\nexport default paleFlameOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('retracingbolide', 4);\n      stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n    }\n  }\n}\n\nconst retracingBolideOptions = [RetracingBolide4PcOption];\nexport default retracingBolideOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      stats.shieldStrength = params[1] + (stats.shieldStrength ?? 0);\n    }\n  }\n}\n\nconst tenacityOptions = [Tenacity4PcOption];\nexport default tenacityOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  applyOnStats(stats: Stats) {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('thundersoother', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  }\n}\n\nconst thundersootherOptions = [Thundersoother4PcOption];\nexport default thundersootherOptions;\n","import archaicPetraOptions from './ArchaicPetraOption';\nimport ArtifactSetOption from './ArtifactSetOption';\nimport berserkerOptions from './BerserkerOption';\nimport blizzardStrayerOptions from './BlizzardStrayerOption';\nimport bloodstainedChivalryOptions from './BloodstainedChivalryOption';\nimport braveHeartOptions from './BraveHeartOption';\nimport crimsonWitchOptions from './CrimsonWitchOption';\nimport heartOfDepthOptions from './HeartOfDepthOption';\nimport instructorOptions from './InstructorOption';\nimport lavawalkerOptions from './LavawalkerOption';\nimport maidenBelovedOptions from './MaidenBelovedOption';\nimport martialArtistOptions from './MartialArtistOption';\nimport noblesseObligeOptions from './NoblesseObligeOption';\nimport paleFlameOptions from './PaleFlameOption';\nimport retracingBolideOptions from './RetracingBolideOption';\nimport tenacityOptions from './TenacityOption';\nimport thundersootherOptions from './ThundersootherOption';\nimport viridescentVenererOptions from './ViridescentVenererOption';\n\nexport { default as ArtifactSetOption } from './ArtifactSetOption';\n\nexport const artifactSetOptions: Record<string, typeof ArtifactSetOption[]> = {\n  braveheart: braveHeartOptions,\n  berserker: berserkerOptions,\n  martialartist: martialArtistOptions,\n  instructor: instructorOptions,\n  blizzardstrayer: blizzardStrayerOptions,\n  thundersoother: thundersootherOptions,\n  lavawalker: lavawalkerOptions,\n  maidenbeloved: maidenBelovedOptions,\n  viridescentvenerer: viridescentVenererOptions,\n  crimsonwitchofflames: crimsonWitchOptions,\n  noblesseoblige: noblesseObligeOptions,\n  bloodstainedchivalry: bloodstainedChivalryOptions,\n  archaicpetra: archaicPetraOptions,\n  retracingbolide: retracingBolideOptions,\n  heartofdepth: heartOfDepthOptions,\n  tenacityofthemillelith: tenacityOptions,\n  paleflame: paleFlameOptions,\n};\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\n\nclass ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value !== '') {\n      const params = getArtifactSetBonusParams('viridescentvenerer', 4);\n      modifier.enemyResReduction.add(this.value as Element, params[1]);\n    }\n  }\n}\n\nconst viridescentVenererOptions = [ViridescentVenerer4PcOption];\nexport default viridescentVenererOptions;\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Cryo;\n    }\n  }\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionPyro');\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n    }\n  }\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  applyOnStats(\n    stats: Stats,\n    _talentAttackLevel: number,\n    talentSkillLevel: number,\n    _talentBurstLevel: number\n  ) {\n    if (this.value) {\n      let skillParams = getTalentStatsAt(\n        TalentType.Skill,\n        talentSkillLevel,\n        getTalentData('hutao')\n      );\n      stats.flatAtk += skillParams[1] * stats.flatHp;\n    }\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n    }\n  }\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  applyOnStats(\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) {\n    if (this.value) {\n      let burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('noelle')\n      );\n\n      const totalDef =\n        (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n        (stats.flatDef ?? 0);\n\n      stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n    }\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Geo;\n    }\n  }\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import CharacterOption from './CharacterOption';\nimport chongyunOptions from './ChongyunOption';\nimport dilucOptions from './DilucOption';\nimport hutaoOptions from './HuTaoOption';\nimport noelleOptions from './NoelleOption';\nimport xiaoOptions from './XiaoOption';\nimport yanfeiOptions from './YanfeiOption';\n\nexport { default as CharacterOption } from './CharacterOption';\n\nexport const characterOptions: Record<string, typeof CharacterOption[]> = {\n  diluc: dilucOptions,\n  xiao: xiaoOptions,\n  noelle: noelleOptions,\n  chongyun: chongyunOptions,\n  hutao: hutaoOptions,\n  yanfei: yanfeiOptions,\n};\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  applyOnStats(\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) {\n    if (this.value) {\n      let burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('xiao')\n      );\n\n      stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n      stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n    }\n  }\n\n  applyOnModifier(modifier: DamageModifier) {\n    if (this.value) {\n      modifier.infusion = Element.Anemo;\n    }\n  }\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  applyOnStats(\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) {\n    if (this.value) {\n      const burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('yanfei')\n      );\n      stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n    }\n  }\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import { artifactSetOptions } from './artifactSetOptions';\nimport { characterOptions } from './characterOptions';\nimport Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nconst defaultOptions: typeof Option[] = [];\n\nexport function getCharacterOptions(id: string) {\n  return characterOptions[id] ?? defaultOptions;\n}\n\nexport function getArtifactSetOptions(id: string) {\n  return artifactSetOptions[id] ?? defaultOptions;\n}\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).applyOnStats !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (\n    (option as unknown as IModifierApplicable).applyOnModifier !== undefined\n  );\n}\n","import { Stats } from '../data/types';\nimport Artifact from './artifact/Artifact';\nimport Character from './Character';\nimport { talentDescMapping, optionMapping } from './Data';\nimport { isStatsApplicable } from './option';\nimport CharacterOption from './option/characterOptions/CharacterOption';\nimport Weapon from './weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value: number, isPercentage: boolean) {\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputed value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  characterOptions: CharacterOption[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n\n  // Apply character options (only)\n  characterOptions.forEach((option) => {\n    if (isStatsApplicable(option)) {\n      option.applyOnStats(\n        totalStats,\n        talentAttackLevel,\n        talentSkillLevel,\n        talentBurstLevel\n      );\n    }\n  });\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../../data/types';\nimport { propMapping } from '../Data';\nimport { convertStatValue } from '../Stat';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n","import { Stats } from '../../data/types';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  mainStat: InputStat = new InputStat();\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(type: ArtifactType) {\n    this.type = type;\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.setProp(prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.setValue(value);\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value;\n        } else {\n          stats[subStat.stat] = NaN;\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import React from 'react';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <input\n          type='number'\n          value={displayString}\n          onInput={this.handleInput}\n          className={this.props.className}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\n\nclass InputRow extends React.Component {\n  render() {\n    return <div className='input-row'>{this.props.children}</div>;\n  }\n}\n\nexport default InputRow;\n","import React from 'react';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <select\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={this.props.className}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </select>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../js/artifact/Artifact';\nimport { propMapping } from '../js/Data';\nimport { capitalize } from '../js/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactMainStatValue = (value: number) => {\n    this.props.artifact.setMainStatValue(value);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <p>Main Stat</p>\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label=''\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <FloatInput\n            id={`artifact-${artifact.type}-main-stat-value`}\n            label=''\n            defaultValue={NaN}\n            value={artifact.mainStat.rawValue}\n            onInput={this.setArtifactMainStatValue}\n            isLabelShown={false}\n            className='stat-input'\n          />\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import React from 'react';\n\ntype ColumnProps = {\n  className?: string;\n};\n\nclass Column extends React.Component<ColumnProps> {\n  render() {\n    return (\n      <div className={`column ${this.props.className ?? ''}`}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Column;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactBlock from './ArtifactBlock';\nimport Column from './Column';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Column className='input-column'>\n        <h2>Artifacts</h2>\n        {appState.artifacts.map((artifact) => (\n          <ArtifactBlock\n            artifact={artifact}\n            updateArtifactState={this.updateArtifactState}\n            key={artifact.type}\n          />\n        ))}\n      </Column>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <input\n          type='checkbox'\n          checked={value}\n          onChange={this.handleChange}\n          className={this.props.className}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../js/option';\nimport {\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n} from '../js/option/Option';\nimport { capitalize, getOptionName } from '../js/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport { ArtifactSetOption } from '../js/option/artifactSetOptions';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].id = id;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n    console.log(artifactSetOptions);\n\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../js/Character';\nimport { CharacterOption } from '../js/option/characterOptions';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const character = this.props.appState.character;\n    character.id = id;\n    const characterOptions = character\n      .getOptions()\n      .map((Option) => new Option());\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    this.props.updateTotalStats({ character });\n    this.props.setAppState({ character });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    this.props.updateTotalStats({ character });\n    this.props.setAppState({ character });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../js/modifier/CritType';\nimport Resistance from '../js/Resistance';\nimport { capitalize } from '../js/Stat';\nimport { Element } from '../js/talent/types';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType } = this.props.appState;\n    return (\n      <div className='input-block'>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <div className='input-block'>\n        {' '}\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Weapon from '../js/weapon/Weapon';\nimport Checkbox from './Checkbox';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ weapon }: { weapon?: Weapon }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const weapon = this.props.appState.weapon;\n    weapon.id = id;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport Character from '../js/Character';\nimport CritType from '../js/modifier/CritType';\nimport { ArtifactSetOption } from '../js/option/artifactSetOptions';\nimport { CharacterOption } from '../js/option/characterOptions';\nimport Resistance from '../js/Resistance';\nimport Weapon from '../js/weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport Column from './Column';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n    } = this.props;\n\n    return (\n      <Column className='input-column'>\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n      </Column>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}:{' '}\n            {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../js/Character';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}:{' '}\n            {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}:{' '}\n                {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\nimport Weapon from '../js/weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}:{' '}\n            {getStatDisplayValue(value, propMapping[prop].isPercentage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport Column from './Column';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Column className='stat-column'>\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Column>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../js/Data';\nimport { capitalize, getDamageDisplayValue } from '../js/Stat';\nimport { TalentType, TalentValue } from '../js/talent/types';\n\ntype TalentBlockProps = {\n  type: TalentType;\n  talentValues: TalentValue[];\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(this.props.type)}</h3>\n        {this.props.talentValues.map(({ description, damage }) => (\n          <p key={description}>\n            {talentDescMapping[description]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport Column from './Column';\nimport { TalentType, TalentValueSet } from '../js/talent/types';\nimport TalentBlock from './TalentBlock';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const { attack, skill, burst } = this.props.talentValues;\n\n    return (\n      <Column className='talent-column'>\n        <div className='result-block'>\n          <h2>Talents</h2>\n          <TalentBlock type={TalentType.Attack} talentValues={attack} />\n          <TalentBlock type={TalentType.Skill} talentValues={skill} />\n          <TalentBlock type={TalentType.Burst} talentValues={burst} />\n        </div>\n      </Column>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import { ArtifactSetBonusFunction } from './types';\n\nexport const artifactSetBonuses: Record<string, ArtifactSetBonusFunction> = {\n  defaultSetBonus,\n  Relic_ExtraAtkCritUp,\n  Relic_AllElemResistUp,\n  Relic_AtkAndExtraAtkUp,\n  Relic_SkillDamageUp,\n  Relic_MeleeAttackUp,\n  Relci_RangerAttackUp,\n  Relic_ElementalBurstUp,\n\n  // Handled through Options\n  Relic_GiantKiller: defaultSetBonus,\n  Relic_LowHPGainExtraCritRate: defaultSetBonus,\n  Relic_SkillEnhanceNormalAtkAndExtraAtk: defaultSetBonus,\n  Relic_ReactionGainExtraElemMasteryForTeam: defaultSetBonus,\n  Relic_CriticUpAgainstIceAndFrozen: defaultSetBonus,\n  Relic_DamageUpAgainstElectric: defaultSetBonus,\n  Relic_DamageUpAgainstFireAndBurning: defaultSetBonus,\n  Relic_SkillEnhanceCured: defaultSetBonus,\n  Relic_TeamAtkupAfterElementalBurst: defaultSetBonus,\n  Relic_KillEnhanceExtraAtk: defaultSetBonus,\n  Relic_ElementDmgUpAfterCrystalShield: defaultSetBonus,\n  Relic_ShieldEnhanceAtk: defaultSetBonus,\n  Relic_WaterSkillEnhanceNormalAtkAndExtraAtk: defaultSetBonus,\n  Relic_ShieldCostUpWhenElementalArtHit: defaultSetBonus,\n  Relic_AttackUpWhenNormalAtkAndExtraAtkHit: defaultSetBonus,\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n  Relic_ReactionWindEnhance,\n\n  // Reaction Dmg Up not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionFireEnhance,\n\n  // Not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionElectricEnhance: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Requires info about team composition\n  Relic_AbsorbTeamElemResist: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Probably can be implemented with a dropdown option for prev received elem dmg\n  Relic_ElemDmgEnhanceElemResist: defaultSetBonus,\n\n  // Not implemented. CD reduction effect.\n  Relic_KillingRefreshSkill: defaultSetBonus,\n\n  // Not implemented. Energy effect.\n  Relic_UltGainEnergyForTeam: defaultSetBonus,\n  Relic_RestoreEnergyGainExtraEnergyForTeam: defaultSetBonus,\n\n  // Not implemented. Healing effect when opening chests.\n  Relic_ChestHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when getting Mora.\n  Relic_CoinHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when burst.\n  Relic_UltHealSelf: defaultSetBonus,\n\n  // Not implemented. Element duration reduction.\n  Relic_FireResistance: defaultSetBonus,\n  Relic_WaterResistance: defaultSetBonus,\n  Relic_ElectricResistance: defaultSetBonus,\n  Relic_IceResistance: defaultSetBonus,\n};\n\n// Placeholder function\nfunction defaultSetBonus() {\n  return [];\n}\n\nfunction Relic_ExtraAtkCritUp(params: number[]) {\n  return [\n    {\n      stat: 'chargedCritRate',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_AllElemResistUp(params: number[]) {\n  const elements = ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'];\n  return elements.map((element) => {\n    return {\n      stat: `${element}Res`,\n      value: params[0],\n    };\n  });\n}\n\nfunction Relic_AtkAndExtraAtkUp(params: number[]) {\n  return [\n    {\n      stat: 'normalDmgBonus',\n      value: params[0],\n    },\n    {\n      stat: 'chargedDmgBonus',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_SkillDamageUp(params: number[]) {\n  return [\n    {\n      stat: 'skillDmgBonus',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_MeleeAttackUp(params: number[]) {\n  // Only for sword, polearm, claymore characters\n  // Did not make this an Option because this would likely not want to be disabled\n  // Calculation will be wrong if used on a catalyst, bow character\n  // Checking for that would require character weapon type to be implemented first\n  return [\n    {\n      stat: 'normalDmgBonus',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_ReactionWindEnhance() {\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n\n  // Elemental Res shred implemented through Options\n  return defaultSetBonus();\n}\n\nfunction Relci_RangerAttackUp(params: number[]) {\n  // Typo is present in the game data\n  // Only for catalyst, bow characters\n  // See Relic_MeleeAttackUp for more details\n  return [\n    {\n      stat: 'chargedDmgBonus',\n      value: params[0],\n    },\n  ];\n}\n\nfunction Relic_ReactionFireEnhance() {\n  // Reaction Dmg Up not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n\n  // Pyro Dmg Bonus implemented through Options\n  return defaultSetBonus();\n}\n\nfunction Relic_ElementalBurstUp(params: number[]) {\n  return [\n    {\n      stat: 'burstDmgBonus',\n      value: params[0],\n    },\n  ];\n}\n","import { getArtifactSetData, getArtifactSetBonusData } from '../Data';\nimport { artifactSetBonuses as extraBonuses } from './ArtifactSetBonus';\nimport { getArtifactSetOptions } from '../option';\nimport { ArtifactSetBonus, Stats } from '../../data/types';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\n\nexport default class ArtifactSet {\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonuses = getArtifactSetBonusData(value);\n\n    this.options = this.getOptions(this.pieces);\n    this.stats = this.getStatsAt(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonuses?: ArtifactSetBonus;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n    this.options = this.getOptions(this.pieces, prevPieces);\n    this.stats = this.getStatsAt(this.pieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n\n  getSetBonusesAt(pieces: number) {\n    return this.bonusThresholds\n      ?.filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonuses?.[threshold]);\n  }\n\n  getStatsAt(pieces: number) {\n    let stats: Stats = {};\n\n    let setBonuses = this.getSetBonusesAt(pieces);\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n\n      // Special bonuses, has to be handled individually\n      let extraBonus = setBonus?.bonusExtra;\n      if (extraBonus !== undefined && extraBonus.type !== '') {\n        let bonusFn =\n          extraBonuses[extraBonus.type] ?? extraBonuses['defaultSetBonus'];\n\n        let params = extraBonus.params;\n\n        let statBonuses = bonusFn(params);\n\n        statBonuses.forEach((statBonus) => {\n          if (stats[statBonus.stat] !== undefined) {\n            stats[statBonus.stat] += statBonus.value;\n          } else {\n            stats[statBonus.stat] = statBonus.value;\n          }\n        });\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = getArtifactSetOptions(this.id);\n      return options\n        .map((Option) => new Option())\n        .filter((option) => option.threshold <= pieces);\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const newOptions = getArtifactSetOptions(this.id)\n        .map((Option) => new Option())\n        .filter(\n          (option) =>\n            option.threshold <= pieces && option.threshold > prevPieces\n        );\n\n      return this.options.concat(newOptions);\n    } else {\n      return this.options.filter((option) => option.threshold <= pieces);\n    }\n  }\n}\n","import { Element } from './talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","import Talent from './Talent';\nimport { TalentValue } from './types';\n\nconst defaultTalent: Talent = {\n  attack: defaultTalentFn,\n  skill: defaultTalentFn,\n  burst: defaultTalentFn,\n};\n\nexport default defaultTalent;\n\n// Placeholder function\nexport function defaultTalentFn(): TalentValue[] {\n  return [];\n}\n","import { TalentProps, TalentValue } from './types';\n\nimport defaultTalent from './DefaultTalent';\nimport lisaTalent from './LisaTalent';\nimport barbaraTalent from './BarbaraTalent';\nimport kaeyaTalent from './KaeyaTalent';\nimport dilucTalent from './DilucTalent';\nimport razorTalent from './RazorTalent';\nimport amberTalent from './AmberTalent';\nimport ventiTalent from './VentiTalent';\nimport xianglingTalent from './XianglingTalent';\nimport beidouTalent from './BeidouTalent';\nimport xingqiuTalent from './XingqiuTalent';\nimport xiaoTalent from './XiaoTalent';\nimport ningguangTalent from './NingguangTalent';\nimport kleeTalent from './KleeTalent';\nimport zhongliTalent from './ZhongliTalent';\nimport fischlTalent from './FischlTalent';\nimport bennettTalent from './BennettTalent';\nimport tartagliaTalent from './TartagliaTalent';\nimport noelleTalent from './NoelleTalent';\nimport qiqiTalent from './QiqiTalent';\nimport chongyunTalent from './ChongyunTalent';\nimport ganyuTalent from './GanyuTalent';\nimport albedoTalent from './AlbedoTalent';\nimport dionaTalent from './DionaTalent';\nimport monaTalent from './MonaTalent';\nimport keqingTalent from './KeqingTalent';\nimport sucroseTalent from './SucroseTalent';\nimport xinyanTalent from './XinyanTalent';\nimport rosariaTalent from './RosariaTalent';\nimport hutaoTalent from './HutaoTalent';\nimport yanfeiTalent from './YanfeiTalent';\nimport eulaTalent from './EulaTalent';\n\nexport default interface Talent {\n  attack: (props: TalentProps) => TalentValue[];\n  skill: (props: TalentProps) => TalentValue[];\n  burst: (props: TalentProps) => TalentValue[];\n}\n\nexport const talents: Record<string, Talent> = {\n  defaultTalent,\n  lisa: lisaTalent,\n  barbara: barbaraTalent,\n  kaeya: kaeyaTalent,\n  diluc: dilucTalent,\n  razor: razorTalent,\n  amber: amberTalent,\n  venti: ventiTalent,\n  xiangling: xianglingTalent,\n  beidou: beidouTalent,\n  xingqiu: xingqiuTalent,\n  xiao: xiaoTalent,\n  ningguang: ningguangTalent,\n  klee: kleeTalent,\n  zhongli: zhongliTalent,\n  fischl: fischlTalent,\n  bennett: bennettTalent,\n  tartaglia: tartagliaTalent,\n  noelle: noelleTalent,\n  qiqi: qiqiTalent,\n  chongyun: chongyunTalent,\n  ganyu: ganyuTalent,\n  albedo: albedoTalent,\n  diona: dionaTalent,\n  mona: monaTalent,\n  keqing: keqingTalent,\n  sucrose: sucroseTalent,\n  xinyan: xinyanTalent,\n  rosaria: rosariaTalent,\n  hutao: hutaoTalent,\n  yanfei: yanfeiTalent,\n  eula: eulaTalent,\n};\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst lisaTalent: Talent = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalent;\n\nfunction lisaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction lisaSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  talentDmg.push(\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Electro,\n      multiplier: params[5],\n      stats,\n      modifier,\n    })\n  );\n\n  for (let i = 0; i <= 3; i++) {\n    talentDmg.push(\n      skillBase({\n        description: `holdDmgStack${i}`,\n        element: Element.Electro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDmg;\n}\n\nfunction lisaBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackLightDefault, healingSkillBase, skillBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst barbaraTalent: Talent = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalent;\n\nfunction barbaraAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Hydro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction barbaraSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      params: params.slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenOnHit',\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'dropletDmg',\n      element: Element.Hydro,\n      multiplier: params[4],\n      stats,\n      modifier,\n    }),\n  ];\n\n  return talentDmg;\n}\n\nfunction barbaraBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    healingSkillBase({\n      description: 'hpRegen',\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillDefault, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst kaeyaTalent: Talent = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalent;\n\nfunction kaeyaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kaeyaSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kaeyaBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackHeavyDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst dilucTalent: Talent = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalent;\n\nfunction dilucAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction dilucSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      skillBase({\n        description: `${i + 1}HitDmg`,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDamage;\n}\n\nfunction dilucBurst({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['slashingDmg', 'dot', 'explosionDmg'];\n  let talentDamage = descriptions.map((description, i) => {\n    return burstBase({\n      description,\n      element: Element.Pyro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  return talentDamage;\n}\n","import { getTalentStatsAt, getTalentData } from '../Data';\nimport Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  skillBase,\n  burstDefault,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, TalentType, Element } from './types';\n\nconst razorTalent: Talent = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalent;\n\nfunction razorAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 4,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction razorSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['pressDmg', 'holdDmg'];\n  return descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n}\n\nfunction razorBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = burstDefault({\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n\n  let attackParams = getTalentStatsAt(\n    TalentType.Attack,\n    modifier.talentAttackLevel,\n    getTalentData('razor')\n  );\n\n  for (let i = 0; i < 4; i++) {\n    talentDamage.push(\n      burstBase({\n        description: `${i + 1}HitDmgSoulCompanion`,\n        element: Element.Electro,\n        multiplier: params[1] * attackParams[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, hpBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst amberTalent: Talent = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalent;\n\nfunction amberAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction amberSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Electro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    hpBase({\n      description: 'baronBunnyHp',\n      multiplier: params[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction amberBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'dmgPerWave',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push({\n    description: 'totalDmg',\n    damage: [talentDamage[0].damage[0] * 18],\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst ventiTalent: Talent = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalent;\n\nfunction ventiAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 6,\n    chargedElement: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction ventiSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'holdDmg',\n      element: Element.Anemo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction ventiBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'dot',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    // Not sure how the elemental absorption dmg is calculated\n    burstBase({\n      description: 'dotElementalAbsorption',\n      element: Element.Anemo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xianglingTalent: Talent = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalent;\n\nfunction xianglingAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 4, 1],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xianglingSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'guobaDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction xianglingBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      burstBase({\n        description: `swing${i + 1}HitDmg`,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentDamage.push(\n    burstBase({\n      description: 'pyronadoDmg',\n      element: Element.Pyro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  shieldBase,\n  skillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst beidouTalent: Talent = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalent;\n\nfunction beidouAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 5,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction beidouSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[0],\n      flatBonus: params[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'baseDmg',\n      element: Element.Electro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'dmgBonusOnHitTaken',\n      element: Element.Electro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction beidouBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'skillDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    burstBase({\n      description: 'lightningDmg',\n      element: Element.Electro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillMultiBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xingqiuTalent: Talent = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalent;\n\nfunction xingqiuAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 1, 2],\n    chargedHits: 2,\n    params: params\n      .slice(0, 3)\n      .concat(params.slice(4, 6))\n      .concat(params.slice(7)),\n    stats,\n    modifier,\n  });\n}\n\nfunction xingqiuSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillMultiBase({\n      description: 'skillDmg',\n      hits: 2,\n      element: Element.Hydro,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction xingqiuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'swordRainDmg',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import { defaultTalentFn } from './DefaultTalent';\nimport Talent from './Talent';\nimport { attackLightMulti, skillDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xiaoTalent: Talent = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n  burst: xiaoBurst,\n};\n\nexport default xiaoTalent;\n\nfunction xiaoAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  return attackLightMulti({\n    normalHits: [2, 1, 1, 2, 1, 1],\n    element,\n    params: params.slice(1, 5).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction xiaoSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xiaoBurst({ params, stats, modifier }: TalentProps) {\n  return defaultTalentFn();\n}\n","import Talent from './Talent';\nimport {\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillBase,\n  hpBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst ningguangTalent: Talent = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalent;\n\nfunction ningguangAttack({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  // Ningguang's normal attack has no combo\n  let normalAtkDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element: Element.Geo,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'normalAtkDmg',\n    damage: [normalAtkDmg],\n  });\n\n  talentDmg.push(\n    ...chargedAttackDefault({\n      element: Element.Geo,\n      params: params.slice(1, 2),\n      stats,\n      modifier,\n    })\n  );\n\n  // Ningguang's charged attack dmg per star jade\n  let starJadeDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[2],\n    element: Element.Geo,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'starJadeDmg',\n    damage: [starJadeDmg],\n  });\n\n  talentDmg.push(\n    ...plungeAttackDefault({\n      element: Element.Geo,\n      params: params.slice(4),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDmg;\n}\n\nfunction ningguangSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    hpBase({\n      description: 'jadeScreenHp',\n      multiplier: params[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction ningguangBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'dmgPerGem',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst kleeTalent: Talent = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalent;\n\nfunction kleeAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 3,\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kleeSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'jumpyDumptyDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'mineDmg',\n      element: Element.Pyro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction kleeBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'sparksNSplashDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  shieldBase,\n  burstDefault,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst zhongliTalent: Talent = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalent;\n\nfunction zhongliAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 4, 1],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction zhongliSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['stoneSteeleDmg', 'resonanceDmg'];\n\n  let talentDamage = descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Geo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDamage.push(\n    skillBase({\n      description: 'holdDmg',\n      element: Element.Geo,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[5],\n      flatBonus: params[4],\n      element: Element.Geo,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction zhongliBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Geo,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst fischlTalent: Talent = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalent;\n\nfunction fischlAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction fischlSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['ozDmg', 'summoningDmg'];\n  return descriptions.map((description, i) =>\n    skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n}\n\nfunction fischlBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'fallingThunderDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  skillMultiBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst bennettTalent: Talent = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalent;\n\nfunction bennettAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction bennettSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillMultiBase({\n      description: 'chargeLevel1Dmg',\n      hits: 2,\n      element: Element.Pyro,\n      params: params.slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n    skillMultiBase({\n      description: 'chargeLevel2Dmg',\n      hits: 2,\n      element: Element.Pyro,\n      params: params.slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Pyro,\n      multiplier: params[5],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction bennettBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuousPerSecond',\n      params: params.slice(1, 3),\n      stats,\n      modifier,\n    }),\n  ];\n\n  // ATK Bonus\n  let atkBonus = stats.baseAtk * params[3];\n  talentDamage.push({\n    description: 'atkBonus',\n    damage: [atkBonus],\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  attackBowDefault,\n  calculateTotalDamage,\n  skillBase,\n  normalAttackMulti,\n  chargedAttackMulti,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst tartagliaTalent: Talent = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalent;\n\nfunction tartagliaAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = attackBowDefault({\n    normalHits: 6,\n    chargedElement: Element.Hydro,\n    params: params.slice(0, 8).concat(params.slice(10)),\n    stats,\n    modifier,\n  });\n\n  let riptideFlashDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[8],\n    element: Element.Hydro,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'riptideFlashDmg',\n    damage: [riptideFlashDmg],\n  });\n\n  let riptideBurstDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[9],\n    element: Element.Hydro,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'riptideBurstDmg',\n    damage: [riptideBurstDmg],\n  });\n\n  return talentDamage;\n}\n\nfunction tartagliaSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'stanceChangeDmg',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    ...normalAttackMulti({\n      hits: [1, 1, 1, 1, 1, 2],\n      element: Element.Hydro,\n      params: params.slice(1, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: params.slice(8, 10),\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'riptideSlashDmg',\n      element: Element.Hydro,\n      multiplier: params[10],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction tartagliaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmgMelee',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'burstDmgRanged',\n      element: Element.Hydro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'riptideBlastDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  calculateTotalDamage,\n  shieldBase,\n  healingSkillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, AttackType, Element } from './types';\n\nconst noelleTalent: Talent = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalent;\n\nfunction noelleAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction noelleSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  let skillDamage = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Geo,\n    scalingType: ScalingType.Defense,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'skillDmg',\n    damage: [skillDamage],\n  });\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[0],\n      flatBonus: params[6],\n      element: Element.Geo,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    healingSkillBase({\n      description: 'healing',\n      params: [params[1], params[7]],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction noelleBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstInitDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'firstSwingDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  healingSkillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, Element } from './types';\n\nconst qiqiTalent: Talent = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalent;\n\nfunction qiqiAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 2, 1],\n    chargedHits: 2,\n    params: params.slice(0, 6).concat(params[5]).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction qiqiSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Cryo,\n      multiplier: params[7],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'heraldOfFrostDmg',\n      element: Element.Cryo,\n      multiplier: params[4],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenOnHit',\n      scalingType: ScalingType.Attack,\n      params: params.slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      scalingType: ScalingType.Attack,\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction qiqiBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Cryo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'healing',\n      scalingType: ScalingType.Attack,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackHeavyDefault, skillDefault, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst chongyunTalent: Talent = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalent;\n\nfunction chongyunAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction chongyunSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params: params,\n    stats,\n    modifier,\n  });\n}\n\nfunction chongyunBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Cryo,\n    params: params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  plungeAttackDefault,\n  skillBase,\n  hpBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst ganyuTalent: Talent = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalent;\n\nfunction ganyuAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 6,\n      element: Element.Physical,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  let aimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[6],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'aimShotDmg',\n    damage: [aimedShotDmg],\n  });\n\n  let chargedDescriptions = [\n    'aimShotChargeLevel1',\n    'frostflakeArrowDmg',\n    'frostflakeArrowBloomDmg',\n  ];\n  let chargedDmg = chargedDescriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i + 7],\n      element: Element.Cryo,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n\n    return {\n      description,\n      damage: [damage],\n    };\n  });\n  talentDamage.push(...chargedDmg);\n\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(10),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction ganyuSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    hpBase({\n      description: 'iceLotusHp',\n      multiplier: params[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction ganyuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'iceShardDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  calculateTotalDamage,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, AttackType, Element } from './types';\n\nconst albedoTalent: Talent = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalent;\n\nfunction albedoAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction albedoSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  talentDmg.push(\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  let transientBlossomDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: Element.Geo,\n    scalingType: ScalingType.Defense,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'transientBlossomDmg',\n    damage: [transientBlossomDmg],\n  });\n\n  return talentDmg;\n}\n\nfunction albedoBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'fatalBlossomDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackBowDefault,\n  skillBase,\n  shieldBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst dionaTalent: Talent = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalent;\n\nfunction dionaAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Cryo,\n    params: params.slice(0, 5).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction dionaSkill({ params, stats, modifier }: TalentProps) {\n  let holdModifier = {\n    ...modifier,\n    dionaHoldSkill: true,\n  };\n\n  return [\n    skillBase({\n      description: 'icyPawDmgPerPaw',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    shieldBase({\n      description: 'shieldHpPress',\n      multiplier: params[1],\n      flatBonus: params[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n    shieldBase({\n      description: 'shieldHpHold',\n      multiplier: params[1],\n      flatBonus: params[2],\n      element: Element.Cryo,\n      stats,\n      modifier: holdModifier,\n    }),\n  ];\n}\n\nfunction dionaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'continuousFieldDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuousTime',\n      params: params.slice(2),\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst monaTalent: Talent = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalent;\n\nfunction monaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Hydro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction monaSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'dot',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction monaBurst({ params, stats, modifier }: TalentProps) {\n  let modifiedStats = { ...stats };\n  if (modifiedStats.dmgBonus !== undefined) {\n    modifiedStats.dmgBonus += params[9];\n  } else {\n    modifiedStats.dmgBonus = params[9];\n  }\n\n  return [\n    burstBase({\n      description: 'explosionDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats: modifiedStats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  calculateTotalDamage,\n  chargedAttackMulti,\n  plungeAttackDefault,\n  skillBase,\n  skillMultiBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst keqingTalent: Talent = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalent;\n\nfunction keqingAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  for (let i = 0; i < 3; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentDamage.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit4Dmg = [];\n  for (let i = 3; i < 5; i++) {\n    hit4Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '4HitDmg',\n    damage: hit4Dmg,\n  });\n\n  let hit5Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[5],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentDamage.push({\n    description: `5HitDmg`,\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Physical,\n      params: params.slice(6, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction keqingSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['lightningStilettoDmg', 'slashingDmg'];\n  let talentDamage = descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDamage.push(\n    skillMultiBase({\n      description: 'thunderclapSlashDmg',\n      hits: 2,\n      element: Element.Electro,\n      params: [params[2], params[2]],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction keqingBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'burstInitDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  let consecutiveSlashDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: Element.Electro,\n    attackType: AttackType.Burst,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'consecutiveSlashDmg',\n    damage: Array(8).fill(consecutiveSlashDmg),\n  });\n\n  talentDamage.push(\n    burstBase({\n      description: 'lastAttackDmg',\n      element: Element.Electro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillDefault, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst sucroseTalent: Talent = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalent;\n\nfunction sucroseAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction sucroseSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction sucroseBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'dot',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    // Not sure how the elemental absorption dmg is calculated\n    burstBase({\n      description: 'dotElementalAbsorption',\n      element: Element.Anemo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  skillBase,\n  shieldBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, Element } from './types';\n\nconst xinyanTalent: Talent = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalent;\n\nfunction xinyanAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 4,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xinyanSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'swingDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  // Shields\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      shieldBase({\n        description: `shieldHpLevel${i + 1}`,\n        multiplier: params[2 * i + 1],\n        flatBonus: params[2 * i + 2],\n        element: Element.Pyro,\n        scalingType: ScalingType.Defense,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentDamage.push(\n    skillBase({\n      description: 'dot',\n      element: Element.Pyro,\n      multiplier: params[7],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction xinyanBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Physical,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'pyroDot',\n      element: Element.Pyro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  normalAttackMulti,\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillMultiBase,\n  burstMultiBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst rosariaTalent: Talent = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalent;\n\nfunction rosariaAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackMulti({\n      hits: [1, 1, 2, 1],\n      element: Element.Physical,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let hit5Dmg = [];\n  for (let i = 4; i < 6; i++) {\n    hit5Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '5HitDmg',\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackDefault({\n      element: Element.Physical,\n      params: params.slice(6, 7),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(8, 11),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction rosariaSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillMultiBase({\n      description: 'skillDmg',\n      hits: 2,\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction rosariaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstMultiBase({\n      description: 'burstDmg',\n      hits: 2,\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'iceLanceDot',\n      element: Element.Cryo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, TalentValue, Element } from './types';\n\nconst hutaoTalent: Talent = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalent;\n\nfunction hutaoAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 4,\n      element,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let hit5Dmg = [];\n  for (let i = 4; i < 6; i++) {\n    hit5Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '5HitDmg',\n    damage: hit5Dmg,\n  });\n\n  let hit6Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[6],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentDamage.push({\n    description: '6HitDmg',\n    damage: hit6Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackDefault({\n      element,\n      params: params.slice(7, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction hutaoSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'bloodBlossomDmg',\n      element: Element.Pyro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction hutaoBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage: TalentValue[] = [];\n\n  let dmgDescriptions = ['burstDmg', 'burstDmgLowHp'];\n  dmgDescriptions.forEach((description, i) => {\n    talentDamage.push(\n      burstBase({\n        description,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  });\n\n  let regenDescriptions = ['hpRegen', 'hpRegenLowHp'];\n  regenDescriptions.forEach((description, i) => {\n    talentDamage.push(\n      healingSkillBase({\n        description,\n        params: [params[i + 2], 0],\n        stats,\n        modifier,\n      })\n    );\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  plungeAttackDefault,\n  skillDefault,\n  burstDefault,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst yanfeiTalent: Talent = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalent;\n\nfunction yanfeiAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 3,\n      element: Element.Pyro,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  for (let i = 0; i < 5; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i + 3],\n      element: Element.Pyro,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    talentDamage.push({\n      description: `chargedDmgSeal${i}`,\n      damage: [damage],\n    });\n  }\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Pyro,\n      params: params.slice(15, 18),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction yanfeiSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction yanfeiBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyMulti,\n  skillBase,\n  burstDefault,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst eulaTalent: Talent = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalent;\n\nfunction eulaAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyMulti({\n    normalHits: [1, 1, 2, 1, 2],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction eulaSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['pressDmg', 'holdDmg', 'icewhirlBrandDmg'];\n  return descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Cryo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n}\n\nfunction eulaBurst({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n  talentDmg.push(\n    ...burstDefault({\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let descriptions = ['lightfallSwordBaseDmg', 'lightfallSwordStackDmg'];\n  let lightfallSwordParams = params.slice(1, 3);\n  let lightfallSwordTalent = descriptions.map((description, i) => {\n    return burstBase({\n      description,\n      element: Element.Physical,\n      multiplier: lightfallSwordParams[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDmg.push(...lightfallSwordTalent);\n\n  return talentDmg;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport {\n  AttackType,\n  Element,\n  ScalingType,\n  TalentType,\n  TalentValue,\n} from './types';\nimport Resistance from '../Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { talents } from './Talent';\n\n// Function to get specified talent\nexport function getTalentFn(characterId: string, type: TalentType) {\n  return talents[characterId]?.[type] ?? talents.defaultTalent[type];\n}\n\n// Functions to calculate Talent Values\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: modifier.flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === 'crit') {\n    crit += stats.critDmg;\n  } else if (modifier.critType === 'average') {\n    let critRate = stats.critRate;\n    if (attackType === 'charged') {\n      critRate += stats.chargedCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  // TODO: reactionBonus\n  return baseDmg * dmgBonus * crit * enemyDefMultiplier * enemyResMultiplier;\n}\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  // TODO: Add healing bonus\n  return calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n}\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n// Used for all default normal attacks\nexport function normalAttackDefault({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues: TalentValue[] = [];\n  for (let i = 0; i < hits; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  return talentValues;\n}\n// Used for all normal attacks with multiple damage instances in 1 hit e.g. polearms\nexport function normalAttackMulti({\n  hits = [],\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits?: number[];\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = hits.map((hitCount, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n\n    let damages = [];\n    for (let hit = 0; hit < hitCount; hit++) {\n      damages.push(damage);\n    }\n\n    return {\n      description: `${i + 1}HitDmg`,\n      damage: damages,\n    } as TalentValue;\n  });\n\n  return talentValues;\n}\n// Used for all 1-hit charged attacks\nexport function chargedAttackDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return [\n    {\n      description: 'chargedDmg',\n      damage: [damage],\n    },\n  ] as TalentValue[];\n}\n// Used for multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n  for (let i = 0; i < hits; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return [\n    {\n      description: `chargedDmg`,\n      damage: damages,\n    },\n  ] as TalentValue[];\n}\n// Used for all default claymore charged attacks\nfunction chargedAttackHeavy({\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let descriptions = ['chargedSpinDmg', 'chargedFinalDmg'];\n  return descriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n\n    return {\n      description: description,\n      damage: [damage],\n    } as TalentValue;\n  });\n}\n// Used for all default plunge attacks\nexport function plungeAttackDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n  return descriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Plunge,\n      modifier,\n    });\n\n    return {\n      description: description,\n      damage: [damage],\n    } as TalentValue;\n  });\n}\n// Used for all default sword/polearm/catalyst attacks\nexport function attackLightDefault({\n  normalHits,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackDefault({\n      element,\n      params: params.slice(normalHits, normalHits + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits + 1 + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all default sword/polearm attacks with multi damage instances\nexport function attackLightMulti({\n  normalHits = [],\n  chargedHits = 1,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits?: number[];\n  chargedHits?: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits.length),\n      stats,\n      modifier,\n    })\n  );\n\n  if (chargedHits === 1) {\n    talentValues.push(\n      ...chargedAttackDefault({\n        element,\n        params: params.slice(normalHits.length, normalHits.length + 1),\n        stats,\n        modifier,\n      })\n    );\n  } else {\n    talentValues.push(\n      ...chargedAttackMulti({\n        hits: chargedHits,\n        element,\n        params: params.slice(\n          normalHits.length,\n          normalHits.length + chargedHits\n        ),\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits.length + chargedHits + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all default claymore attacks\nexport function attackHeavyDefault({\n  normalHits,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackHeavy({\n      element,\n      params: params.slice(normalHits, normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits + 2 + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all claymore attacks with multi damage instances\nexport function attackHeavyMulti({\n  normalHits = [],\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits?: number[];\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits.length),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackHeavy({\n      params: params.slice(normalHits.length, normalHits.length + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits.length + 2 + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all debault bow aim shots (include charged shots)\nfunction aimShotDefault({\n  chargedElement,\n  params,\n  stats,\n  modifier,\n}: {\n  chargedElement: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues: TalentValue[] = [];\n\n  let damage = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentValues.push({\n    description: 'aimShotDmg',\n    damage: [damage],\n  });\n\n  damage = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: chargedElement,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'chargedAimShotDmg',\n    damage: [damage],\n  });\n\n  return talentValues;\n}\n// Used for all default bow attacks\nexport function attackBowDefault({\n  normalHits,\n  chargedElement,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  chargedElement: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element: Element.Physical,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...aimShotDefault({\n      chargedElement,\n      params: params.slice(normalHits, normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Base function for all damage skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function skillBase({\n  description,\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  description: string;\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    element,\n    multiplier,\n    attackType: AttackType.Skill,\n    stats,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Used for all default skill that only does 1-hit elemental dmg\nexport function skillDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n// Base function for damage skills with multiple damage instances\nexport function skillMultiBase({\n  description,\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    description,\n    damage: damages,\n  } as TalentValue;\n}\n// Base function for all damage bursts. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function burstBase({\n  description,\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  description: string;\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    element,\n    multiplier,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Used for all default burst that only does 1-hit elemental dmg\nexport function burstDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n// Base function for bursts with multiple damage instances\nexport function burstMultiBase({\n  description,\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    description,\n    damage: damages,\n  } as TalentValue;\n}\n// Base function for all healing skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function healingSkillBase({\n  description,\n  scalingType = ScalingType.Hp,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  scalingType?: ScalingType;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateHealing({\n    stats,\n    multiplier: params[0],\n    flatHealing: params[1],\n    scalingType,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Base function for all shields/summon HP\nexport function hpBase({\n  description,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  description: string;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    description,\n    damage: [hp],\n  } as TalentValue;\n}\nexport function shieldBase({\n  description,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  description: string;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [dmgAbsorption],\n  } as TalentValue;\n}\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n  getTalentStatsAt,\n} from './Data';\n\nimport { getTalentFn } from './talent';\nimport { getCharacterOptions } from './option';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../data/types';\nimport type DamageModifier from './modifier/DamageModifer';\nimport type { TalentType } from './talent/types';\n\nexport default class Character {\n  constructor(id: string, level: number, hasAscended: boolean) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n  }\n\n  innateStats: Stats = {};\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel;\n    if (level > 80 || (level === 80 && hasAscended)) {\n      ascensionLevel = 6;\n    } else if (level > 70 || (level === 70 && hasAscended)) {\n      ascensionLevel = 5;\n    } else if (level > 60 || (level === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (level > 50 || (level === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (level > 40 || (level === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (level > 20 || (level === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Return an Object with description and damage properties\n  getTalentDamageAt({\n    type,\n    talentLevel,\n    totalStats,\n    modifier,\n  }: {\n    type: TalentType;\n    talentLevel: number;\n    totalStats: Stats;\n    modifier: DamageModifier;\n  }) {\n    if (this.talents === undefined) {\n      return [];\n    }\n\n    const params = getTalentStatsAt(type, talentLevel, this.talents);\n\n    let damageFn = getTalentFn(this.id, type);\n\n    let damage = damageFn({\n      params,\n      stats: totalStats,\n      modifier,\n    });\n\n    return damage;\n  }\n\n  getOptions() {\n    return getCharacterOptions(this.id);\n  }\n}\n","import { AscensionBonus, StatCurveMapping, Stats } from '../../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n} from '../Data';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(id: string, level: number, hasAscended: boolean) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  stats: Stats = {};\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport Column from './component/Column';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport { Stats } from './data/types';\nimport Artifact from './js/artifact/Artifact';\nimport ArtifactSet from './js/artifact/ArtifactSet';\nimport { ArtifactType } from './js/artifact/types';\nimport Character from './js/Character';\nimport CritType from './js/modifier/CritType';\nimport DamageModifier from './js/modifier/DamageModifer';\nimport { isModifierApplicable, isStatsApplicable } from './js/option';\nimport { ArtifactSetOption } from './js/option/artifactSetOptions';\nimport { CharacterOption } from './js/option/characterOptions';\nimport Resistance from './js/Resistance';\nimport { getTotalStatsAt } from './js/Stat';\nimport { TalentType, TalentValueSet } from './js/talent/types';\nimport Weapon from './js/weapon/Weapon';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: string;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  characterOptions: CharacterOption[];\n  artifactSetOptions: ArtifactSetOption[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: new Character('', 1, false),\n    weapon: new Weapon('', 1, false),\n    artifacts: Object.values(ArtifactType).map((type) => new Artifact(type)),\n\n    artifactSets: [\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n    ],\n\n    enemyLevel: 1,\n    enemyDefReduction: 0,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    flatDmg: 0,\n    reaction: 'none',\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    characterOptions: [],\n    artifactSetOptions: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = { attack: [], skill: [], burst: [] };\n\n  getDamageModifier({\n    characterLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    characterLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  } = {}): DamageModifier {\n    const modifier: DamageModifier = {\n      characterLevel: characterLevel ?? this.state.character.level,\n      enemyLevel: enemyLevel ?? this.state.enemyLevel,\n      enemyDefReduction: this.state.enemyDefReduction,\n      enemyRes: enemyRes ?? this.state.enemyRes,\n      enemyResReduction: new Resistance(),\n      critType: critType ?? this.state.critType,\n      flatDmg: this.state.flatDmg,\n      reaction: this.state.reaction,\n      talentAttackLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n    };\n\n    (characterOptions ?? this.state.characterOptions).forEach((option) => {\n      if (isModifierApplicable(option)) {\n        option.applyOnModifier(modifier);\n      }\n    });\n\n    (artifactSetOptions ?? this.state.artifactSetOptions).forEach((option) => {\n      if (isModifierApplicable(option)) {\n        option.applyOnModifier(modifier);\n      }\n    });\n\n    return modifier;\n  }\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = newArtifactSets\n      .map((artifactSet) => artifactSet.stats)\n      .reduce((acc, stats) => {\n        Object.entries(stats).forEach(([stat, value]) => {\n          acc[stat] = value + (acc[stat] ?? 0);\n        });\n        return acc;\n      }, {} as Stats);\n\n    (artifactSetOptions ?? this.state.artifactSetOptions).forEach((option) => {\n      if (isStatsApplicable(option)) {\n        // Placeholder talent levels, currently no artifactsetoption uses it\n        option.applyOnStats(this.artifactSetBonuses, 1, 1, 1);\n      }\n    });\n\n    this.updateTotalStats({\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      characterOptions ?? this.state.characterOptions,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      characterOptions,\n      artifactSetOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n    const damageModifer = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      characterOptions,\n      artifactSetOptions,\n    });\n\n    this.talentValues.attack = character.getTalentDamageAt({\n      type: TalentType.Attack,\n      talentLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n    this.talentValues.skill = character.getTalentDamageAt({\n      type: TalentType.Skill,\n      talentLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n    this.talentValues.burst = character.getTalentDamageAt({\n      type: TalentType.Burst,\n      talentLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n  };\n\n  render() {\n    return (\n      <div className='app'>\n        <InputColumn\n          appState={this.state}\n          setAppState={this.setAppState}\n          updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n          updateTotalStats={this.updateTotalStats}\n          updateTalentValues={this.updateTalentValues}\n        />\n        <ArtifactColumn\n          appState={this.state}\n          setAppState={this.setAppState}\n          updateTotalStats={this.updateTotalStats}\n        />\n        <StatColumn\n          appState={this.state}\n          totalStats={this.totalStats}\n          artifactSetBonuses={this.artifactSetBonuses}\n        />\n        <TalentColumn talentValues={this.talentValues} />\n        <Column></Column>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}