{"version":3,"sources":["js/Data.js","js/Character.js","js/Weapon.js","js/Stat.js","js/Artifact.js","js/Styles.js","App.js"],"names":["sortedCharacterList","sortedWeaponList","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","Character","this","data","name","baseStats","statCurveMapping","hasAscended","innateStats","isNaN","undefined","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","multiplier","bonus","Weapon","type","rank","weaponLevel","weaponStats","stats","weaponStatCurves","getStatDisplayValue","value","isPercentage","toFixed","Math","round","convertStatValue","getTotalStatsAt","weapon","weaponHasAscended","character","characterLevel","characterHasAscended","artifacts","characterStats","getStatsAt","getInnateStatsAt","getBaseStatsAt","artifactStats","artifact","getStats","combinedStats","totalStats","flatAtk","baseAtk","atkBonus","flatDef","baseDef","defBonus","flatHp","baseHp","hpBonus","critRate","critDmg","elementalMastery","energyRecharge","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","Artifact","mainStat","rawValue","NaN","subStats","statObj","statUtils","subStat","mainStatProps","Flower","Feather","Sands","Goblet","Circlet","subStatProps","StyleSheet","create","container","display","flexDirection","alignItems","fontSize","height","backgroundColor","inputColumn","padding","borderRightWidth","inputRow","marginVertical","levelInput","width","statInput","resultColumn","resultBlockNoBorder","resultBlock","borderBottomWidth","artifactBlockNoBorder","paddingTop","paddingBottom","artifactBlock","borderStyle","characterImage","titleText","fontWeight","artifactType","artifactStatType","resultText","fillerColumn","flexGrow","App","renderCharacterList","View","style","styles","Text","characterSelect","selectedValue","state","onValueChange","_","isCharacterAscended","setState","setTotalStats","Item","label","characters","key","renderWeaponList","isWeaponAscended","weapons","renderCharacterImage","imageUrl","Image","source","uri","setCharacterStats","setWeaponStats","setArtifact","artifactFlower","artifactFeather","artifactSands","artifactGoblet","artifactCirclet","renderCharacterStats","renderWeaponStats","renderArtifactMainStat","setStat","prop","TextInput","onChangeText","text","parseFloat","renderArtifactSubStats","index","renderArtifactStat","isLast","renderAllArtifactStats","renderTotalStats","sort","name1","name2","localeCompare","defaultValue","parseInt","Checkbox","Component"],"mappings":"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","file":"static/js/app.b9c16bb5.chunk.js","sourcesContent":["import characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\n//import artifactSetDataRaw from '../data/artifactsetdata.json';\n//import artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\nexport { default as propMapping } from '../data/propmapping.json';\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(characterDataRaw);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(characterAscensionBonusDataRaw);\nconst characterStatCurveData = processCharacterStatCurveData(characterStatCurveDataRaw);\nconst weaponData = processWeaponData(weaponDataRaw);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(weaponAscensionBonusDataRaw);\nconst weaponStatCurveData = processWeaponStatCurveData(weaponStatCurveDataRaw);\n\n// Pre-processed data, lists\nlet sortedCharacterList;    // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList;       // lazy loading implemented with getSortedWeaponList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.id] = charData;\n        return acc;\n    }, {});\n}\n\nfunction processCharacterAscensionBonusData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.characterId] = charData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processCharacterStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.id] = weaponData;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponAscensionBonusData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processWeaponStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\n// Helper functions for accessing data properties\nfunction getData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getAscensionBonusData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getStatCurveAt(level, statCurves) {\n    return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id) {\n    return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id) {\n    return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level) {\n    return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id) {\n    return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id) {\n    return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level) {\n    return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(level, ascensionBonuses) {\n    return ascensionBonuses[level];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n    if (sortedCharacterList === undefined) {\n        sortedCharacterList = Object.entries(characterData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n    if (sortedWeaponList === undefined) {\n        sortedWeaponList = Object.entries(weaponData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedWeaponList;\n}","import { getCharacterData as getData, getCharacterAscensionBonusData as getAscensionBonusData, getCharacterStatCurveAt as getStatCurveAt, getAscensionBonusAt } from './Data.js';\n\nexport default class Character {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n    }\n\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n    getInnateStatsAt(level, hasAscended) {\n        if (isNaN(level) || level < 1 || level > 90) {\n            // Return nulls if level is invalid\n            let innateStats;\n            if (this.innateStats !== undefined) {\n                // Copy all of innateStats' properties to a new object and initialize them to null\n                innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                innateStats = {};\n            }\n            \n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n            \n            return innateStats;\n        } \n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\n        else if (level === this.level && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.innateStats;\n        } else {\n\n            // Initialize stats with character level 1 base stats\n            let innateStats = {...this.baseStats};\n\n            let charStatCurves = getStatCurveAt(level);\n\n            // Calculate stats from character level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = charStatCurves[curve];\n                innateStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from character ascension\n            let ascensionLevel;\n            if (level > 80 || (level == 80 && hasAscended)) {\n                ascensionLevel = 6;\n            } else if (level > 70 || (level == 70 && hasAscended)) {\n                ascensionLevel = 5;\n            } else if (level > 60 || (level == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (level > 50 || (level == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (level > 40 || (level == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (level > 20 || (level == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n\n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in innateStats) {\n                        innateStats[stat] += bonus;\n                    } else {\n                        innateStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n\n            return innateStats;\n        }\n    }\n}\n","import { getWeaponData as getData, getWeaponAscensionBonusData as getAscensionBonusData, getWeaponStatCurveAt as getStatCurveAt, getAscensionBonusAt } from './Data.js';\n\nexport default class Weapon {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.type = data.type;\n        this.rank = data.rank;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n    }\n\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n    getStatsAt(weaponLevel, hasAscended) {\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.rank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\n            // Return nulls if weapon level is invalid\n            let weaponStats;\n            if (this.stats !== undefined) {\n                // Copy all of stats' properties to a new object and initialize them to null\n                weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                weaponStats = {};\n            }\n            \n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n        // If getStatsAt has not been called before, this.weaponLevel, this.hasAscended, and this.stats will be undefined\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.stats;\n        } else {\n\n            // Level 1 weapon stats\n            let weaponStats = {...this.baseStats};\n\n            let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n            // Calculate stats from weapon level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = weaponStatCurves[curve];\n                weaponStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from weapon ascension\n            let ascensionLevel;\n            // Only 3-star and above weapons can be ascended beyond level 70\n            if (this.rank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\n                ascensionLevel = 6;\n            } else if (this.rank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\n                ascensionLevel = 5;\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n            \n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in weaponStats) {\n                        weaponStats[stat] += bonus;\n                    } else {\n                        weaponStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n    }\n}\n","// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value, isPercentage) {\n    if (value != null) {\n        if (isPercentage) {\n            return (value * 100).toFixed(1) + \"%\";\n        } else {\n            return Math.round(value);\n        }\n    } else {\n        return \"-\";\n    }\n};\n\n// Returns a Number representing the inputed value of a stat\n// Returns null if the input is not a valid stat value\nexport function convertStatValue(value, isPercentage) {\n    if (isPercentage) {\n        return value / 100;\n    } else {\n        return value;\n    }\n};\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended) {\n\n    let weaponStats;\n    if (weapon !== undefined) {\n        weaponStats = weapon.getStatsAt(weaponLevel, weaponHasAscended);\n    } else {\n        weaponStats = {};\n    }\n\n    let characterStats;\n    if (character !== undefined) {\n        characterStats = character.getInnateStatsAt(characterLevel, characterHasAscended);\n    } else {\n        characterStats = {};\n    }\n    \n    // Merges weaponStats and innateStats into a new baseStats object\n    let baseStats = {...weaponStats};\n    Object.entries(characterStats).map(([stat, value]) => {\n        if (baseStats[stat] === undefined) {\n            baseStats[stat] = value;\n        } else {\n            baseStats[stat] += value;\n        }\n    });\n    \n    return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended, artifacts) {\n    \n    let baseStats = getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended);\n    \n    // Merge artifact bonuses into separate object\n    let artifactStats = {};\n    artifacts.forEach(artifact => {\n        Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n            if (artifactStats[stat] === undefined) {\n                artifactStats[stat] = value;\n            } else {\n                artifactStats[stat] += value;\n            }\n        });\n    });\n\n    // Merge base stats and artifact bonuses\n    let combinedStats = {...baseStats};\n    Object.entries(artifactStats).forEach(([stat, value]) => {\n        if (combinedStats[stat] === undefined) {\n            combinedStats[stat] = value;\n        } else {\n            combinedStats[stat] += value;\n        }\n    });\n\n    // Calculate total stats\n    let totalStats = {};\n    totalStats.flatAtk = (combinedStats.baseAtk ? combinedStats.baseAtk : 0) \n        * (1 + (combinedStats.atkBonus ? combinedStats.atkBonus : 0))\n        + (combinedStats.flatAtk ? combinedStats.flatAtk : 0);\n    totalStats.flatDef = (combinedStats.baseDef ? combinedStats.baseDef : 0) \n        * (1 + (combinedStats.defBonus ? combinedStats.defBonus : 0))\n        + (combinedStats.flatDef ? combinedStats.flatDef : 0);\n    totalStats.flatHp = (combinedStats.baseHp ? combinedStats.baseHp : 0) \n        * (1 + (combinedStats.hpBonus ? combinedStats.hpBonus : 0))\n        + (combinedStats.flatHp ? combinedStats.flatHp : 0);\n    totalStats.critRate = combinedStats.critRate ? combinedStats.critRate : 0;\n    totalStats.critDmg = combinedStats.critDmg ? combinedStats.critDmg : 0;\n    totalStats.elementalMastery = combinedStats.elementalMastery ? combinedStats.elementalMastery : 0;\n    totalStats.energyRecharge = 1 + (combinedStats.energyRecharge ? combinedStats.energyRecharge : 0);\n    \n    combinedStats.anemoDmgBonus ? totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus : null;\n    combinedStats.cryoDmgBonus ? totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus : null;\n    combinedStats.electroDmgBonus ? totalStats.electroDmgBonus = combinedStats.electroDmgBonus : null;\n    combinedStats.geoDmgBonus ? totalStats.geoDmgBonus = combinedStats.geoDmgBonus : null;\n    combinedStats.hydroDmgBonus ? totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus : null;\n    combinedStats.pyroDmgBonus ? totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus : null;\n    combinedStats.physicalDmgBonus ? totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus : null;\n\n    combinedStats.anemoRes ? totalStats.anemoRes = combinedStats.anemoRes : null;\n    combinedStats.cryoRes ? totalStats.cryoRes = combinedStats.cryoRes : null;\n    combinedStats.electroRes ? totalStats.electroRes = combinedStats.electroRes : null;\n    combinedStats.geoRes ? totalStats.geoRes = combinedStats.geoRes : null;\n    combinedStats.hydroRes ? totalStats.hydroRes = combinedStats.hydroRes : null;\n    combinedStats.pyroRes ? totalStats.pyroRes = combinedStats.pyroRes : null;\n    combinedStats.physicalRes ? totalStats.physicalRes = combinedStats.physicalRes : null;\n\n    combinedStats.healingBonus ? totalStats.healingBonus = combinedStats.healingBonus : null;\n\n    return totalStats;\n}","import * as statUtils from './Stat.js';\n\nexport default class Artifact {\n    mainStat = {\n        stat: 0,\n        rawValue: NaN,\n        value: NaN,\n    };\n\n    subStats = [\n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }\n    ];\n\n    constructor(type) {\n        this.type = type;\n    }\n\n    // Can be called with one of the two of stat and value (the other will be undefined)\n    setStat(statObj, stat, value, isPercentage = false) {\n        if (stat == undefined && value != undefined) {\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        } else if (stat != undefined && value == undefined) {\n            statObj.stat = stat;\n            statObj.value = statUtils.convertStatValue(statObj.rawValue, isPercentage);\n        } else if (stat != undefined && value != undefined) {\n            statObj.stat = stat;\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        }\n    }\n\n    /*\n    setMainStat(stat, value, isPercentage = false) {\n        this.setStat(this.mainStat, stat, value, isPercentage);\n    }\n\n    // Set substat in a spefiic position\n    setSubStat(pos, stat, value, isPercentage = false) {\n        this.setStat(this.subStats[pos], stat, value, isPercentage);\n    }\n    */\n\n    // Returns object containing stat: value mapping, including both main stat and substats\n    getStats() {\n        let stats = {};\n\n        if (this.mainStat.stat != 0) {\n            if (!isNaN(this.mainStat.value)) {\n                stats[this.mainStat.stat] = this.mainStat.value;\n            } else {\n                stats[this.mainStat.stat] = null;\n            }\n        }\n        \n        this.subStats.forEach(subStat => {\n            if (subStat.stat != 0) {\n                if (!isNaN(subStat.value)) {\n                    stats[subStat.stat] = subStat.value;\n                } else {\n                    stats[subStat.stat] = null;\n                }\n            }\n        });\n\n        return stats;\n    }\n}\n\nexport const mainStatProps = {\n    Flower: [\n        'flatHp',\n    ],\n\n    Feather: [\n        'flatAtk',\n    ],\n\n    Sands: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'energyRecharge',\n    ],\n\n    Goblet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'anemoDmgBonus',\n        'cryoDmgBonus',\n        'electroDmgBonus',\n        'geoDmgBonus',\n        'hydroDmgBonus',\n        'pyroDmgBonus',\n        'physicalDmgBonus',\n    ],\n\n    Circlet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'critRate',\n        'critDmg',\n        'healingBonus',\n    ],\n}\n\nexport const subStatProps = [\n    'flatHp',\n    'flatAtk',\n    'flatDef',\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n    'critRate',\n    'critDmg',\n]","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n\n        fontSize: 14,\n\n        height: '100%',\n\n        backgroundColor: '#fff',\n    },\n\n    inputColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '1%',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#ccc',\n    },\n\n    inputRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    levelInput: {\n        width: '2em',\n    },\n\n    statInput: {\n        width: '3em',\n    },\n\n    resultColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#eee',\n    },\n\n    resultBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n    },\n\n    resultBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n        borderBottomWidth: 1,\n    },\n\n    artifactBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n    },\n\n    artifactBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n\n        borderStyle: 'dashed',\n        borderBottomWidth: 1,  \n    },\n\n    characterImage: {\n        marginVertical: '0.25em',\n    },\n\n    titleText: {\n        fontSize: '1.5em',\n        fontWeight: '200',\n\n        marginVertical: '0.17em',\n    },\n\n    artifactType: {\n        fontSize: '1.2em',\n        fontWeight: '200',\n\n        marginVertical: '0.21em',\n    },\n\n    artifactStatType: {\n        marginVertical: '0.25',\n    },\n\n    resultText: {\n        marginVertical: '0.25em',\n    },\n\n    fillerColumn: {\n        flexGrow: 1,\n\n        backgroundColor: '#eee',\n    },\n});\n","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { Image, Text, TextInput, View } from 'react-native';\n\nimport Character from './js/Character.js';\nimport Weapon from './js/Weapon.js';\nimport Artifact, { mainStatProps, subStatProps } from './js/Artifact.js';\nimport * as statUtils from './js/Stat.js';\nimport * as data from './js/Data.js';\n\nimport styles from './js/Styles.js';\n\nexport default class App extends Component {\n\n  constructor() {\n    super();  \n\n    // Initialize sorted list of characters and weapons\n    this.characters = data.getSortedCharacterList();\n    this.weapons = data.getSortedWeaponList();\n\n    this.state = {\n      characterId: undefined,\n      character: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n\n      weaponId: undefined,\n      weapon: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n\n      characterStats: undefined,\n      weaponStats: undefined,\n      totalStats: undefined,\n\n      artifactFlower: new Artifact('Flower'),\n      artifactFeather: new Artifact('Feather'),\n      artifactSands: new Artifact('Sands'),\n      artifactGoblet: new Artifact('Goblet'),\n      artifactCirclet: new Artifact('Circlet'),\n    }\n  }\n\n  renderCharacterList = () => {    \n    return (\n      <View style={styles.inputRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              let character = new Character(value);\n              let stats = character.getInnateStatsAt(this.state.characterLevel, this.state.isCharacterAscended);\n\n              this.setState({\n                characterId: value,\n                character: character,\n                characterStats: stats\n              }, () => {\n                // callback function from setstate\n                this.setTotalStats();\n              });\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.characters.map(id => <Picker.Item label={data.getCharacterData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    return (\n      <View style={styles.inputRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              let weapon = new Weapon(value);\n              let stats = weapon.getStatsAt(this.state.weaponLevel, this.state.isWeaponAscended);\n\n              this.setState({\n                weaponId: value,\n                weapon: weapon,\n                weaponStats: stats,\n              }, () => {\n                // callback function from setstate\n                this.setTotalStats();\n              });\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.weapons.map(id => <Picker.Item label={data.getWeaponData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.state.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  setCharacterStats = () => {\n    if (this.state.character !== undefined) {\n      let stats = this.state.character.getInnateStatsAt(this.state.characterLevel, this.state.isCharacterAscended);\n      this.setState({ characterStats: stats }, this.setTotalStats)\n    }\n  }\n\n  setWeaponStats = () => {\n    if (this.state.weapon !== undefined) {\n      let stats = this.state.weapon.getStatsAt(this.state.weaponLevel, this.state.isWeaponAscended);\n      this.setState({ weaponStats: stats }, this.setTotalStats);\n    }\n  }\n\n  setArtifact = (type) => {\n    let artifact = this.state['artifact' + type];\n    this.setState({['artifact' + type]: artifact}, this.setTotalStats);\n  }\n\n  setTotalStats = () => {\n    let artifacts = [this.state.artifactFlower, this.state.artifactFeather, this.state.artifactSands, this.state.artifactGoblet, this.state.artifactCirclet];\n\n    let stats = statUtils.getTotalStatsAt(\n      this.state.weapon, \n      this.state.weaponLevel, \n      this.state.isWeaponAscended, \n      this.state.character,\n      this.state.characterLevel,\n      this.state.isCharacterAscended,\n      artifacts,\n    );\n    \n    this.setState({ totalStats: stats });\n  }\n\n  renderCharacterStats = () => {\n    return (\n      this.state.character ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Character</Text>\n          {this.renderCharacterImage()}\n          <Text style={styles.resultText}>{this.state.character ? this.state.character.name : ''}</Text>\n          {\n            this.state.characterStats ? (\n              Object.entries(this.state.characterStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderWeaponStats = () => {\n    return (\n      this.state.weapon ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Weapon</Text>\n          <Text style={styles.resultText}>{this.state.weapon ? this.state.weapon.name : ''}</Text>\n          {\n            this.state.weaponStats ? (\n              Object.entries(this.state.weaponStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderArtifactMainStat = (type) => {\n    return (\n      <View style={styles.inputRow}>\n        <Picker\n          selectedValue={this.state['artifact' + type].mainStat.stat}\n          onValueChange={(stat, _) => {\n            if (stat != 0) {\n              let mainStat = this.state['artifact'+type].mainStat;\n              this.state['artifact' + type].setStat(mainStat, stat, undefined, data.propMapping[stat].isPercentage);\n\n              // Force refresh\n              this.setArtifact(type);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {mainStatProps[type].map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n        </Picker>\n\n        <Text> : </Text>\n\n        <TextInput \n          style={styles.statInput} \n          onChangeText={text => {\n            let mainStat = this.state['artifact'+type].mainStat;\n            if (mainStat.stat) {\n              this.state['artifact' + type].setStat(mainStat, undefined, parseFloat(text), data.propMapping[mainStat.stat].isPercentage);\n            } else {\n              // If stat type is not yet set\n              this.state['artifact' + type].setStat(mainStat, undefined, parseFloat(text), false);\n            }\n\n            // Force refresh\n            this.setArtifact(type);\n          }}\n        />\n      </View>\n    )\n  }\n\n  renderArtifactSubStats = (type) => {\n    return (\n      <View>\n        {\n          this.state['artifact' + type].subStats.map((subStat, index) => {\n            return (\n              <View style={styles.inputRow} key={index}>\n                <Picker\n                  selectedValue={subStat.stat}\n                  onValueChange={(stat, _) => {\n                    if (stat != 0) {\n                      this.state['artifact' + type].setStat(subStat, stat, undefined, data.propMapping[stat].isPercentage);\n      \n                      // Force refresh\n                      this.setArtifact(type);\n                    }\n                  }}\n                >\n                  <Picker.Item label='' value={0} />\n                  {subStatProps.map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n                </Picker>\n\n                <Text> : </Text>\n\n                <TextInput \n                  style={styles.statInput} \n                  onChangeText={text => {\n                    let stat = subStat.stat;\n                    if (stat) {\n                      this.state['artifact' + type].setStat(subStat, undefined, parseFloat(text), data.propMapping[stat].isPercentage);\n                    } else {\n                      // If stat type is not yet set\n                      this.state['artifact' + type].setStat(subStat, undefined, parseFloat(text), false);\n                    }\n\n                    // Force refresh\n                    this.setArtifact(type);\n                  }}\n                />\n              </View>\n            )\n          })\n        }\n      </View>\n    )\n  }\n\n  renderArtifactStat = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n\n        <Text style={styles.artifactStatType}>Main Stat</Text>\n        {this.renderArtifactMainStat(type)}\n\n        <Text style={styles.artifactStatType}>Substats</Text>\n        {this.renderArtifactSubStats(type)}\n      </View>\n    )\n  }\n\n  renderAllArtifactStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Artifacts</Text>\n        {this.renderArtifactStat('Flower')}\n        {this.renderArtifactStat('Feather')}\n        {this.renderArtifactStat('Sands')}\n        {this.renderArtifactStat('Goblet')}\n        {this.renderArtifactStat('Circlet', true)}\n      </View>\n    )\n  }\n\n  renderTotalStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Stat Total</Text>\n        {\n          this.state.totalStats ? (\n            Object.entries(this.state.totalStats).map(([stat, value]) => {\n              return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n            })\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.inputColumn}>\n          {this.renderCharacterList()}\n\n          <View style={styles.inputRow}>\n            <Text>Level: </Text>\n            <TextInput \n              style={styles.levelInput}\n              defaultValue={this.state.characterLevel} \n              onChangeText={text => {\n                this.setState({characterLevel: parseInt(text)}, () => { this.setCharacterStats() });\n              }}\n            />\n          </View>\n\n          <View style={styles.inputRow}>\n            <Text>Ascended? </Text>\n            <Checkbox\n              onValueChange={value => this.setState({isCharacterAscended: value}, () => { this.setCharacterStats() })}\n              value={this.state.isCharacterAscended}\n            />\n          </View>\n\n          <br/>\n\n          {this.renderWeaponList()}\n\n          <View style={styles.inputRow}>\n            <Text>Level: </Text>\n            <TextInput \n              style={styles.levelInput}\n              defaultValue={this.state.weaponLevel} \n              onChangeText={text => {\n                this.setState({weaponLevel: parseInt(text)}, () => { this.setWeaponStats() });\n              }}\n            />\n          </View>\n\n          <View style={styles.inputRow}>\n            <Text>Ascended? </Text>\n            <Checkbox\n              onValueChange={value => this.setState({isWeaponAscended: value}, () => { this.setWeaponStats() })}\n              value={this.state.isWeaponAscended}\n            />\n          </View>\n\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderCharacterStats()}\n          {this.renderWeaponStats()}\n          {this.renderAllArtifactStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderTotalStats()}\n        </View>\n\n        <View style={styles.fillerColumn}>\n        </View>\n\n      </View>\n    )\n  }\n}\n"],"sourceRoot":""}