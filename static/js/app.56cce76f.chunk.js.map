{"version":3,"sources":["js/Character.js","js/Weapon.js","js/Stat.js","js/Artifact.js","js/Styles.js","App.js"],"names":["Character","name","this","dbBaseStatRef","a","async","get","doc","exists","baseStats","data","console","log","dbStatCurveRef","statCurveMapping","dbAscensionBonusRef","ascensionBonuses","forEach","id","weapon","weaponLevel","weaponHasAscended","dbWeaponStatCurveColRef","characterLevel","characterHasAscended","dbCharStatCurveColRef","getWeaponStatsAt","weaponStats","getInnateStatsAt","innateStats","Object","entries","map","stat","value","undefined","getStatsAt","level","hasAscended","dbStatCurveColRef","isNaN","keys","reduce","obj","getStatCurvesAtLevel","charStatCurves","curve","multiplier","ascensionLevel","bonus","toString","characterConverter","fromFirestore","snapshot","options","createCharacter","ref","collection","chararcter","character","setBaseStats","setStatCurveMapping","setAscensionBonuses","getTotalStatsAt","artifacts","getBaseStatsAt","artifactStats","artifact","getStats","totalStats","Weapon","type","rank","stats","weaponStatCurves","weaponConverter","createWeapon","getStatDisplayValue","isPercentage","toFixed","Math","round","convertStatValue","Artifact","mainStat","rawValue","NaN","subStats","statObj","statUtils","setStat","pos","subStat","mainStatProps","Flower","Feather","Sands","Goblet","Circlet","subStatProps","styles","StyleSheet","create","container","display","flexDirection","alignItems","height","backgroundColor","inputColumn","padding","borderRightWidth","characterSelectRow","marginVertical","characterSelect","levelInputRow","levelInput","width","ascensionCheckRow","resultColumn","flexGrow","characterImage","resultText","App","renderCharacterList","sortedChars","characters","sort","name1","name2","localeCompare","View","style","Text","selectedValue","state","characterId","onValueChange","_","db","withConverter","setCharacterStats","setState","Item","label","key","renderWeaponList","weaponId","weaponType","weapons","weaponDoc","setWeaponStats","renderCharacterImage","imageUrl","Image","source","uri","isCharacterAscended","characterStats","setTotalStats","isWeaponAscended","setArtifact","artifactFlower","artifactFeather","artifactSands","artifactGoblet","artifactCirclet","renderCharacterStats","propMap","renderArtifactMainStat","setMainStat","prop","TextInput","onChangeText","text","parseFloat","renderArtifactSubStats","index","setSubStat","renderArtifactStat","fontWeight","renderAllArtifactStats","renderTotalStats","firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","hasLoaded","dbInitRef","initSnapshot","props","defaultValue","parseInt","Checkbox","Component"],"mappings":"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","file":"static/js/app.56cce76f.chunk.js","sourcesContent":["class Character {\n    constructor(name) {\n        this.name = name;\n    }\n\n    async setBaseStats(dbBaseStatRef) {\n        let doc = await dbBaseStatRef.get()\n        \n        if (doc.exists) {\n            this.baseStats = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Base stats for ${this.name} not found!`);\n        }\n    }\n\n    async setStatCurveMapping(dbStatCurveRef) {\n        let doc = await dbStatCurveRef.get()\n\n        if (doc.exists) {\n            this.statCurveMapping = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Stat curve mapping for ${this.name} not found!`);\n        }\n    }\n\n    async setAscensionBonuses(dbAscensionBonusRef) {\n        this.ascensionBonuses = {};\n        \n        let querySnapshot = await dbAscensionBonusRef.get()\n        querySnapshot.forEach(doc => {\n            // doc.data() is never undefined for query doc snapshots\n            this.ascensionBonuses[doc.id] = doc.data();\n        })\n    }\n\n\n\n    // Returns object containing base stats of character with the passed weapon\n    // Base stats = character innate stats + weapon stats\n    async getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef, characterLevel, characterHasAscended, dbCharStatCurveColRef) {\n\n        let weaponStats = await this.getWeaponStatsAt(weapon, weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef)\n\n        let innateStats = await this.getInnateStatsAt(characterLevel, characterHasAscended, dbCharStatCurveColRef);\n        \n        // Merges weaponStats and innateStats into a new baseStats object\n        let baseStats = {...weaponStats};\n        Object.entries(innateStats).map(([stat, value]) => {\n            if (baseStats[stat] === undefined) {\n                baseStats[stat] = value;\n            } else {\n                baseStats[stat] += value;\n            }\n        });\n        \n        return baseStats;\n    }\n\n    async getWeaponStatsAt(weapon, weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef) {\n        let weaponStats;\n        if (weapon !== undefined) {\n            weaponStats = await weapon.getStatsAt(weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef);\n        } else {\n            weaponStats = {};\n        }\n\n        return weaponStats;\n    }\n\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n    async getInnateStatsAt(level, hasAscended, dbStatCurveColRef) {\n        if (isNaN(level) || level < 1 || level > 90) {\n            // Return nulls if level is invalid\n            let innateStats;\n            if (this.innateStats !== undefined) {\n                // Copy all of innateStats' properties to a new object and initialize them to null\n                innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                innateStats = {};\n            }\n            \n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n            \n            return innateStats;\n        } \n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\n        else if (level === this.level && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.innateStats;\n        } else {\n\n            // Initialize stats with character level 1 base stats\n            let innateStats = {...this.baseStats};\n\n            let charStatCurves = await this.getStatCurvesAtLevel(level, dbStatCurveColRef);\n\n            // Calculate stats from character level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = charStatCurves[curve];\n                innateStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from character ascension\n            let ascensionLevel;\n            if (level > 80 || (level == 80 && hasAscended)) {\n                ascensionLevel = 6;\n            } else if (level > 70 || (level == 70 && hasAscended)) {\n                ascensionLevel = 5;\n            } else if (level > 60 || (level == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (level > 50 || (level == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (level > 40 || (level == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (level > 20 || (level == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = this.ascensionBonuses[ascensionLevel];\n\n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in innateStats) {\n                        innateStats[stat] += bonus;\n                    } else {\n                        innateStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n\n            return innateStats;\n        }\n    }\n\n    async getStatCurvesAtLevel(level, dbStatCurveColRef) {\n        let doc = await dbStatCurveColRef.doc(level.toString()).get();\n        if (doc.exists) {\n            return doc.data();\n        } else {\n            console.log(`WARN: Stat curves for level ${level} not found`);\n            return {};\n        }\n    }\n}\n\nexport const characterConverter = {\n    fromFirestore: async (snapshot, options) => {\n        const data = snapshot.data(options);\n        let chararcter = await createCharacter(\n            data.name,\n            snapshot.ref.collection('stats').doc('baseStats'),\n            snapshot.ref.collection('stats').doc('statCurves'), \n            snapshot.ref.collection('ascensionBonuses'),\n        );\n\n        return chararcter;\n    }\n}\n\nasync function createCharacter(name, dbBaseStatRef, dbStatCurveRef, dbAscensionBonusRef) {\n    let character = new Character(name);\n    await character.setBaseStats(dbBaseStatRef);\n    await character.setStatCurveMapping(dbStatCurveRef);\n    await character.setAscensionBonuses(dbAscensionBonusRef);\n\n    return character;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport async function getTotalStatsAt(weapon, weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef, character, characterLevel, characterHasAscended, dbCharStatCurveColRef, artifacts) {\n    \n    let baseStats;\n    if (character === undefined) {\n        if (weapon === undefined) {\n            baseStats = {};\n        } else {\n            baseStats = await weapon.getStatsAt(weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef);\n        }\n    } else {\n        baseStats = await character.getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef, characterLevel, characterHasAscended, dbCharStatCurveColRef);\n    }\n    \n    // Merge artifact bonuses into separate object\n    let artifactStats = {};\n    artifacts.forEach(artifact => {\n        Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n            if (artifactStats[stat] === undefined) {\n                artifactStats[stat] = value;\n            } else {\n                artifactStats[stat] += value;\n            }\n        });\n    });\n\n    // Merge base stats and artifact bonuses\n    let totalStats = {...baseStats};\n    Object.entries(artifactStats).forEach(([stat, value]) => {\n        if (totalStats[stat] === undefined) {\n            totalStats[stat] = value;\n        } else {\n            totalStats[stat] += value;\n        }\n    });\n\n    return totalStats;\n}","class Weapon {\n    constructor(name, type, rank) {\n        this.name = name;\n        this.type = type;\n        this.rank = rank;\n    }\n\n    async setBaseStats(dbBaseStatRef) {\n        let doc = await dbBaseStatRef.get()\n        \n        if (doc.exists) {\n            this.baseStats = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Base stats for ${this.name} not found!`);\n        }\n    }\n\n    async setStatCurveMapping(dbStatCurveRef) {\n        let doc = await dbStatCurveRef.get()\n\n        if (doc.exists) {\n            this.statCurveMapping = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Stat curve mapping for ${this.name} not found!`);\n        }\n    }\n\n    async setAscensionBonuses(dbAscensionBonusRef) {\n        this.ascensionBonuses = {};\n        \n        let querySnapshot = await dbAscensionBonusRef.get()\n        querySnapshot.forEach(doc => {\n            // doc.data() is never undefined for query doc snapshots\n            this.ascensionBonuses[doc.id] = doc.data();\n        })\n    }\n\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n    async getStatsAt(weaponLevel, hasAscended, dbStatCurveColRef) {\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.rank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\n            // Return nulls if weapon level is invalid\n            let weaponStats;\n            if (this.stats !== undefined) {\n                // Copy all of stats' properties to a new object and initialize them to null\n                weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                weaponStats = {};\n            }\n            \n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n        // If getStatsAt has not been called before, this.weaponLevel, this.hasAscended, and this.stats will be undefined\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.stats;\n        } else {\n\n            // Level 1 weapon stats\n            let weaponStats = {...this.baseStats};\n\n            let weaponStatCurves = await this.getStatCurvesAtLevel(weaponLevel, dbStatCurveColRef);\n\n            // Calculate stats from weapon level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = weaponStatCurves[curve];\n                weaponStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from weapon ascension\n            let ascensionLevel;\n            // Only 3-star and above weapons can be ascended beyond level 70\n            if (this.rank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\n                ascensionLevel = 6;\n            } else if (this.rank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\n                ascensionLevel = 5;\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = this.ascensionBonuses[ascensionLevel];\n            \n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in weaponStats) {\n                        weaponStats[stat] += bonus;\n                    } else {\n                        weaponStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n    }\n\n    async getStatCurvesAtLevel(level, dbStatCurveColRef) {\n        let doc = await dbStatCurveColRef.doc(level.toString()).get();\n        if (doc.exists) {\n            return doc.data();\n        } else {\n            console.log(`WARN: Stat curves for level ${level} not found`);\n            return {};\n        }\n    }\n}\n\nexport const weaponConverter = {\n    fromFirestore: async (snapshot, options) => {\n        const data = snapshot.data(options);\n        let weapon = await createWeapon(\n            data.name,\n            data.type,\n            data.rank,\n            snapshot.ref.collection('stats').doc('baseStats'),\n            snapshot.ref.collection('stats').doc('statCurves'), \n            snapshot.ref.collection('ascensionBonuses'),\n        );\n\n        return weapon;\n    }\n}\n\nasync function createWeapon(name, type, rank, dbBaseStatRef, dbStatCurveRef, dbAscensionBonusRef) {\n    let weapon = new Weapon(name, type, rank);\n    await weapon.setBaseStats(dbBaseStatRef);\n    await weapon.setStatCurveMapping(dbStatCurveRef);\n    await weapon.setAscensionBonuses(dbAscensionBonusRef);\n\n    return weapon;\n}","// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value, isPercentage) {\n    if (value != null) {\n        if (isPercentage) {\n            return (value * 100).toFixed(1) + \"%\";\n        } else {\n            return Math.round(value);\n        }\n    } else {\n        return \"-\";\n    }\n};\n\n// Returns a Number representing the inputed value of a stat\n// Returns null if the input is not a valid stat value\nexport function convertStatValue(value, isPercentage) {\n    if (isPercentage) {\n        return value / 100;\n    } else {\n        return value;\n    }\n};\n","import * as statUtils from './Stat.js';\n\nexport default class Artifact {\n    mainStat = {\n        stat: 0,\n        rawValue: NaN,\n        value: NaN,\n    };\n\n    subStats = [\n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }\n    ];\n\n    constructor(type) {\n        this.type = type;\n    }\n\n    // Can be called with one of the two of stat and value (the other will be undefined)\n    setStat(statObj, stat, value, isPercentage = false) {\n        if (stat == undefined && value != undefined) {\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        } else if (stat != undefined && value == undefined) {\n            statObj.stat = stat;\n            statObj.value = statUtils.convertStatValue(statObj.rawValue, isPercentage);\n        } else if (stat != undefined && value != undefined) {\n            statObj.stat = stat;\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        }\n    }\n\n    setMainStat(stat, value, isPercentage = false) {\n        this.setStat(this.mainStat, stat, value, isPercentage);\n    }\n\n    // Set substat in a spefiic position\n    setSubStat(pos, stat, value, isPercentage = false) {\n        this.setStat(this.subStats[pos], stat, value, isPercentage);\n    }\n\n    // Returns object containing stat: value mapping, including both main stat and substats\n    getStats() {\n        let stats = {};\n\n        if (this.mainStat.stat != 0) {\n            if (!isNaN(this.mainStat.value)) {\n                stats[this.mainStat.stat] = this.mainStat.value;\n            } else {\n                stats[this.mainStat.stat] = null;\n            }\n        }\n        \n        this.subStats.forEach(subStat => {\n            if (subStat.stat != 0) {\n                if (!isNaN(subStat.value)) {\n                    stats[subStat.stat] = subStat.value;\n                } else {\n                    stats[subStat.stat] = null;\n                }\n            }\n        });\n\n        return stats;\n    }\n}\n\nexport const mainStatProps = {\n    Flower: [\n        'flatHp',\n    ],\n\n    Feather: [\n        'flatAtk',\n    ],\n\n    Sands: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'energyRecharge',\n    ],\n\n    Goblet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'anemoDmgBonus',\n        'cryoDmgBonus',\n        'electroDmgBonus',\n        'geoDmgBonus',\n        'hydroDmgBonus',\n        'pyroDmgBonus',\n        'physicalDmgBonus',\n    ],\n\n    Circlet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'critRate',\n        'critDmg',\n        'healingBonus',\n    ],\n}\n\nexport const subStatProps = [\n    'flatHp',\n    'flatAtk',\n    'flatDef',\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n    'critRate',\n    'critDmg',\n]","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n\n        height: '100%',\n\n        backgroundColor: '#fff',\n    },\n\n    inputColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '1%',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#ccc',\n    },\n\n    characterSelectRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    characterSelect: {\n\n    },\n\n    levelInputRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    levelInput: {\n        width: '2em',\n\n    },\n\n    ascensionCheckRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    resultColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n\n        padding: '1%',\n\n        backgroundColor: '#eee',\n    },\n\n    characterImage: {\n        marginVertical: '0.25em',\n    },\n\n    resultText: {\n        marginVertical: '0.25em',\n    }\n});\n\nexport default styles;","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { Image, Text, TextInput, View } from 'react-native';\n\nimport { characterConverter, getTotalStatsAt } from './js/Character.js';\nimport { weaponConverter } from './js/Weapon.js';\nimport Artifact, { mainStatProps, subStatProps } from './js/Artifact.js';\nimport * as statUtils from './js/Stat.js';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { FIREBASE_APIKEY, FIREBASE_AUTHDOMAIN, FIREBASE_PROJECTID, FIREBASE_STORAGEBUCKET, FIREBASE_MESSAGINGSENDERID, FIREBASE_APPID } from '@env';\n\nimport styles from './js/Styles.js';\n\n\nexport default class App extends Component {\n\n  constructor() {\n    super();\n\n    // Initialize Firebase\n    const firebaseConfig = {\n      apiKey: FIREBASE_APIKEY,\n      authDomain: FIREBASE_AUTHDOMAIN,\n      projectId: FIREBASE_PROJECTID,\n      storageBucket: FIREBASE_STORAGEBUCKET,\n      messagingSenderId: FIREBASE_MESSAGINGSENDERID,\n      appId: FIREBASE_APPID,\n    }\n    if (!firebase.apps.length) {\n      firebase.initializeApp(firebaseConfig);\n    }\n\n    // Initialize Firestore\n    this.db = firebase.firestore();\n\n    this.state = {\n      hasLoaded: false,\n\n      characterId: undefined,\n      character: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n\n      weaponId: undefined,\n      weapon: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n\n      characterStats: undefined,\n      weaponStats: undefined,\n      totalStats: undefined,\n\n      artifactFlower: new Artifact('Flower'),\n      artifactFeather: new Artifact('Feather'),\n      artifactSands: new Artifact('Sands'),\n      artifactGoblet: new Artifact('Goblet'),\n      artifactCirclet: new Artifact('Circlet'),\n    }\n  }\n\n  // Called when component is mounted for the first time\n  async componentDidMount() {\n    // Get ref to stat curves\n    this.dbCharStatCurveColRef = this.db.collection('characterStatCurves');\n    this.dbWeaponStatCurveColRef = this.db.collection('weaponStatCurves');\n\n    // Get inititialization data (e.g. character and weapon list)\n    let dbInitRef = this.db.collection('init').doc('lists');\n    let initSnapshot = await dbInitRef.get();\n    if (initSnapshot.exists) {\n      let doc = initSnapshot.data();\n      this.characters = doc.characters; // Array of character names\n      this.weapons = doc.weapons;   // Object where key: weapon name and value: weapon type\n      this.propMap = doc.props;   // Object where key: prop and value: object\n      this.setState({ hasLoaded: true })\n    } else {\n      console.log('WARN: Initialization data not found. The page will not be able to load.');\n      return;\n    }\n  }\n\n  renderCharacterList = () => {\n    let sortedChars = this.characters.sort((name1, name2) => name1.localeCompare(name2));\n    \n    return (\n      <View style={styles.characterSelectRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={async (value, _) => {\n            if (value != 0) {\n              let doc = await this.db.collection('characters').doc(value)\n                .withConverter(characterConverter)\n                .get()\n\n              if (doc.exists) {\n                this.setState({\n                  characterId: value,\n                  character: await doc.data(),\n                }, () => {\n                  // callback function from setstate\n                  this.setCharacterStats();\n                });\n              } else {\n                console.log(`WARN: Could not find data for character ${value}`);\n              }\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {sortedChars.map(name => <Picker.Item label={name} value={name} key={name} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    return (\n      <View style={styles.characterSelectRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={async (value, _) => {\n            if (value != 0) {\n              let weaponType = this.weapons[value];\n              let weaponDoc = await this.db.collection('weapons').doc(weaponType).collection(weaponType + 's').doc(value)\n                .withConverter(weaponConverter)\n                .get();\n\n              if (weaponDoc.exists) {\n                this.setState({\n                  weaponId: value,\n                  weapon: await weaponDoc.data(),\n                }, () => {\n                  // callback function from setstate\n                  this.setWeaponStats();\n                });\n              } else {\n                console.log(`WARN: Could not find data for weapon ${value}`);\n              }\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {Object.keys(this.weapons).map(name => <Picker.Item label={name} value={name} key={name} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.state.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  setCharacterStats = async () => {\n    if (this.state.character !== undefined) {\n      let stats = await this.state.character.getInnateStatsAt(this.state.characterLevel, this.state.isCharacterAscended, this.dbCharStatCurveColRef);\n      this.setState({ characterStats: stats }, () => { this.setTotalStats() });\n    }\n  }\n\n  setWeaponStats = async () => {\n    if (this.state.weapon !== undefined) {\n      let stats = await this.state.weapon.getStatsAt(this.state.weaponLevel, this.state.isWeaponAscended, this.dbWeaponStatCurveColRef);\n      this.setState({ weaponStats: stats }, () => { this.setTotalStats() });\n    }\n  }\n\n  setArtifact = (type) => {\n    let artifact = this.state['artifact' + type];\n    this.setState({['artifact' + type]: artifact}, () => { this.setTotalStats() });\n  }\n\n  setTotalStats = async () => {\n    let artifacts = [this.state.artifactFlower, this.state.artifactFeather, this.state.artifactSands, this.state.artifactGoblet, this.state.artifactCirclet];\n\n    let stats = await getTotalStatsAt(\n      this.state.weapon, \n      this.state.weaponLevel, \n      this.state.isWeaponAscended, \n      this.dbWeaponStatCurveColRef,\n      this.state.character,\n      this.state.characterLevel,\n      this.state.isCharacterAscended,\n      this.dbCharStatCurveColRef,\n      artifacts,\n    );\n    \n    this.setState({ totalStats: stats });\n  }\n\n  /*\n  hasCharacterParamsChanged = () => {\n    let hasChanged = false;\n\n    if (this.state.character !== undefined) {\n      hasChanged = hasChanged || ((!isNaN(this.state.characterLevel) || !isNaN(this.state.character.level)) && this.state.characterLevel != this.state.character.level) || (this.state.isCharacterAscended != this.state.character.hasAscended);\n    }\n    \n    return hasChanged;\n  }\n\n  hasWeaponParamsChanged = () => {\n    let hasChanged = false;\n\n    if (this.state.weapon !== undefined) {\n      hasChanged = hasChanged || ((!isNaN(this.state.weaponLevel) || !isNaN(this.state.weapon.weaponLevel)) && this.state.weaponLevel != this.state.weapon.weaponLevel) || (this.state.isWeaponAscended != this.state.weapon.hasAscended);\n    }\n\n    return hasChanged;\n  }\n  */\n\n  renderCharacterStats = () => {\n    return (\n      <View>\n        {/* Render character stats */ }\n        {\n          this.state.character ? (\n            <View>\n              {this.renderCharacterImage()}\n              <Text style={styles.resultText}>Selected character: {this.state.character ? this.state.character.name : ''}</Text>\n              {\n                this.state.characterStats ? (\n                  // TODO: Make sure the stats are displayed in a particular order\n                  Object.entries(this.state.characterStats).map(([stat, value]) => {\n                    return <Text style={styles.resultText}>{this.propMap[stat].name}: {statUtils.getStatDisplayValue(value, this.propMap[stat].isPercentage)}</Text>\n                  })\n                ) : null\n              }\n            </View>\n          ) : null\n        }\n        \n        <br/>\n\n        {/* Render weapon stats */}\n        {\n          this.state.weapon ? (\n            <View>\n              <Text style={styles.resultText}>Selected weapon: {this.state.weapon ? this.state.weapon.name : ''}</Text>\n              {\n                this.state.weaponStats ? (\n                  // TODO: Make sure the stats are displayed in a particular order\n                  Object.entries(this.state.weaponStats).map(([stat, value]) => {\n                    return <Text style={styles.resultText}>{this.propMap[stat].name}: {statUtils.getStatDisplayValue(value, this.propMap[stat].isPercentage)}</Text>\n                  })\n                ) : null\n              }\n            </View>\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  renderArtifactMainStat = (type) => {\n    return (\n      <View style={styles.levelInputRow}>\n        {\n          <View>\n            <Picker\n              selectedValue={this.state['artifact' + type].mainStat.stat}\n              onValueChange={(stat, _) => {\n                if (stat != 0) {\n                  this.state['artifact' + type].setMainStat(stat, undefined, this.propMap[stat].isPercentage);\n\n                  // Force refresh\n                  this.setArtifact(type);\n                }\n              }}\n            >\n              <Picker.Item label='' value={0} />\n              {mainStatProps[type].map(prop => <Picker.Item label={this.propMap[prop].name} value={prop} key={prop} />)}\n            </Picker>\n          </View>\n        }\n\n        <TextInput \n          style={styles.levelInput} \n          onChangeText={text => {\n            let stat = this.state['artifact'+type].mainStat.stat;\n            if (stat) {\n              this.state['artifact' + type].setMainStat(undefined, parseFloat(text), this.propMap[stat].isPercentage);\n            } else {\n              // If stat type is not yet set\n              this.state['artifact' + type].setMainStat(undefined, parseFloat(text), false);\n            }\n\n            // Force refresh\n            this.setArtifact(type);\n          }}\n        />\n      </View>\n    )\n  }\n\n  renderArtifactSubStats = (type) => {\n    return (\n      <View>\n        {\n          this.state['artifact' + type].subStats.map((subStat, index) => {\n            return (\n              <View style={styles.levelInputRow}>\n                <Picker\n                  selectedValue={subStat.stat}\n                  onValueChange={(stat, _) => {\n                    if (stat != 0) {\n                      this.state['artifact' + type].setSubStat(index, stat, undefined, this.propMap[stat].isPercentage);\n      \n                      // Force refresh\n                      this.setArtifact(type);\n                    }\n                  }}\n                >\n                  <Picker.Item label='' value={0} />\n                  {subStatProps.map(prop => <Picker.Item label={this.propMap[prop].name} value={prop} key={prop} />)}\n                </Picker>\n\n                <TextInput \n                  style={styles.levelInput} \n                  onChangeText={text => {\n                    let stat = subStat.stat;\n                    if (stat) {\n                      this.state['artifact' + type].setSubStat(index, undefined, parseFloat(text), this.propMap[stat].isPercentage);\n                    } else {\n                      // If stat type is not yet set\n                      this.state['artifact' + type].setSubStat(index, undefined, parseFloat(text), false);\n                    }\n\n                    // Force refresh\n                    this.setArtifact(type);\n                  }}\n                />\n              </View>\n            )\n          })\n        }\n      </View>\n    )\n  }\n\n  renderArtifactStat = (type) => {\n    return (\n      <View>\n        <Text>{type}</Text>\n\n        <Text style={{fontWeight: 'bold'}}>Main Stat</Text>\n        {this.renderArtifactMainStat(type)}\n\n        <Text style={{fontWeight: 'bold'}}>Substats</Text>\n        {this.renderArtifactSubStats(type)}\n      </View>\n    )\n  }\n\n  renderAllArtifactStats = () => {\n    return (\n      <View>\n        {this.renderArtifactStat('Flower')}\n        {this.renderArtifactStat('Feather')}\n        {this.renderArtifactStat('Sands')}\n        {this.renderArtifactStat('Goblet')}\n        {this.renderArtifactStat('Circlet')}\n      </View>\n    )\n  }\n\n  renderTotalStats = () => {\n    return (\n      <View>\n        {\n          this.state.totalStats ? (\n            // TODO: Make sure the stats are displayed in a particular order\n            Object.entries(this.state.totalStats).map(([stat, value]) => {\n              return <Text style={styles.resultText}>{this.propMap[stat].name}: {statUtils.getStatDisplayValue(value, this.propMap[stat].isPercentage)}</Text>\n            })\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  render() {\n    if (this.state.hasLoaded) {\n      return (\n        <View style={styles.container}>\n          <View style={styles.inputColumn}>\n            {this.renderCharacterList()}\n\n            <View style={styles.levelInputRow}>\n              <Text>Level: </Text>\n              <TextInput \n                style={styles.levelInput}\n                defaultValue={this.state.characterLevel} \n                onChangeText={text => {\n                  this.setState({characterLevel: parseInt(text)}, () => { this.setCharacterStats() });\n                }}\n              />\n            </View>\n\n            <View style={styles.ascensionCheckRow}>\n              <Text>Ascended? </Text>\n              <Checkbox\n                onValueChange={value => this.setState({isCharacterAscended: value}, () => { this.setCharacterStats() })}\n                value={this.state.isCharacterAscended}\n              />\n            </View>\n\n            <br/>\n\n            {this.renderWeaponList()}\n\n            <View style={styles.levelInputRow}>\n              <Text>Level: </Text>\n              <TextInput \n                style={styles.levelInput}\n                defaultValue={this.state.weaponLevel} \n                onChangeText={text => {\n                  this.setState({weaponLevel: parseInt(text)}, () => { this.setWeaponStats() });\n                }}\n              />\n            </View>\n\n            <View style={styles.ascensionCheckRow}>\n              <Text>Ascended? </Text>\n              <Checkbox\n                onValueChange={value => this.setState({isWeaponAscended: value}, () => { this.setWeaponStats() })}\n                value={this.state.isWeaponAscended}\n              />\n            </View>\n\n          </View>\n\n          <View style={styles.resultColumn}>\n            {this.renderCharacterStats()}\n            <br/>\n            {this.renderAllArtifactStats()}\n            <br/>\n            {this.renderTotalStats()}\n          </View>\n\n        </View>\n      )\n    } else {\n      return (\n        <View style={styles.container}>\n          <Text>Loading...</Text>\n        </View>\n      )\n    }\n  }\n}\n\n\n"],"sourceRoot":""}