{"version":3,"sources":["optimization/OptimizerWorker.ts","data/Data.ts","character/Character.ts","stat/Stat.ts","artifact/types.ts","artifact/Artifact.ts","artifact/ArtifactSet.ts","option/Option.ts","option/artifactSetOptions/ArtifactSetOption.ts","artifact/artifactSet/ArchaicPetra.ts","artifact/artifactSet/Berserker.ts","artifact/artifactSet/BlizzardStrayer.ts","artifact/artifactSet/BloodstainedChivalry.ts","artifact/artifactSet/BraveHeart.ts","artifact/artifactSet/CrimsonWitch.ts","option/OptionUtils.ts","option/index.ts","option/Mixin.ts","talent/types.ts","artifact/artifactSet/EmblemOfSeveredFate.ts","artifact/artifactSet/Gambler.ts","artifact/artifactSet/GladiatorsFinale.ts","artifact/artifactSet/HeartOfDepth.ts","artifact/artifactSet/HuskOfOpulentDreams.ts","artifact/artifactSet/Instructor.ts","artifact/artifactSet/Lavawalker.ts","artifact/artifactSet/MaidenBeloved.ts","artifact/artifactSet/MartialArtist.ts","artifact/artifactSet/NoblesseOblige.ts","artifact/artifactSet/PaleFlame.ts","artifact/artifactSet/ResolutionOfSojourner.ts","artifact/artifactSet/RetracingBolide.ts","artifact/artifactSet/Shimenawa.ts","artifact/artifactSet/Tenacity.ts","artifact/artifactSet/Thundersoother.ts","artifact/artifactSet/TinyMiracle.ts","artifact/artifactSet/ViridescentVenerer.ts","artifact/artifactSet/WanderersTroupe.ts","artifact/ArtifactSetUtil.ts","constellation/Constellation.ts","option/characterOptions/CharacterOption.ts","character/albedo/AlbedoConstellation.ts","modifier/Reaction.ts","character/albedo/AlbedoPassive.ts","modifier/CritType.ts","talent/TalentUtil.ts","character/albedo/AlbedoTalent.ts","character/albedo/AlbedoTeamPassive.ts","character/albedo/Albedo.ts","character/aloy/AloyOption.ts","character/aloy/AloyPassive.ts","character/aloy/AloyTalent.ts","character/aloy/Aloy.ts","character/amber/AmberTalent.ts","character/amber/Amber.ts","character/ayaka/AyakaOption.ts","character/ayaka/AyakaTalent.ts","character/ayaka/Ayaka.ts","character/barbara/BarbaraTalent.ts","character/barbara/Barbara.ts","character/beidou/BeidouPassive.ts","character/beidou/BeidouTalent.ts","character/beidou/Beidou.ts","character/bennett/BennettTalent.ts","character/bennett/BennettTeamPassive.ts","character/bennett/Bennett.ts","character/chongyun/ChongyunOption.ts","character/chongyun/ChongyunTalent.ts","character/chongyun/Chongyun.ts","character/diluc/DilucTalent.ts","character/diluc/DilucOption.ts","character/diluc/Diluc.ts","character/diona/DionaTalent.ts","character/diona/Diona.ts","character/eula/EulaTalent.ts","character/eula/Eula.ts","character/fischl/FischlTalent.ts","character/fischl/Fischl.ts","character/ganyu/GanyuTalent.ts","character/ganyu/Ganyu.ts","character/hutao/HutaoPassive.ts","character/hutao/HutaoTalent.ts","character/hutao/HutaoOption.ts","character/hutao/Hutao.ts","character/jean/JeanTalent.ts","character/jean/Jean.ts","character/kaeya/KaeyaTalent.ts","character/kaeya/Kaeya.ts","character/kazuha/KazuhaTalent.ts","option/characterOptions/ElementalAbsorptionOption.ts","character/kazuha/KazuhaOption.ts","character/kazuha/Kazuha.ts","character/keqing/KeqingTalent.ts","character/keqing/Keqing.ts","character/klee/KleeTalent.ts","character/klee/Klee.ts","character/kokomi/KokomiPassive.ts","character/kokomi/KokomiTalent.ts","character/kokomi/KokomiOption.ts","character/kokomi/Kokomi.ts","character/lisa/LisaTalent.ts","character/lisa/Lisa.ts","character/mona/MonaOption.ts","character/mona/MonaTalent.ts","character/mona/Mona.ts","character/ningguang/NingguangTalent.ts","character/ningguang/Ningguang.ts","character/noelle/NoelleTalent.ts","character/noelle/NoelleOption.ts","character/noelle/Noelle.ts","character/qiqi/QiqiTalent.ts","character/qiqi/Qiqi.ts","character/raiden/RaidenPassive.ts","character/raiden/RaidenTalent.ts","character/raiden/RaidenOption.ts","character/raiden/Raiden.ts","character/razor/RazorTalent.ts","character/razor/Razor.ts","character/rosaria/RosariaTalent.ts","character/rosaria/Rosaria.ts","character/sara/SaraTalent.ts","character/sara/Sara.ts","character/sayu/SayuTalent.ts","character/sayu/SayuOption.ts","character/sayu/Sayu.ts","character/sucrose/SucroseOption.ts","character/sucrose/SucroseTalent.ts","character/sucrose/Sucrose.ts","character/tartaglia/TartagliaTalent.ts","character/tartaglia/TartagliaPassive.ts","character/tartaglia/TartagliaTeamPassive.ts","character/tartaglia/Tartaglia.ts","character/thoma/ThomaTalent.ts","character/thoma/ThomaPassive.ts","character/thoma/ThomaConstellation.ts","character/thoma/ThomaTeamPassive.ts","character/thoma/Thoma.ts","character/venti/VentiTalent.ts","character/venti/VentiOption.ts","character/venti/Venti.ts","character/xiangling/XianglingTalent.ts","character/xiangling/Xiangling.ts","character/xiao/XiaoOption.ts","character/xiao/XiaoTalent.ts","character/xiao/Xiao.ts","character/xingqiu/XingqiuTalent.ts","character/xingqiu/Xingqiu.ts","character/xinyan/XinyanTalent.ts","character/xinyan/Xinyan.ts","character/yanfei/YanfeiOption.ts","character/yanfei/YanfeiTalent.ts","character/yanfei/Yanfei.ts","character/yoimiya/YoimiyaOption.ts","character/yoimiya/YoimiyaPassive.ts","character/yoimiya/YoimiyaTalent.ts","character/yoimiya/Yoimiya.ts","character/zhongli/ZhongliTalent.ts","character/zhongli/ZhongliTeamPassive.ts","character/CharacterUtil.ts","character/zhongli/Zhongli.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/IntInput.tsx","component/Picker.tsx","component/ArtifactBlock.tsx","stat/Resistance.ts","modifier/DamageModifer.ts","option/characterOptions/SwirlOption.ts","teambuff/artifact/ArtifactTeamBuff.ts","dps/DPSCalculator.ts","optimization/Optimization.ts","optimization/OptimizerWorkerShim.js","weapon/Weapon.ts","option/weaponOptions/WeaponOption.ts","weapon/cinnabarspindle/CinnarbarSpindle.ts","weapon/cinnabarspindle/CinnabarSpindlePassive.ts","weapon/dragonsbane/DragonsBane.ts","weapon/dragonsbane/DragonsBanePassive.ts","weapon/engulfinglightning/EngulfingLightning.ts","weapon/engulfinglightning/EngulfingLightningPassive.ts","weapon/everlastingmoonglow/EverlastingMoonglow.ts","weapon/everlastingmoonglow/EverlastingMoonglowPassive.ts","weapon/luxurioussealord/LuxuriousSeaLord.ts","weapon/luxurioussealord/LuxuriousSeaLordPassive.ts","weapon/polarstar/PolarStar.ts","weapon/polarstar/PolarStarPassive.ts","weapon/solarpearl/SolarPearl.ts","weapon/solarpearl/SolarPearlPassive.ts","weapon/staffofhoma/StaffOfHoma.ts","weapon/staffofhoma/StaffOfHomaPassive.ts","weapon/thecatch/TheCatch.ts","weapon/thecatch/TheCatchPassive.ts","weapon/watatsumi/WatatsumiWavewalker.ts","weapon/watatsumi/Akuoumaru.ts","weapon/watatsumi/MouunsMoon.ts","weapon/WeaponUtil.ts","weapon/watatsumi/WavebreakersFin.ts","weapon/whiteblind/Whiteblind.ts","weapon/whiteblind/WhiteblindPassive.ts","option/characterOptions/ReactionOption.ts","save/Save.ts","component/Checkbox.tsx","component/InputBlock.tsx","component/OptimizerBlock.tsx","component/ArtifactColumn.tsx","component/OptionInput.tsx","component/DPSOptionInput.tsx","component/DPSAttackInput.tsx","dps/OHCAttack.ts","dps/Attack.ts","component/OHCInput.tsx","component/OHCBlock.tsx","component/DPSColumn.tsx","component/ArtifactSetPicker.tsx","component/ArtifactSetInputBlock.tsx","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","component/SaveBlock.tsx","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/TeamBuffOptionInput.tsx","component/TeamInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","talent/ReactionTalent.ts","talent/Talent.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","constellations","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","weaponPassiveData","weaponPassiveDataRaw","reactionCurveData","processReactionCurveData","reactionCurveDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getWeaponPassiveData","getWeaponPassiveParams","refinement","passive","passiveParams","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentParams","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","getWeaponPassiveAt","Character","hasAscended","constellationLevel","_id","baseStats","statCurveMapping","talentFns","_level","_hasAscended","_constellationLevel","innateStats","characterOptions","passiveOptions","constellationOptions","teamOptions","this","value","data","getTalentFns","getInnateStatsAt","getCharacterOptions","ascensionLevel","getAscensionLevel","getPassives","getPassiveOptions","getConstellations","getConstellationsOptions","getTeamOptions","prevAscensionLevel","prevConstellationLevel","isNaN","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","multiplier","bonus","getCharacterOptionConstuctors","Option","getAllPassives","filter","flatMap","options","oldOptionIds","newOptions","includes","concat","keptOptionIds","option","statMixin","mixin","modifierMixin","getAllConstellations","constellation","getTeamPassive","teamPassive","unroll","getStatDisplayValue","prop","isPercentage","toFixed","Math","round","toString","getDamageDisplayValue","values","str","length","every","slice","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","talentAttackLevel","talentSkillLevel","talentBurstLevel","statMixins","characterStats","weaponStats","stats","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","energyRecharge","apply","totalStats","baseAtk","flatAtk","atkBonus","flatDef","baseDef","defBonus","flatHp","baseHp","hpBonus","critRate","critDmg","elementalMastery","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","shieldStrength","dmgBonus","normalDmgBonus","chargedDmgBonus","plungeDmgBonus","skillDmgBonus","burstDmgBonus","chargedCritRate","burstCritRate","overloadDmgBonus","burningDmgBonus","vaporizeDmgBonus","meltDmgBonus","capitalize","toUpperCase","ArtifactType","InputStat","rawValue","convertStatToDisplayValue","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","setMainStatValue","getArtifactMainStatValue","i","setProp","setInputValue","setValue","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","ArtifactSet","bonusThresholds","setBonusData","_pieces","setBonusSets","setBonuses","getSetBonusSetsAt","getSetBonusesAt","getOptions","prevPieces","getAllSetBonuses","setBonus","threshold","bonuses","statBonus","extraStats","ArtifactSetOption","ArchaicPetra","archaicPetra4Pc","params4Pc","ArchaicPetra4PcOption","choices","Berserker","berserker4Pc","BlizzardStrayer","blizzardStrayer4Pc","BloodstainedChivalry","bloodstainedChivalry4Pc","BraveHeart","braveHeart4Pc","CrimsonWitch","crimsonWitch4Pc","param","find","stacks","isBooleanOption","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","Priority","getStatMixins","weaponOptions","artifactSets","artifactSetOptions","teamCharacters","artifactBuffOptions","characterPassiveMixins","getPassiveStatMixins","characterConstellationMixins","getConstellationStatMixins","weaponPassiveMixins","artifactSetMixins","artifactSet","teamPassiveMixins","getTeamStatMixin","characterOptionMixins","weaponOptionMixins","artifactSetOptionMixins","teamOptionMixins","artifactBuffOptionMixins","unarrangedMixins","groupedMixins","Map","priority","Normal","array","get","push","set","Last","getModifierMixins","swirlOption","getPassiveModifierMixins","getConstellationModifierMixins","getTeamModifierMixin","swirlOptionMixin","TalentType","Element","AttackType","ScalingType","EmblemOfSeveredFate","emblemOfSeveredFate4Pc","Gambler","gambler2Pc","GladiatorsFinale","gladiatorsFinale4Pc","HeartOfDepth","heartOfDepth4Pc","HuskOfOpulentDreams","huskOfOpulentDreams4Pc","Instructor","instructor4Pc","Instructor4PcOption","Lavawalker","lavawalker4Pc","MaidenBeloved","maidenBeloved4Pc","healedBonus","MartialArtist","martialArtist2Pc","martialArtist4Pc","params2Pc","NoblesseOblige","noblesseOblige2Pc","noblesseOblige4Pc","NoblesseOblige4PcOption","PaleFlame","paleFlame4Pc","ResolutionOfSojourner","resolutionOfSojourner4Pc","RetracingBolide","retracingBolide4Pc","Shimenawa","shimenawa4Pc","Tenacity","tenacity4Pc","Tenacity4PcOption","Thundersoother","thundersoother4Pc","TinyMiracle","tinyMiracle2Pc","element","ViridescentVenerer","viridescentVenerer4Pc","ViridescentVenerer4PcOption","Cryo","Electro","Hydro","Pyro","modifier","enemyResReduction","add","WanderersTroupe","wanderersTroupe4Pc","resolutionofsojourner","tinymiracle","martialartist","gambler","gladiatorsfinale","viridescentvenerer","wandererstroupe","crimsonwitchofflames","noblesseoblige","emblemofseveredfate","braveheart","berserker","instructor","blizzardstrayer","thundersoother","lavawalker","maidenbeloved","bloodstainedchivalry","archaicpetra","retracingbolide","heartofdepth","tenacityofthemillelith","paleflame","shimenawasreminiscence","huskofopulentdreams","getArtifactSetConstructor","initArtifactSet","ArtifactSetConstructor","getAllArtifactSetBonuses","ConstellationSkill","ConstellationBurst","CharacterOption","children","c2Params","AlbedoOptionConstellation4","AlbedoOptionConstellation6","Reaction","albedoConstellations","burstFlatDmg","albedoPassives","albedoBlossomDmgBonus","CritType","calculateBaseDamage","scalingType","flatDmg","Attack","Defense","Hp","calculateResMultiplier","res","resReduction","totalRes","calculateAmplifyingReactionMultiplier","reaction","amplifyingStrength","triggerElement","Melt","Vaporize","calculateAmplifyingStrengthMultiplier","reactionBonus","calculateTotalDamage","attackType","normalAttackFlatDmg","Charged","chargedAttackFlatDmg","Skill","skillFlatDmg","Burst","baseDmg","getDamageBonus","crit","critType","Crit","Average","min","characterLevel","enemyLevel","enemyDefReduction","enemyRes","calculateHp","flatBonus","normalAttackSingle","damage","infusionNormal","infusion","Physical","normalAttackMulti","hits","damages","chargedAttackSingle","chargedAttackMulti","aimShot","aimShotCharged","plungeAttack","infusionPlunge","Plunge","skillSingle","skillMulti","burstSingle","burstMulti","typelessAttack","None","healingValue","flatHealing","calculateHealing","hpValue","shieldHpValue","dmgAbsorption","Geo","dionaHoldSkill","calculateDmgAbsorption","atkBuffValue","albedoTalents","chargedDmg","plungeDmg","lowPlungeDmg","highPlungeDmg","skillDmg","transientBlossomDmg","getAlbedoTransientBlossomStats","burstDmg","fatalBlossomDmg","a4Params","albedoTeamPassive","Albedo","aloyOptions","_talentAttackLevel","_talentBurstLevel","skillParams","a1Data","a4Data","a1Params","aloyPassives","aloyTalents","aimShotDmg","chargedAimShotDmg","freezeBombDmg","chillwaterBombletDmg","Aloy","amberTalents","explosionDmg","baronBunnyHp","dmgPerWave","totalDmg","talentValue","Amber","ayakaOptions","ayakaTalents","cuttingDmg","bloomDmg","Ayaka","barbaraTalents","hpRegenContinuous","hpRegenOnHit","dropletDmg","hpRegen","Barbara","beidouPassives","beidouTalents","chargedSpinDmg","chargedFinalDmg","shieldHp","dmgBonusOnHitTaken","lightningDmg","Beidou","bennettTalents","pressDmg","chargeLevel1Dmg","chargeLevel2Dmg","hpRegenContinuousPerSecond","BennettOptionAtkBuff","bennettTeamPassive","atkBuff","Bennett","chongyunOptions","chongyunTalents","Chongyun","dilucTalents","slashingDmg","dot","dilucOptions","_talentSkillLevel","passiveData","Diluc","dionaTalents","icyPawDmgPerPaw","shieldHpPress","shieldHpHold","continuousFieldDmg","hpRegenContinuousTime","Diona","eulaTalents","holdDmg","icewhirlBrandDmg","lightfallSwordBaseDmg","lightfallSwordStackDmg","Eula","fischlTalents","ozDmg","summoningDmg","fallingThunderDmg","Fischl","ganyuTalents","aimShotChargeLevel1","frostflakeArrowDmg","frostflakeArrowBloomDmg","iceLotusHp","iceShardDmg","Ganyu","hutaoPassives","hutaoTalents","bloodBlossomDmg","burstDmgLowHp","hpRegenLowHp","hutaoOptions","flatAtkBonus","Hutao","jeanTalents","Anemo","fieldEnterExitDmg","fieldActivationHealing","Jean","kaeyaTalents","Kaeya","kazuhaTalents","dotElementalAbsorption","elementalAbsorption","ElementalAbsoprtionOption","kazuhaOptions","Kazuha","keqingTalents","lightningStilettoDmg","thunderclapSlashDmg","burstInitDmg","consecutiveSlashDmg","lastAttackDmg","Keqing","kleeTalents","jumpyDumptyDmg","mineDmg","sparksNSplashDmg","Klee","kokomiPassives","kokomiHealingBonusDmg","kokomiTalents","getKokomiNormalAttackModifier","getKokomiChargedAttackModifier","rippleDmg","getKokomiSkillModifier","kokomiBurst","newModifier","normalAttackBonusDmg","chargedAttackBonusDmg","skillBonusDmg","kokomiOptions","Kokomi","lisaTalents","holdDmgStack0","holdDmgStack1","holdDmgStack2","holdDmgStack3","Lisa","monaOptions","burstParams","monaTalents","Mona","ningguangTalents","normalAtkDmg","starJadeDmg","jadeScreenHp","dmgPerGem","Ningguang","noelleTalents","healing","firstSwingDmg","noelleOptions","totalDef","Noelle","qiqiTalents","heraldOfFrostDmg","Qiqi","raidenPassives","raidenTalents","coordinatedAtkDmg","musouNoHitotachiDmg","getInitialResolveBonus","getAttackResolveBonus","resolveStacks","raidenOptions","Raiden","razorTalents","Razor","rosariaTalents","iceLanceDot","Rosaria","saraTalents","tenguJuuraiAmbushDmg","tenguJuuraiTitanbreakerDmg","tenguJuuraiStormclusterDmg","Sara","sayuTalents","fuufuuWindwheelDmg","fuufuuWhirlwindKickPressDmg","fuufuuWhirlwindKickHoldDmg","fuufuuWindwheelElementalDmg","fuufuuWhirlwindKickElementalDmg","activationDmg","activationHealing","mujimujiDarumaDmg","mujimujiDarumaHealing","sayuOptions","Sayu","sucroseOptions","sucroseTalents","Sucrose","tartagliaTalents","riptideFlashDmg","riptideBurstDmg","stanceChangeDmg","riptideSlashDmg","burstDmgMelee","burstDmgRanged","riptideBlastDmg","tartagliaAscension0","tartagliaPassives","tartagliaTeamPassive","Tartaglia","thomaTalents","shieldHpMax","fieryCollapseDmg","getThomaFieryCollapseModifier","thomaHpBonusDmg","thomaPassives","c6Params","ThomaOptionConstellation6","thomaConstellations","thomaTeamPassive","Thoma","ventiTalents","ventiOptions","Venti","xianglingTalents","guobaDmg","swing1HitDmg","swing2HitDmg","swing3HitDmg","pyronadoDmg","Xiangling","xiaoOptions","xiaoTalents","Xiao","xingqiuTalents","swordRainDmg","Xingqiu","xinyanTalents","swingDmg","shieldHpLevel1","shieldHpLevel2","shieldHpLevel3","pyroDot","Xinyan","yanfeiOptions","yanfeiTalents","chargedDmgSeal0","chargedDmgSeal1","chargedDmgSeal2","chargedDmgSeal3","chargedDmgSeal4","Yanfei","yoimiyaOptions","yoimiyaSkill","yoimiyaPassives","yoimiyaTalents","getYoimiyaNormalAttackMultiplier","kindlingArrowDmg","aurousBlazeExplosionDmg","Yoimiya","zhongliTalents","stoneSteeleDmg","resonanceDmg","zhongliTeamPassive","characters","albedo","aloy","amber","ayaka","barbara","beidou","bennett","chongyun","diluc","diona","eula","fischl","ganyu","hutao","jean","kaeya","kazuha","keqing","klee","kokomi","lisa","mona","ningguang","noelle","qiqi","raiden","razor","rosaria","sara","sayu","sucrose","tartaglia","thoma","venti","xiangling","xiao","xingqiu","xinyan","yanfei","yoimiya","zhongli","getCharacterConstructor","initCharacter","CharacterConstructor","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","Form","Label","htmlFor","srOnly","label","Control","size","className","React","Component","FloatInput","parseFloat","InputRow","Row","IntInput","Picker","selectedValue","target","handleChange","onChange","as","Item","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactRarity","setArtifactLevel","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatInputValue","statObj","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","prevValue","getDamageModifier","modifierMixins","SwirlOption","swirlElement","artifactTeamBuffs","calculateTalentValue","talentType","talentId","initializeAllOptions","characterOptionsNew","weaponOptionsNew","artifactSetOptionsNew","teamOptionsNew","artifactBuffOptionsNew","swirlOptionNew","allOptions","newOption","talentFn","characterOption","weaponOption","artifactSetOption","teamOption","OptionConstructor","artifactOption","substats","OptimizerWorker","Weapon","rank","passiveDataSet","_weaponLevel","_refinement","getPassive","getStatsAt","weaponLevel","weaponStatCurves","shouldKeepValue","statBonuses","WeaponOption","CinnabarSpindle","cinnabarSpindlePassive","DragonsBane","dragonsBanePassive","EngulfingLightning","engulfingLightningPassive","EverlastingMoonglow","everlastingMoonglowPassive","LuxuriousSeaLord","luxuriousSeaLordPassive","PolarStar","polarStarPassive","SolarPearl","solarPearlPassive","StaffOfHoma","totalHp","staffOfHomaPassive","TheCatch","theCatchPassive","watatsumiWavewalkerPassive","Akuoumaru","MouunsMoon","weapons","cinnabarspindle","dragonsbane","engulfinglightning","staffofhoma","thecatch","wavebreakersfin","everlastingmoonglow","solarpearl","luxurioussealord","whiteblind","whiteblindPassive","akuoumaru","polarstar","mouunsmoon","getWeaponConstructor","initWeapon","WeaponConstructor","ReactionOption","createOptionSave","createAttackSave","createOHCAttackSave","heals","createSave","appState","characterHasAscended","characterConstellationLevel","weaponHasAscended","weaponRefinement","createArtifactSave","artifactSetId","artifactSetPieces","teamCharacterIds","rotationTime","rotation","ohcRotation","unpackArtifactSave","save","artifactType","unpackOptionSave","unpackAttackOptionSave","constructor","unpackAttackSave","unpackSave","artifactSave","unpackOHCAttackSave","loadSave","setAppState","refreshApp","Checkbox","checked","Check","Input","InputBlock","OptimizerBlock","maxRolls","selectedSubstats","erThreshold","substatRolls","isOptimizing","setMaxRolls","setSelectedSubstats","selected","substat","setErThreshold","onOptimizeClick","a","worker","optimize","possibleStats","result","terminate","updateTotalStats","subStatRolls","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","Button","variant","onClick","disabled","rolls","ArtifactColumn","Col","md","xs","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","choice","DPSOptionInput","setOptionId","setOption","index","DPSAttackInput","setTalentType","setAttack","setTalentId","setMultiplier","splice","defaultOHCAttack","ohcParams","calculateOHCTalentValue","totalHeal","enemyResMultiplier","ohcTalent","defaultAttack","OHCInput","ohcAttack","OHCBlock","DPSColumn","dpr","dps","updateTalentValue","updateTalentValues","updateOHCTalentValues","dmg","setRotationTime","time","hasOHC4Pc","some","shouldRenderOHC","removeOHC","isFinite","ArtifactSetPicker","setArtifactSetId","sort","name1","name2","localeCompare","ArtifactSetInputBlock","updateArtifactSetBonuses","setArtifactSetPieces","CharacterPicker","setCharacterId","CharacterInputBlock","setCharacterLevel","setIsCharacterAscended","isAscended","setCharacterConstellationLevel","ModifierInputBlock","setEnemyLevel","setEnemyRes","setCritType","setReaction","updateSwirlOption","ToggleButtonGroup","ToggleButton","SaveBlock","onSaveClick","saveInputName","saves","window","localStorage","setItem","JSON","stringify","addSave","onSaveInputChange","onLoadClick","selectedSave","onLoadInputChange","onDeleteClick","showDeleteWarning","onDeleteModalConfirm","deleteSave","onDeleteModalHide","onImportClick","showImportModal","onImportModalHide","saveJson","invalidJson","onImportTextChange","onImportSubmitClick","parse","onExportClick","showExportModal","onExportModalHide","hasCopied","onCopyClick","navigator","clipboard","writeText","getItem","placeholder","Modal","show","onHide","Footer","closeButton","rows","readOnly","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","talentAttackLevelExtra","talentSkillLevelExtra","talentBurstLevelExtra","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","setIsWeaponAscended","setWeaponRefinement","TeamBuffOptionInput","TeamInputBlock","updateTeamOptions","setArtifactBuffOption","InputColumn","ArtifactSetStatBlock","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","talentValues","TalentColumn","reactionTalents","superconduct","reactionTalent","superconductDmgBonus","swirl","swirlDmgBonus","electrocharged","electrochargedDmgBonus","shatter","shatterDmgBonus","overload","levelMultiplier","getReactionCurveAt","getReactionLevelMultiplier","calculateReactionDamage","getAllTalentFns","App","updateCache","callback","newArtifactSets","damageModifier","fns","fn","Container","fluid","Navbar","sticky","bg","Nav","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4930af39.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"optimize\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"6bafeaadde6cd01fcceb.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import type * as Data from './types';\nimport type { TalentType } from '../talent/types';\n\nimport characterDataRaw from './characterdata.json';\nimport characterAscensionBonusDataRaw from './characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from './characterstatcurvedata.json';\nimport weaponDataRaw from './weapondata.json';\nimport weaponAscensionBonusDataRaw from './weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from './weaponstatcurvedata.json';\nimport weaponPassiveDataRaw from './weaponpassivedata.json';\nimport talentDataRaw from './talentdata.json';\nimport artifactSetDataRaw from './artifactsetdata.json';\nimport artifactSetBonusDataRaw from './artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from './artifactmainstatdata.json';\nimport reactionCurveDataRaw from './reactioncurvedata.json';\n\nimport propMappingRaw from './propmapping.json';\nimport talentDescMappingRaw from './talentdescmapping.json';\nimport optionMappingRaw from './optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\nconst weaponPassiveData = weaponPassiveDataRaw as Record<\n  string,\n  Data.WeaponPassiveSetData\n>;\nconst reactionCurveData = processReactionCurveData(reactionCurveDataRaw);\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n\n      constellations: talentDataSetRaw.constellations,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\nfunction processReactionCurveData(rawData: Data.ReactionCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData;\n    return acc;\n  }, {} as Record<number, Data.ReactionCurveData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getWeaponPassiveData(id: string) {\n  return getData(id, weaponPassiveData);\n}\n\nexport function getWeaponPassiveParams(id: string, refinement: number) {\n  return getWeaponPassiveData(id).passive[refinement]?.passiveParams ?? [];\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentParams(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\nexport function getWeaponPassiveAt(\n  refinement: number,\n  passives: Data.WeaponPassiveSetData\n): Data.WeaponPassiveData | undefined {\n  return passives.passive[refinement];\n}\n\nexport function getReactionCurveAt(\n  level: number\n): Data.ReactionCurveData | undefined {\n  return reactionCurveData[level];\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n} from '../data/Data';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../data/types';\nimport type { Talents } from '../talent/types';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { CharacterPassive, TeamPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport Constellation from '../constellation/Constellation';\n\nexport default class Character {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    constellationLevel = 0\n  ) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n    this._constellationLevel = constellationLevel;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n    this.talentFns = this.getTalentFns();\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n    this.constellations = this.getConstellations(this.constellationLevel);\n    this.constellationOptions = this.getConstellationsOptions(\n      this.constellationLevel\n    );\n    this.teamOptions = this.getTeamOptions();\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n  talentFns: Talents = {};\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _constellationLevel: number = 0;\n  get constellationLevel(): number {\n    return this._constellationLevel;\n  }\n  set constellationLevel(value: number) {\n    const prevConstellationLevel = this.constellationLevel;\n    this._constellationLevel = value;\n\n    this.constellations = this.getConstellations(value);\n    this.constellationOptions = this.getConstellationsOptions(\n      value,\n      prevConstellationLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  constellations: Constellation[] = [];\n\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n  constellationOptions: CharacterOption[] = [];\n  teamOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Override in derived classes\n  getTalentFns(): Talents {\n    return {};\n  }\n\n  // Override in derived classes if character has base options\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return [];\n  }\n\n  getCharacterOptions(): CharacterOption[] {\n    return this.getCharacterOptionConstuctors().map((Option) => new Option());\n  }\n\n  // Override in derived classes\n  getAllPassives(): CharacterPassive[] {\n    return [];\n  }\n\n  // Returns passives that character should have based on their current ascension\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    return this.getAllPassives().filter(\n      (passive) => ascensionLevel >= passive.ascensionLevel\n    );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(\n    ascensionLevel: number,\n    prevAscensionLevel?: number\n  ): CharacterOption[] {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  // Override in derived classes\n  getAllConstellations(): Constellation[] {\n    return [];\n  }\n\n  getConstellations(constellationLevel: number): Constellation[] {\n    return this.getAllConstellations().filter(\n      (constellation) => constellationLevel >= constellation.constellationLevel\n    );\n  }\n\n  // getConstellations should be called before this if passives are updated\n  getConstellationsOptions(\n    constellationLevel: number,\n    prevConstellationLevel?: number\n  ): CharacterOption[] {\n    if (prevConstellationLevel === undefined || isNaN(prevConstellationLevel)) {\n      return this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n    }\n\n    if (constellationLevel > prevConstellationLevel) {\n      const newOptions = this.constellations\n        .filter(\n          ({ constellationLevel }) =>\n            constellationLevel > prevConstellationLevel\n        )\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option());\n\n      return this.constellationOptions.concat(newOptions);\n    }\n\n    if (constellationLevel < prevConstellationLevel) {\n      const keptOptionIds = this.constellations\n        .flatMap(({ options }) => options ?? [])\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.constellationOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (constellationLevel === prevConstellationLevel)\n    return this.constellationOptions;\n  }\n\n  getConstellationStatMixins(): StatMixin[] {\n    return this.constellations\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getConstellationModifierMixins(): ModifierMixin[] {\n    return this.constellations\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n    const constellationOptions = this.constellationOptions;\n\n    return [...characterOptions, ...passiveOptions, ...constellationOptions];\n  }\n\n  // Override in derived classes to implement team buffs\n  getTeamPassive(): TeamPassive | undefined {\n    return undefined;\n  }\n\n  getTeamStatMixin(): StatMixin | undefined {\n    return this.getTeamPassive()?.statMixin;\n  }\n\n  getTeamModifierMixin(): ModifierMixin | undefined {\n    return this.getTeamPassive()?.modifierMixin;\n  }\n\n  getTeamOptions(): CharacterOption[] {\n    const teamPassive = this.getTeamPassive();\n\n    return (\n      teamPassive?.options?.flatMap((Option) => new Option().unroll()) ?? []\n    );\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from '../data/Data';\nimport { StatMixin } from '../option/Mixin';\nimport Weapon from '../weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputted value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\n// Returns a number representing the value to display (e.g. in stat inputs)\nexport function convertStatToDisplayValue(\n  value: number,\n  isPercentage: boolean\n) {\n  if (isPercentage) {\n    return value * 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin.apply(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n  if (combinedStats.burstCritRate !== undefined) {\n    totalStats.burstCritRate = combinedStats.burstCritRate;\n  }\n\n  if (combinedStats.overloadDmgBonus !== undefined) {\n    totalStats.overloadDmgBonus = combinedStats.overloadDmgBonus;\n  }\n  if (combinedStats.burningDmgBonus !== undefined) {\n    totalStats.burningDmgBonus = combinedStats.burningDmgBonus;\n  }\n  if (combinedStats.vaporizeDmgBonus !== undefined) {\n    totalStats.vaporizeDmgBonus = combinedStats.vaporizeDmgBonus;\n  }\n  if (combinedStats.meltDmgBonus !== undefined) {\n    totalStats.meltDmgBonus = combinedStats.meltDmgBonus;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatToDisplayValue, convertStatValue } from '../stat/Stat';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setInputValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n\n  setValue(value: number) {\n    this.value = value;\n    if (this.stat !== '') {\n      this.rawValue = convertStatToDisplayValue(\n        value,\n        propMapping[this.stat].isPercentage\n      );\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  pieces: number;\n  options?: typeof ArtifactSetOption[];\n  extraStats?: Stat[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stat, Stats } from '../data/types';\nimport { getArtifactMainStatValue } from '../data/Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatInputValue(i: number, value: number) {\n    this.subStats[i].setInputValue(value);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value + (stats[subStat.stat] ?? 0);\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import { getArtifactSetData, getArtifactSetBonusData } from '../data/Data';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../data/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces: number = 0) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.setBonuses = this.getSetBonusesAt(this.pieces);\n    this.stats = this.getStats();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  // Override in derived classes to implement special set bonuses\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [];\n  }\n\n  // Returns all special set bonuses that are active for given pieces\n  getSetBonusesAt(pieces: number): ArtifactSetBonus[] {\n    return this.getAllSetBonuses().filter(\n      (setBonus) => pieces >= setBonus.pieces\n    );\n  }\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n    });\n\n    // Special bonus stats, has to be handled individually\n    let extraStats = this.setBonuses.flatMap(\n      (setBonus) => setBonus.extraStats ?? []\n    );\n\n    extraStats.forEach((statBonus) => {\n      if (stats[statBonus.stat] !== undefined) {\n        stats[statBonus.stat] += statBonus.value;\n      } else {\n        stats[statBonus.stat] = statBonus.value;\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap(\n        (setBonus) => setBonus.options ?? []\n      );\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options ?? [])\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  statMixin: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  modifierMixin: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionPicker, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class ArchaicPetra extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [archaicPetra4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('archaicpetra', 4);\n\nexport class ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value !== '') {\n        stats[`${this.value}DmgBonus`] =\n          params4Pc[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n      }\n    },\n  };\n}\n\nconst archaicPetra4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ArchaicPetra4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Berserker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [berserker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('berserker', 4);\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst berserker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Berserker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BlizzardStrayer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [blizzardStrayer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('blizzardstrayer', 4);\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[0] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.critRate = params4Pc[1] + (stats.critRate ?? 0);\n      }\n    },\n  };\n}\n\nconst blizzardStrayer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BlizzardStrayer4PcCryoOption, BlizzardStrayer4PcFrozenOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BloodstainedChivalry extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [bloodstainedChivalry4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n\nclass BloodstainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.chargedDmgBonus = params4Pc[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst bloodstainedChivalry4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BloodstainedChivalry4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class BraveHeart extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [braveHeart4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('braveheart', 4);\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst braveHeart4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [BraveHeart4PcOption],\n};\n","import {\n  getArtifactSetBonusData,\n  getArtifactSetBonusParams,\n} from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\n\nexport default class CrimsonWitch extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [crimsonWitch4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('crimsonwitchofflames', 4);\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n        const param = setBonusData[2].bonuses.find(\n          ({ stat }) => stat === 'pyroDmgBonus'\n        )?.value!!;\n\n        let stacks = this.value;\n        if (stacks > 3) stacks = 3;\n        stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst crimsonWitch4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [CrimsonWitch4PcOption],\n\n  extraStats: [\n    {\n      stat: 'overloadDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'burningDmgBonus',\n      value: params4Pc[0],\n    },\n    {\n      stat: 'vaporizeDmgBonus',\n      value: params4Pc[1],\n    },\n    {\n      stat: 'meltDmgBonus',\n      value: params4Pc[2],\n    },\n  ],\n};\n","import Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).statMixin !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (option as unknown as IModifierApplicable).modifierMixin !== undefined;\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import Option from './Option';\n\nexport default Option;\nexport * from './OptionUtils';\n","import { isModifierApplicable, isStatsApplicable } from '.';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetOption from './artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from './characterOptions/CharacterOption';\nimport SwirlOption from './characterOptions/SwirlOption';\nimport { IModifierApplicable, IStatsApplicable } from './Option';\nimport WeaponOption from './weaponOptions/WeaponOption';\n\nexport enum Priority {\n  Normal,\n  Last,\n}\n\ninterface Mixin {\n  priority?: Priority;\n}\n\nexport interface StatMixin extends Mixin {\n  apply: (\n    stats: Stats,\n    talentAttackLevel: number,\n    talentSkillLevel: number,\n    talentBurstLevel: number,\n    ascensionLevel: number\n  ) => void;\n}\n\n// Do not modify stats here, use StatMixin for that purpose\nexport interface ModifierMixin extends Mixin {\n  apply: (modifier: DamageModifier, stats: Stats) => void;\n}\n\nexport type GetStatMixinsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n};\n\nexport function getStatMixins({\n  character,\n  characterOptions,\n  weapon,\n  weaponOptions,\n  artifactSets,\n  artifactSetOptions,\n  teamCharacters,\n  teamOptions,\n  artifactBuffOptions,\n}: GetStatMixinsParams): StatMixin[] {\n  const characterPassiveMixins = character.getPassiveStatMixins();\n\n  const characterConstellationMixins = character.getConstellationStatMixins();\n\n  const weaponPassiveMixins = weapon.getPassiveStatMixins();\n\n  const artifactSetMixins = artifactSets.flatMap((artifactSet) =>\n    artifactSet.getStatMixins()\n  );\n\n  const teamPassiveMixins = teamCharacters\n    .map((character) => character.getTeamStatMixin())\n    .filter((mixin): mixin is StatMixin => mixin !== undefined);\n\n  const characterOptionMixins = characterOptions\n    .filter((option): option is CharacterOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const weaponOptionMixins = weaponOptions\n    .filter((option): option is WeaponOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const artifactSetOptionMixins = artifactSetOptions\n    .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const teamOptionMixins = teamOptions\n    .filter((option): option is CharacterOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const artifactBuffOptionMixins = artifactBuffOptions\n    .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n      isStatsApplicable(option)\n    )\n    .map((option) => option.statMixin);\n\n  const unarrangedMixins = [\n    ...characterPassiveMixins,\n    ...characterConstellationMixins,\n    ...weaponPassiveMixins,\n    ...artifactSetMixins,\n    ...teamPassiveMixins,\n    ...characterOptionMixins,\n    ...weaponOptionMixins,\n    ...artifactSetOptionMixins,\n    ...teamOptionMixins,\n    ...artifactBuffOptionMixins,\n  ];\n  const groupedMixins = new Map<Priority, StatMixin[]>();\n  unarrangedMixins.forEach((mixin) => {\n    const priority = mixin.priority ?? Priority.Normal;\n    const array = groupedMixins.get(priority);\n    if (!array) {\n      groupedMixins.set(priority, [mixin]);\n    } else {\n      array.push(mixin);\n    }\n  });\n\n  const statMixins = [\n    ...(groupedMixins.get(Priority.Normal) ?? []),\n    ...(groupedMixins.get(Priority.Last) ?? []),\n  ];\n\n  return statMixins;\n}\n\nexport type GetModifierMixinsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n  swirlOption: SwirlOption;\n};\n\nexport function getModifierMixins({\n  character,\n  characterOptions,\n  weapon,\n  weaponOptions,\n  artifactSets,\n  artifactSetOptions,\n  teamCharacters,\n  teamOptions,\n  artifactBuffOptions,\n  swirlOption,\n}: GetModifierMixinsParams): ModifierMixin[] {\n  const characterPassiveMixins = character.getPassiveModifierMixins();\n\n  const characterConstellationMixins =\n    character.getConstellationModifierMixins();\n\n  const weaponPassiveMixins = weapon.getPassiveModifierMixins();\n\n  const artifactSetMixins = artifactSets.flatMap((artifactSet) =>\n    artifactSet.getModifierMixins()\n  );\n\n  const teamPassiveMixins = teamCharacters\n    .map((character) => character.getTeamModifierMixin())\n    .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n\n  const characterOptionMixins = characterOptions\n    .filter((option): option is CharacterOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const weaponOptionMixins = weaponOptions\n    .filter((option): option is WeaponOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const artifactSetOptionMixins = artifactSetOptions\n    .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const teamOptionMixins = teamOptions\n    .filter((option): option is CharacterOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  const artifactBuffOptionMixins = artifactBuffOptions\n    .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n      isModifierApplicable(option)\n    )\n    .map((option) => option.modifierMixin);\n\n  // Set swirled element. Only modifier mixin\n  const swirlOptionMixin = swirlOption.modifierMixin;\n\n  const unarrangedMixins = [\n    ...characterPassiveMixins,\n    ...characterConstellationMixins,\n    ...weaponPassiveMixins,\n    ...artifactSetMixins,\n    ...teamPassiveMixins,\n    ...characterOptionMixins,\n    ...weaponOptionMixins,\n    ...artifactSetOptionMixins,\n    ...teamOptionMixins,\n    ...artifactBuffOptionMixins,\n    swirlOptionMixin,\n  ];\n  const groupedMixins = new Map<Priority, ModifierMixin[]>();\n  unarrangedMixins.forEach((mixin) => {\n    const priority = mixin.priority ?? Priority.Normal;\n    const array = groupedMixins.get(priority);\n    if (!array) {\n      groupedMixins.set(priority, [mixin]);\n    } else {\n      array.push(mixin);\n    }\n  });\n\n  const modifierMixins = [\n    ...(groupedMixins.get(Priority.Normal) ?? []),\n    ...(groupedMixins.get(Priority.Last) ?? []),\n  ];\n\n  return modifierMixins;\n}\n","import { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport type TalentFn = (props: TalentProps) => TalentValue;\n\nexport type Talents = Record<string, Record<string, TalentFn>>;\n\nexport type TalentValueSet = Record<string, Record<string, TalentValue>>;\n\nexport interface TalentValue {\n  damage: number[];\n  element?: Element;\n}\n\nexport interface TalentProps {\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  None = 'none',\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class EmblemOfSeveredFate extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [emblemOfSeveredFate4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('emblemofseveredfate', 4);\n\nconst emblemOfSeveredFate4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  statMixin: {\n    priority: Priority.Last,\n    apply: (stats: Stats) => {\n      let burstDmgBonus = params4Pc[0] * stats.energyRecharge;\n      if (burstDmgBonus > params4Pc[1]) {\n        burstDmgBonus = params4Pc[1];\n      }\n\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n    },\n  },\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Gambler extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gambler2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('gambler', 2);\n\nconst gambler2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'skillDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class GladiatorsFinale extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [gladiatorsFinale4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('gladiatorsfinale', 4);\n\nconst gladiatorsFinale4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for sword, polearm, claymore characters\n  // Did not make this an Option because this would likely not want to be disabled\n  // Calculation will be wrong if used on a catalyst, bow character\n  // Checking for that would require character weapon type to be implemented first\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class HeartOfDepth extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [heartOfDepth4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('heartofdepth', 4);\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst heartOfDepth4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [HeartOfDepth4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class HuskOfOpulentDreams extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [huskOfOpulentDreams4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('huskofopulentdreams', 4);\n\nclass HuskOfOpulentDreams4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('huskOfOpulentDreams4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value > 0) {\n        let stacks = this.value;\n        if (stacks > 4) {\n          stacks = 4;\n        }\n\n        stats.defBonus = params4Pc[2] * stacks + (stats.defBonus ?? 0);\n        stats.geoDmgBonus = params4Pc[3] * stacks + (stats.geoDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst huskOfOpulentDreams4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [HuskOfOpulentDreams4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Instructor extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [instructor4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('instructor', 4);\n\nexport class Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.elementalMastery = params4Pc[1] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst instructor4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Instructor4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Lavawalker extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [lavawalker4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('lavawalker', 4);\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst lavawalker4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Lavawalker4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MaidenBeloved extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [maidenBeloved4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('maidenbeloved', 4);\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.healedBonus = params4Pc[0] + (stats.healedBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst maidenBeloved4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MaidenBeloved4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class MartialArtist extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [martialArtist2Pc, martialArtist4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('martialartist', 2);\n\nconst martialArtist2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'normalDmgBonus',\n      value: params2Pc[0],\n    },\n    {\n      stat: 'chargedDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('martialartist', 4);\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[2] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[2] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst martialArtist4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [MartialArtist4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class NoblesseOblige extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [noblesseOblige2Pc, noblesseOblige4Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('noblesseoblige', 2);\n\nconst noblesseOblige2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: [\n    {\n      stat: 'burstDmgBonus',\n      value: params2Pc[0],\n    },\n  ],\n};\n\nconst params4Pc = getArtifactSetBonusParams('noblesseoblige', 4);\n\nexport class NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst noblesseOblige4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [NoblesseOblige4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class PaleFlame extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [paleFlame4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('paleflame', 4);\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value >= 1) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n      }\n\n      if (this.value >= 2) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.physicalDmgBonus = params4Pc[3] + (stats.physicalDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst paleFlame4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [PaleFlame4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class ResolutionOfSojourner extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [resolutionOfSojourner4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('resolutionofsojourner', 4);\n\nconst resolutionOfSojourner4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  extraStats: [\n    {\n      stat: 'chargedCritRate',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { ArtifactSetBonus } from '../types';\nimport ArtifactSet from '../ArtifactSet';\n\nexport default class RetracingBolide extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [retracingBolide4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('retracingbolide', 4);\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = params4Pc[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = params4Pc[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst retracingBolide4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [RetracingBolide4PcOption],\n};\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Shimenawa extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [shimenawa4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('shimenawasreminiscence', 4);\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const param = params4Pc[1];\n        stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst shimenawa4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Shimenawa4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Tenacity extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tenacity4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n\nexport class Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.atkBonus = params4Pc[0] + (stats.atkBonus ?? 0);\n        stats.shieldStrength = params4Pc[1] + (stats.shieldStrength ?? 0);\n      }\n    },\n  };\n}\n\nconst tenacity4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Tenacity4PcOption],\n};\n","import ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class Thundersoother extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [thundersoother4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('thundersoother', 4);\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.dmgBonus = params4Pc[0] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst thundersoother4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [Thundersoother4PcOption],\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class TinyMiracle extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [tinyMiracle2Pc];\n  }\n}\n\nconst params2Pc = getArtifactSetBonusParams('tinymiracle', 2);\n\nconst tinyMiracle2Pc: ArtifactSetBonus = {\n  pieces: 2,\n\n  extraStats: ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'].map(\n    (element) => {\n      return {\n        stat: `${element}Res`,\n        value: params2Pc[0],\n      };\n    }\n  ),\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\nimport { IOptionPicker, IModifierApplicable } from '../../option/Option';\n\nexport default class ViridescentVenerer extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [viridescentVenerer4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('viridescentvenerer', 4);\n\nexport class ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.enemyResReduction.add(this.value as Element, params4Pc[1]);\n      }\n    },\n  };\n}\n\nconst viridescentVenerer4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  options: [ViridescentVenerer4PcOption],\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n};\n","import { getArtifactSetBonusParams } from '../../data/Data';\nimport ArtifactSet from '../ArtifactSet';\nimport { ArtifactSetBonus } from '../types';\n\nexport default class WanderersTroupe extends ArtifactSet {\n  getAllSetBonuses(): ArtifactSetBonus[] {\n    return [wanderersTroupe4Pc];\n  }\n}\n\nconst params4Pc = getArtifactSetBonusParams('wandererstroupe', 4);\n\nconst wanderersTroupe4Pc: ArtifactSetBonus = {\n  pieces: 4,\n\n  // Only for catalyst, bow characters\n  // See Gladiator's Finale for more details\n  extraStats: [\n    {\n      stat: 'chargedDmgBonus',\n      value: params4Pc[0],\n    },\n  ],\n};\n","import { Stats } from '../data/types';\nimport ArtifactSet from './ArtifactSet';\nimport ArchaicPetra from './artifactSet/ArchaicPetra';\nimport Berserker from './artifactSet/Berserker';\nimport BlizzardStrayer from './artifactSet/BlizzardStrayer';\nimport BloodstainedChivalry from './artifactSet/BloodstainedChivalry';\nimport BraveHeart from './artifactSet/BraveHeart';\nimport CrimsonWitch from './artifactSet/CrimsonWitch';\nimport EmblemOfSeveredFate from './artifactSet/EmblemOfSeveredFate';\nimport Gambler from './artifactSet/Gambler';\nimport GladiatorsFinale from './artifactSet/GladiatorsFinale';\nimport HeartOfDepth from './artifactSet/HeartOfDepth';\nimport HuskOfOpulentDreams from './artifactSet/HuskOfOpulentDreams';\nimport Instructor from './artifactSet/Instructor';\nimport Lavawalker from './artifactSet/Lavawalker';\nimport MaidenBeloved from './artifactSet/MaidenBeloved';\nimport MartialArtist from './artifactSet/MartialArtist';\nimport NoblesseOblige from './artifactSet/NoblesseOblige';\nimport PaleFlame from './artifactSet/PaleFlame';\nimport ResolutionOfSojourner from './artifactSet/ResolutionOfSojourner';\nimport RetracingBolide from './artifactSet/RetracingBolide';\nimport Shimenawa from './artifactSet/Shimenawa';\nimport Tenacity from './artifactSet/Tenacity';\nimport Thundersoother from './artifactSet/Thundersoother';\nimport TinyMiracle from './artifactSet/TinyMiracle';\nimport ViridescentVenerer from './artifactSet/ViridescentVenerer';\nimport WanderersTroupe from './artifactSet/WanderersTroupe';\n\nconst artifactSets: Record<string, typeof ArtifactSet> = {\n  resolutionofsojourner: ResolutionOfSojourner,\n  tinymiracle: TinyMiracle,\n  martialartist: MartialArtist,\n  gambler: Gambler,\n  gladiatorsfinale: GladiatorsFinale,\n  viridescentvenerer: ViridescentVenerer,\n  wandererstroupe: WanderersTroupe,\n  crimsonwitchofflames: CrimsonWitch,\n  noblesseoblige: NoblesseOblige,\n  emblemofseveredfate: EmblemOfSeveredFate,\n  braveheart: BraveHeart,\n  berserker: Berserker,\n  instructor: Instructor,\n  blizzardstrayer: BlizzardStrayer,\n  thundersoother: Thundersoother,\n  lavawalker: Lavawalker,\n  maidenbeloved: MaidenBeloved,\n  bloodstainedchivalry: BloodstainedChivalry,\n  archaicpetra: ArchaicPetra,\n  retracingbolide: RetracingBolide,\n  heartofdepth: HeartOfDepth,\n  tenacityofthemillelith: Tenacity,\n  paleflame: PaleFlame,\n  shimenawasreminiscence: Shimenawa,\n  huskofopulentdreams: HuskOfOpulentDreams,\n};\n\nfunction getArtifactSetConstructor(id: string): typeof ArtifactSet {\n  return artifactSets[id] ?? ArtifactSet;\n}\n\nexport function initArtifactSet(id: string = '', pieces?: number) {\n  const ArtifactSetConstructor = getArtifactSetConstructor(id);\n\n  return new ArtifactSetConstructor(id, pieces);\n}\n\nexport function getAllArtifactSetBonuses(artifactSets: ArtifactSet[]): Stats {\n  return artifactSets\n    .map((artifactSet) => artifactSet.stats)\n    .reduce((acc, stats) => {\n      Object.entries(stats).forEach(([stat, value]) => {\n        acc[stat] = value + (acc[stat] ?? 0);\n      });\n      return acc;\n    }, {} as Stats);\n}\n\n/* To be implemented\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\nRelic_ReactionWindEnhance,\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionFireEnhance,\n\n// Not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\nRelic_ReactionElectricEnhance: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Requires info about team composition\nRelic_AbsorbTeamElemResist: defaultSetBonus,\n\n// Not yet implemented. Low priority.\n// Probably can be implemented with a dropdown option for prev received elem dmg\nRelic_ElemDmgEnhanceElemResist: defaultSetBonus,\n*/\n","import DamageModifier from '../modifier/DamageModifer';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport { StatMixin, ModifierMixin } from '../option/Mixin';\n\nexport default interface Constellation {\n  constellationLevel: number;\n  options?: typeof CharacterOption[];\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n\nexport function ConstellationSkill(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentSkillLevel += 3;\n      },\n    },\n  };\n}\n\nexport function ConstellationBurst(constellationLevel: number): Constellation {\n  return {\n    constellationLevel,\n    modifierMixin: {\n      apply: (modifier: DamageModifier) => {\n        modifier.talentBurstLevel += 3;\n      },\n    },\n  };\n}\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  children: CharacterOption[];\n\n  constructor(id: string = '', children: typeof CharacterOption[] = []) {\n    super(id);\n    this.children = children.map((Option) => new Option());\n  }\n\n  unroll(): CharacterOption[] {\n    return [this, ...this.children.flatMap((option) => option.unroll())];\n  }\n}\n","import Constellation, {\n  ConstellationBurst,\n  ConstellationSkill,\n} from '../../constellation/Constellation';\nimport { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IStatsApplicable,\n} from '../../option/Option';\n\nconst [, { params: c2Params }] = getTalentData('albedo').constellations;\n\nclass AlbedoOptionConstellation2\n  extends CharacterOption\n  implements IOptionNumber, IModifierApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('albedoConstellation2');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier, stats: Stats) => {\n      if (this.value > 0) {\n        let stacks = this.value;\n        if (stacks > 4) {\n          stacks = 4;\n        }\n\n        modifier.burstFlatDmg =\n          c2Params[0] * stats.flatDef * stacks + (modifier.burstFlatDmg ?? 0);\n      }\n    },\n  };\n}\n\nconst albedoConstellation2: Constellation = {\n  constellationLevel: 2,\n  options: [AlbedoOptionConstellation2],\n};\n\nconst albedoConstellation3 = ConstellationSkill(3);\n\nexport function AlbedoOptionConstellation4(id?: string) {\n  return class AlbedoOptionConstellation4\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super(id ?? 'albedoConstellation4');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.plungeDmgBonus = 0.3 + (stats.plungeDmgBonus ?? 0);\n        }\n      },\n    };\n  };\n}\n\nconst albedoConstellation4: Constellation = {\n  constellationLevel: 4,\n  options: [AlbedoOptionConstellation4()],\n};\n\nconst albedoConstellation5 = ConstellationBurst(5);\n\nexport function AlbedoOptionConstellation6(id?: string) {\n  return class AlbedoOptionConstellation6\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super(id ?? 'albedoConstellation6');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = 0.17 + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  };\n}\n\nconst albedoConstellation6: Constellation = {\n  constellationLevel: 6,\n  options: [AlbedoOptionConstellation6()],\n};\n\nconst albedoConstellations = [\n  albedoConstellation2,\n  albedoConstellation3,\n  albedoConstellation4,\n  albedoConstellation5,\n  albedoConstellation6,\n];\nexport default albedoConstellations;\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n  Shatter = 'Shatter',\r\n}\r\n\r\nexport default Reaction;\r\n","import DamageModifier from '../../modifier/DamageModifer';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nclass AlbedoOptionAscension1\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('albedoAscension1');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.albedoBlossomDmgBonus = 0.25;\n      }\n    },\n  };\n}\n\nconst albedoAscension1: CharacterPassive = {\n  id: 'albedoAscension1',\n  ascensionLevel: 1,\n  options: [AlbedoOptionAscension1],\n};\n\nconst albedoPassives = [albedoAscension1];\nexport default albedoPassives;\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import { Stats, TalentParams } from '../data/types';\nimport { AttackType, Element, ScalingType, TalentValue } from './types';\nimport Resistance from '../stat/Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport CritType from '../modifier/CritType';\n\n// Helper functions\n\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\n\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\n\nexport function calculateResMultiplier({\n  element,\n  res,\n  resReduction,\n}: {\n  element: Element;\n  res: Resistance;\n  resReduction: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\n\nfunction calculateAmplifyingStrengthMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\n\nfunction calculateAmplifyingReactionMultiplier({\n  reaction,\n  stats,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  element: Element;\n}) {\n  const amplifyingStrength = calculateAmplifyingStrengthMultiplier(\n    reaction,\n    element\n  );\n\n  if (amplifyingStrength > 1) {\n    // Calculate reactionbonus\n    let reactionBonus = 0;\n    switch (reaction) {\n      case Reaction.Vaporize:\n        reactionBonus = stats.vaporizeDmgBonus ?? 0;\n        break;\n      case Reaction.Melt:\n        reactionBonus = stats.meltDmgBonus ?? 0;\n        break;\n      default:\n        break;\n    }\n\n    // Calculate amplifying reaction multiplier\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingStrength * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\n\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let flatDmg = modifier.flatDmg;\n  if (attackType === AttackType.Normal) {\n    flatDmg += modifier.normalAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Charged) {\n    flatDmg += modifier.chargedAttackFlatDmg ?? 0;\n  } else if (attackType === AttackType.Skill) {\n    flatDmg += modifier.skillFlatDmg ?? 0;\n  } else if (attackType === AttackType.Burst) {\n    flatDmg += modifier.burstFlatDmg ?? 0;\n  }\n\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === CritType.Crit) {\n    crit += stats.critDmg;\n  } else if (modifier.critType === CritType.Average) {\n    let critRate = stats.critRate;\n    if (attackType === AttackType.Charged) {\n      critRate += stats.chargedCritRate ?? 0;\n    } else if (attackType === AttackType.Burst) {\n      critRate += stats.burstCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateAmplifyingReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\n\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  const baseHealing = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n\n  // Incoming healing bonus is ignored because the healer's\n  // incoming healing bonus is not necessarily the same as the\n  // character being healed\n  return baseHealing * (1 + (stats.healingBonus ?? 0));\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n\n// Functions to calculate Talent Values\n\n// Used for all single-hit normal attacks\nexport function normalAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit normal attacks\nexport function normalAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: number[];\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionNormal ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for single-hit charged attacks\nexport function chargedAttackSingle({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element = element ?? modifier.infusion ?? Element.Physical;\n\n  const damages = [];\n  for (let i = 0; i < hits; i++) {\n    const damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for uncharged aim shots\nexport function aimShot({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const element = modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for charged aim shots\nexport function aimShotCharged({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier: multiplier,\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all physical plunge attacks\nexport function plungeAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  element =\n    element ?? modifier.infusionPlunge ?? modifier.infusion ?? Element.Physical;\n\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.Plunge,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all single-hit skill dmg\nexport function skillSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    scalingType,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit skills\nexport function skillMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for all single-hit burst dmg\nexport function burstSingle({\n  element,\n  multiplier,\n  scalingType,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    element,\n    multiplier,\n    scalingType,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for all multi-hit bursts\nexport function burstMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  const damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    damage: damages,\n    element,\n  };\n}\n\n// Used for damage that does not have an AttackType\nexport function typelessAttack({\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateTotalDamage({\n    stats,\n    multiplier,\n    element,\n    attackType: AttackType.None,\n    modifier,\n  });\n\n  return {\n    damage: [damage],\n    element,\n  };\n}\n\n// Used for healing skills/bursts\nexport function healingValue({\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const healing = calculateHealing({\n    stats,\n    multiplier,\n    flatHealing,\n    scalingType,\n  });\n\n  return {\n    damage: [healing],\n  };\n}\n\n// Used for all summons HP\nexport function hpValue({\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    damage: [hp],\n  };\n}\n\n// Used for all shields\nexport function shieldHpValue({\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    damage: [dmgAbsorption],\n  };\n}\n\n// Used for Bennett and Sara's ATK buffs\nexport function atkBuffValue({\n  multiplier,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const atkBonus = stats.baseAtk * multiplier;\n  return {\n    damage: [atkBonus],\n  };\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('albedo');\n\nconst albedoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  transientBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Defense,\n      stats: getAlbedoTransientBlossomStats(stats, modifier),\n      modifier,\n    }),\n};\n\nconst albedoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fatalBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst albedoTalents: Talents = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalents;\n\n// Helper functions\n\nfunction getAlbedoTransientBlossomStats(\n  stats: Stats,\n  modifier: DamageModifier\n): Stats {\n  if (!modifier.albedoBlossomDmgBonus) {\n    return stats;\n  }\n\n  return {\n    ...stats,\n    dmgBonus: modifier.albedoBlossomDmgBonus + (stats.dmgBonus ?? 0),\n  };\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { TeamPassive } from '../../passive/types';\nimport {\n  AlbedoOptionConstellation4,\n  AlbedoOptionConstellation6,\n} from './AlbedoConstellation';\n\nconst [, { params: a4Params }] = getTalentData('albedo').passives;\n\nclass AlbedoOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('albedoAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.elementalMastery = a4Params[0] + (stats.elementalMastery ?? 0);\n      }\n    },\n  };\n}\n\nconst albedoTeamPassive: TeamPassive = {\n  id: 'albedoTeamPassive',\n  options: [\n    AlbedoOptionAscension4,\n    AlbedoOptionConstellation4('albedoConstellation4Team'),\n    AlbedoOptionConstellation6('albedoConstellation6Team'),\n  ],\n};\nexport default albedoTeamPassive;\n","import Constellation from '../../constellation/Constellation';\nimport { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport albedoConstellations from './AlbedoConstellation';\nimport albedoPassives from './AlbedoPassive';\nimport albedoTalents from './AlbedoTalent';\nimport albedoTeamPassive from './AlbedoTeamPassive';\n\nexport default class Albedo extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('albedo', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return albedoTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return albedoPassives;\n  }\n\n  getAllConstellations(): Constellation[] {\n    return albedoConstellations;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return albedoTeamPassive;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { Element, TalentType } from '../../talent/types';\r\nimport {\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n  IModifierApplicable,\r\n} from '../../option/Option';\r\n\r\nclass AloyOptionCoil\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('coil');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value > 0) {\r\n        const skillParams = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('aloy')\r\n        );\r\n\r\n        if (this.value >= 4) {\r\n          // Rushing Ice state\r\n          stats.normalDmgBonus = skillParams[7] + (stats.normalDmgBonus ?? 0);\r\n        } else {\r\n          stats.normalDmgBonus =\r\n            skillParams[this.value + 3] + (stats.normalDmgBonus ?? 0);\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value >= 4) {\r\n        modifier.infusionNormal = Element.Cryo;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyOptions = [AloyOptionCoil];\r\nexport default aloyOptions;\r\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\nimport {\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [a1Data, a4Data] = getTalentData('aloy').passives;\r\nconst a1Params = a1Data.params;\r\nconst a4Params = a4Data.params;\r\n\r\nclass AloyOptionAscension1\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('aloyAscension1');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value) {\r\n        stats.atkBonus = a1Params[0] * 2 + (stats.atkBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension1: CharacterPassive = {\r\n  id: 'aloyAscension1',\r\n  ascensionLevel: 1,\r\n  options: [AloyOptionAscension1],\r\n};\r\n\r\nclass AloyOptionAscension4\r\n  extends CharacterOption\r\n  implements IOptionNumber, IStatsApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('aloyAscension4');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (stats: Stats) => {\r\n      if (this.value > 0) {\r\n        let stacks = this.value;\r\n        if (stacks > 10) {\r\n          stacks = 10;\r\n        }\r\n\r\n        const cryoDmgBonus = a4Params[0] * stacks;\r\n        stats.cryoDmgBonus = cryoDmgBonus + (stats.cryoDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst aloyAscension4: CharacterPassive = {\r\n  id: 'aloyAscension4',\r\n  ascensionLevel: 4,\r\n  options: [AloyOptionAscension4],\r\n};\r\n\r\nconst aloyPassives = [aloyAscension1, aloyAscension4];\r\nexport default aloyPassives;\r\n","import {\r\n  Element,\r\n  TalentFn,\r\n  TalentProps,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\n\r\nconst talentData = getTalentData('aloy');\r\n\r\nconst aloyAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(0, 2),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloySkill: Record<string, TalentFn> = {\r\n  freezeBombDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chillwaterBombletDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Cryo,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst aloyTalents: Talents = {\r\n  attack: aloyAttack,\r\n  skill: aloySkill,\r\n  burst: aloyBurst,\r\n};\r\n\r\nexport default aloyTalents;\r\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport aloyOptions from './AloyOption';\nimport aloyPassives from './AloyPassive';\nimport aloyTalents from './AloyTalent';\n\nexport default class Aloy extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('aloy', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return aloyTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return aloyOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return aloyPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('amber');\n\nconst amberAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst amberSkill: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  baronBunnyHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst amberBurst: Record<string, TalentFn> = {\n  dmgPerWave: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  totalDmg: ({ stats, modifier }: TalentProps) => {\n    const talentValue = burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    });\n    talentValue.damage[0] *= 18;\n    return talentValue;\n  },\n};\n\nconst amberTalents: Talents = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport amberTalents from './AmberTalent';\n\nexport default class Amber extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('amber', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return amberTalents;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ayaka');\n\nconst ayakaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[7]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaBurst: Record<string, TalentFn> = {\n  cuttingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  bloomDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst ayakaTalents: Talents = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ayakaOptions from './AyakaOption';\nimport ayakaTalents from './AyakaTalent';\n\nexport default class Ayaka extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ayaka', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ayakaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ayakaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('barbara');\n\nconst barbaraAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraSkill: Record<string, TalentFn> = {\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  dropletDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraBurst: Record<string, TalentFn> = {\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst barbaraTalents: Talents = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport barbaraTalents from './BarbaraTalent';\n\nexport default class Barbara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('barbara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return barbaraTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('beidou').passives;\nconst a4Params = a4Data.params;\n\nclass BeidouOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('beidouAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.normalDmgBonus = a4Params[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = a4Params[0] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst beidouAscension4: CharacterPassive = {\n  id: 'beidouAscension4',\n  ascensionLevel: 4,\n  options: [BeidouOptionAscension4],\n};\n\nconst beidouPassives = [beidouAscension4];\nexport default beidouPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  chargedAttackSingle,\n  shieldHpValue,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('beidou');\n\nconst beidouAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouSkill: Record<string, TalentFn> = {\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  baseDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  dmgBonusOnHitTaken: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouBurst: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightningDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst beidouTalents: Talents = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalents;\n","import { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport beidouPassives from './BeidouPassive';\nimport beidouTalents from './BeidouTalent';\n\nexport default class Beidou extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('beidou', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return beidouTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return beidouPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  atkBuffValue,\n  burstSingle,\n  chargedAttackMulti,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillMulti,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('bennett');\n\nconst bennettAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargeLevel1Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n  chargeLevel2Dmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Pyro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousPerSecond: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  atkBonus: ({ stats, modifier }: TalentProps) =>\n    atkBuffValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst bennettTalents: Talents = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalents;\n","import {\n  IOptionBoolean,\n  IOptionNumber,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Stats } from '../../data/types';\nimport { getOptionValue } from '../../option/OptionUtils';\nimport { TeamPassive } from '../../passive/types';\n\nclass BennettOptionAtkBuff extends CharacterOption implements IOptionNumber {\n  value = 0;\n\n  constructor() {\n    super('bennettAtkBuff');\n  }\n}\n\nclass BennettOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('bennettBurst', [BennettOptionAtkBuff]);\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        const atkBuff = getOptionValue(this.children[0]) as number;\n        stats.flatAtk = atkBuff + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n}\n\nconst bennettTeamPassive: TeamPassive = {\n  id: 'bennettTeamPassive',\n  options: [BennettOptionBurst],\n};\nexport default bennettTeamPassive;\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport bennettTalents from './BennettTalent';\nimport bennettTeamPassive from './BennettTeamPassive';\n\nexport default class Bennett extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('bennett', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return bennettTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return bennettTeamPassive;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Cryo;\n      }\n    },\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('chongyun');\n\nconst chongyunAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst chongyunTalents: Talents = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport chongyunOptions from './ChongyunOption';\nimport chongyunTalents from './ChongyunTalent';\n\nexport default class Chongyun extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('chongyun', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return chongyunTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return chongyunOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diluc');\n\nconst dilucAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucSkill: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst dilucTalents: Talents = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalents;\n","import { Stats } from '../../data/types';\nimport { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      _talentBurstLevel: number,\n      ascensionLevel: number\n    ) => {\n      if (this.value && ascensionLevel >= 4) {\n        const params = getTalentData('diluc').passives.find(\n          (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n        )?.params;\n        const pyroDmgBonus = params?.[1] ?? NaN;\n\n        stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dilucTalents from './DilucTalent';\nimport dilucOptions from './DilucOption';\n\nexport default class Diluc extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diluc', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dilucTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return dilucOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  shieldHpValue,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('diona');\n\nconst dionaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaSkill: Record<string, TalentFn> = {\n  icyPawDmgPerPaw: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpPress: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  shieldHpHold: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Cryo,\n      stats,\n      modifier: { ...modifier, dionaHoldSkill: true },\n    }),\n};\n\nconst dionaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  continuousFieldDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuousTime: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst dionaTalents: Talents = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport dionaTalents from './DionaTalent';\n\nexport default class Diona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('diona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return dionaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('eula');\n\nconst eulaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  icewhirlBrandDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordBaseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  lightfallSwordStackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst eulaTalents: Talents = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport eulaTalents from './EulaTalent';\n\nexport default class Eula extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('eula', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return eulaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('fischl');\n\nconst fischlAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlSkill: Record<string, TalentFn> = {\n  ozDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  summoningDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlBurst: Record<string, TalentFn> = {\n  fallingThunderDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst fischlTalents: Talents = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport fischlTalents from './FischlTalent';\n\nexport default class Fischl extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('fischl', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return fischlTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  hpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ganyu');\n\nconst ganyuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  aimShotChargeLevel1: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  frostflakeArrowBloomDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  iceLotusHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuBurst: Record<string, TalentFn> = {\n  iceShardDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ganyuTalents: Talents = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ganyuTalents from './GanyuTalent';\n\nexport default class Ganyu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ganyu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ganyuTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('hutao').passives;\nconst a4Params = a4Data.params;\n\nclass HuTaoOptionAscension4\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('hutaoAscension4');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      if (this.value) {\n        stats.pyroDmgBonus = a4Params[1] + (stats.pyroDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst hutaoAscension4: CharacterPassive = {\n  id: 'hutaoAscension4',\n  ascensionLevel: 4,\n  options: [HuTaoOptionAscension4],\n};\n\nconst hutaoPassives = [hutaoAscension4];\nexport default hutaoPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('hutao');\n\nconst hutaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoSkill: Record<string, TalentFn> = {\n  bloodBlossomDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgLowHp: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  hpRegen: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n\n  hpRegenLowHp: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      flatHealing: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst hutaoTalents: Talents = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      talentSkillLevel: number,\n      _talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let skillParams = getTalentParams(\n          TalentType.Skill,\n          talentSkillLevel,\n          getTalentData('hutao')\n        );\n\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n        let flatAtkBonus = totalHp * skillParams[1];\n        if (flatAtkBonus > stats.baseAtk * skillParams[6]) {\n          flatAtkBonus = stats.baseAtk * skillParams[6];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Pyro;\n      }\n    },\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport hutaoPassives from './HutaoPassive';\nimport hutaoTalents from './HutaoTalent';\nimport hutaoOptions from './HutaoOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Hutao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('hutao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return hutaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return hutaoOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return hutaoPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('jean');\n\nconst jeanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieldEnterExitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  fieldActivationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst jeanTalents: Talents = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport jeanTalents from './JeanTalent';\n\nexport default class Jean extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('jean', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return jeanTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kaeya');\n\nconst kaeyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kaeyaTalents: Talents = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kaeyaTalents from './KaeyaTalent';\n\nexport default class Kaeya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kaeya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kaeyaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('kazuha');\n\nconst kazuhaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 3,\n      params: Array(3).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst kazuhaBurst: Record<string, TalentFn> = {\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[2],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst kazuhaTalents: Talents = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.elementalAbsorption = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionPlunge = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kazuhaTalents from './KazuhaTalent';\nimport kazuhaOptions from './KazuhaOption';\n\nexport default class Kazuha extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kazuha', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kazuhaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kazuhaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('keqing');\n\nconst keqingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingSkill: Record<string, TalentFn> = {\n  lightningStilettoDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  slashingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  thunderclapSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Electro,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  consecutiveSlashDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 8,\n      element: Element.Electro,\n      params: Array(8).fill(\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1]\n      ),\n      stats,\n      modifier,\n    }),\n\n  lastAttackDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst keqingTalents: Talents = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport keqingTalents from './KeqingTalent';\n\nexport default class Keqing extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('keqing', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return keqingTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('klee');\n\nconst kleeAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeSkill: Record<string, TalentFn> = {\n  jumpyDumptyDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  mineDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeBurst: Record<string, TalentFn> = {\n  sparksNSplashDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst kleeTalents: Talents = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kleeTalents from './KleeTalent';\n\nexport default class Klee extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('klee', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kleeTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('kokomi').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst kokomiAscension0: CharacterPassive = {\r\n  id: 'kokomiAscension0',\r\n  ascensionLevel: 0,\r\n  options: [],\r\n  statMixin: {\r\n    apply: (stats: Stats) => {\r\n      stats.critRate = (stats.critRate ?? 0) - 1;\r\n      if (stats.critRate < 0) {\r\n        stats.critRate = 0;\r\n      }\r\n\r\n      stats.healingBonus = 0.25 + (stats.healingBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiAscension4: CharacterPassive = {\r\n  id: 'kokomiAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  modifierMixin: {\r\n    apply: (modifier: DamageModifier) => {\r\n      modifier.kokomiHealingBonusDmg = a4Params[0];\r\n    },\r\n  },\r\n};\r\n\r\nconst kokomiPassives = [kokomiAscension0, kokomiAscension4];\r\nexport default kokomiPassives;\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  burstSingle,\r\n  chargedAttackSingle,\r\n  healingValue,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  ScalingType,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('kokomi');\r\n\r\nconst kokomiAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiNormalAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier: getKokomiChargedAttackModifier(stats, modifier),\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiSkill: Record<string, TalentFn> = {\r\n  hpRegen: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  rippleDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier: getKokomiSkillModifier(stats, modifier),\r\n    }),\r\n};\r\n\r\nconst kokomiBurst: Record<string, TalentFn> = {\r\n  burstDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Hydro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      scalingType: ScalingType.Hp,\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\r\n    healingValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      flatHealing: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst kokomiTalents: Talents = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getKokomiNormalAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const normalAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[3] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.normalAttackFlatDmg =\r\n    normalAttackBonusDmg + (newModifier.normalAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiChargedAttackModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const chargedAttackBonusDmg =\r\n    (getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[4] +\r\n      (newModifier.kokomiHealingBonusDmg ?? 0) * (stats.healingBonus ?? 0)) *\r\n    stats.flatHp;\r\n\r\n  newModifier.chargedAttackFlatDmg =\r\n    chargedAttackBonusDmg + (newModifier.chargedAttackFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n\r\nfunction getKokomiSkillModifier(\r\n  stats: Stats,\r\n  modifier: DamageModifier\r\n): DamageModifier {\r\n  if (!modifier.kokomiBurst) {\r\n    return modifier;\r\n  }\r\n\r\n  const newModifier = { ...modifier };\r\n  const skillBonusDmg =\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      newModifier.talentBurstLevel,\r\n      talentData\r\n    )[8] * stats.flatHp;\r\n  newModifier.skillFlatDmg = skillBonusDmg + (newModifier.skillFlatDmg ?? 0);\r\n\r\n  return newModifier;\r\n}\r\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value) {\r\n        modifier.kokomiBurst = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport kokomiPassives from './KokomiPassive';\nimport kokomiTalents from './KokomiTalent';\nimport kokomiOptions from './KokomiOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Kokomi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('kokomi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return kokomiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return kokomiOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return kokomiPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('lisa');\n\nconst lisaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack0: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack1: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack2: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  holdDmgStack3: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst lisaTalents: Talents = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport lisaTalents from './LisaTalent';\n\nexport default class Lisa extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('lisa', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return lisaTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { TalentType } from '../../talent/types';\n\nclass MonaOptionOmen\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('omen');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('mona')\n        );\n\n        stats.dmgBonus = burstParams[9] + (stats.dmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst monaOptions = [MonaOptionOmen];\nexport default monaOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('mona');\n\nconst monaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaSkill: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaBurst: Record<string, TalentFn> = {\n  explosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst monaTalents: Talents = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport monaOptions from './MonaOption';\nimport monaTalents from './MonaTalent';\n\nexport default class Mona extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('mona', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return monaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return monaOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  hpValue,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('ningguang');\n\nconst ningguangAttack: Record<string, TalentFn> = {\n  normalAtkDmg: ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  starJadeDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  jadeScreenHp: ({ stats, modifier }: TalentProps) =>\n    hpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangBurst: Record<string, TalentFn> = {\n  dmgPerGem: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst ningguangTalents: Talents = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ningguangTalents from './NingguangTalent';\n\nexport default class Ningguang extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('ningguang', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ningguangTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  skillSingle,\n  shieldHpValue,\n  healingValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('noelle');\n\nconst noelleAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleBurst: Record<string, TalentFn> = {\n  burstInitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  firstSwingDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst noelleTalents: Talents = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  statMixin = {\n    priority: Priority.Last,\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('noelle')\n        );\n\n        const totalDef =\n          (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n          (stats.flatDef ?? 0);\n\n        stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Geo;\n      }\n    },\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport noelleTalents from './NoelleTalent';\nimport noelleOptions from './NoelleOption';\n\nexport default class Noelle extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('noelle', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return noelleTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return noelleOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  normalAttackMulti,\n  skillSingle,\n  healingValue,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('qiqi');\n\nconst qiqiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[5]\n      ),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  heraldOfFrostDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  hpRegenOnHit: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  hpRegenContinuous: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  healing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst qiqiTalents: Talents = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport qiqiTalents from './QiqiTalent';\n\nexport default class Qiqi extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('qiqi', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return qiqiTalents;\n  }\n}\n","import { getTalentData } from '../../data/Data';\r\nimport { Stats } from '../../data/types';\r\nimport { Priority } from '../../option/Mixin';\r\nimport { CharacterPassive } from '../../passive/types';\r\n\r\nconst [, a4Data] = getTalentData('raiden').passives;\r\nconst a4Params = a4Data.params;\r\n\r\nconst raidenAscension4: CharacterPassive = {\r\n  id: 'raidenAscension4',\r\n  ascensionLevel: 4,\r\n  options: [],\r\n  statMixin: {\r\n    priority: Priority.Last,\r\n    apply: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = a4Params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  },\r\n};\r\n\r\nconst raidenPassives = [raidenAscension4];\r\nexport default raidenPassives;\r\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport {\r\n  normalAttackSingle,\r\n  chargedAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n  burstSingle,\r\n  normalAttackMulti,\r\n  burstMulti,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  Talents,\r\n  TalentFn,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('raiden');\r\n\r\nconst raidenAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackMulti({\r\n      hits: 2,\r\n      params: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      ).slice(3, 5),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    chargedAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[10],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenSkill: Record<string, TalentFn> = {\r\n  skillDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  coordinatedAtkDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenBurst: Record<string, TalentFn> = {\r\n  musouNoHitotachiDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[0] + getInitialResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[4] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[5] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[6] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(7, 9)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[9] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstMulti({\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )\r\n        .slice(10, 12)\r\n        .map((multiplier) => multiplier + getAttackResolveBonus(modifier)),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[13] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[14] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier:\r\n        getTalentParams(\r\n          TalentType.Burst,\r\n          modifier.talentBurstLevel,\r\n          talentData\r\n        )[15] + getAttackResolveBonus(modifier),\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst raidenTalents: Talents = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalents;\r\n\r\n// Helper functions\r\n\r\nfunction getInitialResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[1] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n\r\nfunction getAttackResolveBonus(modifier: DamageModifier): number {\r\n  return (\r\n    getTalentParams(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      talentData\r\n    )[2] * (modifier.resolveStacks ?? 0)\r\n  );\r\n}\r\n","import { Stats } from '../../data/types';\r\nimport { getTalentParams, getTalentData } from '../../data/Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../../option/Option';\r\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  statMixin = {\r\n    apply: (\r\n      stats: Stats,\r\n      _talentAttackLevel: number,\r\n      talentSkillLevel: number,\r\n      _talentBurstLevel: number\r\n    ) => {\r\n      if (this.value) {\r\n        const params = getTalentParams(\r\n          TalentType.Skill,\r\n          talentSkillLevel,\r\n          getTalentData('raiden')\r\n        );\r\n\r\n        const burstDmgBonus = params[3] * 90;\r\n        stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  modifierMixin = {\r\n    apply: (modifier: DamageModifier) => {\r\n      if (this.value < 0) modifier.resolveStacks = 0;\r\n      else if (this.value > 60) modifier.resolveStacks = 60;\r\n      else modifier.resolveStacks = this.value;\r\n    },\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport raidenPassives from './RaidenPassive';\nimport raidenTalents from './RaidenTalent';\nimport raidenOptions from './RaidenOption';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\n\nexport default class Raiden extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('raiden', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return raidenTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return raidenOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return raidenPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('razor');\n\nconst razorAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmgSoulCompanion': ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Electro,\n      multiplier:\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3] *\n        getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst razorTalents: Talents = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport razorTalents from './RazorTalent';\n\nexport default class Razor extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('razor', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return razorTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n  burstMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('rosaria');\n\nconst rosariaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(4, 6),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstMulti({\n      hits: 2,\n      element: Element.Cryo,\n      params: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n  iceLanceDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Cryo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst rosariaTalents: Talents = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport rosariaTalents from './RosariaTalent';\n\nexport default class Rosaria extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('rosaria', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return rosariaTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\r\nimport {\r\n  aimShot,\r\n  aimShotCharged,\r\n  atkBuffValue,\r\n  burstSingle,\r\n  normalAttackSingle,\r\n  plungeAttack,\r\n  skillSingle,\r\n} from '../../talent/TalentUtil';\r\nimport {\r\n  TalentProps,\r\n  Element,\r\n  TalentFn,\r\n  Talents,\r\n  TalentType,\r\n} from '../../talent/types';\r\n\r\nconst talentData = getTalentData('sara');\r\n\r\nconst saraAttack: Record<string, TalentFn> = {\r\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[2],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[3],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\r\n    normalAttackSingle({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[4],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShot({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[5],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\r\n    aimShotCharged({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[6],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[7],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[8],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\r\n    plungeAttack({\r\n      multiplier: getTalentParams(\r\n        TalentType.Attack,\r\n        modifier.talentAttackLevel,\r\n        talentData\r\n      )[9],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraSkill: Record<string, TalentFn> = {\r\n  tenguJuuraiAmbushDmg: ({ stats, modifier }: TalentProps) =>\r\n    skillSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  atkBonus: ({ stats, modifier }: TalentProps) =>\r\n    atkBuffValue({\r\n      multiplier: getTalentParams(\r\n        TalentType.Skill,\r\n        modifier.talentSkillLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraBurst: Record<string, TalentFn> = {\r\n  tenguJuuraiTitanbreakerDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n  tenguJuuraiStormclusterDmg: ({ stats, modifier }: TalentProps) =>\r\n    burstSingle({\r\n      element: Element.Electro,\r\n      multiplier: getTalentParams(\r\n        TalentType.Burst,\r\n        modifier.talentBurstLevel,\r\n        talentData\r\n      )[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n};\r\n\r\nconst saraTalents: Talents = {\r\n  attack: saraAttack,\r\n  skill: saraSkill,\r\n  burst: saraBurst,\r\n};\r\n\r\nexport default saraTalents;\r\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport saraTalents from './SaraTalent';\n\nexport default class Sara extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sara', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return saraTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  burstSingle,\n  chargedAttackSingle,\n  healingValue,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n} from '../../talent/TalentUtil';\nimport {\n  Element,\n  ScalingType,\n  TalentFn,\n  TalentProps,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sayu');\n\nconst sayuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuSkill: Record<string, TalentFn> = {\n  fuufuuWindwheelDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickPressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWhirlwindKickHoldDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  fuufuuWindwheelElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n\n  fuufuuWhirlwindKickElementalDmg: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return skillSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Skill,\n          modifier.talentSkillLevel,\n          talentData\n        )[4],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sayuBurst: Record<string, TalentFn> = {\n  activationDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  activationHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  mujimujiDarumaHealing: ({ stats, modifier }: TalentProps) =>\n    healingValue({\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[5],\n      flatHealing: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[4],\n      scalingType: ScalingType.Attack,\n      stats,\n      modifier,\n    }),\n};\n\nconst sayuTalents: Talents = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sayuTalents from './SayuTalent';\nimport sayuOptions from './SayuOption';\n\nexport default class Sayu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sayu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sayuTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sayuOptions;\n  }\n}\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  skillSingle,\n  burstSingle,\n  chargedAttackSingle,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('sucrose');\n\nconst sucroseAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst sucroseBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst sucroseTalents: Talents = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport sucroseOptions from './SucroseOption';\nimport sucroseTalents from './SucroseTalent';\n\nexport default class Sucrose extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('sucrose', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return sucroseTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return sucroseOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n  typelessAttack,\n  normalAttackMulti,\n  chargedAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('tartaglia');\n\nconst tartagliaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n\n  riptideFlashDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  riptideBurstDmg: ({ stats, modifier }: TalentProps) =>\n    typelessAttack({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaSkill: Record<string, TalentFn> = {\n  stanceChangeDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(6, 8),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(8, 10),\n      stats,\n      modifier,\n    }),\n\n  riptideSlashDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaBurst: Record<string, TalentFn> = {\n  burstDmgMelee: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  burstDmgRanged: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  riptideBlastDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst tartagliaTalents: Talents = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalents;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nexport const tartagliaAscension0: CharacterPassive = {\n  id: 'tartagliaAscension0',\n  ascensionLevel: 0,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.talentAttackLevel += 1;\n    },\n  },\n};\n\nconst tartagliaPassives = [tartagliaAscension0];\nexport default tartagliaPassives;\n","import { TeamPassive } from '../../passive/types';\nimport { tartagliaAscension0 } from './TartagliaPassive';\n\nconst tartagliaTeamPassive: TeamPassive = tartagliaAscension0;\nexport default tartagliaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport tartagliaTalents from './TartagliaTalent';\nimport tartagliaPassives from './TartagliaPassive';\nimport tartagliaTeamPassive from './TartagliaTeamPassive';\n\nexport default class Tartaglia extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('tartaglia', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return tartagliaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return tartagliaPassives;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return tartagliaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  chargedAttackSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  TalentFn,\n  Talents,\n  Element,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('thoma');\n\nconst thomaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  shieldHpMax: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  fieryCollapseDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier: getThomaFieryCollapseModifier(stats, modifier),\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      flatBonus: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst thomaTalents: Talents = {\n  attack: thomaAttack,\n  skill: thomaSkill,\n  burst: thomaBurst,\n};\n\nexport default thomaTalents;\n\n// Helper functions\n\nfunction getThomaFieryCollapseModifier(\n  stats: Stats,\n  modifier: DamageModifier\n): DamageModifier {\n  if (!modifier.thomaHpBonusDmg) {\n    return modifier;\n  }\n\n  const flatDmg = modifier.thomaHpBonusDmg * stats.flatHp + modifier.flatDmg;\n\n  return { ...modifier, flatDmg };\n}\n","import { getTalentData } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [, a4Data] = getTalentData('thoma').passives;\nconst a4Params = a4Data.params;\n\nconst thomaAscension4: CharacterPassive = {\n  id: 'thomaAscension4',\n  ascensionLevel: 4,\n  options: [],\n  modifierMixin: {\n    apply: (modifier: DamageModifier) => {\n      modifier.thomaHpBonusDmg = a4Params[0];\n    },\n  },\n};\n\nconst thomaPassives = [thomaAscension4];\nexport default thomaPassives;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport Constellation, {\n  ConstellationBurst,\n  ConstellationSkill,\n} from '../../constellation/Constellation';\n\nconst [, , , , , { params: c6Params }] = getTalentData('thoma').constellations;\n\nexport function ThomaOptionConstellation6(id?: string) {\n  return class ThomaOptionConstellation6\n    extends CharacterOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super(id ?? 'thomaConstellation6');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = c6Params[0] + (stats.normalDmgBonus ?? 0);\n          stats.chargedDmgBonus = c6Params[0] + (stats.chargedDmgBonus ?? 0);\n          stats.plungeDmgBonus = c6Params[0] + (stats.plungeDmgBonus ?? 0);\n        }\n      },\n    };\n  };\n}\n\nconst thomaConstellation3 = ConstellationSkill(3);\nconst thomaConstellation5 = ConstellationBurst(5);\n\nconst thomaConstellation6: Constellation = {\n  constellationLevel: 6,\n  options: [ThomaOptionConstellation6()],\n};\n\nconst thomaConstellations = [\n  thomaConstellation3,\n  thomaConstellation5,\n  thomaConstellation6,\n];\nexport default thomaConstellations;\n","import { TeamPassive } from '../../passive/types';\nimport { ThomaOptionConstellation6 } from './ThomaConstellation';\n\nconst thomaTeamPassive: TeamPassive = {\n  id: 'thomaTeamPassive',\n  options: [ThomaOptionConstellation6('thomaConstellation6Team')],\n};\n\nexport default thomaTeamPassive;\n","import { CharacterPassive, TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport thomaTalents from './ThomaTalent';\nimport thomaPassives from './ThomaPassive';\nimport Constellation from '../../constellation/Constellation';\nimport thomaConstellations from './ThomaConstellation';\nimport thomaTeamPassive from './ThomaTeamPassive';\n\nexport default class Thoma extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('thoma', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return thomaTalents;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return thomaPassives;\n  }\n\n  getAllConstellations(): Constellation[] {\n    return thomaConstellations;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return thomaTeamPassive;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  aimShot,\n  aimShotCharged,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('venti');\n\nconst ventiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiSkill: Record<string, TalentFn> = {\n  pressDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n};\n\nconst ventiBurst: Record<string, TalentFn> = {\n  dot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  dotElementalAbsorption: ({ stats, modifier }: TalentProps) => {\n    if (modifier.elementalAbsorption !== undefined) {\n      return burstSingle({\n        element: modifier.elementalAbsorption,\n        multiplier: getTalentParams(\n          TalentType.Burst,\n          modifier.talentBurstLevel,\n          talentData\n        )[1],\n        stats,\n        modifier,\n      });\n    } else {\n      return {\n        damage: [NaN],\n      };\n    }\n  },\n};\n\nconst ventiTalents: Talents = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalents;\n","import ElementalAbsoprtionOption from '../../option/characterOptions/ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport ventiTalents from './VentiTalent';\nimport ventiOptions from './VentiOption';\n\nexport default class Venti extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('venti', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return ventiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return ventiOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiangling');\n\nconst xianglingAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[3]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingSkill: Record<string, TalentFn> = {\n  guobaDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingBurst: Record<string, TalentFn> = {\n  swing1HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  swing2HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  swing3HitDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  pyronadoDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n};\n\nconst xianglingTalents: Talents = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xianglingTalents from './XianglingTalent';\n\nexport default class Xiangling extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiangling', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xianglingTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        let burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('xiao')\n        );\n\n        stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n        stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n        stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n      }\n    },\n  };\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusion = Element.Anemo;\n      }\n    },\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  normalAttackMulti,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xiao');\n\nconst xiaoAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[0]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Anemo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xiaoTalents: Talents = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n};\n\nexport default xiaoTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xiaoOptions from './XiaoOption';\nimport xiaoTalents from './XiaoTalent';\n\nexport default class Xiao extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xiao', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xiaoTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return xiaoOptions;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackMulti,\n  plungeAttack,\n  burstSingle,\n  normalAttackMulti,\n  skillMulti,\n} from '../../talent/TalentUtil';\nimport { TalentProps, TalentFn, Talents, Element, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('xingqiu');\n\nconst xingqiuAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(5, 7),\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackMulti({\n      hits: 2,\n      params: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      ).slice(7, 9),\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[11],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[12],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      ).slice(0, 2),\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuBurst: Record<string, TalentFn> = {\n  swordRainDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Hydro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst xingqiuTalents: Talents = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xingqiuTalents from './XingqiuTalent';\n\nexport default class Xingqiu extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xingqiu', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xingqiuTalents;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  ScalingType,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('xinyan');\n\nconst xinyanAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedSpinDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedFinalDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanSkill: Record<string, TalentFn> = {\n  swingDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel1: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[2],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel2: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  shieldHpLevel3: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[6],\n      element: Element.Pyro,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    }),\n\n  dot: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Physical,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  pyroDot: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst xinyanTalents: Talents = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalents;\n","import { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport xinyanTalents from './XinyanTalent';\n\nexport default class Xinyan extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('xinyan', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return xinyanTalents;\n  }\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { getTalentParams, getTalentData } from '../../data/Data';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport { Stats } from '../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  statMixin = {\n    apply: (\n      stats: Stats,\n      _talentAttackLevel: number,\n      _talentSkillLevel: number,\n      talentBurstLevel: number\n    ) => {\n      if (this.value) {\n        const burstParams = getTalentParams(\n          TalentType.Burst,\n          talentBurstLevel,\n          getTalentData('yanfei')\n        );\n        stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n      }\n    },\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n} from '../../talent/TalentUtil';\nimport { TalentProps, Element, Talents, TalentFn, TalentType } from '../../talent/types';\n\nconst talentData = getTalentData('yanfei');\n\nconst yanfeiAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal0: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal1: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal2: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal3: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  chargedDmgSeal4: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[15],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[16],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[17],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiSkill: Record<string, TalentFn> = {\n  skillDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst yanfeiTalents: Talents = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalents;\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yanfeiOptions from './YanfeiOption';\nimport yanfeiTalents from './YanfeiTalent';\n\nexport default class Yanfei extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yanfei', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yanfeiTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yanfeiOptions;\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        modifier.infusionNormal = Element.Pyro;\n        modifier.yoimiyaSkill = true;\n      }\n    },\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { getTalentData } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../../passive/types';\n\nconst [a1Data] = getTalentData('yoimiya').passives;\nconst a1Params = a1Data.params;\n\nclass YoimiyaOptionAscension1\n  extends CharacterOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('yoimiyaAscension1');\n  }\n\n  statMixin = {\n    apply: (stats: Stats) => {\n      let pyroDmgBonus = this.value * a1Params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    },\n  };\n}\n\nconst yoimiyaAscension1: CharacterPassive = {\n  id: 'yoimiyaAscension1',\n  ascensionLevel: 1,\n  options: [YoimiyaOptionAscension1],\n};\n\nconst yoimiyaPassives = [yoimiyaAscension1];\nexport default yoimiyaPassives;\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport {\n  aimShot,\n  aimShotCharged,\n  burstSingle,\n  normalAttackMulti,\n  normalAttackSingle,\n  plungeAttack,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  TalentFn,\n  Talents,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('yoimiya');\n\nconst yoimiyaAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[0],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[1],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[2],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 2,\n      params: Array(2).fill(\n        getYoimiyaNormalAttackMultiplier(\n          getTalentParams(\n            TalentType.Attack,\n            modifier.talentAttackLevel,\n            talentData\n          )[3],\n          modifier\n        )\n      ),\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getYoimiyaNormalAttackMultiplier(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4],\n        modifier\n      ),\n      stats,\n      modifier,\n    }),\n\n  aimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShot({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedAimShotDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  kindlingArrowDmg: ({ stats, modifier }: TalentProps) =>\n    aimShotCharged({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[7],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  aurousBlazeExplosionDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Pyro,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n};\n\nconst yoimiyaTalents: Talents = {\n  attack: yoimiyaAttack,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalents;\n\n// Helper functions\n\nfunction getYoimiyaNormalAttackMultiplier(\n  multiplier: number,\n  modifier: DamageModifier\n): number {\n  if (!modifier.yoimiyaSkill) {\n    return multiplier;\n  }\n\n  return (\n    multiplier *\n    getTalentParams(TalentType.Skill, modifier.talentSkillLevel, talentData)[3]\n  );\n}\n","import CharacterOption from '../../option/characterOptions/CharacterOption';\nimport { CharacterPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport yoimiyaOptions from './YoimiyaOption';\nimport yoimiyaPassives from './YoimiyaPassive';\nimport yoimiyaTalents from './YoimiyaTalent';\n\nexport default class Yoimiya extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('yoimiya', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return yoimiyaTalents;\n  }\n\n  getCharacterOptionConstuctors(): typeof CharacterOption[] {\n    return yoimiyaOptions;\n  }\n\n  getAllPassives(): CharacterPassive[] {\n    return yoimiyaPassives;\n  }\n}\n","import { getTalentData, getTalentParams } from '../../data/Data';\nimport {\n  normalAttackSingle,\n  chargedAttackSingle,\n  plungeAttack,\n  skillSingle,\n  burstSingle,\n  normalAttackMulti,\n  shieldHpValue,\n} from '../../talent/TalentUtil';\nimport {\n  TalentProps,\n  Element,\n  Talents,\n  TalentFn,\n  TalentType,\n} from '../../talent/types';\n\nconst talentData = getTalentData('zhongli');\n\nconst zhongliAttack: Record<string, TalentFn> = {\n  '1HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  '2HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  '3HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[2],\n      stats,\n      modifier,\n    }),\n\n  '4HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  '5HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackMulti({\n      hits: 4,\n      params: Array(4).fill(\n        getTalentParams(\n          TalentType.Attack,\n          modifier.talentAttackLevel,\n          talentData\n        )[4]\n      ),\n      stats,\n      modifier,\n    }),\n\n  '6HitDmg': ({ stats, modifier }: TalentProps) =>\n    normalAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[5],\n      stats,\n      modifier,\n    }),\n\n  chargedDmg: ({ stats, modifier }: TalentProps) =>\n    chargedAttackSingle({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[6],\n      stats,\n      modifier,\n    }),\n\n  plungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[8],\n      stats,\n      modifier,\n    }),\n\n  lowPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[9],\n      stats,\n      modifier,\n    }),\n\n  highPlungeDmg: ({ stats, modifier }: TalentProps) =>\n    plungeAttack({\n      multiplier: getTalentParams(\n        TalentType.Attack,\n        modifier.talentAttackLevel,\n        talentData\n      )[10],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliSkill: Record<string, TalentFn> = {\n  stoneSteeleDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n\n  resonanceDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[1],\n      stats,\n      modifier,\n    }),\n\n  holdDmg: ({ stats, modifier }: TalentProps) =>\n    skillSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[3],\n      stats,\n      modifier,\n    }),\n\n  shieldHp: ({ stats, modifier }: TalentProps) =>\n    shieldHpValue({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[5],\n      flatBonus: getTalentParams(\n        TalentType.Skill,\n        modifier.talentSkillLevel,\n        talentData\n      )[4],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliBurst: Record<string, TalentFn> = {\n  burstDmg: ({ stats, modifier }: TalentProps) =>\n    burstSingle({\n      element: Element.Geo,\n      multiplier: getTalentParams(\n        TalentType.Burst,\n        modifier.talentBurstLevel,\n        talentData\n      )[0],\n      stats,\n      modifier,\n    }),\n};\n\nconst zhongliTalents: Talents = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalents;\n","import { IOptionBoolean } from '../../option/Option';\nimport CharacterOption from '../../option/characterOptions/CharacterOption';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { TeamPassive } from '../../passive/types';\n\nclass ZhongliOptionShield extends CharacterOption implements IOptionBoolean {\n  value = false;\n\n  constructor() {\n    super('zhongliShield');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value) {\n        Object.values(Element).forEach((element) =>\n          modifier.enemyResReduction.set(element, 0.2)\n        );\n      }\n    },\n  };\n}\n\nconst zhongliTeamPassive: TeamPassive = {\n  id: 'zhongliTeamPassive',\n  options: [ZhongliOptionShield],\n};\nexport default zhongliTeamPassive;\n","import Albedo from './albedo/Albedo';\nimport Aloy from './aloy/Aloy';\nimport Amber from './amber/Amber';\nimport Ayaka from './ayaka/Ayaka';\nimport Barbara from './barbara/Barbara';\nimport Beidou from './beidou/Beidou';\nimport Bennett from './bennett/Bennett';\nimport Character from './Character';\nimport Chongyun from './chongyun/Chongyun';\nimport Diluc from './diluc/Diluc';\nimport Diona from './diona/Diona';\nimport Eula from './eula/Eula';\nimport Fischl from './fischl/Fischl';\nimport Ganyu from './ganyu/Ganyu';\nimport Hutao from './hutao/Hutao';\nimport Jean from './jean/Jean';\nimport Kaeya from './kaeya/Kaeya';\nimport Kazuha from './kazuha/Kazuha';\nimport Keqing from './keqing/Keqing';\nimport Klee from './klee/Klee';\nimport Kokomi from './kokomi/Kokomi';\nimport Lisa from './lisa/Lisa';\nimport Mona from './mona/Mona';\nimport Ningguang from './ningguang/Ningguang';\nimport Noelle from './noelle/Noelle';\nimport Qiqi from './qiqi/Qiqi';\nimport Raiden from './raiden/Raiden';\nimport Razor from './razor/Razor';\nimport Rosaria from './rosaria/Rosaria';\nimport Sara from './sara/Sara';\nimport Sayu from './sayu/Sayu';\nimport Sucrose from './sucrose/Sucrose';\nimport Tartaglia from './tartaglia/Tartaglia';\nimport Thoma from './thoma/Thoma';\nimport Venti from './venti/Venti';\nimport Xiangling from './xiangling/Xiangling';\nimport Xiao from './xiao/Xiao';\nimport Xingqiu from './xingqiu/Xingqiu';\nimport Xinyan from './xinyan/Xinyan';\nimport Yanfei from './yanfei/Yanfei';\nimport Yoimiya from './yoimiya/Yoimiya';\nimport Zhongli from './zhongli/Zhongli';\n\nconst characters: Record<string, typeof Character> = {\n  albedo: Albedo,\n  aloy: Aloy,\n  amber: Amber,\n  ayaka: Ayaka,\n  barbara: Barbara,\n  beidou: Beidou,\n  bennett: Bennett,\n  chongyun: Chongyun,\n  diluc: Diluc,\n  diona: Diona,\n  eula: Eula,\n  fischl: Fischl,\n  ganyu: Ganyu,\n  hutao: Hutao,\n  jean: Jean,\n  kaeya: Kaeya,\n  kazuha: Kazuha,\n  keqing: Keqing,\n  klee: Klee,\n  kokomi: Kokomi,\n  lisa: Lisa,\n  mona: Mona,\n  ningguang: Ningguang,\n  noelle: Noelle,\n  qiqi: Qiqi,\n  raiden: Raiden,\n  razor: Razor,\n  rosaria: Rosaria,\n  sara: Sara,\n  sayu: Sayu,\n  sucrose: Sucrose,\n  tartaglia: Tartaglia,\n  thoma: Thoma,\n  venti: Venti,\n  xiangling: Xiangling,\n  xiao: Xiao,\n  xingqiu: Xingqiu,\n  xinyan: Xinyan,\n  yanfei: Yanfei,\n  yoimiya: Yoimiya,\n  zhongli: Zhongli,\n};\n\nfunction getCharacterConstructor(id: string): typeof Character {\n  return characters[id] ?? Character;\n}\n\nexport function initCharacter(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  constellationLevel?: number\n): Character {\n  const CharacterConstructor = getCharacterConstructor(id);\n\n  return new CharacterConstructor(id, level, hasAscended, constellationLevel);\n}\n","import { TeamPassive } from '../../passive/types';\nimport { Talents } from '../../talent/types';\nimport Character from '../Character';\nimport zhongliTalents from './ZhongliTalent';\nimport zhongliTeamPassive from './ZhongliTeamPassive';\n\nexport default class Zhongli extends Character {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    constellationLevel?: number\n  ) {\n    super('zhongli', level, hasAscended, constellationLevel);\n  }\n\n  getTalentFns(): Talents {\n    return zhongliTalents;\n  }\n\n  getTeamPassive(): TeamPassive {\n    return zhongliTeamPassive;\n  }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          type='number'\n          size='sm'\n          value={displayString}\n          onInput={this.handleInput}\n          className={`number-input ${this.props.className ?? ''}`}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\nimport Row from 'react-bootstrap/esm/Row';\n\ntype InputRowProps = {\n  className?: string;\n};\n\nclass InputRow extends React.Component<InputRowProps> {\n  render() {\n    return (\n      <Row className={`input-row no-gutters ${this.props.className}`}>\n        {this.props.children}\n      </Row>\n    );\n  }\n}\n\nexport default InputRow;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <Form.Label htmlFor={this.props.id} srOnly={!this.isLabelShown()}>\n          {this.props.label}\n        </Form.Label>\n        <Form.Control\n          as='select'\n          size='sm'\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={`picker ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </Form.Control>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../artifact/Artifact';\nimport { propMapping } from '../data/Data';\nimport { capitalize, getStatDisplayValue } from '../stat/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactRarity = (rarity: number) => {\n    this.props.artifact.rarity = rarity;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactLevel = (level: number) => {\n    this.props.artifact.level = level;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatInputValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-rarity`}\n            label='Rarity:'\n            defaultValue={1}\n            value={artifact.rarity}\n            onInput={this.setArtifactRarity}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-level`}\n            label='Level:'\n            defaultValue={0}\n            value={artifact.level}\n            onInput={this.setArtifactLevel}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label='Main Stat:'\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <p>\n            {getStatDisplayValue(\n              artifact.mainStat.stat,\n              artifact.mainStat.value\n            )}\n          </p>\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import { Element } from '../talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","import { Stats } from '../data/types';\nimport { ModifierMixin } from '../option/Mixin';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport CritType from './CritType';\nimport Reaction from './Reaction';\n\nexport default interface DamageModifier\n  extends DamageModifierBase,\n    DamageModiferOptional {}\n\ninterface DamageModifierBase {\n  characterLevel: number;\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  enemyResReduction: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n}\n\ninterface DamageModiferOptional {\n  swirlElement?: Element;\n\n  normalAttackFlatDmg?: number;\n  chargedAttackFlatDmg?: number;\n  skillFlatDmg?: number;\n  burstFlatDmg?: number;\n\n  infusion?: Element;\n  infusionNormal?: Element;\n  infusionPlunge?: Element;\n\n  elementalAbsorption?: Element;\n\n  dionaHoldSkill?: boolean;\n\n  albedoBlossomDmgBonus?: number;\n\n  yoimiyaSkill?: boolean;\n\n  thomaHpBonusDmg?: number;\n\n  resolveStacks?: number;\n\n  kokomiBurst?: boolean;\n  kokomiHealingBonusDmg?: number;\n}\n\nexport type GetDamageModifierParams = {\n  characterLevel: number;\n  enemyLevel: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n  modifierMixins: ModifierMixin[];\n  stats: Stats;\n};\n\nexport function getDamageModifier({\n  characterLevel,\n  enemyLevel,\n  enemyRes,\n  critType,\n  reaction,\n  talentAttackLevel,\n  talentSkillLevel,\n  talentBurstLevel,\n  modifierMixins,\n  stats,\n}: GetDamageModifierParams): DamageModifier {\n  const modifier: DamageModifier = {\n    characterLevel,\n    enemyLevel,\n    enemyDefReduction: 0,\n    enemyRes,\n    enemyResReduction: new Resistance(),\n    critType: critType,\n    flatDmg: 0,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  };\n\n  // Apply modifier mixins\n  modifierMixins.forEach((mixin) => mixin.apply(modifier, stats));\n\n  return modifier;\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { ModifierMixin } from '../Mixin';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass SwirlOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('swirlElement');\n  }\n\n  modifierMixin: ModifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.swirlElement = this.value as Element;\n      }\n    },\n  };\n}\n\nexport default SwirlOption;\n","import { ArchaicPetra4PcOption } from '../../artifact/artifactSet/ArchaicPetra';\nimport { Instructor4PcOption } from '../../artifact/artifactSet/Instructor';\nimport { NoblesseOblige4PcOption } from '../../artifact/artifactSet/NoblesseOblige';\nimport { Tenacity4PcOption } from '../../artifact/artifactSet/Tenacity';\nimport { ViridescentVenerer4PcOption } from '../../artifact/artifactSet/ViridescentVenerer';\nimport ArtifactSetOption from '../../option/artifactSetOptions/ArtifactSetOption';\n\nconst artifactTeamBuffs: Record<string, typeof ArtifactSetOption> = {\n  archaicPetra4Pc: ArchaicPetra4PcOption,\n  instructor4Pc: Instructor4PcOption,\n  noblesseOblige4Pc: NoblesseOblige4PcOption,\n  tenacity4Pc: Tenacity4PcOption,\n  viridescentVenerer4Pc: ViridescentVenerer4PcOption,\n};\n\nexport default artifactTeamBuffs;\n","import Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character, { getAscensionLevel } from '../character/Character';\nimport { Stats } from '../data/types';\nimport CritType from '../modifier/CritType';\nimport { getDamageModifier } from '../modifier/DamageModifer';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport SwirlOption from '../option/characterOptions/SwirlOption';\nimport { getModifierMixins, getStatMixins } from '../option/Mixin';\nimport Option from '../option/Option';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Resistance from '../stat/Resistance';\nimport { getTotalStatsAt } from '../stat/Stat';\nimport { Talents, TalentValue } from '../talent/types';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\nimport Weapon from '../weapon/Weapon';\n\nexport type CalculateTalentValueParams = {\n  talentType: string;\n  talentId: string;\n  options: Option[];\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n  artifactSets: ArtifactSet[];\n  artifactSetBonuses: Stats;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n  enemyLevel: number;\n  enemyRes: Resistance;\n  reaction: Reaction;\n  critType: CritType;\n  teamCharacters: Character[];\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n  swirlOption: SwirlOption;\n  talents: Talents;\n};\n\nexport function calculateTalentValue({\n  talentType,\n  talentId,\n  options,\n  character,\n  weapon,\n  artifacts,\n  artifactSets,\n  artifactSetBonuses,\n  talentAttackLevel,\n  talentSkillLevel,\n  talentBurstLevel,\n  enemyLevel,\n  enemyRes,\n  reaction,\n  critType,\n  teamCharacters,\n  characterOptions,\n  weaponOptions,\n  artifactSetOptions,\n  teamOptions,\n  artifactBuffOptions,\n  swirlOption,\n  talents,\n}: CalculateTalentValueParams): TalentValue {\n  // Initialize a set of all options\n  const {\n    characterOptions: characterOptionsNew,\n    weaponOptions: weaponOptionsNew,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n    swirlOption: swirlOptionNew,\n  } = initializeAllOptions({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n    swirlOption,\n  });\n\n  const allOptions = [\n    ...characterOptionsNew,\n    ...weaponOptionsNew,\n    ...artifactSetOptionsNew,\n    ...teamOptionsNew,\n    ...artifactBuffOptionsNew,\n    swirlOptionNew,\n  ];\n\n  // Override option values\n  options.forEach((option) => {\n    let newOption = allOptions.find((newOption) => newOption.id === option.id);\n    if (newOption !== undefined) {\n      setOptionValue(newOption, getOptionValue(option));\n    } else if (option.id === 'reaction') {\n      characterOptionsNew.push(option as ReactionOption);\n    }\n  });\n\n  // Calculate stats and modifier\n  const statMixins = getStatMixins({\n    character,\n    characterOptions: characterOptionsNew,\n    weapon,\n    weaponOptions: weaponOptionsNew,\n    artifactSets,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamCharacters,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n  });\n\n  const stats = getTotalStatsAt(\n    character,\n    weapon,\n    artifactSetBonuses,\n    artifacts,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    statMixins\n  );\n\n  const modifierMixins = getModifierMixins({\n    character,\n    characterOptions: characterOptionsNew,\n    weapon,\n    weaponOptions: weaponOptionsNew,\n    artifactSets,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamCharacters,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n    swirlOption: swirlOptionNew,\n  });\n\n  const modifier = getDamageModifier({\n    characterLevel: character.level,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n    stats,\n  });\n\n  // Calculate talent value\n  const talentFn = talents[talentType]?.[talentId];\n\n  const talentValue = talentFn?.({ stats, modifier }) ?? { damage: [NaN] };\n\n  return talentValue;\n}\n\ntype InitializeAllOptionsParams = {\n  character: Character;\n  characterOptions: CharacterOption[];\n  weapon: Weapon;\n  weaponOptions: WeaponOption[];\n  artifactSets: ArtifactSet[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamCharacters: Character[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n  swirlOption: SwirlOption;\n};\n\nexport function initializeAllOptions(params: InitializeAllOptionsParams) {\n  const characterOptions = [\n    ...params.character.getCharacterOptions(),\n    ...params.character.getPassiveOptions(\n      getAscensionLevel(params.character.level, params.character.hasAscended)\n    ),\n    ...params.character.getConstellationsOptions(\n      params.character.constellationLevel\n    ),\n  ];\n  params.characterOptions.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, getOptionValue(option));\n    }\n  });\n\n  const weaponOptions = params.weapon.getPassiveOptions();\n  params.weaponOptions.forEach((option) => {\n    let weaponOption = weaponOptions.find(\n      (weaponOption) => weaponOption.id === option.id\n    );\n    if (weaponOption !== undefined) {\n      setOptionValue(weaponOption, getOptionValue(option));\n    }\n  });\n\n  const artifactSetOptions = params.artifactSets.flatMap((artifactSet) =>\n    artifactSet.getOptions(artifactSet.pieces)\n  );\n  params.artifactSetOptions.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, getOptionValue(option));\n    }\n  });\n\n  const teamOptions = params.teamCharacters.flatMap((character) =>\n    character.getTeamOptions()\n  );\n  params.teamOptions.forEach((option) => {\n    let teamOption = teamOptions.find(\n      (teamOption) => teamOption.id === option.id\n    );\n    if (teamOption !== undefined) {\n      setOptionValue(teamOption, getOptionValue(option));\n    }\n  });\n\n  const artifactBuffOptions = params.artifactBuffOptions.flatMap((option) => {\n    const OptionConstructor = artifactTeamBuffs[option.id];\n    if (OptionConstructor !== undefined) {\n      let artifactOption = new OptionConstructor();\n      setOptionValue(artifactOption, getOptionValue(option));\n      return [artifactOption];\n    }\n\n    return [];\n  });\n\n  const swirlOption = new SwirlOption();\n  setOptionValue(swirlOption, getOptionValue(params.swirlOption));\n\n  return {\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n    swirlOption,\n  };\n}\n","import Artifact from '../artifact/Artifact';\nimport Attack from '../dps/Attack';\nimport {\n  calculateTalentValue,\n  CalculateTalentValueParams,\n} from '../dps/DPSCalculator';\nimport { getStatMixins } from '../option/Mixin';\nimport { getTotalStatsAt } from '../stat/Stat';\n\nexport type RollDistribution = {\n  stat: string;\n  rolls: number;\n};\n\ntype SubstatOptimizerResult = {\n  subStatRolls: RollDistribution[];\n  artifacts: Artifact[];\n};\n\n// Average substat rolls, as per KQM guidelines\nexport const substats: Record<string, number> = {\n  hpBonus: 0.0496,\n  flatHp: 253.94,\n  atkBonus: 0.0496,\n  flatAtk: 16.54,\n  defBonus: 0.062,\n  flatDef: 19.68,\n  elementalMastery: 19.82,\n  energyRecharge: 0.0551,\n  critRate: 0.0331,\n  critDmg: 0.0662,\n};\n\n// Optimize substats according to KQM standardized guidelines\n// 20 preallocated fixed subs (2 of each substat)\n// maxRolls liquid subs (default/max = 20)\n// each sub type can have maximum 2 rolls per different main stat type\nexport function optimizeSubstats(\n  possibleStats: string[],\n  maxRolls: number,\n  erThreshold: number,\n  rotation: Attack[],\n  calcParams: Omit<\n    CalculateTalentValueParams,\n    'talentType' | 'talentId' | 'options'\n  >\n): SubstatOptimizerResult {\n  let maxDmg = 0;\n  let optimalSubstatRolls: RollDistribution[] = [];\n  let optimalArtifacts: Artifact[] = calcParams.artifacts;\n\n  // Roll ER to reach threshold\n  const baseArtifacts = generateBaseArtifacts(calcParams.artifacts);\n  const baseStatMixins = getStatMixins({ ...calcParams });\n  const baseTotalStats = getTotalStatsAt(\n    calcParams.character,\n    calcParams.weapon,\n    calcParams.artifactSetBonuses,\n    baseArtifacts,\n    calcParams.talentAttackLevel,\n    calcParams.talentSkillLevel,\n    calcParams.talentBurstLevel,\n    baseStatMixins\n  );\n  const baseEr = baseTotalStats.energyRecharge ?? 0;\n\n  let baseErRolls = Math.ceil((erThreshold - baseEr) / substats.energyRecharge);\n\n  const erMainStatCount = baseArtifacts\n    .map((artifact) => artifact.mainStat.stat)\n    .filter((mainStat) => mainStat === 'energyRecharge').length;\n\n  if (baseErRolls < 0) {\n    baseErRolls = 0;\n  } else if (baseErRolls > 2 * (5 - erMainStatCount)) {\n    baseErRolls = 2 * (5 - erMainStatCount);\n  }\n\n  // Generate all combinations\n  const combinations = generateRollCombinationsKqm(\n    possibleStats,\n    maxRolls - baseErRolls,\n    calcParams.artifacts.map((artifact) => artifact.mainStat.stat),\n    baseErRolls\n  );\n\n  combinations.forEach((combination) => {\n    // Add in ER threshold rolls\n    if (baseErRolls > 0) {\n      const erDistribution = combination.find(\n        ({ stat }) => stat === 'energyRecharge'\n      );\n      if (erDistribution === undefined) {\n        combination.push({ stat: 'energyRecharge', rolls: baseErRolls });\n      } else {\n        erDistribution.rolls += baseErRolls;\n      }\n    }\n\n    const artifacts = generateBaseArtifacts(calcParams.artifacts);\n\n    addRollsToArtifacts(combination, artifacts);\n\n    const damage = rotation.reduce((acc, attack) => {\n      const talentValue = calculateTalentValue({\n        ...attack,\n        ...calcParams,\n        artifacts,\n      });\n      const totalDmg = talentValue.damage.reduce(\n        (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n        0\n      );\n      const multiplier = !isNaN(attack.multiplier) ? attack.multiplier : 0;\n      return acc + totalDmg * multiplier;\n    }, 0);\n\n    // Update optimal rolls\n    if (damage > maxDmg) {\n      optimalSubstatRolls = combination;\n      optimalArtifacts = artifacts;\n      maxDmg = damage;\n    }\n  });\n\n  return {\n    subStatRolls: optimalSubstatRolls,\n    artifacts: optimalArtifacts,\n  };\n}\n\n// Recursive function to generate all substat combinations according to KQM 2*n rule\nfunction generateRollCombinationsKqm(\n  possibleStats: string[],\n  maxRolls: number,\n  mainStats: string[],\n  baseErRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const sameMainStatCount = mainStats.filter(\n    (mainStat) => possibleStats[0] === mainStat\n  ).length;\n  let currentMaxRolls = Math.min((5 - sameMainStatCount) * 2, maxRolls);\n  if (possibleStats[0] === 'energyRecharge') {\n    currentMaxRolls -= baseErRolls;\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = currentMaxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinationsKqm(\n      possibleStats.slice(1),\n      maxRolls - i,\n      mainStats,\n      baseErRolls\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n\n// Recursive function to generate all combinations of possibleStats.length numbers that sum to maxRolls\n// Generated combinations are not guaranteed to be valid substat combinations\n/*\nfunction generateRollCombinations(\n  possibleStats: string[],\n  maxRolls: number\n): RollDistribution[][] {\n  if (possibleStats.length === 0 || maxRolls === 0) {\n    return [];\n  }\n\n  const combinations: RollDistribution[][] = [];\n\n  for (let i = maxRolls; i >= 0; i--) {\n    const current: RollDistribution[] = [{ stat: possibleStats[0], rolls: i }];\n\n    const backCombinations = generateRollCombinations(\n      possibleStats.slice(1),\n      maxRolls - i\n    );\n\n    if (backCombinations.length === 0) {\n      combinations.push(current);\n    } else {\n      combinations.push(\n        ...backCombinations.map((combination) => current.concat(combination))\n      );\n    }\n  }\n\n  return combinations;\n}\n*/\n\n// Generate artifacts with 2 of each substat\nfunction generateBaseArtifacts(prevArtifacts: Artifact[]): Artifact[] {\n  const artifacts = prevArtifacts.map((artifact) => {\n    return new Artifact(\n      artifact.type,\n      artifact.rarity,\n      artifact.level,\n      artifact.mainStat.stat\n    );\n  });\n\n  // Set artifact substats according to currentSubstatRolls\n  let iArtifact = 0;\n  let jArtifact = 0;\n  Object.entries(substats).forEach(([stat, value]) => {\n    artifacts[iArtifact].setSubStatProp(jArtifact, stat);\n    artifacts[iArtifact].setSubStatValue(jArtifact, value * 2);\n    if (++jArtifact >= 4) {\n      jArtifact = 0;\n      if (++iArtifact >= 5) {\n        // This really should not happen\n        iArtifact = 0;\n      }\n    }\n  });\n\n  return artifacts;\n}\n\n// Add liquid subs to fixed subs without replacing any fixed subs\nfunction addRollsToArtifacts(\n  combination: RollDistribution[],\n  artifacts: Artifact[]\n) {\n  const subStats = artifacts.flatMap((artifact) => artifact.subStats);\n  combination.forEach(({ stat, rolls }) => {\n    const subStat = subStats.find((inputStat) => inputStat.stat === stat);\n    if (subStat === undefined) {\n      let sIndex = 0;\n      artifacts\n        .find((artifact) =>\n          artifact.subStats.find((inputStat, i) => {\n            sIndex = i;\n            return isNaN(inputStat.value);\n          })\n        )\n        ?.setSubStatValue(sIndex, substats[stat] * rolls);\n    } else {\n      subStat.setValue(subStat.value + substats[stat] * rolls);\n    }\n  });\n}\n","import OptimizerWorker from 'workerize-loader!../optimization/OptimizerWorker'; // eslint-disable-line import/no-webpack-loader-syntax\n\nexport default OptimizerWorker;\n","import {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  WeaponPassiveData,\n  WeaponPassiveSetData,\n} from '../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getWeaponPassiveAt,\n  getWeaponPassiveData,\n} from '../data/Data';\nimport { getOptionValue, setOptionValue } from '../option';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../passive/types';\nimport type { WeaponType } from './types';\nimport { Talents } from '../talent/types';\n\nexport default class Weapon {\n  constructor(\n    id: string,\n    level: number = 1,\n    hasAscended: boolean = false,\n    refinement: number = 1\n  ) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n    this._refinement = refinement;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.passiveDataSet = getWeaponPassiveData(value);\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(\n        this.refinement,\n        this.passiveDataSet\n      );\n    }\n    this.passive = this.getPassive(this.refinement);\n    this.passiveOptions = this.getPassiveOptions();\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n\n    this.talentFns = this.getTalentFns(this.refinement);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  passiveDataSet?: WeaponPassiveSetData;\n  talentFns: Talents = {};\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  private _refinement: number = 1;\n  get refinement(): number {\n    return this._refinement;\n  }\n  set refinement(value: number) {\n    this._refinement = value;\n    if (this.passiveDataSet !== undefined) {\n      this.passiveData = getWeaponPassiveAt(value, this.passiveDataSet);\n      this.passive = this.getPassive(value);\n      this.passiveOptions = this.getPassiveOptions(true);\n    }\n  }\n\n  stats: Stats = {};\n  passiveData?: WeaponPassiveData;\n  passive?: WeaponPassive;\n  passiveOptions: WeaponOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n\n  // Override in derived classes to implement special passives\n  // Only returns the extra passive bonuses, excluding the direct stat bonuses\n  // To be called when passive should update (e.g. id or refinement change)\n  getPassive(_refinement: number): WeaponPassive | undefined {\n    return;\n  }\n\n  // getPassive should be called before this if passives are updated\n  getPassiveOptions(shouldKeepValue: boolean = false) {\n    let newOptions = (this.passive?.options ?? []).map(\n      (Option) => new Option()\n    );\n\n    if (shouldKeepValue) {\n      this.passiveOptions.forEach((option) => {\n        let newOption = newOptions.find(\n          (newOption) => newOption.id === option.id\n        );\n        if (newOption !== undefined) {\n          setOptionValue(newOption, getOptionValue(option));\n        }\n      });\n    }\n\n    return newOptions;\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    let statMixins = [];\n\n    if (this.passive?.statMixin !== undefined) {\n      statMixins.push(this.passive.statMixin);\n    }\n\n    if (this.passiveData?.statBonuses !== undefined) {\n      this.passiveData.statBonuses.forEach(({ stat, value }) => {\n        statMixins.push({\n          apply: (stats: Stats) => {\n            stats[stat] = value + (stats[stat] ?? 0);\n          },\n        });\n      });\n    }\n\n    return statMixins;\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    if (this.passive?.modifierMixin === undefined) {\n      return [];\n    }\n\n    return [this.passive.modifierMixin];\n  }\n\n  // Override in derived classes if weapon does special damage instance\n  getTalentFns(_refinement: number): Talents {\n    return {};\n  }\n}\n","import Option from '../Option';\n\nexport default class WeaponOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { cinnabarSpindlePassive } from './CinnabarSpindlePassive';\n\nexport default class CinnabarSpindle extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('cinnabarspindle', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return cinnabarSpindlePassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { IModifierApplicable, IOptionBoolean } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function cinnabarSpindlePassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('cinnabarspindle', refinement);\n\n  class CinnabarSpindleOption\n    extends WeaponOption\n    implements IOptionBoolean, IModifierApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('cinnabarSpindlePassive');\n    }\n\n    modifierMixin = {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        if (this.value) {\n          modifier.skillFlatDmg =\n            stats.flatDef * params[0] + (modifier.skillFlatDmg ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'cinnabarspindle',\n    options: [CinnabarSpindleOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { dragonsBanePassive } from './DragonsBanePassive';\n\nexport default class DragonsBane extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('dragonsbane', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return dragonsBanePassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function dragonsBanePassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('dragonsbane', refinement);\n\n  class DragonsBaneOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('dragonsBanePassive');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'dragonsBane',\n    options: [DragonsBaneOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { engulfingLightningPassive } from './EngulfingLightningPassive';\n\nexport default class EngulfingLightning extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('engulfinglightning', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return engulfingLightningPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function engulfingLightningPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('engulfinglightning', refinement);\n\n  class EngulfingLightningOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('engulfingLightningEnergyRecharge');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.energyRecharge = params[2] + (stats.energyRecharge ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'engulfingLightning',\n    options: [EngulfingLightningOption],\n\n    statMixin: {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        let atkBonus = (stats.energyRecharge - 1) * params[0];\n        if (atkBonus > params[1]) {\n          atkBonus = params[1];\n        }\n\n        stats.atkBonus = atkBonus + (stats.atkBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { everlastingMoonglowPassive } from './EverlastingMoonglowPassive';\n\nexport default class EverlastingMoonglow extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('everlastingmoonglow', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return everlastingMoonglowPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function everlastingMoonglowPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('everlastingmoonglow', refinement);\n\n  return {\n    id: 'everlastingMoonglow',\n    options: [],\n    modifierMixin: {\n      apply: (modifier: DamageModifier, stats: Stats) => {\n        modifier.normalAttackFlatDmg =\n          params[1] * (stats.flatHp ?? 0) + (modifier.normalAttackFlatDmg ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { luxuriousSeaLordPassive } from './LuxuriousSeaLordPassive';\n\nexport default class LuxuriousSeaLord extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('luxurioussealord', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return luxuriousSeaLordPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function luxuriousSeaLordPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('luxurioussealord', refinement);\n\n  return {\n    id: 'luxuriousSeaLord',\n    options: [],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { polarStarPassive } from './PolarStarPassive';\n\nexport default class PolarStar extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('polarstar', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return polarStarPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function polarStarPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('polarstar', refinement);\n\n  class PolarStarOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('polarStarStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        let stacks = this.value;\n\n        if (stacks > 0) {\n          if (stacks > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[stacks + 1] + (stats.atkBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'polarStar',\n    options: [PolarStarOption],\n\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n      },\n    },\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { solarPearlPassive } from './SolarPearlPassive';\n\nexport default class SolarPearl extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('solarpearl', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return solarPearlPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function solarPearlPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('solarpearl', refinement);\n\n  class SolarPearlOptionNormalAttack\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlNormalAttack');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.skillDmgBonus = params[0] + (stats.skillDmgBonus ?? 0);\n          stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  class SolarPearlOptionSkillBurst\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('solarPearlSkillBurst');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value) {\n          stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'solarPearl',\n    options: [SolarPearlOptionNormalAttack, SolarPearlOptionSkillBurst],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { staffOfHomaPassive } from './StaffOfHomaPassive';\n\nexport default class StaffOfHoma extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('staffofhoma', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return staffOfHomaPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { Priority } from '../../option/Mixin';\nimport { IOptionBoolean, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function staffOfHomaPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('staffofhoma', refinement);\n\n  class StaffOfHomaOption\n    extends WeaponOption\n    implements IOptionBoolean, IStatsApplicable\n  {\n    value = false;\n\n    constructor() {\n      super('staffOfHomaAtkBonus');\n    }\n\n    statMixin = {\n      priority: Priority.Last,\n      apply: (stats: Stats) => {\n        const totalHp =\n          (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) +\n          (stats.flatHp ?? 0);\n\n        let flatAtkBonus = totalHp * params[1];\n        if (this.value) {\n          flatAtkBonus += totalHp * params[2];\n        }\n\n        stats.flatAtk = flatAtkBonus + (stats.flatAtk ?? 0);\n      },\n    };\n  }\n\n  return {\n    id: 'staffOfHoma',\n    options: [StaffOfHomaOption],\n  };\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { theCatchPassive } from './TheCatchPassive';\n\nexport default class TheCatch extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('thecatch', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return theCatchPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function theCatchPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('thecatch', refinement);\n\n  return {\n    id: 'theCatch',\n    options: [],\n    statMixin: {\n      apply: (stats: Stats) => {\n        stats.burstDmgBonus = params[0] + (stats.burstDmgBonus ?? 0);\n        stats.burstCritRate = params[1] + (stats.burstCritRate ?? 0);\n      },\n    },\n  };\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport const watatsumiWavewalkerPassive =\n  (id: string) =>\n  (refinement: number): WeaponPassive => {\n    const params = getWeaponPassiveParams(id, refinement);\n\n    class WatatsumiWavewalkerOption\n      extends WeaponOption\n      implements IOptionNumber, IStatsApplicable\n    {\n      value = 0;\n\n      constructor() {\n        super('watatsumiWavewalkerPassive');\n      }\n\n      statMixin = {\n        apply: (stats: Stats) => {\n          if (this.value > 0) {\n            let burstDmgBonus = this.value * (params[0] / 100);\n            if (burstDmgBonus > params[1]) {\n              burstDmgBonus = params[1];\n            }\n            stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n          }\n        },\n      };\n    }\n\n    return {\n      id,\n      options: [WatatsumiWavewalkerOption],\n    };\n  };\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class Akuoumaru extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('akuoumaru', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('akuoumaru')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class MouunsMoon extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('mouunsmoon', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('mouunsmoon')(refinement);\n  }\n}\n","import CinnabarSpindle from './cinnabarspindle/CinnarbarSpindle';\nimport DragonsBane from './dragonsbane/DragonsBane';\nimport EngulfingLightning from './engulfinglightning/EngulfingLightning';\nimport EverlastingMoonglow from './everlastingmoonglow/EverlastingMoonglow';\nimport LuxuriousSeaLord from './luxurioussealord/LuxuriousSeaLord';\nimport PolarStar from './polarstar/PolarStar';\nimport SolarPearl from './solarpearl/SolarPearl';\nimport StaffOfHoma from './staffofhoma/StaffOfHoma';\nimport TheCatch from './thecatch/TheCatch';\nimport Akuoumaru from './watatsumi/Akuoumaru';\nimport MouunsMoon from './watatsumi/MouunsMoon';\nimport WavebreakersFin from './watatsumi/WavebreakersFin';\nimport Weapon from './Weapon';\nimport Whiteblind from './whiteblind/Whiteblind';\n\nconst weapons: Record<string, typeof Weapon> = {\n  // Sword\n  cinnabarspindle: CinnabarSpindle,\n\n  // Polearm\n  dragonsbane: DragonsBane,\n  engulfinglightning: EngulfingLightning,\n  staffofhoma: StaffOfHoma,\n  thecatch: TheCatch,\n  wavebreakersfin: WavebreakersFin,\n\n  // Catalyst\n  everlastingmoonglow: EverlastingMoonglow,\n  solarpearl: SolarPearl,\n\n  // Claymore\n  luxurioussealord: LuxuriousSeaLord,\n  whiteblind: Whiteblind,\n  akuoumaru: Akuoumaru,\n\n  // Bow\n  polarstar: PolarStar,\n  mouunsmoon: MouunsMoon,\n};\n\nfunction getWeaponConstructor(id: string): typeof Weapon {\n  return weapons[id] ?? Weapon;\n}\n\nexport function initWeapon(\n  id: string = '',\n  level?: number,\n  hasAscended?: boolean,\n  refinement?: number\n): Weapon {\n  const WeaponConstructor = getWeaponConstructor(id);\n\n  return new WeaponConstructor(id, level, hasAscended, refinement);\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { watatsumiWavewalkerPassive } from './WatatsumiWavewalker';\n\nexport default class WavebreakersFin extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('wavebreakersfin', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return watatsumiWavewalkerPassive('wavebreakersfin')(refinement);\n  }\n}\n","import { WeaponPassive } from '../../passive/types';\nimport Weapon from '../Weapon';\nimport { whiteblindPassive } from './WhiteblindPassive';\n\nexport default class Whiteblind extends Weapon {\n  constructor(\n    _id: string,\n    level?: number,\n    hasAscended?: boolean,\n    refinement?: number\n  ) {\n    super('whiteblind', level, hasAscended, refinement);\n  }\n\n  getPassive(refinement: number): WeaponPassive {\n    return whiteblindPassive(refinement);\n  }\n}\n","import { getWeaponPassiveParams } from '../../data/Data';\nimport { Stats } from '../../data/types';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport WeaponOption from '../../option/weaponOptions/WeaponOption';\nimport { WeaponPassive } from '../../passive/types';\n\nexport function whiteblindPassive(refinement: number): WeaponPassive {\n  const params = getWeaponPassiveParams('whiteblind', refinement);\n\n  class WhiteblindOption\n    extends WeaponOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('whiteblindStacks');\n    }\n\n    statMixin = {\n      apply: (stats: Stats) => {\n        if (this.value > 0) {\n          let stacks = this.value;\n          if (this.value > 4) {\n            stacks = 4;\n          }\n\n          stats.atkBonus = params[0] * stacks + (stats.atkBonus ?? 0);\n          stats.defBonus = params[0] * stacks + (stats.defBonus ?? 0);\n        }\n      },\n    };\n  }\n\n  return {\n    id: 'whiteblind',\n    options: [WhiteblindOption],\n  };\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport Reaction from '../../modifier/Reaction';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ReactionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = Object.values(Reaction);\n\n  constructor() {\n    super('reaction');\n  }\n\n  modifierMixin = {\n    apply: (modifier: DamageModifier) => {\n      if (this.value !== '') {\n        modifier.reaction = this.value as Reaction;\n      } else {\n        modifier.reaction = Reaction.None;\n      }\n    },\n  };\n}\n\nexport default ReactionOption;\n","import { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport { ArtifactType, InputStat } from '../artifact/types';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../option';\nimport Resistance from '../stat/Resistance';\nimport { Element } from '../talent/types';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport Option from '../option/Option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\nimport SwirlOption from '../option/characterOptions/SwirlOption';\nimport Attack from '../dps/Attack';\nimport OHCAttack from '../dps/OHCAttack';\n\n// Type definitions\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n  characterConstellationLevel?: number;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n  weaponRefinement?: number;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  teamCharacterIds?: string[];\n\n  characterOptions?: OptionSave[];\n  weaponOptions?: OptionSave[];\n  artifactSetOptions?: OptionSave[];\n  teamOptions?: OptionSave[];\n  artifactBuffOptions?: OptionSave[];\n\n  swirlElement?: string;\n\n  rotationTime?: number;\n  rotation?: AttackSave[];\n  ohcRotation?: OHCAttackSave[];\n}\n\nexport type Saves = Record<string, Save>;\n\nexport interface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\ninterface OptionSave {\n  id?: string;\n  value?: unknown;\n}\n\ninterface AttackSave {\n  talentType?: string;\n  talentId?: string;\n  multiplier?: number;\n  options?: OptionSave[];\n}\n\ninterface OHCAttackSave {\n  heals?: AttackSave[];\n  multiplier?: number;\n  options?: OptionSave[];\n}\n\n// Creating saves\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createArtifactSave(artifact: Artifact): ArtifactSave {\n  return {\n    type: artifact.type,\n    rarity: artifact.rarity,\n    level: artifact.level,\n    mainStat: artifact.mainStat.stat,\n    subStats: artifact.subStats.map((subStat) => createInputStatSave(subStat)),\n  };\n}\n\nfunction createOptionSave(option: Option): OptionSave {\n  return { id: option.id, value: getOptionValue(option) };\n}\n\nfunction createAttackSave(attack: Attack): AttackSave {\n  return {\n    talentType: attack.talentType,\n    talentId: attack.talentId,\n    multiplier: attack.multiplier,\n    options: attack.options.map(createOptionSave),\n  };\n}\n\nfunction createOHCAttackSave(attack: OHCAttack): OHCAttackSave {\n  return {\n    heals: attack.heals.map(createAttackSave),\n    multiplier: attack.multiplier,\n    options: attack.options.map(createOptionSave),\n  };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n    characterConstellationLevel: appState.character.constellationLevel,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n    weaponRefinement: appState.weapon.refinement,\n\n    artifacts: appState.artifacts.map((artifact) =>\n      createArtifactSave(artifact)\n    ),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    teamCharacterIds: appState.teamCharacters.map((character) => character.id),\n\n    characterOptions: appState.characterOptions.map(createOptionSave),\n    weaponOptions: appState.weaponOptions.map(createOptionSave),\n    artifactSetOptions: appState.artifactSetOptions.map(createOptionSave),\n    teamOptions: appState.teamOptions.map(createOptionSave),\n    artifactBuffOptions: appState.artifactBuffOptions.map(createOptionSave),\n\n    swirlElement: appState.swirlOption.value,\n\n    rotationTime: appState.rotationTime,\n    rotation: appState.rotation.map(createAttackSave),\n    ohcRotation: appState.ohcRotation.map(createOHCAttackSave),\n  };\n\n  return save;\n}\n\n// Unpacking saves\n\nexport function unpackArtifactSave(save: ArtifactSave, i: number): Artifact {\n  const artifactType = save.type ?? Object.values(ArtifactType)[i];\n  let artifact = new Artifact(\n    artifactType,\n    save.rarity ?? 1,\n    save.level ?? 0,\n    save.mainStat ?? ''\n  );\n  artifact.subStats =\n    save.subStats?.map(\n      (subStat) =>\n        new InputStat(\n          subStat.stat ?? '',\n          subStat.value ?? NaN,\n          subStat.rawValue ?? NaN\n        )\n    ) ?? artifact.subStats;\n\n  return artifact;\n}\n\nconst unpackOptionSave = (options: Option[]) => (save: OptionSave) => {\n  let option = options.find((option) => option.id === save.id);\n  if (option !== undefined) {\n    setOptionValue(option, save.value);\n  }\n};\n\nconst unpackAttackOptionSave =\n  (allOptions: Option[]) =>\n  ({ id, value }: OptionSave): Option | undefined => {\n    const OptionConstructor = allOptions.find((option) => option.id === id)\n      ?.constructor as { new (): Option };\n    let option;\n    if (OptionConstructor !== undefined) {\n      option = new OptionConstructor();\n      setOptionValue(option, value);\n    } else if (id === 'reaction') {\n      option = new ReactionOption();\n      setOptionValue(option, value);\n    }\n    return option;\n  };\n\nconst unpackAttackSave =\n  (allOptions: Option[]) =>\n  (save: AttackSave): Attack => {\n    return {\n      talentType: save.talentType ?? '',\n      talentId: save.talentId ?? '',\n      multiplier: save.multiplier ?? 1,\n      talentValue: { damage: [NaN] },\n      options:\n        save.options\n          ?.map(unpackAttackOptionSave(allOptions))\n          ?.filter((option): option is Option => option !== undefined) ?? [],\n    };\n  };\n\nconst unpackOHCAttackSave =\n  (allOptions: Option[]) =>\n  (save: OHCAttackSave): OHCAttack => {\n    return {\n      heals: save.heals?.map(unpackAttackSave(allOptions)) ?? [],\n      multiplier: save.multiplier ?? 1,\n      talentValue: { damage: [NaN] },\n      options:\n        save.options\n          ?.map(unpackAttackOptionSave(allOptions))\n          ?.filter((option): option is Option => option !== undefined) ?? [],\n    };\n  };\n\nexport function unpackSave(save: Save): AppState {\n  const character = initCharacter(\n    save.characterId,\n    save.characterLevel,\n    save.characterHasAscended,\n    save.characterConstellationLevel\n  );\n  const weapon = initWeapon(\n    save.weaponId,\n    save.weaponLevel,\n    save.weaponHasAscended,\n    save.weaponRefinement\n  );\n\n  const artifacts =\n    save.artifacts?.map((artifactSave, i) =>\n      unpackArtifactSave(artifactSave, i)\n    ) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map((artifactSet) =>\n    initArtifactSet(artifactSet.artifactSetId, artifactSet.artifactSetPieces)\n  ) ?? [initArtifactSet(), initArtifactSet(), initArtifactSet()];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const teamCharacters = save.teamCharacterIds?.map((id) =>\n    initCharacter(id)\n  ) ?? [initCharacter(), initCharacter(), initCharacter()];\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach(unpackOptionSave(characterOptions));\n\n  const weaponOptions = weapon.passiveOptions;\n  save.weaponOptions?.forEach(unpackOptionSave(weaponOptions));\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach(unpackOptionSave(artifactSetOptions));\n\n  const teamOptions = teamCharacters.flatMap(\n    (character) => character.teamOptions\n  );\n  save.teamOptions?.forEach(unpackOptionSave(teamOptions));\n\n  const artifactBuffOptions =\n    save.artifactBuffOptions?.flatMap((option) => {\n      const OptionConstructor = artifactTeamBuffs[option.id ?? ''];\n      if (OptionConstructor !== undefined) {\n        let artifactOption = new OptionConstructor();\n        setOptionValue(artifactOption, option.value);\n        return [artifactOption];\n      }\n\n      return [];\n    }) ?? [];\n\n  const swirlOption = new SwirlOption();\n  setOptionValue(swirlOption, save.swirlElement ?? '');\n\n  const allOptions = [\n    ...characterOptions,\n    ...weaponOptions,\n    ...artifactSetOptions,\n    ...teamOptions,\n    ...artifactBuffOptions,\n    swirlOption,\n  ];\n\n  const rotationTime = save.rotationTime ?? 0;\n  const rotation: Attack[] =\n    save.rotation?.map(unpackAttackSave(allOptions)) ?? [];\n  const ohcRotation: OHCAttack[] =\n    save.ohcRotation?.map(unpackOHCAttackSave(allOptions)) ?? [];\n\n  return {\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    critType,\n    enemyLevel,\n    enemyRes,\n    reaction,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n    swirlOption,\n    rotationTime,\n    rotation,\n    ohcRotation,\n  };\n}\n\n// Load save into appstate\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const appState = unpackSave(save);\n\n  setAppState(\n    appState,\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\n// Add/delete saves (used in GUI)\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/esm/Form';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <div>\n        <Form.Check\n          type='checkbox'\n          className={`checkbox ${this.props.className ?? ''}`}\n          id={this.props.id}\n        >\n          {this.isLabelShown() ? (\n            <Form.Check.Label>{this.props.label}</Form.Check.Label>\n          ) : (\n            <Form.Check.Label></Form.Check.Label>\n          )}\n\n          <Form.Check.Input\n            type='checkbox'\n            checked={value}\n            onChange={this.handleChange}\n          />\n        </Form.Check>\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\r\nimport Row from 'react-bootstrap/esm/Row';\r\n\r\nclass InputBlock extends React.Component {\r\n  render() {\r\n    return <Row className='input-block no-gutters'>{this.props.children}</Row>;\r\n  }\r\n}\r\n\r\nexport default InputBlock;\r\n","import React from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Button from 'react-bootstrap/esm/Button';\nimport Card from 'react-bootstrap/esm/Card';\nimport { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { propMapping } from '../data/Data';\nimport { Stats } from '../data/types';\nimport { RollDistribution, substats } from '../optimization/Optimization';\nimport { SubstatOptimizerResultSave } from '../optimization/OptimizerWorker';\nimport OptimizerWorker from '../optimization/OptimizerWorkerShim';\nimport { createSave, unpackArtifactSave } from '../save/Save';\nimport Checkbox from './Checkbox';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype OptimizerBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n};\n\ntype OptimizerBlockState = {\n  maxRolls: number;\n  selectedSubstats: string[];\n  erThreshold: number;\n  substatRolls: RollDistribution[];\n  isOptimizing: boolean;\n};\n\nclass OptimizerBlock extends React.Component<\n  OptimizerBlockProps,\n  OptimizerBlockState\n> {\n  state: OptimizerBlockState = {\n    maxRolls: 20,\n    selectedSubstats: [],\n    erThreshold: 100,\n    substatRolls: [],\n    isOptimizing: false,\n  };\n\n  setMaxRolls = (maxRolls: number) => {\n    this.setState({ maxRolls });\n  };\n\n  setSelectedSubstats = (stat: string) => (selected: boolean) => {\n    if (selected) {\n      if (!this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: [...this.state.selectedSubstats, stat],\n        });\n      }\n    } else {\n      if (this.state.selectedSubstats.includes(stat)) {\n        this.setState({\n          selectedSubstats: this.state.selectedSubstats.filter(\n            (substat) => substat !== stat\n          ),\n        });\n      }\n    }\n  };\n\n  setErThreshold = (value: number) => {\n    if (isNaN(value)) {\n      this.setState({ erThreshold: 0 });\n    } else {\n      this.setState({ erThreshold: value });\n    }\n  };\n\n  onOptimizeClick = async () => {\n    this.setState({ substatRolls: [], isOptimizing: true });\n\n    const save = createSave('', this.props.appState);\n\n    // Spawns a web worker to optimize substats\n    const worker = OptimizerWorker();\n\n    const result: SubstatOptimizerResultSave = await worker.optimize({\n      possibleStats: this.state.selectedSubstats,\n      maxRolls: this.state.maxRolls,\n      erThreshold: this.state.erThreshold / 100,\n      save,\n    });\n\n    worker.terminate();\n\n    const artifacts = result.artifacts.map(unpackArtifactSave);\n\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n    this.setState({ substatRolls: result.subStatRolls, isOptimizing: false });\n  };\n\n  render() {\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='0'\n            className='bg-transparent border-0'\n          >\n            <h3>Substat Optimizer</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey='0'>\n            <Card.Body>\n              <InputBlock>\n                <p>Fixed Substats: 20</p>\n\n                <InputRow>\n                  <IntInput\n                    className='level-input'\n                    id={'optimizer-liquid-substats'}\n                    label='Liquid Substats:'\n                    defaultValue={20}\n                    value={this.state.maxRolls}\n                    onInput={this.setMaxRolls}\n                  />\n                </InputRow>\n              </InputBlock>\n\n              <InputBlock>\n                <p>Select substats to optimize:</p>\n                {Object.keys(substats).map((stat) => (\n                  <InputRow key={stat}>\n                    <Checkbox\n                      id={`optimizer-selected-substats-${stat}`}\n                      label={`${propMapping[stat].name}`}\n                      defaultValue={false}\n                      value={this.state.selectedSubstats.includes(stat)}\n                      onChange={this.setSelectedSubstats(stat)}\n                    />\n                  </InputRow>\n                ))}\n              </InputBlock>\n\n              <InputBlock>\n                <InputRow>\n                  <FloatInput\n                    className='stat-input'\n                    id={'optimizer-er-threshold'}\n                    label='ER Threshold:'\n                    defaultValue={100}\n                    value={this.state.erThreshold}\n                    onInput={this.setErThreshold}\n                  />\n                </InputRow>\n              </InputBlock>\n\n              <InputBlock>\n                <InputRow>\n                  <Button\n                    variant={\n                      !this.state.isOptimizing\n                        ? 'secondary'\n                        : 'outline-secondary'\n                    }\n                    size='sm'\n                    onClick={this.onOptimizeClick}\n                    disabled={this.state.isOptimizing}\n                  >\n                    {!this.state.isOptimizing ? 'Optimize' : 'Optimizing...'}\n                  </Button>\n                </InputRow>\n              </InputBlock>\n\n              {this.state.substatRolls.length > 0 && (\n                <InputBlock>\n                  <p>Liquid roll distribution:</p>\n                  {this.state.substatRolls.map(({ stat, rolls }) => (\n                    <p key={stat}>\n                      {propMapping[stat].name}: {rolls}\n                    </p>\n                  ))}\n                </InputBlock>\n              )}\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default OptimizerBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport Artifact from '../artifact/Artifact';\nimport { Stats } from '../data/types';\nimport ArtifactBlock from './ArtifactBlock';\nimport OptimizerBlock from './OptimizerBlock';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Col\n        id='artifact-column'\n        className='artifact-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='artifact-heading'>\n          <h2>Artifacts</h2>\n        </div>\n        <OptimizerBlock {...this.props} />\n        <div className='result-block'>\n          {appState.artifacts.map((artifact) => (\n            <ArtifactBlock\n              artifact={artifact}\n              updateArtifactState={this.updateArtifactState}\n              key={artifact.type}\n            />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../option';\nimport { IOptionBoolean, IOptionNumber, IOptionPicker } from '../option/Option';\nimport { capitalize, getOptionName } from '../stat/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n  isLabelShown?: boolean;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n          isLabelShown={this.props.isLabelShown}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n          isLabelShown={this.props.isLabelShown}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          isLabelShown={this.props.isLabelShown}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport Option from '../option/Option';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\nimport { optionMapping } from '../data/Data';\nimport OptionInput from './OptionInput';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\n\ntype DPSOptionInputProps = {\n  setOption: (option?: Option) => void;\n  options: Option[];\n  option?: Option;\n  index: number;\n};\n\nclass DPSOptionInput extends React.Component<DPSOptionInputProps> {\n  setOptionId = (id: string) => {\n    const OptionConstructor = this.props.options.find(\n      (option) => option.id === id\n    )?.constructor as { new (): Option };\n\n    if (OptionConstructor !== undefined) {\n      this.props.setOption(new OptionConstructor());\n    } else if (id === 'reaction') {\n      this.props.setOption(new ReactionOption());\n    } else {\n      this.props.setOption();\n    }\n  };\n\n  updateOptions = () => {\n    this.props.setOption(this.props.option);\n  };\n\n  render() {\n    return (\n      <InputRow className='ml-5'>\n        <Picker\n          id={`dps-attack-option-${this.props.index}`}\n          label=''\n          defaultValue=''\n          value={this.props.option?.id ?? ''}\n          onChange={this.setOptionId}\n          isLabelShown={false}\n        >\n          <Picker.Item value='' label='' />\n          <Picker.Item value='reaction' label='Reaction' />\n          {this.props.options.map((option) => (\n            <Picker.Item\n              key={option.id}\n              value={option.id}\n              label={optionMapping[option.id]}\n            />\n          ))}\n        </Picker>\n\n        {this.props.option && (\n          <OptionInput\n            option={this.props.option}\n            updateOptions={this.updateOptions}\n            isLabelShown={false}\n          />\n        )}\n      </InputRow>\n    );\n  }\n}\n\nexport default DPSOptionInput;\n","import React from 'react';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport IntInput from './IntInput';\nimport { Talents } from '../talent/types';\nimport DPSOptionInput from './DPSOptionInput';\nimport Option from '../option';\nimport Attack from '../dps/Attack';\n\ntype DPSAttackInputProps = {\n  setAttack: (attack: Attack) => void;\n  attack: Attack;\n  index: number;\n  talents: Talents;\n  options: Option[];\n};\n\nclass DPSAttackInput extends React.Component<DPSAttackInputProps> {\n  setTalentType = (type: string) => {\n    const attack = { ...this.props.attack, talentType: type };\n    this.props.setAttack(attack);\n  };\n\n  setTalentId = (id: string) => {\n    const attack = { ...this.props.attack, talentId: id };\n    this.props.setAttack(attack);\n  };\n\n  setMultiplier = (multiplier: number) => {\n    const attack = { ...this.props.attack, multiplier };\n    this.props.setAttack(attack);\n  };\n\n  setOption = (i: number) => (option?: Option) => {\n    const options = [...this.props.attack.options];\n\n    if (option === undefined) {\n      options.splice(i, 1);\n    } else {\n      options[i] = option;\n    }\n\n    this.props.setAttack({ ...this.props.attack, options });\n  };\n\n  render() {\n    return (\n      <>\n        <InputRow>\n          <Picker\n            id={`dps-talent-type-${this.props.index}`}\n            label=''\n            defaultValue=''\n            value={this.props.attack.talentType}\n            onChange={this.setTalentType}\n            isLabelShown={false}\n          >\n            <Picker.Item value='' label='' />\n            {Object.keys(this.props.talents).map((type) => (\n              <Picker.Item\n                key={type}\n                value={type}\n                label={talentDescMapping[type]}\n              />\n            ))}\n          </Picker>\n\n          <Picker\n            id={`dps-talent-id-${this.props.index}`}\n            label=''\n            defaultValue=''\n            value={this.props.attack.talentId}\n            onChange={this.setTalentId}\n            isLabelShown={false}\n          >\n            <Picker.Item value='' label='' />\n            {Object.keys(\n              this.props.talents[this.props.attack.talentType] ?? {}\n            ).map((id) => (\n              <Picker.Item key={id} value={id} label={talentDescMapping[id]} />\n            ))}\n          </Picker>\n\n          {getDamageDisplayValue(this.props.attack.talentValue.damage)}\n\n          <IntInput\n            id={`dps-attack-multiplier-${this.props.index}`}\n            label='x'\n            defaultValue={1}\n            value={this.props.attack.multiplier}\n            onInput={this.setMultiplier}\n            className='level-input'\n          />\n        </InputRow>\n\n        {this.props.attack.options.map((option, i) => (\n          <DPSOptionInput\n            key={i}\n            setOption={this.setOption(i)}\n            options={this.props.options}\n            option={option}\n            index={i}\n          />\n        ))}\n\n        <DPSOptionInput\n          setOption={this.setOption(this.props.attack.options.length)}\n          options={this.props.options}\n          index={this.props.attack.options.length}\n        />\n      </>\n    );\n  }\n}\n\nexport default DPSAttackInput;\n","import { getArtifactSetBonusParams } from '../data/Data';\nimport DamageModifier, { getDamageModifier } from '../modifier/DamageModifer';\nimport Option, { setOptionValue, getOptionValue } from '../option';\nimport ReactionOption from '../option/characterOptions/ReactionOption';\nimport { getStatMixins, getModifierMixins } from '../option/Mixin';\nimport { getTotalStatsAt } from '../stat/Stat';\nimport { calculateResMultiplier } from '../talent/TalentUtil';\nimport { Element, TalentValue } from '../talent/types';\nimport Attack from './Attack';\nimport {\n  CalculateTalentValueParams,\n  initializeAllOptions,\n} from './DPSCalculator';\n\nexport default interface OHCAttack {\n  heals: Attack[];\n  multiplier: number;\n  talentValue: TalentValue;\n  options: Option[];\n}\n\nexport const defaultOHCAttack: OHCAttack = {\n  heals: [],\n  multiplier: 1,\n  talentValue: { damage: [NaN] },\n  options: [],\n};\n\n// Functions to calculate Ocean-Hued Clam 4pc damage\n\nconst ohcParams = getArtifactSetBonusParams('oceanhuedclam', 4);\n\nfunction ohcTalent({\n  totalHeal,\n  modifier,\n}: {\n  totalHeal: number;\n  modifier: DamageModifier;\n}): TalentValue {\n  const enemyResMultiplier = calculateResMultiplier({\n    element: Element.Physical,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n  if (totalHeal > 30000) totalHeal = 30000;\n  const damage = ohcParams[1] * totalHeal * enemyResMultiplier;\n\n  return {\n    damage: [damage],\n    element: Element.Physical,\n  };\n}\n\nexport function calculateOHCTalentValue({\n  options,\n  character,\n  weapon,\n  artifacts,\n  artifactSets,\n  artifactSetBonuses,\n  talentAttackLevel,\n  talentSkillLevel,\n  talentBurstLevel,\n  enemyLevel,\n  enemyRes,\n  reaction,\n  critType,\n  teamCharacters,\n  characterOptions,\n  weaponOptions,\n  artifactSetOptions,\n  teamOptions,\n  artifactBuffOptions,\n  swirlOption,\n  totalHeal,\n}: Omit<CalculateTalentValueParams, 'talentType' | 'talentId' | 'talents'> & {\n  totalHeal: number;\n}): TalentValue {\n  // Initialize a set of all options\n  const {\n    characterOptions: characterOptionsNew,\n    weaponOptions: weaponOptionsNew,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n    swirlOption: swirlOptionNew,\n  } = initializeAllOptions({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n    swirlOption,\n  });\n\n  const allOptions = [\n    ...characterOptionsNew,\n    ...weaponOptionsNew,\n    ...artifactSetOptionsNew,\n    ...teamOptionsNew,\n    ...artifactBuffOptionsNew,\n    swirlOptionNew,\n  ];\n\n  // Override option values\n  options.forEach((option) => {\n    let newOption = allOptions.find((newOption) => newOption.id === option.id);\n    if (newOption !== undefined) {\n      setOptionValue(newOption, getOptionValue(option));\n    } else if (option.id === 'reaction') {\n      characterOptionsNew.push(option as ReactionOption);\n    }\n  });\n\n  // Calculate stats and modifier\n  const statMixins = getStatMixins({\n    character,\n    characterOptions: characterOptionsNew,\n    weapon,\n    weaponOptions: weaponOptionsNew,\n    artifactSets,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamCharacters,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n  });\n\n  const stats = getTotalStatsAt(\n    character,\n    weapon,\n    artifactSetBonuses,\n    artifacts,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    statMixins\n  );\n\n  const modifierMixins = getModifierMixins({\n    character,\n    characterOptions: characterOptionsNew,\n    weapon,\n    weaponOptions: weaponOptionsNew,\n    artifactSets,\n    artifactSetOptions: artifactSetOptionsNew,\n    teamCharacters,\n    teamOptions: teamOptionsNew,\n    artifactBuffOptions: artifactBuffOptionsNew,\n    swirlOption: swirlOptionNew,\n  });\n\n  const modifier = getDamageModifier({\n    characterLevel: character.level,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n    stats,\n  });\n\n  // Calculate talent value\n  const talentValue = ohcTalent({ totalHeal, modifier });\n\n  return talentValue;\n}\n","import Option from '../option/Option';\nimport { TalentValue } from '../talent/types';\n\nexport default interface Attack {\n  talentType: string;\n  talentId: string;\n  multiplier: number;\n  talentValue: TalentValue;\n  options: Option[];\n}\n\nexport const defaultAttack: Attack = {\n  talentType: '',\n  talentId: '',\n  multiplier: 1,\n  talentValue: { damage: [NaN] },\n  options: [],\n};\n","import React from 'react';\nimport { AppState } from '../App';\nimport Attack, { defaultAttack } from '../dps/Attack';\nimport { initializeAllOptions } from '../dps/DPSCalculator';\nimport OHCAttack from '../dps/OHCAttack';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport { Talents } from '../talent/types';\nimport DPSAttackInput from './DPSAttackInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype OHCInputProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  talents: Talents;\n  attack: OHCAttack;\n  setAttack: (attack: OHCAttack) => void;\n  index: number;\n};\n\nclass OHCInput extends React.Component<OHCInputProps> {\n  setMultiplier = (multiplier: number) => {\n    const attack = { ...this.props.attack, multiplier };\n    this.props.setAttack(attack);\n  };\n\n  setAttack = (i: number) => (attack: Attack) => {\n    const ohcAttack = this.props.attack;\n    const rotation = [...ohcAttack.heals];\n\n    if (attack.talentType === '') {\n      rotation.splice(i, 1);\n    } else {\n      rotation[i] = attack;\n    }\n\n    this.props.setAttack({ ...ohcAttack, heals: rotation });\n  };\n\n  render() {\n    const {\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n      teamOptions,\n      artifactBuffOptions,\n    } = initializeAllOptions(this.props.appState);\n\n    const allOptions = [\n      ...characterOptions,\n      ...weaponOptions,\n      ...artifactSetOptions,\n      ...teamOptions,\n      ...artifactBuffOptions,\n    ];\n\n    return (\n      <>\n        <InputRow>\n          {getDamageDisplayValue(this.props.attack.talentValue.damage)}\n\n          <IntInput\n            id={`ohc-input-multiplier`}\n            label='x'\n            defaultValue={1}\n            value={this.props.attack.multiplier}\n            onInput={this.setMultiplier}\n            className='level-input'\n          />\n        </InputRow>\n\n        {this.props.attack.heals.map((attack, i) => (\n          <DPSAttackInput\n            key={i}\n            setAttack={this.setAttack(i)}\n            attack={attack}\n            index={i}\n            talents={this.props.talents}\n            options={allOptions}\n          />\n        ))}\n\n        <DPSAttackInput\n          setAttack={this.setAttack(this.props.attack.heals.length)}\n          attack={{ ...defaultAttack }}\n          index={this.props.attack.heals.length}\n          talents={this.props.talents}\n          options={allOptions}\n        />\n      </>\n    );\n  }\n}\n\nexport default OHCInput;\n","import React from 'react';\nimport { AppState } from '../App';\nimport OHCAttack, { defaultOHCAttack } from '../dps/OHCAttack';\nimport { Talents } from '../talent/types';\nimport InputBlock from './InputBlock';\nimport OHCInput from './OHCInput';\n\ntype OHCBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  talents: Talents;\n};\n\nclass OHCBlock extends React.Component<OHCBlockProps> {\n  setAttack = (i: number) => (attack: OHCAttack) => {\n    const rotation = this.props.appState.ohcRotation;\n\n    if (attack.heals.length === 0) {\n      rotation.splice(i, 1);\n    } else {\n      rotation[i] = attack;\n    }\n\n    this.props.setAppState({ ohcRotation: rotation });\n  };\n\n  render() {\n    const rotation = this.props.appState.ohcRotation;\n    return (\n      <InputBlock>\n        <h3>Ocean-Hued Clam</h3>\n\n        {rotation.map((attack, i) => (\n          <OHCInput\n            key={i}\n            {...this.props}\n            attack={attack}\n            setAttack={this.setAttack(i)}\n            index={i}\n          />\n        ))}\n\n        <OHCInput\n          {...this.props}\n          attack={{ ...defaultOHCAttack }}\n          setAttack={this.setAttack(rotation.length)}\n          index={rotation.length}\n        />\n      </InputBlock>\n    );\n  }\n}\n\nexport default OHCBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport {\n  calculateTalentValue,\n  initializeAllOptions,\n} from '../dps/DPSCalculator';\nimport { Talents } from '../talent/types';\nimport DPSAttackInput from './DPSAttackInput';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport OHCBlock from './OHCBlock';\nimport Attack, { defaultAttack } from '../dps/Attack';\nimport OHCAttack, { calculateOHCTalentValue } from '../dps/OHCAttack';\n\ntype DPSColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  artifactSetBonuses: Stats;\n  talents: Talents;\n};\n\nclass DPSColumn extends React.Component<DPSColumnProps> {\n  dpr: number = 0;\n  dps: number = NaN;\n\n  updateTalentValue = (attack: Attack) => {\n    attack.talentValue = calculateTalentValue({\n      ...attack,\n      ...this.props.appState,\n      artifactSetBonuses: this.props.artifactSetBonuses,\n      talents: this.props.talents,\n    });\n  };\n\n  updateTalentValues = () => {\n    const { rotation, ohcRotation } = this.props.appState;\n\n    rotation.forEach((attack) => this.updateTalentValue(attack));\n    ohcRotation.forEach((attack) => this.updateOHCTalentValues(attack));\n\n    this.dpr =\n      rotation.reduce(\n        (acc, attack) =>\n          acc +\n          attack.talentValue.damage.reduce(\n            (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n            0\n          ) *\n            (!isNaN(attack.multiplier) ? attack.multiplier : 0),\n        0\n      ) +\n      ohcRotation.reduce(\n        (acc, attack) =>\n          acc +\n          attack.talentValue.damage.reduce(\n            (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n            0\n          ) *\n            (!isNaN(attack.multiplier) ? attack.multiplier : 0),\n        0\n      );\n\n    this.dps = this.dpr / this.props.appState.rotationTime;\n  };\n\n  setRotationTime = (time: number) => {\n    this.props.setAppState({ rotationTime: time });\n  };\n\n  setAttack = (i: number) => (attack: Attack) => {\n    const rotation = this.props.appState.rotation;\n\n    if (attack.talentType === '') {\n      rotation.splice(i, 1);\n    } else {\n      rotation[i] = attack;\n    }\n\n    this.props.setAppState({ rotation });\n  };\n\n  // Ocean-Hued Clam\n  updateOHCTalentValues = (attack: OHCAttack) => {\n    const rotation = attack.heals;\n\n    rotation.forEach((attack) => this.updateTalentValue(attack));\n\n    const totalHeal = rotation.reduce(\n      (acc, attack) =>\n        acc +\n        attack.talentValue.damage.reduce(\n          (acc, dmg) => acc + (!isNaN(dmg) ? dmg : 0),\n          0\n        ) *\n          (!isNaN(attack.multiplier) ? attack.multiplier : 0),\n      0\n    );\n\n    attack.talentValue = calculateOHCTalentValue({\n      totalHeal,\n      ...this.props.appState,\n      artifactSetBonuses: this.props.artifactSetBonuses,\n      options: attack.options,\n    });\n  };\n\n  hasOHC4Pc = (): boolean => {\n    return this.props.appState.artifactSets.some(\n      (artifactSet) =>\n        artifactSet.id === 'oceanhuedclam' && artifactSet.pieces >= 4\n    );\n  };\n\n  removeOHC() {\n    const rotation = this.props.appState.ohcRotation;\n    rotation.splice(0, rotation.length);\n  }\n\n  render() {\n    const shouldRenderOHC = this.hasOHC4Pc();\n    if (!shouldRenderOHC && this.props.appState.ohcRotation.length > 0) {\n      this.removeOHC();\n    }\n\n    this.updateTalentValues();\n\n    const {\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n      teamOptions,\n      artifactBuffOptions,\n      swirlOption,\n    } = initializeAllOptions(this.props.appState);\n\n    const allOptions = [\n      ...characterOptions,\n      ...weaponOptions,\n      ...artifactSetOptions,\n      ...teamOptions,\n      ...artifactBuffOptions,\n      swirlOption,\n    ];\n\n    return (\n      <Col\n        id='dps-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <InputBlock>\n          <h2>DPS Calculator</h2>\n\n          <InputRow>\n            <FloatInput\n              id='rotation-time-input'\n              label='Rotation Time:'\n              defaultValue={0}\n              value={this.props.appState.rotationTime}\n              onInput={this.setRotationTime}\n              className='level-input'\n            />\n          </InputRow>\n\n          <InputRow>\n            <p>DPR: {this.dpr.toFixed(0)}</p>\n          </InputRow>\n\n          <InputRow>\n            <p>DPS: {isFinite(this.dps) ? this.dps.toFixed(0) : '-'}</p>\n          </InputRow>\n\n          {this.props.appState.rotation.map((attack, i) => (\n            <DPSAttackInput\n              key={i}\n              setAttack={this.setAttack(i)}\n              attack={attack}\n              index={i}\n              talents={this.props.talents}\n              options={allOptions}\n            />\n          ))}\n\n          <DPSAttackInput\n            setAttack={this.setAttack(this.props.appState.rotation.length)}\n            attack={{ ...defaultAttack }}\n            index={this.props.appState.rotation.length}\n            talents={this.props.talents}\n            options={allOptions}\n          />\n        </InputBlock>\n\n        {shouldRenderOHC && <OHCBlock {...this.props} />}\n      </Col>\n    );\n  }\n}\n\nexport default DPSColumn;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport { initArtifactSet } from '../artifact/ArtifactSetUtil';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i] = initArtifactSet(id, artifactSets[i].pieces);\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </InputBlock>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { initCharacter } from '../character/CharacterUtil';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const { level, hasAscended, constellationLevel } =\n      this.props.appState.character;\n    const character = initCharacter(id, level, hasAscended, constellationLevel);\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterConstellationLevel = (constellationLevel: number) => {\n    const character = this.props.appState.character;\n    character.constellationLevel = constellationLevel;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <InputBlock>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-constellation-level-input'\n            label='Constellation:'\n            defaultValue={0}\n            value={appState.character.constellationLevel}\n            onInput={this.setCharacterConstellationLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../modifier/CritType';\nimport Reaction from '../modifier/Reaction';\nimport SwirlOption from '../option/characterOptions/SwirlOption';\nimport Resistance from '../stat/Resistance';\nimport { capitalize } from '../stat/Stat';\nimport { Element } from '../talent/types';\nimport FloatInput from './FloatInput';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\nimport Picker from './Picker';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    swirlOption,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    swirlOption?: SwirlOption;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  setReaction = (reaction: string) => {\n    this.props.updateTalentValues({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n    this.props.setAppState({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n  };\n\n  updateSwirlOption = () => {\n    const swirlOption = this.props.appState.swirlOption;\n    this.props.updateTalentValues({ swirlOption });\n    this.props.setAppState({ swirlOption });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType, reaction } = this.props.appState;\n    return (\n      <InputBlock>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n\n        <InputRow>\n          <Picker\n            id='reaction-picker'\n            label='Reaction:'\n            defaultValue={Reaction.None}\n            value={reaction}\n            onChange={this.setReaction}\n          >\n            {Object.values(Reaction).map((reaction) => (\n              <Picker.Item\n                key={reaction}\n                label={capitalize(reaction)}\n                value={reaction}\n              />\n            ))}\n          </Picker>\n        </InputRow>\n\n        <InputRow>\n          <OptionInput\n            option={this.props.appState.swirlOption}\n            updateOptions={this.updateSwirlOption}\n          />\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Col from 'react-bootstrap/esm/Col';\nimport Form from 'react-bootstrap/esm/Form';\nimport Modal from 'react-bootstrap/esm/Modal';\nimport Row from 'react-bootstrap/esm/Row';\nimport { AppState } from '../App';\nimport {\n  createSave,\n  addSave,\n  getSave,\n  loadSave,\n  Saves,\n  deleteSave,\n} from '../save/Save';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype SaveBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  refreshApp: () => void;\n};\n\ntype SaveBlockState = {\n  saves: Saves;\n  saveInputName: string;\n  selectedSave: string;\n  showDeleteWarning: boolean;\n  showImportModal: boolean;\n  showExportModal: boolean;\n  saveJson: string;\n  hasCopied: boolean;\n  invalidJson: boolean;\n};\n\nclass SaveBlock extends React.Component<SaveBlockProps, SaveBlockState> {\n  state: SaveBlockState;\n\n  constructor(props: SaveBlockProps) {\n    super(props);\n\n    // Populate local storage if empty\n    if (window.localStorage.getItem('saves') === null) {\n      window.localStorage.setItem('saves', '{}');\n    }\n\n    // Initialize saves in memory\n    const saves = JSON.parse(window.localStorage.getItem('saves') ?? '{}');\n    // Initialize state\n    this.state = {\n      saves,\n      saveInputName: '',\n      selectedSave: '',\n      showDeleteWarning: false,\n      showImportModal: false,\n      showExportModal: false,\n      saveJson: '',\n      hasCopied: false,\n      invalidJson: false,\n    };\n  }\n\n  onSaveClick = () => {\n    if (this.state.saveInputName !== '') {\n      const save = createSave(this.state.saveInputName, this.props.appState);\n      const saves = this.state.saves;\n      addSave(save, saves);\n      this.setState({ saves });\n    }\n  };\n\n  onSaveInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveInputName: e.target.value });\n  };\n\n  onLoadClick = () => {\n    if (this.state.selectedSave !== '') {\n      const save = getSave(this.state.selectedSave, this.state.saves);\n      if (save !== undefined) {\n        loadSave(save, this.props.setAppState, this.props.refreshApp);\n      }\n    }\n  };\n\n  onLoadInputChange = (value: string) => {\n    this.setState({ selectedSave: value });\n  };\n\n  onDeleteClick = () => {\n    if (this.state.selectedSave !== '') {\n      this.setState({ showDeleteWarning: true });\n    }\n  };\n\n  onDeleteModalConfirm = () => {\n    const saves = this.state.saves;\n    deleteSave(this.state.selectedSave, saves);\n    this.setState({ saves });\n\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onDeleteModalHide = () => {\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onImportClick = () => {\n    this.setState({ showImportModal: true });\n  };\n\n  onImportModalHide = () => {\n    this.setState({ showImportModal: false, saveJson: '', invalidJson: false });\n  };\n\n  onImportTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ saveJson: e.target.value });\n  };\n\n  onImportSubmitClick = () => {\n    try {\n      const save = JSON.parse(this.state.saveJson);\n      loadSave(save, this.props.setAppState, this.props.refreshApp);\n      this.onImportModalHide();\n    } catch {\n      this.setState({ invalidJson: true });\n    }\n  };\n\n  onExportClick = () => {\n    const saveJson = JSON.stringify(createSave('', this.props.appState));\n    this.setState({ showExportModal: true, saveJson, invalidJson: false });\n  };\n\n  onExportModalHide = () => {\n    this.setState({ showExportModal: false, saveJson: '', hasCopied: false });\n  };\n\n  onCopyClick = () => {\n    navigator.clipboard.writeText(this.state.saveJson);\n    this.setState({ hasCopied: true });\n  };\n\n  render() {\n    return (\n      <InputBlock>\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onSaveClick}>\n            Save\n          </Button>\n\n          <Col className='save-name-col'>\n            <Form.Control\n              type='text'\n              size='sm'\n              placeholder='Save label (cannot be empty)'\n              onChange={this.onSaveInputChange}\n            />\n          </Col>\n        </InputRow>\n\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onLoadClick}>\n            Load\n          </Button>\n\n          <Picker\n            id='save-picker'\n            label=''\n            defaultValue=''\n            value={this.state.selectedSave}\n            onChange={this.onLoadInputChange}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {Object.values(this.state.saves).map((save) => (\n              <Picker.Item\n                label={save.label}\n                value={save.label}\n                key={save.label}\n              />\n            ))}\n          </Picker>\n\n          <>\n            <Button variant='danger' size='sm' onClick={this.onDeleteClick}>\n              Delete\n            </Button>\n\n            <Modal\n              show={this.state.showDeleteWarning}\n              onHide={this.onDeleteModalHide}\n            >\n              <Modal.Body>\n                Are you sure you want to delete the save configuration? This\n                action is irreversible!\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={this.onDeleteModalHide}>\n                  Cancel\n                </Button>\n                <Button variant='danger' onClick={this.onDeleteModalConfirm}>\n                  Delete\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        </InputRow>\n\n        <InputRow>\n          <>\n            <Button variant='secondary' size='sm' onClick={this.onImportClick}>\n              Import\n            </Button>\n\n            <Modal\n              size='lg'\n              show={this.state.showImportModal}\n              onHide={this.onImportModalHide}\n            >\n              <Modal.Header closeButton>\n                Import Configuration from JSON\n              </Modal.Header>\n              <Modal.Body>\n                <Col>\n                  <Row>\n                    <Form.Control\n                      as='textarea'\n                      rows={10}\n                      value={this.state.saveJson}\n                      onChange={this.onImportTextChange}\n                    />\n                  </Row>\n\n                  <Row className='mt-2'>\n                    <Button\n                      variant='secondary'\n                      size='sm'\n                      onClick={this.onImportSubmitClick}\n                      className='mr-2'\n                    >\n                      Import\n                    </Button>\n                    {this.state.invalidJson && 'Invalid JSON!'}\n                  </Row>\n                </Col>\n              </Modal.Body>\n            </Modal>\n          </>\n\n          <>\n            <Button variant='secondary' size='sm' onClick={this.onExportClick}>\n              Export\n            </Button>\n\n            <Modal\n              size='lg'\n              show={this.state.showExportModal}\n              onHide={this.onExportModalHide}\n            >\n              <Modal.Header closeButton>\n                Export Configuration as JSON\n              </Modal.Header>\n              <Modal.Body>\n                <Col>\n                  <Row>\n                    <Form.Control\n                      as='textarea'\n                      rows={10}\n                      value={this.state.saveJson}\n                      readOnly\n                    />\n                  </Row>\n\n                  <Row className='mt-2'>\n                    <Button\n                      variant={\n                        !this.state.hasCopied ? 'secondary' : 'outline-success'\n                      }\n                      size='sm'\n                      onClick={this.onCopyClick}\n                      disabled={this.state.hasCopied}\n                    >\n                      {!this.state.hasCopied\n                        ? 'Copy to Clipboard'\n                        : 'Copied to Clipboard!'}\n                    </Button>\n                  </Row>\n                </Col>\n              </Modal.Body>\n            </Modal>\n          </>\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default SaveBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n  talentAttackLevelExtra: number;\n  talentSkillLevelExtra: number;\n  talentBurstLevelExtra: number;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n          {this.props.talentAttackLevelExtra > 0 &&\n            `+${this.props.talentAttackLevelExtra}`}\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n          {this.props.talentSkillLevelExtra > 0 &&\n            `+${this.props.talentSkillLevelExtra}`}\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n          {this.props.talentBurstLevelExtra > 0 &&\n            `+${this.props.talentBurstLevelExtra}`}\n        </InputRow>\n      </InputBlock>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../data/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport WeaponOption from '../option/weaponOptions/WeaponOption';\nimport Weapon from '../weapon/Weapon';\nimport { initWeapon } from '../weapon/WeaponUtil';\nimport Checkbox from './Checkbox';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    weapon,\n    weaponOptions,\n  }: {\n    weapon?: Weapon;\n    weaponOptions?: WeaponOption[];\n  }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const { weaponLevel, hasAscended, refinement } = this.props.appState.weapon;\n    const weapon = initWeapon(id, weaponLevel, hasAscended, refinement);\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponRefinement = (refinement: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.refinement = refinement;\n    const weaponOptions = weapon.passiveOptions;\n    this.props.updateTotalStats({ weapon, weaponOptions });\n    this.props.setAppState({ weapon, weaponOptions });\n  };\n\n  updateOptions = () => {\n    const { weaponOptions } = this.props.appState;\n    this.props.updateTotalStats({ weaponOptions });\n    this.props.setAppState({ weaponOptions: [...weaponOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <InputBlock>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-refinement-input'\n            label='Refinement:'\n            defaultValue={1}\n            value={appState.weapon.refinement}\n            onInput={this.setWeaponRefinement}\n            className='level-input'\n          />\n        </InputRow>\n\n        {appState.weaponOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </InputBlock>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React from 'react';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\nimport { optionMapping } from '../data/Data';\nimport OptionInput from './OptionInput';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\n\ntype TeamBuffOptionInputProps = {\n  setOption: (option?: ArtifactSetOption) => void;\n  options: Record<string, typeof ArtifactSetOption>;\n  option?: ArtifactSetOption;\n  index: number;\n};\n\nclass TeamBuffOptionInput extends React.Component<TeamBuffOptionInputProps> {\n  setOptionId = (id: string) => {\n    const OptionConstructor = this.props.options[id];\n\n    if (OptionConstructor !== undefined) {\n      this.props.setOption(new OptionConstructor());\n    } else {\n      this.props.setOption();\n    }\n  };\n\n  updateOptions = () => {\n    this.props.setOption(this.props.option);\n  };\n\n  render() {\n    return (\n      <InputRow>\n        <Picker\n          id={`team-buff-option-${this.props.index}`}\n          label=''\n          defaultValue=''\n          value={this.props.option?.id ?? ''}\n          onChange={this.setOptionId}\n          isLabelShown={false}\n        >\n          <Picker.Item value='' label='' />\n          {Object.keys(this.props.options).map((id) => (\n            <Picker.Item key={id} value={id} label={optionMapping[id]} />\n          ))}\n        </Picker>\n\n        {this.props.option && (\n          <OptionInput\n            option={this.props.option}\n            updateOptions={this.updateOptions}\n            isLabelShown={false}\n          />\n        )}\n      </InputRow>\n    );\n  }\n}\n\nexport default TeamBuffOptionInput;\n","import React, { Fragment } from 'react';\nimport Accordion from 'react-bootstrap/esm/Accordion';\nimport Card from 'react-bootstrap/esm/Card';\nimport { AppState } from '../App';\nimport Character from '../character/Character';\nimport { initCharacter } from '../character/CharacterUtil';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport artifactTeamBuffs from '../teambuff/artifact/ArtifactTeamBuff';\nimport CharacterPicker from './CharacterPicker';\nimport InputBlock from './InputBlock';\nimport InputRow from './InputRow';\nimport OptionInput from './OptionInput';\nimport TeamBuffOptionInput from './TeamBuffOptionInput';\n\ntype TeamInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    teamCharacters?: Character[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass TeamInputBlock extends React.Component<TeamInputBlockProps> {\n  setCharacterId = (i: number) => (id: string) => {\n    const { teamCharacters } = this.props.appState;\n    teamCharacters[i] = initCharacter(id);\n    const teamOptions = teamCharacters.flatMap(\n      (character) => character.teamOptions\n    );\n    this.props.updateTotalStats({ teamCharacters, teamOptions });\n    this.props.setAppState({\n      teamCharacters: [...teamCharacters],\n      teamOptions,\n    });\n  };\n\n  updateTeamOptions = () => {\n    const { teamOptions } = this.props.appState;\n    this.props.updateTotalStats({ teamOptions });\n    this.props.setAppState({ teamOptions: [...teamOptions] });\n  };\n\n  setArtifactBuffOption = (i: number) => (option?: ArtifactSetOption) => {\n    const options = [...this.props.appState.artifactBuffOptions];\n\n    if (option === undefined) {\n      options.splice(i, 1);\n    } else {\n      options[i] = option;\n    }\n\n    this.props.updateTotalStats({ artifactBuffOptions: options });\n    this.props.setAppState({ artifactBuffOptions: options });\n  };\n\n  render() {\n    const { teamCharacters, artifactBuffOptions } = this.props.appState;\n\n    return (\n      <Accordion>\n        <Card className=' optimizer-card bg-transparent border-dark border-left-0 border-right-0 rounded-0'>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey='1'\n            className='bg-transparent border-0'\n          >\n            <h3>Team Buffs</h3>\n            <p>Click to expand/collapse</p>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey='1'>\n            <Card.Body>\n              <InputBlock>\n                <InputRow>Party Members</InputRow>\n\n                {[0, 1, 2].map((i) => (\n                  <Fragment key={i}>\n                    <InputRow>\n                      <CharacterPicker\n                        characterId={teamCharacters[i].id}\n                        setCharacterId={this.setCharacterId(i)}\n                      />\n                    </InputRow>\n\n                    {teamCharacters[i].teamOptions.map((option) => (\n                      <InputRow key={option.id}>\n                        <OptionInput\n                          option={option}\n                          updateOptions={this.updateTeamOptions}\n                        />\n                      </InputRow>\n                    ))}\n                  </Fragment>\n                ))}\n              </InputBlock>\n\n              <InputBlock>\n                <InputRow>Artifact Buffs</InputRow>\n\n                {artifactBuffOptions.map((option, i) => (\n                  <TeamBuffOptionInput\n                    key={i}\n                    setOption={this.setArtifactBuffOption(i)}\n                    options={artifactTeamBuffs}\n                    option={option}\n                    index={i}\n                  />\n                ))}\n\n                <TeamBuffOptionInput\n                  setOption={this.setArtifactBuffOption(\n                    artifactBuffOptions.length\n                  )}\n                  options={artifactTeamBuffs}\n                  index={artifactBuffOptions.length}\n                />\n              </InputBlock>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default TeamInputBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../artifact/Artifact';\nimport ArtifactSet from '../artifact/ArtifactSet';\nimport Character from '../character/Character';\nimport CritType from '../modifier/CritType';\nimport Resistance from '../stat/Resistance';\nimport Weapon from '../weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport SaveBlock from './SaveBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\nimport CharacterOption from '../option/characterOptions/CharacterOption';\nimport ArtifactSetOption from '../option/artifactSetOptions/ArtifactSetOption';\nimport TeamInputBlock from './TeamInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n    teamOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => void;\n  refreshApp: () => void;\n  talentAttackLevelExtra: number;\n  talentSkillLevelExtra: number;\n  talentBurstLevelExtra: number;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n      refreshApp,\n    } = this.props;\n\n    return (\n      <Col\n        id='input-column'\n        className='input-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <SaveBlock\n          appState={appState}\n          setAppState={setAppState}\n          refreshApp={refreshApp}\n        />\n\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n          talentAttackLevelExtra={this.props.talentAttackLevelExtra}\n          talentSkillLevelExtra={this.props.talentSkillLevelExtra}\n          talentBurstLevelExtra={this.props.talentBurstLevelExtra}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n\n        <TeamInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../character/Character';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../data/Data';\nimport { getStatDisplayValue } from '../stat/Stat';\nimport Weapon from '../weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/esm/Col';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Col\n        id='stat-column'\n        className='stat-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../data/Data';\nimport { getDamageDisplayValue } from '../stat/Stat';\nimport { TalentValue } from '../talent/types';\n\ntype TalentBlockProps = {\n  type: string;\n  talentValues: Record<string, TalentValue>;\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{talentDescMapping[this.props.type]}</h3>\n        {Object.entries(this.props.talentValues).map(([id, { damage }]) => (\n          <p key={id}>\n            {talentDescMapping[id]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport { TalentValueSet } from '../talent/types';\nimport TalentBlock from './TalentBlock';\nimport Col from 'react-bootstrap/esm/Col';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const talentValues = this.props.talentValues;\n\n    return (\n      <Col\n        id='talent-column'\n        className='talent-column no-gutters border-right border-dark'\n        md='auto'\n        xs={12}\n      >\n        <div className='result-block'>\n          <h2>Talents</h2>\n          {Object.entries(talentValues).map(([type, values]) => (\n            <TalentBlock key={type} type={type} talentValues={values} />\n          ))}\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import { getReactionCurveAt } from '../data/Data';\nimport { Stats } from '../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { calculateResMultiplier } from './TalentUtil';\nimport { Element, TalentFn, TalentProps, TalentValue } from './types';\n\nconst reactionTalents: Record<string, TalentFn> = {\n  superconduct: ({ stats, modifier }: TalentProps) =>\n    reactionTalent({\n      multiplier: 1,\n      reactionBonus: stats.superconductDmgBonus,\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n  swirl: ({ stats, modifier }: TalentProps) =>\n    modifier.swirlElement\n      ? reactionTalent({\n          multiplier: 1.2,\n          reactionBonus: stats.swirlDmgBonus,\n          element: modifier.swirlElement,\n          stats,\n          modifier,\n        })\n      : { damage: [NaN] },\n\n  electrocharged: ({ stats, modifier }: TalentProps) =>\n    reactionTalent({\n      multiplier: 2.4,\n      reactionBonus: stats.electrochargedDmgBonus,\n      element: Element.Electro,\n      stats,\n      modifier,\n    }),\n\n  shatter: ({ stats, modifier }: TalentProps) =>\n    reactionTalent({\n      multiplier: 3,\n      reactionBonus: stats.shatterDmgBonus,\n      element: Element.Physical,\n      stats,\n      modifier,\n    }),\n\n  overload: ({ stats, modifier }: TalentProps) =>\n    reactionTalent({\n      multiplier: 4,\n      reactionBonus: stats.overloadDmgBonus,\n      element: Element.Pyro,\n      stats,\n      modifier,\n    }),\n};\n\nexport default reactionTalents;\n\n// Helper functions\n\nfunction reactionTalent({\n  multiplier,\n  reactionBonus,\n  element,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  reactionBonus?: number;\n  element: Element;\n  stats: Stats;\n  modifier: DamageModifier;\n}): TalentValue {\n  const damage = calculateReactionDamage({\n    multiplier,\n    reactionBonus,\n    element,\n    stats,\n    modifier,\n  });\n\n  return { damage: [damage], element };\n}\n\nfunction calculateReactionDamage({\n  multiplier,\n  reactionBonus,\n  element,\n  stats,\n  modifier,\n}: {\n  multiplier: number;\n  reactionBonus?: number;\n  element: Element;\n  stats: Stats;\n  modifier: DamageModifier;\n}): number {\n  const levelMultiplier = getReactionLevelMultiplier(modifier.characterLevel);\n  const enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const elementalMastery = stats.elementalMastery ?? 0;\n  const baseMultiplier =\n    1 +\n    (16 * elementalMastery) / (2000 + elementalMastery) +\n    (reactionBonus ?? 0);\n\n  return multiplier * baseMultiplier * levelMultiplier * enemyResMultiplier;\n}\n\nfunction getReactionLevelMultiplier(level: number): number {\n  const reactionCurveData = getReactionCurveAt(level);\n  return reactionCurveData?.multiplier ?? NaN;\n}\n","import Character from '../character/Character';\nimport Weapon from '../weapon/Weapon';\nimport reactionTalents from './ReactionTalent';\nimport { Talents } from './types';\n\nexport function getAllTalentFns(character: Character, weapon: Weapon): Talents {\n  return {\n    ...character.talentFns,\n    ...weapon.talentFns,\n\n    reaction: reactionTalents,\n  };\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport Row from 'react-bootstrap/esm/Row';\nimport './App.css';\nimport Artifact from './artifact/Artifact';\nimport ArtifactSet from './artifact/ArtifactSet';\nimport {\n  getAllArtifactSetBonuses,\n  initArtifactSet,\n} from './artifact/ArtifactSetUtil';\nimport { ArtifactType } from './artifact/types';\nimport Character from './character/Character';\nimport { initCharacter } from './character/CharacterUtil';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport DPSColumn from './component/DPSColumn';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport { Stats } from './data/types';\nimport Attack from './dps/Attack';\nimport OHCAttack from './dps/OHCAttack';\nimport CritType from './modifier/CritType';\nimport DamageModifier, { getDamageModifier } from './modifier/DamageModifer';\nimport Reaction from './modifier/Reaction';\nimport ArtifactSetOption from './option/artifactSetOptions/ArtifactSetOption';\nimport CharacterOption from './option/characterOptions/CharacterOption';\nimport SwirlOption from './option/characterOptions/SwirlOption';\nimport {\n  getModifierMixins,\n  getStatMixins,\n  ModifierMixin,\n  StatMixin,\n} from './option/Mixin';\nimport WeaponOption from './option/weaponOptions/WeaponOption';\nimport Resistance from './stat/Resistance';\nimport { getTotalStatsAt } from './stat/Stat';\nimport { getAllTalentFns } from './talent/Talent';\nimport { Talents, TalentValue, TalentValueSet } from './talent/types';\nimport Weapon from './weapon/Weapon';\nimport { initWeapon } from './weapon/WeaponUtil';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  teamCharacters: Character[];\n\n  characterOptions: CharacterOption[];\n  weaponOptions: WeaponOption[];\n  artifactSetOptions: ArtifactSetOption[];\n  teamOptions: CharacterOption[];\n  artifactBuffOptions: ArtifactSetOption[];\n  swirlOption: SwirlOption;\n\n  rotationTime: number;\n  rotation: Attack[];\n  ohcRotation: OHCAttack[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: initCharacter(),\n    weapon: initWeapon(),\n    artifacts: Object.values(ArtifactType).map(\n      (type) => new Artifact(type, 1, 0, '')\n    ),\n\n    artifactSets: [initArtifactSet(), initArtifactSet(), initArtifactSet()],\n\n    enemyLevel: 1,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    reaction: Reaction.None,\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    teamCharacters: [initCharacter(), initCharacter(), initCharacter()],\n\n    characterOptions: [],\n    weaponOptions: [],\n    artifactSetOptions: [],\n    teamOptions: [],\n    artifactBuffOptions: [],\n    swirlOption: new SwirlOption(),\n\n    rotationTime: 0,\n    rotation: [],\n    ohcRotation: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talents: Talents = {};\n  talentValues: TalentValueSet = {};\n\n  modifierMixins: ModifierMixin[] = [];\n  statMixins: StatMixin[] = [];\n\n  talentAttackLevelExtra: number = 0;\n  talentSkillLevelExtra: number = 0;\n  talentBurstLevelExtra: number = 0;\n\n  // \"Overrides\" getModifierMixins for extra functionality and defaults based on state\n  // Gets all modifier mixins and updates cache (modifierMixins)\n  getModifierMixins: GetModifierMixinsFn = ({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n    swirlOption,\n    updateCache = true,\n  } = {}): ModifierMixin[] => {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined &&\n      teamCharacters === undefined &&\n      teamOptions === undefined &&\n      artifactBuffOptions === undefined &&\n      swirlOption === undefined\n    ) {\n      return this.modifierMixins;\n    }\n\n    const modifierMixins = getModifierMixins({\n      character: character ?? this.state.character,\n      characterOptions: characterOptions ?? this.state.characterOptions,\n      weapon: weapon ?? this.state.weapon,\n      weaponOptions: weaponOptions ?? this.state.weaponOptions,\n      artifactSets: artifactSets ?? this.state.artifactSets,\n      artifactSetOptions: artifactSetOptions ?? this.state.artifactSetOptions,\n      teamCharacters: teamCharacters ?? this.state.teamCharacters,\n      teamOptions: teamOptions ?? this.state.teamOptions,\n      artifactBuffOptions:\n        artifactBuffOptions ?? this.state.artifactBuffOptions,\n      swirlOption: swirlOption ?? this.state.swirlOption,\n    });\n\n    if (updateCache) {\n      this.modifierMixins = modifierMixins;\n    }\n\n    return modifierMixins;\n  };\n\n  // \"Overrides\" getStatMixins for extra functionality and defaults based on state\n  // Gets all stat mixins and updates cache (statMixins)\n  getStatMixins: GetStatMixinsFn = ({\n    character,\n    characterOptions,\n    weapon,\n    weaponOptions,\n    artifactSets,\n    artifactSetOptions,\n    teamCharacters,\n    teamOptions,\n    artifactBuffOptions,\n    updateCache = true,\n  } = {}): StatMixin[] => {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      weapon === undefined &&\n      weaponOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined &&\n      teamCharacters === undefined &&\n      teamOptions === undefined &&\n      artifactBuffOptions === undefined\n    ) {\n      return this.statMixins;\n    }\n\n    const statMixins = getStatMixins({\n      character: character ?? this.state.character,\n      characterOptions: characterOptions ?? this.state.characterOptions,\n      weapon: weapon ?? this.state.weapon,\n      weaponOptions: weaponOptions ?? this.state.weaponOptions,\n      artifactSets: artifactSets ?? this.state.artifactSets,\n      artifactSetOptions: artifactSetOptions ?? this.state.artifactSetOptions,\n      teamCharacters: teamCharacters ?? this.state.teamCharacters,\n      teamOptions: teamOptions ?? this.state.teamOptions,\n      artifactBuffOptions:\n        artifactBuffOptions ?? this.state.artifactBuffOptions,\n    });\n\n    if (updateCache) {\n      this.statMixins = statMixins;\n    }\n\n    return statMixins;\n  };\n\n  // \"Overrides\" getDamageModifier for extra functionality and defaults based on state\n  getDamageModifier: GetDamageModifierFn = ({\n    characterLevel = this.state.character.level,\n    enemyLevel = this.state.enemyLevel,\n    enemyRes = this.state.enemyRes,\n    critType = this.state.critType,\n    reaction = this.state.reaction,\n    talentAttackLevel = this.state.talentAttackLevel,\n    talentSkillLevel = this.state.talentSkillLevel,\n    talentBurstLevel = this.state.talentBurstLevel,\n    modifierMixins = this.modifierMixins,\n  } = {}): DamageModifier => {\n    const modifier = getDamageModifier({\n      characterLevel,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n      stats: this.totalStats,\n    });\n\n    // Update extra talent levels (from constellations etc) for display\n    this.talentAttackLevelExtra =\n      modifier.talentAttackLevel -\n      (talentAttackLevel ?? this.state.talentAttackLevel);\n    this.talentSkillLevelExtra =\n      modifier.talentSkillLevel -\n      (talentSkillLevel ?? this.state.talentSkillLevel);\n    this.talentBurstLevelExtra =\n      modifier.talentBurstLevel -\n      (talentBurstLevel ?? this.state.talentBurstLevel);\n\n    return modifier;\n  };\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = getAllArtifactSetBonuses(newArtifactSets);\n\n    this.updateTotalStats({\n      artifactSets,\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSets?: ArtifactSet[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    teamCharacters?: Character[];\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n  }) => {\n    const statMixins = this.getStatMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n      teamCharacters,\n      teamOptions,\n      artifactBuffOptions,\n    });\n\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel,\n      statMixins\n    );\n\n    this.updateTalentValues({\n      character,\n      weapon,\n      artifactSets,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      teamCharacters,\n      characterOptions,\n      weaponOptions,\n      artifactSetOptions,\n      teamOptions,\n      artifactBuffOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character,\n    weapon,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    teamCharacters,\n    characterOptions,\n    weaponOptions,\n    artifactSetOptions,\n    teamOptions,\n    artifactBuffOptions,\n    swirlOption,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifactSets?: ArtifactSet[];\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    teamCharacters?: Character[];\n    characterOptions?: CharacterOption[];\n    weaponOptions?: WeaponOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n    teamOptions?: CharacterOption[];\n    artifactBuffOptions?: ArtifactSetOption[];\n    swirlOption?: SwirlOption;\n  }) => {\n    const modifierMixins = this.getModifierMixins({\n      character,\n      characterOptions,\n      weapon,\n      weaponOptions,\n      artifactSets,\n      artifactSetOptions,\n      teamCharacters,\n      teamOptions,\n      artifactBuffOptions,\n      swirlOption,\n    });\n\n    const damageModifier = this.getDamageModifier({\n      characterLevel: character?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n    });\n\n    this.talents = getAllTalentFns(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon\n    );\n\n    this.talentValues = {};\n    Object.entries(this.talents).forEach(([type, fns]) => {\n      this.talentValues[type] = Object.entries(fns).reduce((acc, [id, fn]) => {\n        acc[id] = fn({ stats: this.totalStats, modifier: damageModifier });\n        return acc;\n      }, {} as Record<string, TalentValue>);\n    });\n  };\n\n  refreshApp = () => {\n    this.getStatMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n      teamCharacters: this.state.teamCharacters,\n      teamOptions: this.state.teamOptions,\n      artifactBuffOptions: this.state.artifactBuffOptions,\n    });\n    this.getModifierMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      weapon: this.state.weapon,\n      weaponOptions: this.state.weaponOptions,\n      artifactSets: this.state.artifactSets,\n      artifactSetOptions: this.state.artifactSetOptions,\n      teamCharacters: this.state.teamCharacters,\n      teamOptions: this.state.teamOptions,\n      artifactBuffOptions: this.state.artifactBuffOptions,\n      swirlOption: this.state.swirlOption,\n    });\n\n    this.updateArtifactSetBonuses({});\n    this.setState({});\n  };\n\n  render() {\n    return (\n      <Container className='app px-0' fluid>\n        <Navbar sticky='top' bg='light' className='d-md-none'>\n          <Nav>\n            <Nav.Item>\n              <Nav.Link href='#input-column'>Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#artifact-column'>Artifacts</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#stat-column'>Stats</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href='#talent-column'>Talents</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar>\n\n        <Row className='mx-0 flex-md-nowrap'>\n          <InputColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n            updateTotalStats={this.updateTotalStats}\n            updateTalentValues={this.updateTalentValues}\n            refreshApp={this.refreshApp}\n            talentAttackLevelExtra={this.talentAttackLevelExtra}\n            talentSkillLevelExtra={this.talentSkillLevelExtra}\n            talentBurstLevelExtra={this.talentBurstLevelExtra}\n          />\n          <ArtifactColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            updateTotalStats={this.updateTotalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n          />\n          <StatColumn\n            appState={this.state}\n            totalStats={this.totalStats}\n            artifactSetBonuses={this.artifactSetBonuses}\n          />\n          <TalentColumn talentValues={this.talentValues} />\n          <DPSColumn\n            appState={this.state}\n            setAppState={this.setAppState}\n            artifactSetBonuses={this.artifactSetBonuses}\n            talents={this.talents}\n          />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\n// Function type definitions (for convenience)\nexport type GetModifierMixinsFn = (params?: {\n  character?: Character;\n  characterOptions?: CharacterOption[];\n  weapon?: Weapon;\n  weaponOptions?: WeaponOption[];\n  artifactSets?: ArtifactSet[];\n  artifactSetOptions?: ArtifactSetOption[];\n  teamCharacters?: Character[];\n  teamOptions?: CharacterOption[];\n  artifactBuffOptions?: ArtifactSetOption[];\n  swirlOption?: SwirlOption;\n  updateCache?: boolean;\n}) => ModifierMixin[];\n\nexport type GetStatMixinsFn = (params?: {\n  character?: Character;\n  characterOptions?: CharacterOption[];\n  weapon?: Weapon;\n  weaponOptions?: WeaponOption[];\n  artifactSets?: ArtifactSet[];\n  artifactSetOptions?: ArtifactSetOption[];\n  teamCharacters?: Character[];\n  teamOptions?: CharacterOption[];\n  artifactBuffOptions?: ArtifactSetOption[];\n  updateCache?: boolean;\n}) => StatMixin[];\n\nexport type GetDamageModifierFn = (params?: {\n  characterLevel?: number;\n  enemyLevel?: number;\n  enemyRes?: Resistance;\n  critType?: CritType;\n  reaction?: Reaction;\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n  swirlElement?: string;\n  modifierMixins?: ModifierMixin[];\n}) => DamageModifier;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}