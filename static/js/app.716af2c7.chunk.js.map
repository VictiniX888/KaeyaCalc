{"version":3,"sources":["js/Data.js","js/Talent.js","js/TalentOption.js","js/Character.js","js/Weapon.js","js/Stat.js","js/Artifact.js","js/DamageModifer.js","js/Styles.js","App.js"],"names":["sortedCharacterList","sortedWeaponList","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talents","attack","curveAcc","params","skill","burst","processTalentData","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","defaultTalent","calculateBaseDamage","stats","multiplier","scalingType","flatDmg","flatAtk","flatDef","flatHp","calculateTotalDamage","element","attackType","modifier","baseDmg","dmgBonus","normalDmgBonus","chargedDmgBonus","plungeDmgBonus","getDamageBonus","crit","critType","critDmg","Math","min","critRate","normalAttackDefault","hits","talentValues","i","damage","push","description","normalAttackMulti","hitCount","damages","hit","chargedAttackDefault","chargedAttackMulti","chargedAttackHeavy","plungeAttackDefault","attackLightDefault","normalHits","slice","attackLightMulti","chargedHits","length","attackHeavyDefault","attackBowDefault","chargedElement","aimShotDefault","skillBase","skillDefault","skillMultiBase","burstBase","burstDefault","healingSkillBase","flatHealing","calculateHealing","hpBase","flatBonus","calculateHp","lisaAttack","lisaSkill","talentDmg","lisaBurst","barbaraAttack","barbaraSkill","barbaraBurst","kaeyaAttack","kaeyaSkill","kaeyaBurst","dilucAttack","infusion","dilucSkill","talentDamage","dilucBurst","razorAttack","razorSkill","razorBurst","attackParams","talentAttackLevel","amberAttack","amberSkill","amberBurst","ventiAttack","ventiSkill","ventiBurst","xianglingAttack","xianglingSkill","xianglingBurst","beidouAttack","beidouSkill","beidouBurst","xingqiuAttack","concat","xingqiuSkill","xingqiuBurst","xiaoAttack","burstParams","talentBurstLevel","modifiedStats","xiaoSkill","xiaoBurst","ningguangAttack","normalAtkDmg","starJadeDmg","ningguangSkill","ningguangBurst","kleeAttack","kleeSkill","kleeBurst","zhongliAttack","zhongliSkill","zhongliBurst","fischlAttack","fischlSkill","fischlBurst","bennettAttack","bennettSkill","bennettBurst","atkBonus","baseAtk","tartagliaAttack","riptideFlashDmg","riptideBurstDmg","tartagliaSkill","tartagliaBurst","noelleAttack","noelleSkill","skillDamage","noelleBurst","eulaAttack","attackHeavyMulti","eulaSkill","eulaBurst","lightfallSwordParams","lightfallSwordTalent","TalentOption","value","this","dilucTalentOptions","xiaoTalentOptions","noelleTalentOptions","Character","data","name","baseStats","statCurveMapping","hasAscended","innateStats","isNaN","Object","keys","obj","stat","charStatCurves","entries","forEach","curve","bonus","talentLevel","totalStats","toLowerCase","damageFn","options","talentOptions","Weapon","rank","weaponLevel","weaponStats","weaponStatCurves","getStatDisplayValue","isPercentage","toFixed","round","getDamageDisplayValue","values","str","every","convertStatValue","getTalentDescription","desc","talentDescMapping","getTotalStatsAt","weapon","weaponHasAscended","character","characterLevel","characterHasAscended","artifacts","characterStats","getStatsAt","getInnateStatsAt","getBaseStatsAt","artifactStats","artifact","getStats","combinedStats","baseDef","defBonus","baseHp","hpBonus","elementalMastery","energyRecharge","anemoDmgBonus","cryoDmgBonus","electroDmgBonus","geoDmgBonus","hydroDmgBonus","pyroDmgBonus","physicalDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","Artifact","mainStat","rawValue","subStats","statObj","statUtils","subStat","mainStatProps","Flower","Feather","Sands","Goblet","Circlet","subStatProps","DamageModifier","enemyLevel","enemyRes","modifiers","reaction","talentSkillLevel","StyleSheet","create","container","display","flexDirection","alignItems","fontSize","height","backgroundColor","inputColumn","padding","borderRightWidth","inputRow","marginVertical","levelInput","width","statInput","resultColumn","resultBlockNoBorder","resultBlock","borderBottomWidth","artifactBlockNoBorder","paddingTop","paddingBottom","artifactBlock","borderStyle","characterImage","titleText","fontWeight","artifactType","artifactStatType","resultText","fillerColumn","flexGrow","App","renderInputColumn","View","renderCharacterList","style","styles","Text","TextInput","defaultValue","state","onChangeText","text","setState","parseInt","setCharacterState","Checkbox","onValueChange","isCharacterAscended","renderWeaponList","setWeaponState","isWeaponAscended","setAllTalentState","characterSelect","selectedValue","_","getTalentOptions","Item","label","characters","key","weapons","renderCharacterImage","imageUrl","Image","source","uri","getDamageModifier","getTotalStats","talentAttackDamage","getTalentDamageAt","talentSkillDamage","talentBurstDamage","isweaponAscended","setArtifactState","setTalentState","artifactFlower","artifactFeather","artifactSands","artifactGoblet","artifactCirclet","renderCharacterStats","renderWeaponStats","renderArtifactMainStat","setStat","prop","parseFloat","renderArtifactSubStats","index","renderArtifactStat","isLast","renderAllArtifactStats","renderTotalStats","renderTalentDamage","renderTalentOptions","FlatList","keyExtractor","item","renderItem","talentOptionMapping","renderAllTalentDamage","sort","name1","name2","localeCompare","Component"],"mappings":"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","file":"static/js/app.716af2c7.chunk.js","sourcesContent":["import characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\n//import artifactSetDataRaw from '../data/artifactsetdata.json';\n//import artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\nimport talentDataRaw from '../data/talentdata.json';\nexport { default as propMapping } from '../data/propmapping.json';\nexport { default as talentDescMapping } from '../data/talentdescmapping.json';\nexport { default as talentOptionMapping } from '../data/talentoptionmapping.json';\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(characterDataRaw);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(characterAscensionBonusDataRaw);\nconst characterStatCurveData = processCharacterStatCurveData(characterStatCurveDataRaw);\nconst weaponData = processWeaponData(weaponDataRaw);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(weaponAscensionBonusDataRaw);\nconst weaponStatCurveData = processWeaponStatCurveData(weaponStatCurveDataRaw);\nconst talentData = processTalentData(talentDataRaw);\n\n// Pre-processed data, lists\nlet sortedCharacterList;    // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList;       // lazy loading implemented with getSortedWeaponList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.id] = charData;\n        return acc;\n    }, {});\n}\n\nfunction processCharacterAscensionBonusData(rawData) {\n    return rawData.reduce((acc, charData) => {\n        acc[charData.characterId] = charData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processCharacterStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.id] = weaponData;\n        return acc;\n    }, {});\n}\n\nfunction processWeaponAscensionBonusData(rawData) {\n    return rawData.reduce((acc, weaponData) => {\n        acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(bonusData => bonusData.ascensionBonuses);\n        return acc;\n    }, {});\n}\n\nfunction processWeaponStatCurveData(rawData) {\n    return rawData.reduce((acc, curveData) => {\n        acc[curveData.level] = curveData.statCurves;\n        return acc;\n    }, {});\n}\n\nfunction processTalentData(rawData) {\n    return rawData.reduce((acc, talentDataRaw) => {\n        let talentData = {...talentDataRaw.talents};\n\n        talentData.attack = talentData.attack.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.skill = talentData.skill.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n        talentData.burst = talentData.burst.reduce((curveAcc, curveData) => {\n            curveAcc[curveData.level] = curveData.params;\n            return curveAcc;\n        }, {});\n\n        acc[talentDataRaw.characterId] = talentData;\n        return acc;\n    }, {});\n}\n\n// Helper functions for accessing data properties\nfunction getData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getAscensionBonusData(id, dataObj) {\n    return dataObj[id];\n}\n\nfunction getStatCurveAt(level, statCurves) {\n    return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id) {\n    return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id) {\n    return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level) {\n    return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id) {\n    return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id) {\n    return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level) {\n    return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(level, ascensionBonuses) {\n    return ascensionBonuses[level];\n}\n\nexport function getTalentData(id) {\n    return talentData[id];\n}\n\nconst emptyTalentParams = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(type, level, talents) {\n    const talentStats = talents[type][level];\n    if (talentStats !== undefined) {\n        return talentStats;\n    } else {\n        return emptyTalentParams;\n    }\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n    if (sortedCharacterList === undefined) {\n        sortedCharacterList = Object.entries(characterData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n    if (sortedWeaponList === undefined) {\n        sortedWeaponList = Object.entries(weaponData)\n            .sort(([_1, {name: name1}], [_2, {name: name2}]) => name1.localeCompare(name2))\n            .map(([id, _]) => id);\n    }\n\n    return sortedWeaponList;\n}","import { getTalentData, getTalentStatsAt } from './Data.js';\n\n// Placeholder function\nexport function defaultTalent() {\n    return [];\n}\n\n// Internal functions\n\nfunction getDamageBonus({ stats, element, attackType }) {\n    let dmgBonus = 1;\n    dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n    if (attackType === 'normal') {\n        dmgBonus += stats.normalDmgBonus ?? 0;\n    } else if (attackType === 'charged') {\n        dmgBonus += stats.chargedDmgBonus ?? 0;\n    } else if (attackType === 'plunge') {\n        dmgBonus += stats.plungeDmgBonus ?? 0;\n    }\n\n    return dmgBonus;\n}\n\nfunction calculateBaseDamage({ stats, multiplier, scalingType, flatDmg = 0 }) {\n    if (scalingType == 'attack') {\n        return stats.flatAtk * multiplier + flatDmg;\n    } else if (scalingType == 'defense') {\n        return stats.flatDef * multiplier + flatDmg;\n    } else if (scalingType == 'hp') {\n        return stats.flatHp * multiplier + flatDmg;\n    } else {\n        return NaN;\n    }\n}\n\nfunction calculateTotalDamage({ stats, multiplier, element, scalingType = 'attack', attackType = 'none', modifier }) {\n    let baseDmg = calculateBaseDamage({ stats, multiplier, scalingType, flatDmg: modifier.flatDmg });\n    let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n    let crit = 1;\n    if (modifier.critType === 'crit') {\n        crit += stats.critDmg;\n    } else if (modifier.critType === 'average') {\n        crit += Math.min(1, stats.critRate) * stats.critDmg;\n    }\n\n    // TODO: enemyDefMultiplier\n    // TODO: enemyResMultiplier\n    // TODO: reactionBonus\n\n    return baseDmg * dmgBonus * crit;\n} \n\nfunction calculateHealing({ stats, multiplier, flatHealing, scalingType = 'hp' }) {\n    // TODO: Add healing bonus\n    return calculateBaseDamage({ stats, multiplier, scalingType, flatDmg: flatHealing });\n}\n\n// Used for calculting hp of summons/shield\nfunction calculateHp({ stats, multiplier, flatBonus, scalingType = 'hp' }) {\n    if (scalingType == 'attack') {\n        return stats.flatAtk * multiplier + flatBonus;\n    } else if (scalingType == 'defense') {\n        return stats.flatDef * multiplier + flatBonus;\n    } else if (scalingType == 'hp') {\n        return stats.flatHp * multiplier + flatBonus;\n    } else {\n        return NaN;\n    }\n}\n\n// Used for all default normal attacks\nfunction normalAttackDefault({ hits, element, params, stats, modifier }) {\n    let talentValues = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            attackType: 'normal',\n            modifier,\n        });\n        \n        talentValues.push({\n            description: `${i+1}HitDmg`,\n            damage: [damage],\n        });\n    }\n\n    return talentValues;\n}\n\n// Used for all normal attacks with multiple damage instances in 1 hit e.g. polearms\nfunction normalAttackMulti({ hits = [], element, params, stats, modifier }) {\n    let talentValues = hits.map((hitCount, i) => {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element,\n            attackType: 'normal',\n            modifier,\n        });\n\n        let damages = [];\n        for (let hit = 0; hit < hitCount; hit++) {\n            damages.push(damage);\n        }\n\n        return {\n            description: `${i+1}HitDmg`,\n            damage: damages,\n        };\n    });\n\n    return talentValues;\n}\n\n// Used for all 1-hit charged attacks\nfunction chargedAttackDefault({ element, params, stats, modifier }) {\n    let damage = calculateTotalDamage({ \n        stats, \n        multiplier: params[0], \n        element, \n        attackType: 'charged',\n        modifier,\n     });\n\n    return [{\n        description: 'chargedDmg',\n        damage: [damage],\n    }];\n}\n\n// Used for multi-hit charged attacks\nfunction chargedAttackMulti({ hits, element, params, stats, modifier }) {\n    let damages = [];\n    for (let i = 0; i < hits; i++) {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            attackType: 'charged',\n            modifier,\n        });\n        damages.push(damage);\n    }\n\n    return [{\n        description: `chargedDmg`,\n        damage: damages,\n    }];\n}\n\n// Used for all default claymore charged attacks\nfunction chargedAttackHeavy({ element = 'physical', params, stats, modifier }) {\n    let descriptions = ['chargedSpinDmg', 'chargedFinalDmg'];\n    return descriptions.map((description, i) => {\n        let damage = calculateTotalDamage({ \n            stats, \n            multiplier: params[i], \n            element, \n            attackType: 'charged',\n            modifier,\n        });\n\n        return {\n            description: description,\n            damage: [damage],\n        };\n    });\n}\n\n// Used for all default plunge attacks\nfunction plungeAttackDefault({ element, params, stats, modifier }) {\n    let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n    return descriptions.map((description, i) => {\n        let damage = calculateTotalDamage({ \n            stats,\n            multiplier: params[i], \n            element,\n            attackType: 'plunge',\n            modifier \n        });\n\n        return {\n            description: description,\n            damage: [damage],\n        };\n    });\n}\n\n// Used for all default sword/polearm/catalyst attacks\nfunction attackLightDefault({ normalHits, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault({ \n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits), \n        stats, \n        modifier \n    }));\n\n    talentValues.push(...chargedAttackDefault({\n        element,\n        params: params.slice(normalHits, normalHits + 1), \n        stats, \n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits + 1 + 1), \n        stats, \n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all default sword/polearm attacks with multi damage instances\nfunction attackLightMulti({ normalHits = [], chargedHits = 1, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackMulti({ \n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits.length), \n        stats, \n        modifier \n    }));\n\n    if (chargedHits === 1) {\n        talentValues.push(...chargedAttackDefault({\n            element,\n            params: params.slice(normalHits.length, normalHits.length + 1), \n            stats, \n            modifier,\n        }));\n    } else {\n        talentValues.push(...chargedAttackMulti({\n            hits: chargedHits,\n            element,\n            params: params.slice(normalHits.length, normalHits.length + chargedHits), \n            stats, \n            modifier,\n        }));\n    }\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits.length + chargedHits + 1), \n        stats, \n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all default claymore attacks\nfunction attackHeavyDefault({ normalHits, element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackDefault({\n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...chargedAttackHeavy({\n        element,\n        params: params.slice(normalHits, normalHits + 2),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits + 2 + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all claymore attacks with multi damage instances\nfunction attackHeavyMulti({ normalHits = [], element = 'physical', params, stats, modifier }) {\n    let talentValues = [];\n\n    talentValues.push(...normalAttackMulti({\n        hits: normalHits, \n        element,\n        params: params.slice(0, normalHits.length), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...chargedAttackHeavy({\n        params: params.slice(normalHits.length, normalHits.length + 2), \n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element,\n        params: params.slice(normalHits.length + 2 + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Used for all debault bow aim shots (include charged shots)\nfunction aimShotDefault({ chargedElement, params, stats, modifier }) {\n    let talentValues = [];\n\n    let damage = calculateTotalDamage({ \n        stats, \n        multiplier: params[0], \n        element: 'physical', \n        attackType: 'normal',\n        modifier,\n    });\n    talentValues.push({\n            description: 'aimShotDmg',\n            damage: [damage],\n    });\n\n    damage = calculateTotalDamage({\n        stats,\n        multiplier: params[1],\n        element: chargedElement,\n        attackType: 'charged',\n        modifier,\n    });\n    talentValues.push({\n        description: 'chargedAimShotDmg',\n        damage: [damage],\n    });\n\n    return talentValues;\n}\n\n// Used for all default bow attacks\nfunction attackBowDefault({ normalHits, chargedElement, params, stats, modifier }) {\n    let talentValues = [];\n    \n    talentValues.push(...normalAttackDefault({\n        hits: normalHits,\n        element: 'physical',\n        params: params.slice(0, normalHits),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...aimShotDefault({\n        chargedElement,\n        params: params.slice(normalHits, normalHits + 2),\n        stats,\n        modifier,\n    }));\n\n    talentValues.push(...plungeAttackDefault({\n        element: 'physical',\n        params: params.slice(normalHits + 2), \n        stats,\n        modifier,\n    }));\n\n    return talentValues;\n}\n\n// Base function for all damage skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction skillBase({ description, element, multiplier, stats, modifier }) {\n    let damage = calculateTotalDamage({\n        element,\n        multiplier,\n        attackType: 'skill',\n        stats, \n        modifier,\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Used for all default skill that only does 1-hit elemental dmg\nfunction skillDefault({ element, params, stats, modifier }) {\n    return [skillBase({\n        description: 'skillDmg',\n        element,\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Base function for damage skills with multiple damage instances\nfunction skillMultiBase({ description, hits, element, params, stats, modifier }) {\n    let damages = [];\n    \n    for (let i = 0; i < hits; i++) {\n        damages.push(calculateTotalDamage({\n            element,\n            multiplier: params[i],\n            attackType: 'skill',\n            stats,\n            modifier,\n        }));\n    }\n\n    return {\n        description,\n        damage: damages,\n    };\n}\n\n// Base function for all damage bursts. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction burstBase({ description, element, multiplier, stats, modifier }) {\n    let damage = calculateTotalDamage({\n        element,\n        multiplier,\n        attackType: 'burst',\n        stats, \n        modifier,\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Used for all default burst that only does 1-hit elemental dmg\nfunction burstDefault({ element, params, stats, modifier }) {\n    return [burstBase({\n        description: 'burstDmg',\n        element,\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Base function for all healing skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nfunction healingSkillBase({ description, params, stats, modifier }) {\n    let damage = calculateHealing({\n        stats,\n        multiplier: params[0],\n        flatHealing: params[1],\n    });\n\n    return {\n        description,\n        damage: [damage],\n    };\n}\n\n// Base function for all shields/summon HP\nfunction hpBase({ description, multiplier, flatBonus, scalingType = 'hp', stats, modifier }) {\n    let hp = calculateHp({\n        stats,\n        multiplier,\n        flatBonus,\n        scalingType,\n    });\n\n    return {\n        description,\n        damage: [hp],\n    };\n}\n\n// Public functions\n// Access using talent[characterId + type]\n\n// Lisa\nexport function lisaAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function lisaSkill({ params, stats, modifier }) {\n    let talentDmg = [];\n\n    talentDmg.push(skillBase({\n        description: 'pressDmg',\n        element: 'electro',\n        multiplier: params[5],\n        stats,\n        modifier,\n    }));\n\n    for (let i = 0; i <= 3; i++) {\n        talentDmg.push(skillBase({\n            description: `holdDmgStack${i}`,\n            element: 'electro',\n            multiplier: params[i],\n            stats, \n            modifier,\n        }));\n    }\n\n    return talentDmg;\n}\n\nexport function lisaBurst({ params, stats, modifier }) {\n    return burstDefault({\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Barbara\nexport function barbaraAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 4,\n        element: 'hydro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function barbaraSkill({ params, stats, modifier }) {\n    let talentDmg = [\n        healingSkillBase({\n            description: 'hpRegenContinuous',\n            params: params.slice(0, 2),\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenOnHit',\n            params: params.slice(2, 4),\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'dropletDmg',\n            element: 'hydro',\n            multiplier: params[4],\n            stats,\n            modifier,\n        }),\n    ];\n\n    return talentDmg;\n}\n\nexport function barbaraBurst({ params, stats, modifier }) {\n    return [\n        healingSkillBase({\n            description: 'hpRegen',\n            params,\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Kaeya\nexport function kaeyaAttack({ params, stats, modifier }) {\n    return attackLightMulti({ \n        normalHits: [1, 1, 1, 1, 1], \n        chargedHits: 2, \n        params, \n        stats, \n        modifier,\n    });\n}\n\nexport function kaeyaSkill({ params, stats, modifier }) {\n    return skillDefault({ \n        element: 'cryo', \n        params, \n        stats, \n        modifier \n    });\n}\n\nexport function kaeyaBurst({ params, stats, modifier }) {\n    return burstDefault({ \n        element: 'cryo', \n        params, \n        stats, \n        modifier,\n    });\n}\n\n// Diluc\nexport function dilucAttack({ params, stats, modifier }) {\n    let element = modifier.infusion ? 'pyro' : 'physical';\n    return attackHeavyDefault({\n        normalHits: 4,\n        element,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function dilucSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n    for (let i = 0; i < 3; i++) {\n        talentDamage.push(skillBase({\n            description: `${i+1}HitDmg`,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    return talentDamage;\n}\n\nexport function dilucBurst({ params, stats, modifier }) {\n    let descriptions = ['slashingDmg', 'dot', 'explosionDmg'];\n    let talentDamage = descriptions.map((description, i) => {\n        return burstBase({\n            description,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n\n    return talentDamage;\n}\n\n// Razor\nexport function razorAttack({ params, stats, modifier }) {\n    return attackHeavyDefault({\n        normalHits: 4,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function razorSkill({ params, stats, modifier }) {\n    let descriptions = ['pressDmg', 'holdDmg'];\n    return descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'electro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n}\n\nexport function razorBurst({ params, stats, modifier }) {\n    let talentDamage = burstDefault({\n        element: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n\n    let attackParams = getTalentStatsAt('attack', modifier.talentAttackLevel, getTalentData('razor'));\n\n    for (let i = 0; i < 4; i++) {\n        talentDamage.push(burstBase({\n            description: `${i+1}HitDmgSoulCompanion`,\n            element: 'electro',\n            multiplier: params[1] * attackParams[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    return talentDamage;\n}\n\n// Amber\nexport function amberAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 5,\n        chargedElement: 'pyro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function amberSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'explosionDmg',\n        element: 'electro',\n        multiplier: params[1],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(hpBase({\n        description: 'baronBunnyHp',\n        multiplier: params[0],\n        flatBonus: 0,\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function amberBurst({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(burstBase({\n        description: 'dmgPerWave',\n        element: 'pyro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push({\n        description: 'totalDmg',\n        damage: [talentDamage[0].damage[0] * 18],\n    });\n\n    return talentDamage;\n}\n\n// Venti\nexport function ventiAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 6,\n        chargedElement: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function ventiSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'pressDmg',\n            element: 'anemo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'holdDmg',\n            element: 'anemo',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function ventiBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'dot',\n            element: 'anemo',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        // Not sure how the elemental absorption dmg is calculated\n        burstBase({\n            description: 'dotElementalAbsorption',\n            element: 'none',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Xiangling\nexport function xianglingAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 2, 4, 1],\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function xianglingSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'guobaDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function xianglingBurst({ params, stats, modifier }) {\n    let talentDamage = []\n\n    for (let i = 0; i < 3; i++) {\n        talentDamage.push(burstBase({\n            description: `swing${i+1}HitDmg`,\n            element: 'pyro',\n            multiplier: params[i],\n            stats,\n            modifier,\n        }));\n    }\n\n    talentDamage.push(burstBase({\n        description: 'pyronadoDmg',\n        element: 'pyro',\n        multiplier: params[3],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\n// Beidou\nexport function beidouAttack({ params, stats, modifier }) {\n    return attackHeavyDefault({\n        normalHits: 5,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function beidouSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(hpBase({\n        description: 'shieldHp',\n        multiplier: params[0],\n        flatBonus: params[1],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(skillBase({\n        description: 'baseDmg',\n        element: 'electro',\n        multiplier: params[2],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(skillBase({\n        description: 'dmgBonusOnHitTaken',\n        element: 'electro',\n        multiplier: params[3],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function beidouBurst({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(burstBase({\n        description: 'skillDmg',\n        element: 'electro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(burstBase({\n        description: 'lightningDmg',\n        element: 'electro',\n        multiplier: params[1],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\n// Xingqiu\nexport function xingqiuAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 2, 1, 2],\n        chargedHits: 2,\n        params: params.slice(0, 3).concat(params.slice(4, 6)).concat(params.slice(7)),\n        stats,\n        modifier,\n    });\n}\n\nexport function xingqiuSkill({ params, stats, modifier }) {\n    return [skillMultiBase({\n        description: 'skillDmg',\n        hits: 2,\n        element: 'hydro',\n        params,\n        stats,\n        modifier,\n    })];\n}\n\nexport function xingqiuBurst({ params, stats, modifier }) {\n    return [burstBase({\n        description: 'swordRainDmg',\n        element: 'hydro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Xiao\nexport function xiaoAttack({ params, stats, modifier }) {\n    if (modifier.infusion) {\n        let burstParams = getTalentStatsAt('burst', modifier.talentBurstLevel, getTalentData('xiao'));\n        let modifiedStats = {...stats};\n\n        if (modifiedStats.normalDmgBonus === undefined) {\n            modifiedStats.normalDmgBonus = burstParams[0];\n        } else {\n            modifiedStats.normalDmgBonus += burstParams[0];\n        }\n\n        if (modifiedStats.chargedDmgBonus === undefined) {\n            modifiedStats.chargedDmgBonus = burstParams[0];\n        } else {\n            modifiedStats.chargedDmgBonus += burstParams[0];\n        }\n\n        if (modifiedStats.plungeDmgBonus === undefined) {\n            modifiedStats.plungeDmgBonus = burstParams[0];\n        } else {\n            modifiedStats.plungeDmgBonus += burstParams[0];\n        }\n\n        return attackLightMulti({\n            normalHits: [2, 1, 1, 2, 1, 1],\n            element: 'anemo',\n            params: params.slice(1, 5).concat(params.slice(6)),\n            stats: modifiedStats,\n            modifier,\n        });\n    } else {\n        return attackLightMulti({\n            normalHits: [2, 1, 1, 2, 1, 1],\n            params: params.slice(1, 5).concat(params.slice(6)),\n            stats,\n            modifier,\n        });\n    }\n}\n\nexport function xiaoSkill({ params, stats, modifier }) {\n    return skillDefault({\n        element: 'anemo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function xiaoBurst({ params, stats, modifier }) {\n    return defaultTalent();\n}\n\n// Ningguang\nexport function ningguangAttack({ params, stats, modifier }) {\n    let talentDmg = []; \n\n    // Ningguang's normal attack has no combo\n    let normalAtkDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[0],\n        element: 'geo',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDmg.push({\n        description: 'normalAtkDmg',\n        damage: [normalAtkDmg],\n    });\n\n    talentDmg.push(...chargedAttackDefault({\n        element: 'geo',\n        params: params.slice(1, 2),\n        stats,\n        modifier,\n    }));\n\n    // Ningguang's charged attack dmg per star jade\n    let starJadeDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[2],\n        element: 'geo',\n        attackType: 'charged',\n        modifier,\n    });\n    talentDmg.push({\n        description: 'starJadeDmg',\n        damage: [starJadeDmg],\n    });\n\n    talentDmg.push(...plungeAttackDefault({\n        element: 'geo',\n        params: params.slice(4),\n        stats,\n        modifier,\n    }));\n\n    return talentDmg;\n}\n\nexport function ningguangSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'skillDmg',\n        element: 'geo',\n        multiplier: params[1],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(hpBase({\n        description: 'jadeScreenHp',\n        multiplier: params[2],\n        flatBonus: 0,\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function ningguangBurst({ params, stats, modifier }) {\n    return [burstBase({\n        description: 'dmgPerGem',\n        element: 'geo',\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Klee\nexport function kleeAttack({ params, stats, modifier }) {\n    return attackLightDefault({\n        normalHits: 3,\n        element: 'pyro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function kleeSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'jumpyDumptyDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'mineDmg',\n            element: 'pyro',\n            multiplier: params[3],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function kleeBurst({ params, stats, modifier }) {\n    return [burstBase({\n        description: 'sparksNSplashDmg',\n        element: 'pyro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    })];\n}\n\n// Zhongli\nexport function zhongliAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 1, 1, 4, 1],\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function zhongliSkill({ params, stats, modifier }) {\n    let descriptions = ['stoneSteeleDmg', 'resonanceDmg'];\n\n    let talentDamage = descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'geo',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n\n    talentDamage.push(skillBase({\n        description: 'holdDmg',\n        element: 'geo',\n        multiplier: params[3],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(hpBase({\n        description: 'shieldHp',\n        multiplier: params[5],\n        flatBonus: params[4],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function zhongliBurst({ params, stats, modifier }) {\n    return burstDefault({\n        element: 'geo',\n        params,\n        stats,\n        modifier,\n    });\n}\n\n// Fischl\nexport function fischlAttack({ params, stats, modifier }) {\n    return attackBowDefault({\n        normalHits: 5,\n        chargedElement: 'electro',\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function fischlSkill({ params, stats, modifier }) {\n    let descriptions = ['ozDmg', 'summoningDmg'];\n    return descriptions.map((description, i) => skillBase({\n        description,\n        element: 'electro',\n        multiplier: params[i],\n        stats,\n        modifier,\n    }));\n}\n\nexport function fischlBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'fallingThunderDmg',\n            element: 'electro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Bennett\nexport function bennettAttack({ params, stats, modifier }) {\n    return attackLightMulti({\n        normalHits: [1, 1, 1, 1, 1],\n        chargedHits: 2,\n        params,\n        stats,\n        modifier,\n    });\n}\n\nexport function bennettSkill({ params, stats, modifier }) {\n    return [\n        skillBase({\n            description: 'pressDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        skillMultiBase({\n            description: 'chargeLevel1Dmg',\n            hits: 2,\n            element: 'pyro',\n            params: params.slice(1, 3),\n            stats,\n            modifier,\n        }),\n\n        skillMultiBase({\n            description: 'chargeLevel2Dmg',\n            hits: 2,\n            element: 'pyro',\n            params: params.slice(3, 5),\n            stats,\n            modifier,\n        }),\n\n        skillBase({\n            description: 'explosionDmg',\n            element: 'pyro',\n            multiplier: params[5],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\nexport function bennettBurst({ params, stats, modifier }) {\n    let talentDamage = [\n        burstBase({\n            description: 'burstDmg',\n            element: 'pyro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        healingSkillBase({\n            description: 'hpRegenContinuousPerSecond',\n            params: params.slice(1, 3),\n            stats,\n            modifier,\n        }),\n    ];\n\n    // ATK Bonus\n    let atkBonus = stats.baseAtk * params[3];\n    talentDamage.push({\n        description: 'atkBonus',\n        damage: [atkBonus],\n    });\n\n    return talentDamage;\n}\n\n// Tartaglia\nexport function tartagliaAttack({ params, stats, modifier }) {\n    let talentDamage = attackBowDefault({\n        normalHits: 6,\n        chargedElement: 'hydro',\n        params: params.slice(0, 8).concat(params.slice(10)),\n        stats,\n        modifier,\n    });\n\n    let riptideFlashDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[8],\n        element: 'hydro',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'riptideFlashDmg',\n        damage: [riptideFlashDmg],\n    });\n\n    let riptideBurstDmg = calculateTotalDamage({\n        stats,\n        multiplier: params[9],\n        element: 'hydro',\n        attackType: 'normal',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'riptideBurstDmg',\n        damage: [riptideBurstDmg],\n    });\n\n    return talentDamage;\n}\n\nexport function tartagliaSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    talentDamage.push(skillBase({\n        description: 'stanceChangeDmg',\n        element: 'hydro',\n        multiplier: params[0],\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(...normalAttackMulti({\n        hits: [1, 1, 1, 1, 1, 2],\n        element: 'hydro',\n        params: params.slice(1, 8),\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(...chargedAttackMulti({\n        hits: 2,\n        element: 'hydro',\n        params: params.slice(8, 10),\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(skillBase({\n        description: 'riptideSlashDmg',\n        element: 'hydro',\n        multiplier: params[10],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function tartagliaBurst({ params, stats, modifier }) {\n    return [\n        burstBase({\n            description: 'burstDmgMelee',\n            element: 'hydro',\n            multiplier: params[0],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'burstDmgRanged',\n            element: 'hydro',\n            multiplier: params[2],\n            stats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'riptideBlastDmg',\n            element: 'hydro',\n            multiplier: params[1],\n            stats,\n            modifier,\n        }),\n    ];\n}\n\n// Noelle\nexport function noelleAttack({ params, stats, modifier }) {\n    if (modifier.infusion) {\n        let burstParams = getTalentStatsAt('burst', modifier.talentBurstLevel, getTalentData('noelle'));\n        let modifiedStats = {\n            ...stats,\n            flatAtk: stats.flatAtk + stats.flatDef * burstParams[2],\n        };\n\n        return attackHeavyDefault({\n            normalHits: 4,\n            element: 'geo',\n            params,\n            stats: modifiedStats,\n            modifier,\n        });\n    } else {\n        return attackHeavyDefault({\n            normalHits: 4,\n            params,\n            stats,\n            modifier,\n        }); \n    }\n}\n\nexport function noelleSkill({ params, stats, modifier }) {\n    let talentDamage = [];\n\n    let skillDamage = calculateTotalDamage({\n        stats,\n        multiplier: params[5],\n        element: 'geo',\n        scalingType: 'defense',\n        attackType: 'skill',\n        modifier,\n    });\n    talentDamage.push({\n        description: 'skillDmg',\n        damage: [skillDamage],\n    });\n\n    talentDamage.push(hpBase({\n        description: 'shieldHp',\n        multiplier: params[0],\n        flatBonus: params[6],\n        scalingType: 'defense',\n        stats,\n        modifier,\n    }));\n\n    talentDamage.push(healingSkillBase({\n        description: 'healing',\n        params: [params[1], params[7]],\n        stats,\n        modifier,\n    }));\n\n    return talentDamage;\n}\n\nexport function noelleBurst({ params, stats, modifier }) {\n    let modifiedStats = {\n        ...stats,\n        flatAtk: stats.flatAtk + stats.flatDef * params[2]\n    };\n\n    return [\n        burstBase({\n            description: 'burstInitDmg',\n            element: 'geo',\n            multiplier: params[0],\n            stats: modifiedStats,\n            modifier,\n        }),\n\n        burstBase({\n            description: 'firstSwingDmg',\n            element: 'geo',\n            multiplier: params[1],\n            stats: modifiedStats,\n            modifier,\n        }),\n    ]\n}\n\n// Eula\nexport function eulaAttack({ params, stats, modifier }) {\n    return attackHeavyMulti({ \n        normalHits: [1, 1, 2, 1, 2], \n        params, \n        stats, \n        modifier\n    });\n}\n\nexport function eulaSkill({ params, stats, modifier }) {\n    let descriptions = ['pressDmg', 'holdDmg', 'icewhirlBrandDmg'];\n    return descriptions.map((description, i) => {\n        return skillBase({\n            description,\n            element: 'cryo',\n            multiplier: params[i],\n            stats,\n            modifier,\n        });\n    });\n}\n\nexport function eulaBurst({ params, stats, modifier }) {\n    let talentDmg = [];\n    talentDmg.push(...burstDefault({\n        element: 'cryo', \n        params, \n        stats,\n        modifier,\n    }));\n    \n    let descriptions = ['lightfallSwordBaseDmg', 'lightfallSwordStackDmg'];\n    let lightfallSwordParams = params.slice(1, 3);\n    let lightfallSwordTalent = descriptions.map((description, i) => {\n        return burstBase({\n            description,\n            element: 'physical',\n            multiplier: lightfallSwordParams[i],\n            stats,\n            modifier,\n        });\n    });\n\n    talentDmg.push(...lightfallSwordTalent);\n\n    return talentDmg;\n}\n","export default class TalentOption {\n    constructor(id, type = 'boolean', value) {\n        this.id = id;\n        this.type = type;\n        this.value = value;\n    }\n}\n\n// Diluc\nexport const dilucTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n\n// Xiao\nexport const xiaoTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n\n// Noelle\nexport const noelleTalentOptions = [new TalentOption('infusion', 'boolean', false)];\n","import { \n    getCharacterData as getData, \n    getCharacterAscensionBonusData as getAscensionBonusData, \n    getCharacterStatCurveAt as getStatCurveAt, \n    getAscensionBonusAt,\n    getTalentData,\n    getTalentStatsAt,\n} from './Data.js';\n\nimport * as talents from './Talent.js';\nimport * as talentOptions from './TalentOption.js';\n\nexport default class Character {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n\n        this.talents = getTalentData(id);\n    }\n\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n    getInnateStatsAt(level, hasAscended) {\n        if (isNaN(level) || level < 1 || level > 90) {\n            // Return nulls if level is invalid\n            let innateStats;\n            if (this.innateStats !== undefined) {\n                // Copy all of innateStats' properties to a new object and initialize them to null\n                innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                innateStats = {};\n            }\n            \n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n            \n            return innateStats;\n        } \n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\n        else if (level === this.level && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.innateStats;\n        } else {\n\n            // Initialize stats with character level 1 base stats\n            let innateStats = {...this.baseStats};\n\n            let charStatCurves = getStatCurveAt(level);\n\n            // Calculate stats from character level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = charStatCurves[curve];\n                innateStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from character ascension\n            let ascensionLevel;\n            if (level > 80 || (level == 80 && hasAscended)) {\n                ascensionLevel = 6;\n            } else if (level > 70 || (level == 70 && hasAscended)) {\n                ascensionLevel = 5;\n            } else if (level > 60 || (level == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (level > 50 || (level == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (level > 40 || (level == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (level > 20 || (level == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n\n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in innateStats) {\n                        innateStats[stat] += bonus;\n                    } else {\n                        innateStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n\n            return innateStats;\n        }\n    }\n\n    // Return an Object with description and damage properties\n    getTalentDamageAt({ type, talentLevel, totalStats, modifier }) {\n        const params = getTalentStatsAt(type.toLowerCase(), talentLevel, this.talents);\n\n        let damageFn = talents[this.id + type];\n        if (damageFn === undefined) {\n            damageFn = talents['defaultTalent'];\n        }\n\n        let damage = damageFn({\n            params,\n            stats: totalStats,\n            modifier,\n        });\n\n        return damage;\n    }\n\n    getTalentOptions() {\n        let options = talentOptions[this.id + 'TalentOptions'];\n        if (options !== undefined) {\n            return options;\n        } else {\n            return [];\n        }\n    }\n}\n","import { getWeaponData as getData, getWeaponAscensionBonusData as getAscensionBonusData, getWeaponStatCurveAt as getStatCurveAt, getAscensionBonusAt } from './Data.js';\n\nexport default class Weapon {\n    constructor(id) {\n        this.id = id;\n\n        const data = getData(id);\n        this.name = data.name;\n        this.type = data.type;\n        this.rank = data.rank;\n        this.baseStats = data.baseStats;\n        this.statCurveMapping = data.statCurves;\n        this.ascensionBonuses = getAscensionBonusData(id);\n    }\n\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n    getStatsAt(weaponLevel, hasAscended) {\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.rank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\n            // Return nulls if weapon level is invalid\n            let weaponStats;\n            if (this.stats !== undefined) {\n                // Copy all of stats' properties to a new object and initialize them to null\n                weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n                    obj[stat] = null;\n                    return obj;\n                }, {});\n            } else {\n                weaponStats = {};\n            }\n            \n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n        // If getStatsAt has not been called before, this.weaponLevel, this.hasAscended, and this.stats will be undefined\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.stats;\n        } else {\n\n            // Level 1 weapon stats\n            let weaponStats = {...this.baseStats};\n\n            let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n            // Calculate stats from weapon level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = weaponStatCurves[curve];\n                weaponStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from weapon ascension\n            let ascensionLevel;\n            // Only 3-star and above weapons can be ascended beyond level 70\n            if (this.rank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\n                ascensionLevel = 6;\n            } else if (this.rank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\n                ascensionLevel = 5;\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = getAscensionBonusAt(ascensionLevel, this.ascensionBonuses);\n            \n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    if (stat in weaponStats) {\n                        weaponStats[stat] += bonus;\n                    } else {\n                        weaponStats[stat] = bonus;\n                    }\n                })\n            }\n\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n    }\n}\n","import { talentDescMapping, talentOptionMapping } from './Data.js';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(value, isPercentage) {\n    if (value != null) {\n        if (isPercentage) {\n            return (value * 100).toFixed(1) + \"%\";\n        } else {\n            return Math.round(value);\n        }\n    } else {\n        return \"-\";\n    }\n};\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values) {\n    let str = '';\n\n    if (values.length === 0) {\n        return str;\n    }\n\n    if (isNaN(values[0])) {\n        return '-';\n    } else {\n        str += Math.round(values[0]);\n    }\n\n    if (values.length >= 3 && values.every(value => value === values[0])) {\n        // All elements are the same, simplify to ${damage} x${count}\n        str += ' x ' + values.length;\n    } else {\n        // Less than 3 elements, or elements are different\n        values.slice(1).forEach(value => {\n            if (isNaN(value)) {\n                return '-';\n            } else {\n                str += ' + ' + Math.round(value);\n            }\n        });\n    }\n\n    return str;\n}\n\n// Returns the display name of a talent option\nexport function getTalentOptionName(id) {\n    return talentOptionMapping[id];\n}\n\n// Returns a Number representing the inputed value of a stat\n// Returns null if the input is not a valid stat value\nexport function convertStatValue(value, isPercentage) {\n    if (isPercentage) {\n        return value / 100;\n    } else {\n        return value;\n    }\n};\n\nexport function getTalentDescription(desc) {\n    return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended) {\n\n    let weaponStats;\n    if (weapon !== undefined) {\n        weaponStats = weapon.getStatsAt(weaponLevel, weaponHasAscended);\n    } else {\n        weaponStats = {};\n    }\n\n    let characterStats;\n    if (character !== undefined) {\n        characterStats = character.getInnateStatsAt(characterLevel, characterHasAscended);\n    } else {\n        characterStats = {};\n    }\n    \n    // Merges weaponStats and innateStats into a new baseStats object\n    let baseStats = {...weaponStats};\n    Object.entries(characterStats).map(([stat, value]) => {\n        if (baseStats[stat] === undefined) {\n            baseStats[stat] = value;\n        } else {\n            baseStats[stat] += value;\n        }\n    });\n    \n    return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended, artifacts) {\n    \n    let baseStats = getBaseStatsAt(weapon, weaponLevel, weaponHasAscended, character, characterLevel, characterHasAscended);\n    \n    // Merge artifact bonuses into separate object\n    let artifactStats = {};\n    artifacts.forEach(artifact => {\n        Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n            if (artifactStats[stat] === undefined) {\n                artifactStats[stat] = value;\n            } else {\n                artifactStats[stat] += value;\n            }\n        });\n    });\n\n    // Merge base stats and artifact bonuses\n    let combinedStats = {...baseStats};\n    Object.entries(artifactStats).forEach(([stat, value]) => {\n        if (combinedStats[stat] === undefined) {\n            combinedStats[stat] = value;\n        } else {\n            combinedStats[stat] += value;\n        }\n    });\n\n    // Calculate total stats\n    let totalStats = {};\n\n    totalStats.baseAtk = (combinedStats.baseAtk ? combinedStats.baseAtk : 0);\n\n    totalStats.flatAtk = (combinedStats.baseAtk ? combinedStats.baseAtk : 0) \n        * (1 + (combinedStats.atkBonus ? combinedStats.atkBonus : 0))\n        + (combinedStats.flatAtk ? combinedStats.flatAtk : 0);\n    totalStats.flatDef = (combinedStats.baseDef ? combinedStats.baseDef : 0) \n        * (1 + (combinedStats.defBonus ? combinedStats.defBonus : 0))\n        + (combinedStats.flatDef ? combinedStats.flatDef : 0);\n    totalStats.flatHp = (combinedStats.baseHp ? combinedStats.baseHp : 0) \n        * (1 + (combinedStats.hpBonus ? combinedStats.hpBonus : 0))\n        + (combinedStats.flatHp ? combinedStats.flatHp : 0);\n    totalStats.critRate = combinedStats.critRate ? combinedStats.critRate : 0;\n    totalStats.critDmg = combinedStats.critDmg ? combinedStats.critDmg : 0;\n    totalStats.elementalMastery = combinedStats.elementalMastery ? combinedStats.elementalMastery : 0;\n    totalStats.energyRecharge = 1 + (combinedStats.energyRecharge ? combinedStats.energyRecharge : 0);\n    \n    combinedStats.anemoDmgBonus ? totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus : null;\n    combinedStats.cryoDmgBonus ? totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus : null;\n    combinedStats.electroDmgBonus ? totalStats.electroDmgBonus = combinedStats.electroDmgBonus : null;\n    combinedStats.geoDmgBonus ? totalStats.geoDmgBonus = combinedStats.geoDmgBonus : null;\n    combinedStats.hydroDmgBonus ? totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus : null;\n    combinedStats.pyroDmgBonus ? totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus : null;\n    combinedStats.physicalDmgBonus ? totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus : null;\n\n    combinedStats.anemoRes ? totalStats.anemoRes = combinedStats.anemoRes : null;\n    combinedStats.cryoRes ? totalStats.cryoRes = combinedStats.cryoRes : null;\n    combinedStats.electroRes ? totalStats.electroRes = combinedStats.electroRes : null;\n    combinedStats.geoRes ? totalStats.geoRes = combinedStats.geoRes : null;\n    combinedStats.hydroRes ? totalStats.hydroRes = combinedStats.hydroRes : null;\n    combinedStats.pyroRes ? totalStats.pyroRes = combinedStats.pyroRes : null;\n    combinedStats.physicalRes ? totalStats.physicalRes = combinedStats.physicalRes : null;\n\n    combinedStats.healingBonus ? totalStats.healingBonus = combinedStats.healingBonus : null;\n\n    return totalStats;\n}","import * as statUtils from './Stat.js';\n\nexport default class Artifact {\n    mainStat = {\n        stat: 0,\n        rawValue: NaN,\n        value: NaN,\n    };\n\n    subStats = [\n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }, \n        {\n            stat: 0,\n            rawValue: NaN,\n            value: NaN,\n        }\n    ];\n\n    constructor(type) {\n        this.type = type;\n    }\n\n    // Can be called with one of the two of stat and value (the other will be undefined)\n    setStat(statObj, stat, value, isPercentage = false) {\n        if (stat == undefined && value != undefined) {\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        } else if (stat != undefined && value == undefined) {\n            statObj.stat = stat;\n            statObj.value = statUtils.convertStatValue(statObj.rawValue, isPercentage);\n        } else if (stat != undefined && value != undefined) {\n            statObj.stat = stat;\n            statObj.rawValue = value;\n            statObj.value = statUtils.convertStatValue(value, isPercentage);\n        }\n    }\n\n    /*\n    setMainStat(stat, value, isPercentage = false) {\n        this.setStat(this.mainStat, stat, value, isPercentage);\n    }\n\n    // Set substat in a spefiic position\n    setSubStat(pos, stat, value, isPercentage = false) {\n        this.setStat(this.subStats[pos], stat, value, isPercentage);\n    }\n    */\n\n    // Returns object containing stat: value mapping, including both main stat and substats\n    getStats() {\n        let stats = {};\n\n        if (this.mainStat.stat != 0) {\n            if (!isNaN(this.mainStat.value)) {\n                stats[this.mainStat.stat] = this.mainStat.value;\n            } else {\n                stats[this.mainStat.stat] = null;\n            }\n        }\n        \n        this.subStats.forEach(subStat => {\n            if (subStat.stat != 0) {\n                if (!isNaN(subStat.value)) {\n                    stats[subStat.stat] = subStat.value;\n                } else {\n                    stats[subStat.stat] = null;\n                }\n            }\n        });\n\n        return stats;\n    }\n}\n\nexport const mainStatProps = {\n    Flower: [\n        'flatHp',\n    ],\n\n    Feather: [\n        'flatAtk',\n    ],\n\n    Sands: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'energyRecharge',\n    ],\n\n    Goblet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'anemoDmgBonus',\n        'cryoDmgBonus',\n        'electroDmgBonus',\n        'geoDmgBonus',\n        'hydroDmgBonus',\n        'pyroDmgBonus',\n        'physicalDmgBonus',\n    ],\n\n    Circlet: [\n        'hpBonus',\n        'atkBonus',\n        'defBonus',\n        'elementalMastery',\n        'critRate',\n        'critDmg',\n        'healingBonus',\n    ],\n}\n\nexport const subStatProps = [\n    'flatHp',\n    'flatAtk',\n    'flatDef',\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n    'critRate',\n    'critDmg',\n]","export default class DamageModifier {\n    constructor({\n        characterLevel,\n        enemyLevel = 1,\n        enemyRes = {},\n        modifiers = {},\n        critType = 'none',\n        flatDmg = 0,\n        reaction = 'none',\n        talentAttackLevel,\n        talentSkillLevel,\n        talentBurstLevel,\n        talentOptions = [] \n    }) {\n        this.characterLevel = characterLevel;\n        this.enemyLevel = enemyLevel;\n        this.enemyRes = enemyRes;\n        this.modifiers = modifiers;\n        this.critType = critType;\n        this.flatDmg = flatDmg;\n        this.reaction = reaction;\n        this.talentAttackLevel = talentAttackLevel;\n        this.talentSkillLevel = talentSkillLevel;\n        this.talentBurstLevel = talentBurstLevel;\n\n        talentOptions.forEach(({id, value}) => {\n            this[id] = value;\n        });\n    }\n}","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n\n        fontSize: 14,\n\n        height: '100%',\n\n        backgroundColor: '#fff',\n    },\n\n    inputColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '1%',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#ccc',\n    },\n\n    inputRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    levelInput: {\n        width: '2em',\n    },\n\n    statInput: {\n        width: '3em',\n    },\n\n    resultColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#eee',\n    },\n\n    resultBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n    },\n\n    resultBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '0.8em',\n        borderBottomWidth: 1,\n    },\n\n    artifactBlockNoBorder: {\n        display: 'flex',\n        flexDirection: 'column',\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n    },\n\n    artifactBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        paddingTop: '0.5em',\n        paddingBottom: '0.7em',\n\n        borderStyle: 'dashed',\n        borderBottomWidth: 1,  \n    },\n\n    characterImage: {\n        marginVertical: '0.25em',\n    },\n\n    titleText: {\n        fontSize: '1.5em',\n        fontWeight: '200',\n\n        marginVertical: '0.17em',\n    },\n\n    artifactType: {\n        fontSize: '1.2em',\n        fontWeight: '200',\n\n        marginVertical: '0.21em',\n    },\n\n    artifactStatType: {\n        marginVertical: '0.25em',\n    },\n\n    resultText: {\n        marginVertical: '0.25em',\n    },\n\n    fillerColumn: {\n        flexGrow: 1,\n\n        backgroundColor: '#eee',\n    },\n});\n","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { FlatList, Image, Text, TextInput, View } from 'react-native';\n\nimport Character from './js/Character.js';\nimport Weapon from './js/Weapon.js';\nimport Artifact, { mainStatProps, subStatProps } from './js/Artifact.js';\nimport DamageModifier from './js/DamageModifer.js';\nimport TalentOption from './js/TalentOption.js';\nimport * as statUtils from './js/Stat.js';\nimport * as data from './js/Data.js';\n\nimport styles from './js/Styles.js';\n\nexport default class App extends Component {\n\n  // Class properties\n  character;\n  weapon;\n  artifactFlower;\n  artifactFeather;\n  artifactSands;\n  artifactGoblet;\n  artifactCirclet;\n\n  constructor() {\n    super();  \n\n    // Initialize sorted list of characters and weapons\n    this.characters = data.getSortedCharacterList();\n    this.weapons = data.getSortedWeaponList();\n\n    this.artifactFlower = new Artifact('Flower');\n    this.artifactFeather = new Artifact('Feather');\n    this.artifactSands = new Artifact('Sands');\n    this.artifactGoblet = new Artifact('Goblet');\n    this.artifactCirclet = new Artifact('Circlet');\n\n    this.state = {\n      characterId: undefined,\n      characterLevel: 1,\n      isCharacterAscended: false,\n\n      weaponId: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n\n      talentAttackLevel: 1,\n      talentSkillLevel: 1,\n      talentBurstLevel: 1,\n\n      characterStats: undefined,\n      weaponStats: undefined,\n      totalStats: undefined,\n\n      talentAttackDamage: undefined,\n      talentSkillDamage: undefined,\n      talentBurstDamage: undefined,\n\n      talentOptions: [],\n    }\n  }\n\n  renderInputColumn = () => {\n    return (\n      <View>\n        {this.renderCharacterList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.characterLevel} \n            onChangeText={text => {\n              this.setState({ characterLevel: parseInt(text) }, this.setCharacterState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isCharacterAscended: value }, this.setCharacterState)}\n            value={this.state.isCharacterAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        {this.renderWeaponList()}\n\n        <View style={styles.inputRow}>\n          <Text>Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.weaponLevel} \n            onChangeText={text => {\n              this.setState({ weaponLevel: parseInt(text) }, this.setWeaponState)\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Ascended? </Text>\n          <Checkbox\n            onValueChange={value => this.setState({ isWeaponAscended: value }, this.setWeaponState)}\n            value={this.state.isWeaponAscended}\n          />\n        </View>\n\n        <Text> </Text>\n\n        <View style={styles.inputRow}>\n          <Text>Attack Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentAttackLevel} \n            onChangeText={text => {\n              this.setState({ talentAttackLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Skill Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentSkillLevel} \n            onChangeText={text => {\n              this.setState({ talentSkillLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n\n        <View style={styles.inputRow}>\n          <Text>Burst Talent Level: </Text>\n          <TextInput \n            style={styles.levelInput}\n            defaultValue={this.state.talentBurstLevel} \n            onChangeText={text => {\n              this.setState({ talentBurstLevel: parseInt(text) }, this.setAllTalentState);\n            }}\n          />\n        </View>\n      </View>\n    )\n  }\n\n  renderCharacterList = () => {    \n    return (\n      <View style={styles.inputRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.character = new Character(value);\n              this.setState({\n                characterId: value,\n                talentOptions: this.character.getTalentOptions()\n              }, this.setCharacterState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.characters.map(id => <Picker.Item label={data.getCharacterData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    return (\n      <View style={styles.inputRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={(value, _) => {\n            if (value != 0) {\n              this.weapon = new Weapon(value);\n              this.setState({ weaponId: value }, this.setWeaponState);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {this.weapons.map(id => <Picker.Item label={data.getWeaponData(id).name} value={id} key={id} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  getDamageModifier = () => {\n    let modifier = new DamageModifier({ \n      characterLevel: this.state.characterLevel,\n      talentAttackLevel: this.state.talentAttackLevel,\n      talentSkillLevel: this.state.talentSkillLevel,\n      talentBurstLevel: this.state.talentBurstLevel,\n      talentOptions: this.state.talentOptions,\n    });\n\n    return modifier;\n  }\n\n  setCharacterState = () => {\n    if (this.character !== undefined) {\n      let stats = this.character.getInnateStatsAt(this.state.characterLevel, this.state.isCharacterAscended);\n      let totalStats = this.getTotalStats();\n      let modifier = this.getDamageModifier();\n\n      let talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats,\n        modifier,\n      });\n\n      let talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats,\n        modifier,\n      });\n      \n      let talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats,\n        modifier,\n      });\n\n      this.setState({ \n        characterStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setWeaponState = () => {\n    if (this.weapon !== undefined) {\n      let stats = this.weapon.getStatsAt(this.state.weaponLevel, this.state.isweaponAscended);\n      let totalStats = this.getTotalStats();\n      let modifier = this.getDamageModifier();\n\n      let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n      if (this.character !== undefined) {\n        talentAttackDamage = this.character.getTalentDamageAt({\n          type: 'Attack', \n          talentLevel: this.state.talentAttackLevel, \n          totalStats,\n          modifier,\n        });\n  \n        talentSkillDamage = this.character.getTalentDamageAt({\n          type: 'Skill', \n          talentLevel: this.state.talentSkillLevel, \n          totalStats,\n          modifier,\n        });\n        \n        talentBurstDamage = this.character.getTalentDamageAt({\n          type: 'Burst', \n          talentLevel: this.state.talentBurstLevel, \n          totalStats,\n          modifier,\n        });\n      }\n\n      this.setState({ \n        weaponStats: stats,\n        totalStats: totalStats,\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  setArtifactState = (type) => {\n    let totalStats = this.getTotalStats();\n    let modifier = this.getDamageModifier();\n\n    let talentAttackDamage, talentSkillDamage, talentBurstDamage;\n    if (this.character !== undefined) {\n      talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats,\n        modifier,\n      });\n\n      talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats,\n        modifier,\n      });\n      \n      talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats,\n        modifier,\n      });\n    }\n\n    this.setState({\n      totalStats: totalStats,\n      talentAttackDamage: talentAttackDamage,\n      talentSkillDamage: talentSkillDamage,\n      talentBurstDamage: talentBurstDamage,\n    });\n  }\n\n  setTalentState = (type) => {\n    if (this.character !== undefined) {\n      let talentDmg = this.character.getTalentDamageAt({\n        type, \n        talentLevel: this.state[`talent${type}Level`], \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      this.setState({ [`talent${type}Damage`]: talentDmg });\n    }\n  }\n\n  // Not used in setCharacterState, setWeaponState, or setArtifactState to reduce number of setState calls\n  // Does not call setTalentState to reduce number of setState calls\n  setAllTalentState = () => {\n    if (this.character !== undefined) {\n      let talentAttackDamage = this.character.getTalentDamageAt({\n        type: 'Attack', \n        talentLevel: this.state.talentAttackLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      let talentSkillDamage = this.character.getTalentDamageAt({\n        type: 'Skill', \n        talentLevel: this.state.talentSkillLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n      \n      let talentBurstDamage = this.character.getTalentDamageAt({\n        type: 'Burst', \n        talentLevel: this.state.talentBurstLevel, \n        totalStats: this.state.totalStats,\n        modifier: this.getDamageModifier(),\n      });\n\n      this.setState({\n        talentAttackDamage: talentAttackDamage,\n        talentSkillDamage: talentSkillDamage,\n        talentBurstDamage: talentBurstDamage,\n      });\n    }\n  }\n\n  getTotalStats = () => {\n    let artifacts = [this.artifactFlower, this.artifactFeather, this.artifactSands, this.artifactGoblet, this.artifactCirclet];\n\n    let stats = statUtils.getTotalStatsAt(\n      this.weapon, \n      this.state.weaponLevel, \n      this.state.isWeaponAscended, \n      this.character,\n      this.state.characterLevel,\n      this.state.isCharacterAscended,\n      artifacts,\n    );\n\n    return stats;\n  }\n\n  renderCharacterStats = () => {\n    return (\n      this.character ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Character</Text>\n          {this.renderCharacterImage()}\n          <Text style={styles.resultText}>{this.character ? this.character.name : ''}</Text>\n          {\n            this.state.characterStats ? (\n              Object.entries(this.state.characterStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderWeaponStats = () => {\n    return (\n      this.weapon ? (\n        <View style={styles.resultBlock}>\n          <Text style={styles.titleText}>Weapon</Text>\n          <Text style={styles.resultText}>{this.weapon ? this.weapon.name : ''}</Text>\n          {\n            this.state.weaponStats ? (\n              Object.entries(this.state.weaponStats).map(([stat, value]) => {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              })\n            ) : null\n          }\n        </View>\n      ) : null\n    )\n  }\n\n  renderArtifactMainStat = (type) => {\n    return (\n      <View style={styles.inputRow}>\n        <Picker\n          selectedValue={this['artifact' + type].mainStat.stat}\n          onValueChange={(stat, _) => {\n            if (stat != 0) {\n              let mainStat = this['artifact' + type].mainStat;\n              this['artifact' + type].setStat(mainStat, stat, undefined, data.propMapping[stat].isPercentage);\n              // Update total stats\n              this.setArtifactState(type);\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {mainStatProps[type].map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n        </Picker>\n\n        <Text> : </Text>\n\n        <TextInput \n          style={styles.statInput} \n          onChangeText={text => {\n            let mainStat = this['artifact' + type].mainStat;\n            if (mainStat.stat) {\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), data.propMapping[mainStat.stat].isPercentage);\n            } else {\n              // If stat type is not yet set\n              this['artifact' + type].setStat(mainStat, undefined, parseFloat(text), false);\n            }\n\n            // Update total stats\n            this.setArtifactState(type);\n          }}\n        />\n      </View>\n    )\n  }\n\n  renderArtifactSubStats = (type) => {\n    return (\n      <View>\n        {\n          this['artifact' + type].subStats.map((subStat, index) => {\n            return (\n              <View style={styles.inputRow} key={index}>\n                <Picker\n                  selectedValue={subStat.stat}\n                  onValueChange={(stat, _) => {\n                    if (stat != 0) {\n                      this['artifact' + type].setStat(subStat, stat, undefined, data.propMapping[stat].isPercentage);     \n                      // Update total stats\n                      this.setArtifactState(type);\n                    }\n                  }}\n                >\n                  <Picker.Item label='' value={0} />\n                  {subStatProps.map(prop => <Picker.Item label={data.propMapping[prop].name} value={prop} key={prop} />)}\n                </Picker>\n\n                <Text> : </Text>\n\n                <TextInput \n                  style={styles.statInput} \n                  onChangeText={text => {\n                    let stat = subStat.stat;\n                    if (stat) {\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), data.propMapping[stat].isPercentage);\n                    } else {\n                      // If stat type is not yet set\n                      this['artifact' + type].setStat(subStat, undefined, parseFloat(text), false);\n                    }\n                    // Update total stats\n                    this.setArtifactState(type);\n                  }}\n                />\n              </View>\n            )\n          })\n        }\n      </View>\n    )\n  }\n\n  renderArtifactStat = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n\n        <Text style={styles.artifactStatType}>Main Stat</Text>\n        {this.renderArtifactMainStat(type)}\n\n        <Text style={styles.artifactStatType}>Substats</Text>\n        {this.renderArtifactSubStats(type)}\n      </View>\n    )\n  }\n\n  renderAllArtifactStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Artifacts</Text>\n        {this.renderArtifactStat('Flower')}\n        {this.renderArtifactStat('Feather')}\n        {this.renderArtifactStat('Sands')}\n        {this.renderArtifactStat('Goblet')}\n        {this.renderArtifactStat('Circlet', true)}\n      </View>\n    )\n  }\n\n  renderTotalStats = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Stat Total</Text>\n        {\n          this.state.totalStats ? (\n            Object.entries(this.state.totalStats).map(([stat, value]) => {\n              if (stat != 'baseAtk') {\n                return <Text style={styles.resultText} key={stat}>{data.propMapping[stat].name}: {statUtils.getStatDisplayValue(value, data.propMapping[stat].isPercentage)}</Text>\n              } else {\n                return null;\n              }\n            })\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  renderTalentDamage = (type, isLast = false) => {\n    return (\n      <View style={isLast ? styles.artifactBlockNoBorder : styles.artifactBlock}>\n        <Text style={styles.artifactType}>{type}</Text>\n        {\n          this.state['talent' + type + 'Damage'] ? (\n            this.state['talent' + type + 'Damage'].map(({description, damage}, index) => {\n              return (\n                <Text style={styles.resultText} key={index}>{statUtils.getTalentDescription(description)}: {statUtils.getDamageDisplayValue(damage)}</Text>\n              )\n            })\n          ) : null\n        }\n      </View>\n\n    )\n  }\n\n  renderTalentOptions = () => {\n    return (\n      <FlatList\n        data={this.state.talentOptions}\n        keyExtractor={item => item.id}\n        renderItem={({item, index}) => {\n          if (item.type === 'boolean') {\n            return (\n              <View style={styles.inputRow}>\n                <Text>{statUtils.getTalentOptionName(item.id)}: </Text>\n                <Checkbox\n                  onValueChange={value => {\n                    let talentOptions = [...this.state.talentOptions];\n                    talentOptions[index] = new TalentOption(item.id, item.type, value);\n                    this.setState({ talentOptions }, this.setAllTalentState);\n                  }}\n                  value={item.value}\n                />\n              </View>\n            );\n          } else {\n            return null;\n          }\n        }}\n      />\n    )\n  }\n\n  renderAllTalentDamage = () => {\n    return (\n      <View style={styles.resultBlockNoBorder}>\n        <Text style={styles.titleText}>Talents</Text>\n\n        {this.renderTalentDamage('Attack')}\n        {this.renderTalentDamage('Skill')}\n        {this.renderTalentDamage('Burst', true)}\n        {this.renderTalentOptions()}\n      </View>\n    )\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.inputColumn}>\n          {this.renderInputColumn()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderCharacterStats()}\n          {this.renderWeaponStats()}\n          {this.renderAllArtifactStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderTotalStats()}\n        </View>\n\n        <View style={styles.resultColumn}>\n          {this.renderAllTalentDamage()}\n        </View>\n\n        <View style={styles.fillerColumn}>\n        </View>\n\n      </View>\n    )\n  }\n}\n"],"sourceRoot":""}