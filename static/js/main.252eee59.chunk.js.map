{"version":3,"sources":["js/Data.ts","js/talent/types.ts","js/Resistance.ts","js/talent/DefaultTalent.ts","js/talent/Talent.ts","js/modifier/Reaction.ts","js/talent/AyakaTalent.ts","js/talent/JeanTalent.ts","js/talent/LisaTalent.ts","js/talent/BarbaraTalent.ts","js/talent/KaeyaTalent.ts","js/talent/DilucTalent.ts","js/talent/RazorTalent.ts","js/talent/AmberTalent.ts","js/talent/VentiTalent.ts","js/talent/XianglingTalent.ts","js/talent/BeidouTalent.ts","js/talent/XingqiuTalent.ts","js/talent/XiaoTalent.ts","js/talent/NingguangTalent.ts","js/talent/KleeTalent.ts","js/talent/ZhongliTalent.ts","js/talent/FischlTalent.ts","js/talent/BennettTalent.ts","js/talent/TartagliaTalent.ts","js/talent/NoelleTalent.ts","js/talent/QiqiTalent.ts","js/talent/ChongyunTalent.ts","js/talent/GanyuTalent.ts","js/talent/AlbedoTalent.ts","js/talent/DionaTalent.ts","js/talent/MonaTalent.ts","js/talent/KeqingTalent.ts","js/talent/SucroseTalent.ts","js/talent/XinyanTalent.ts","js/talent/RosariaTalent.ts","js/talent/HutaoTalent.ts","js/talent/KazuhaTalent.ts","js/talent/YanfeiTalent.ts","js/talent/YoimiyaTalent.ts","js/talent/EulaTalent.ts","js/talent/TalentUtil.ts","js/talent/RaidenTalent.ts","js/talent/SayuTalent.ts","js/talent/KokomiTalent.ts","js/option/Option.ts","js/option/artifactSetOptions/ArtifactSetOption.ts","js/option/artifactSetOptions/ArchaicPetraOption.ts","js/option/artifactSetOptions/BerserkerOption.ts","js/option/artifactSetOptions/BlizzardStrayerOption.ts","js/option/artifactSetOptions/BloodstainedChivalryOption.ts","js/option/artifactSetOptions/BraveHeartOption.ts","js/option/artifactSetOptions/CrimsonWitchOption.ts","js/option/artifactSetOptions/HeartOfDepthOption.ts","js/option/artifactSetOptions/InstructorOption.ts","js/option/artifactSetOptions/LavawalkerOption.ts","js/option/artifactSetOptions/MaidenBelovedOption.ts","js/option/artifactSetOptions/MartialArtistOption.ts","js/option/artifactSetOptions/NoblesseObligeOption.ts","js/option/artifactSetOptions/PaleFlameOption.ts","js/option/artifactSetOptions/RetracingBolideOption.ts","js/option/artifactSetOptions/ShimenawaOption.ts","js/option/artifactSetOptions/TenacityOption.ts","js/option/artifactSetOptions/ThundersootherOption.ts","js/option/artifactSetOptions/ViridescentVenererOption.ts","js/option/characterOptions/CharacterOption.ts","js/option/characterOptions/AyakaOption.ts","js/option/characterOptions/ChongyunOption.ts","js/option/characterOptions/DilucOption.ts","js/option/characterOptions/HuTaoOption.ts","js/option/characterOptions/ElementalAbsorptionOption.ts","js/option/characterOptions/KazuhaOption.ts","js/option/characterOptions/KokomiOption.ts","js/option/characterOptions/NoelleOption.ts","js/option/characterOptions/RaidenOption.ts","js/option/characterOptions/SayuOption.ts","js/option/characterOptions/SucroseOption.ts","js/option/characterOptions/index.ts","js/option/characterOptions/VentiOption.ts","js/option/characterOptions/XiaoOption.ts","js/option/characterOptions/YanfeiOption.ts","js/option/characterOptions/YoimiyaOption.ts","js/option/OptionUtils.ts","js/passive/characterPassives/CharacterPassive.ts","js/passive/characterPassives/YoimiyaPassive.ts","js/passive/characterPassives/RaidenPassive.ts","js/character/Character.ts","js/Stat.ts","js/artifact/types.ts","js/artifact/Artifact.ts","component/NumberInput.tsx","component/FloatInput.tsx","component/InputRow.tsx","component/IntInput.tsx","component/Picker.tsx","js/modifier/CritType.ts","component/ArtifactBlock.tsx","component/Column.tsx","component/ArtifactColumn.tsx","component/ArtifactSetPicker.tsx","component/Checkbox.tsx","component/OptionInput.tsx","component/ArtifactSetInputBlock.tsx","component/CharacterPicker.tsx","component/CharacterInputBlock.tsx","component/ModifierInputBlock.tsx","js/artifact/ArtifactSetBonus.ts","js/artifact/ArtifactSet.ts","js/weapon/Weapon.ts","component/SaveBlock.tsx","save/Save.ts","component/TalentInputBlock.tsx","component/WeaponPicker.tsx","component/WeaponInputBlock.tsx","component/InputColumn.tsx","component/ArtifactSetStatBlock.tsx","component/CharacterStatBlock.tsx","component/TotalStatBlock.tsx","component/WeaponStatBlock.tsx","component/StatColumn.tsx","component/TalentBlock.tsx","component/TalentColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortedCharacterList","sortedWeaponList","sortedArtifactSetList","propMapping","propMappingRaw","talentDescMapping","talentDescMappingRaw","optionMapping","optionMappingRaw","characterData","characterDataRaw","reduce","acc","charData","id","characterAscensionBonusData","rawData","characterId","ascensionBonusSet","map","bonusData","ascensionBonuses","processCharacterAscensionBonusData","characterAscensionBonusDataRaw","characterStatCurveData","curveData","level","statCurves","processCharacterStatCurveData","characterStatCurveDataRaw","weaponData","processWeaponData","weaponDataRaw","weaponAscensionBonusData","weaponId","processWeaponAscensionBonusData","weaponAscensionBonusDataRaw","weaponStatCurveData","processWeaponStatCurveData","weaponStatCurveDataRaw","talentData","talentDataRaw","talentDataSetRaw","talents","attack","curveAcc","params","skill","burst","passives","processTalentData","artifactSetData","setData","processArtifactSetData","artifactSetDataRaw","artifactSetBonusData","setId","setBonusSet","bonusAcc","bonusThreshold","processArtifactSetBonusData","artifactSetBonusDataRaw","artifactMainStatData","artifactMainStatDataRaw","getData","dataObj","getAscensionBonusData","getStatCurveAt","getCharacterData","getWeaponData","getAscensionBonusAt","getTalentData","emptyTalentParams","Array","fill","NaN","getTalentStatsAt","type","talentStats","undefined","getArtifactSetData","getArtifactSetBonusData","getArtifactSetBonusParams","pieces","bonusExtra","TalentType","Element","AttackType","ScalingType","Resistance","anemo","cryo","electro","geo","hydro","pyro","physical","_resistance","this","Map","set","Anemo","Cryo","Electro","Geo","Hydro","Pyro","Physical","element","get","value","isNaN","prevValue","defaultTalentFn","Reaction","defaultTalent","ayaka","stats","modifier","attackLightMulti","normalHits","chargedHits","infusion","slice","concat","skillDefault","burstBase","description","multiplier","jean","attackLightDefault","healingSkillBase","scalingType","Attack","lisa","talentDmg","push","skillBase","i","burstDefault","barbara","kaeya","diluc","attackHeavyDefault","talentDamage","razor","attackParams","talentAttackLevel","amber","attackBowDefault","chargedElement","hpBase","flatBonus","damage","venti","talentValues","elementalAbsorption","xiangling","beidou","shieldBase","xingqiu","skillMultiBase","hits","xiao","ningguang","normalAtkDmg","calculateTotalDamage","attackType","Normal","chargedAttackDefault","starJadeDmg","Charged","plungeAttackDefault","klee","zhongli","fischl","bennett","atkBonus","baseAtk","tartaglia","riptideFlashDmg","riptideBurstDmg","normalAttackMulti","chargedAttackMulti","noelle","skillDamage","Defense","Skill","qiqi","chongyun","ganyu","normalAttackDefault","aimedShotDmg","chargedDmg","albedo","transientBlossomDmg","diona","holdModifier","dionaHoldSkill","mona","modifiedStats","dmgBonus","keqing","hit4Dmg","hit5Dmg","consecutiveSlashDmg","Burst","sucrose","xinyan","rosaria","burstMultiBase","hutao","hit6Dmg","forEach","kazuha","hit3Dmg","hit5DmgSingle","infusionPlunge","yanfei","yoimiya","normalAttackParams","yoimiyaSkill","skillParams","talentSkillLevel","param","chargedAimedShotDmg","kindlingArrowDmg","eula","length","chargedAttackHeavy","attackHeavyMulti","lightfallSwordParams","lightfallSwordTalent","raiden","newStats","resolveBonus","resolveStacks","sayu","elementalParams","kokomi","kokomiBurst","burstParams","talentBurstLevel","normalAttackDmg","normalBonusDmg","Hp","talentValue","chargedAttackDmg","chargedBonusDmg","rippleDmg","bonusDmg","burstDmg","calculateBaseDamage","flatDmg","flatAtk","flatDef","flatHp","calculateReactionMultiplier","reaction","reactionBonus","amplifyingMultiplier","triggerElement","Melt","Vaporize","calculateAmplifyingMultiplier","elementalMastery","baseDmg","getDamageBonus","crit","critType","critDmg","critRate","chargedCritRate","Math","min","characterLevel","enemyLevel","enemyDefReduction","res","resReduction","totalRes","calculateResMultiplier","enemyRes","enemyResReduction","calculateHp","hitCount","damages","hit","Plunge","aimShotDefault","flatHealing","calculateHealing","dmgAbsorption","shieldStrength","calculateDmgAbsorption","Option","ArtifactSetOption","threshold","archaicPetraOptions","choices","applyOnStats","berserkerOptions","blizzardStrayerOptions","bloodstainedChivalryOptions","chargedDmgBonus","braveHeartOptions","crimsonWitchOptions","bonuses","find","stat","stacks","pyroDmgBonus","heartOfDepthOptions","normalDmgBonus","instructorOptions","lavawalkerOptions","maidenBelovedOptions","healedBonus","martialArtistOptions","noblesseObligeOptions","paleFlameOptions","physicalDmgBonus","retracingBolideOptions","shimenawaOptions","plungeDmgBonus","tenacityOptions","thundersootherOptions","viridescentVenererOptions","applyOnModifier","add","CharacterOption","ayakaOptions","chongyunOptions","dilucOptions","_talentAttackLevel","_talentSkillLevel","_talentBurstLevel","ascensionLevel","passiveData","hutaoOptions","totalHp","baseHp","hpBonus","ElementalAbsoprtionOption","kazuhaOptions","kokomiOptions","noelleOptions","totalDef","baseDef","defBonus","raidenOptions","burstDmgBonus","sayuOptions","sucroseOptions","characterOptions","defaultOptions","isBooleanOption","option","isPickerOption","isNumberOption","isStatsApplicable","isModifierApplicable","getOptionValue","setOptionValue","includes","characterPassives","Yoimiya_PermanentSkill_1","options","Shougun_PermanentSkill_2","statMixin","energyRecharge","electroDmgBonus","defaultPassiveFn","Character","hasAscended","_id","name","baseStats","statCurveMapping","_level","_hasAscended","innateStats","passiveOptions","data","getInnateStatsAt","getCharacterOptions","getAscensionLevel","getPassives","getPassiveOptions","prevAscensionLevel","Object","keys","obj","charStatCurves","entries","curve","bonus","talentLevel","totalStats","getTalentFn","damageFn","filter","flatMap","passiveId","getCharacterPassiveFn","oldOptionIds","newOptions","keptOptionIds","mixin","modifierMixin","getStatDisplayValue","prop","isPercentage","toFixed","round","toString","getDamageDisplayValue","values","str","every","getOptionName","convertStatValue","getTotalStatsAt","character","weapon","artifactSetBonuses","artifacts","statMixins","characterStats","weaponStats","getBaseStatsAt","combinedStats","artifactStats","artifact","getStats","anemoDmgBonus","cryoDmgBonus","geoDmgBonus","hydroDmgBonus","anemoRes","cryoRes","electroRes","geoRes","hydroRes","pyroRes","physicalRes","healingBonus","skillDmgBonus","capitalize","toUpperCase","ArtifactType","InputStat","rawValue","Artifact","rarity","mainStatProp","_rarity","mainStat","subStats","updateMainStat","setMainStatValue","getArtifactMainStatValue","setProp","setValue","subStat","mainStatProps","flower","feather","sands","goblet","circlet","subStatProps","NumberInput","state","props","defaultValue","isControlled","isLabelShown","onChangeDefault","e","parseInt","currentTarget","setState","parseInput","Number","handleInput","onInput","displayString","htmlFor","className","label","React","Component","FloatInput","parseFloat","InputRow","children","IntInput","Picker","selectedValue","target","handleChange","onChange","Item","CritType","ArtifactBlock","setArtifactMainStatProp","setMainStatProp","updateArtifactState","setArtifactRarity","setArtifactLevel","setArtifactSubStatProp","setSubStatProp","setArtifactSubStatValue","setSubStatValue","statObj","Column","ArtifactColumn","appState","updateTotalStats","setAppState","ArtifactSetPicker","setArtifactSetId","index","artifactSetId","sort","name1","name2","localeCompare","Checkbox","checked","OptionInput","handleBooleanChange","updateOptions","handlePickerChange","handleNumberChange","choice","ArtifactSetInputBlock","artifactSets","artifactSetOptions","artifactSet","updateArtifactSetBonuses","setArtifactSetPieces","CharacterPicker","setCharacterId","CharacterInputBlock","getOptions","setCharacterLevel","setIsCharacterAscended","isAscended","ModifierInputBlock","setEnemyLevel","updateTalentValues","setEnemyRes","setCritType","setReaction","ToggleButtonGroup","size","ToggleButton","variant","None","defaultSetBonus","Relic_ExtraAtkCritUp","extraStatsFn","Relic_AllElemResistUp","Relic_AtkAndExtraAtkUp","Relic_SkillDamageUp","Relic_MeleeAttackUp","Relci_RangerAttackUp","Relic_ElementalBurstUp","Relic_ElementalBurstUpByChargeEfficiency","Relic_GiantKiller","Relic_LowHPGainExtraCritRate","Relic_SkillEnhanceNormalAtkAndExtraAtk","Relic_ReactionGainExtraElemMasteryForTeam","Relic_CriticUpAgainstIceAndFrozen","Relic_DamageUpAgainstElectric","Relic_DamageUpAgainstFireAndBurning","Relic_SkillEnhanceCured","Relic_TeamAtkupAfterElementalBurst","Relic_KillEnhanceExtraAtk","Relic_ElementDmgUpAfterCrystalShield","Relic_ShieldEnhanceAtk","Relic_WaterSkillEnhanceNormalAtkAndExtraAtk","Relic_ShieldCostUpWhenElementalArtHit","Relic_AttackUpWhenNormalAtkAndExtraAtkHit","Relic_NormalDamageUpIfCostEnergy","Relic_ReactionWindEnhance","Relic_ReactionFireEnhance","Relic_ReactionElectricEnhance","Relic_AbsorbTeamElemResist","Relic_ElemDmgEnhanceElemResist","Relic_KillingRefreshSkill","Relic_UltGainEnergyForTeam","Relic_RestoreEnergyGainExtraEnergyForTeam","Relic_ChestHealSelf","Relic_CoinHealSelf","Relic_UltHealSelf","Relic_FireResistance","Relic_WaterResistance","Relic_ElectricResistance","Relic_IceResistance","ArtifactSet","bonusThresholds","setBonusData","_pieces","setBonusSets","setBonuses","getSetBonusSetsAt","getSetBonuses","prevPieces","setBonus","statBonus","extraBonus","extraBonusSet","extraBonuses","setBonusType","Weapon","rank","_weaponLevel","getStatsAt","weaponLevel","weaponStatCurves","SaveBlock","onSaveClick","saveInputName","save","characterHasAscended","weaponHasAscended","artifactSetPieces","saves","window","localStorage","setItem","JSON","stringify","addSave","onSaveInputChange","onLoadClick","selectedSave","refreshApp","savedArtifact","artifactType","characterOption","artifactSetOption","loadSave","onLoadInputChange","onDeleteClick","showDeleteWarning","onModalConfirm","deleteSave","onModalHide","getItem","parse","Button","onClick","Form","Control","placeholder","Modal","show","onHide","Body","Footer","TalentInputBlock","setTalentAttackLevel","setTalentSkillLevel","setTalentBurstLevel","WeaponPicker","setWeaponId","WeaponInputBlock","setWeaponLevel","setIsWeaponAscended","InputColumn","ArtifactSetStatBlock","CharacterStatBlock","isDefined","src","width","height","alt","TotalStatBlock","WeaponStatBlock","StatColumn","TalentBlock","TalentColumn","App","modifierMixins","callback","newArtifactSets","getStatMixins","newChar","getModifierMixins","damageModifer","getDamageModifier","getTalentDamageAt","characterPassiveMixins","getPassiveModifierMixins","artifactSetMixins","characterOptionMixins","artifactSetOptionMixins","getPassiveStatMixins","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.252eee59.chunk.js","sourcesContent":["import type * as Data from '../data/types';\nimport type { TalentType } from './talent/types';\n\nimport characterDataRaw from '../data/characterdata.json';\nimport characterAscensionBonusDataRaw from '../data/characterascensionbonusdata.json';\nimport characterStatCurveDataRaw from '../data/characterstatcurvedata.json';\nimport weaponDataRaw from '../data/weapondata.json';\nimport weaponAscensionBonusDataRaw from '../data/weaponascensionbonusdata.json';\nimport weaponStatCurveDataRaw from '../data/weaponstatcurvedata.json';\nimport talentDataRaw from '../data/talentdata.json';\nimport artifactSetDataRaw from '../data/artifactsetdata.json';\nimport artifactSetBonusDataRaw from '../data/artifactsetbonusdata.json';\nimport artifactMainStatDataRaw from '../data/artifactmainstatdata.json';\n\nimport propMappingRaw from '../data/propmapping.json';\nimport talentDescMappingRaw from '../data/talentdescmapping.json';\nimport optionMappingRaw from '../data/optionmapping.json';\n\n// Mappings\nexport const propMapping = propMappingRaw as Data.PropMapping;\nexport const talentDescMapping = talentDescMappingRaw as Data.LanguageMapping;\nexport const optionMapping = optionMappingRaw as Data.LanguageMapping;\n\n// Pre-processed data, coverting from arrays to objects (map-like) for faster lookup\nconst characterData = processCharacterData(\n  characterDataRaw as Data.CharacterData[]\n);\nconst characterAscensionBonusData = processCharacterAscensionBonusData(\n  characterAscensionBonusDataRaw as Data.CharacterAscensionBonusDataRaw[]\n);\nconst characterStatCurveData = processCharacterStatCurveData(\n  characterStatCurveDataRaw as Data.StatCurveData[]\n);\nconst weaponData = processWeaponData(\n  weaponDataRaw as unknown as Data.WeaponData[]\n);\nconst weaponAscensionBonusData = processWeaponAscensionBonusData(\n  weaponAscensionBonusDataRaw as Data.WeaponAscensionBonusDataRaw[]\n);\nconst weaponStatCurveData = processWeaponStatCurveData(\n  weaponStatCurveDataRaw as Data.StatCurveData[]\n);\nconst talentData = processTalentData(\n  talentDataRaw as Data.CharacterTalentDataRaw[]\n);\nconst artifactSetData = processArtifactSetData(\n  artifactSetDataRaw as Data.ArtifactSetData[]\n);\nconst artifactSetBonusData = processArtifactSetBonusData(\n  artifactSetBonusDataRaw as Data.ArtifactSetBonusDataRaw[]\n);\nconst artifactMainStatData =\n  artifactMainStatDataRaw as Data.ArtifactMainStatData;\n\n// Pre-processed data, lists\nlet sortedCharacterList: string[]; // lazy loading implemented with getSortedCharacterList()\nlet sortedWeaponList: string[]; // lazy loading implemented with getSortedWeaponList()\nlet sortedArtifactSetList: string[]; // lazy loading implemented with getSortedArtifactSetList()\n\n// Functions for pre-processing data\nfunction processCharacterData(rawData: Data.CharacterData[]) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.id] = charData;\n    return acc;\n  }, {} as Record<string, Data.CharacterData>);\n}\n\nfunction processCharacterAscensionBonusData(\n  rawData: Data.CharacterAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, charData) => {\n    acc[charData.characterId] = charData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processCharacterStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processWeaponData(rawData: Data.WeaponData[]) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.id] = weaponData;\n    return acc;\n  }, {} as Record<string, Data.WeaponData>);\n}\n\nfunction processWeaponAscensionBonusData(\n  rawData: Data.WeaponAscensionBonusDataRaw[]\n) {\n  return rawData.reduce((acc, weaponData) => {\n    acc[weaponData.weaponId] = weaponData.ascensionBonusSet.map(\n      (bonusData) => bonusData.ascensionBonuses\n    );\n    return acc;\n  }, {} as Record<string, Data.AscensionBonus[]>);\n}\n\nfunction processWeaponStatCurveData(rawData: Data.StatCurveData[]) {\n  return rawData.reduce((acc, curveData) => {\n    acc[curveData.level] = curveData.statCurves;\n    return acc;\n  }, {} as Record<number, Data.StatCurves>);\n}\n\nfunction processTalentData(rawData: Data.CharacterTalentDataRaw[]) {\n  return rawData.reduce((acc, talentDataRaw) => {\n    const talentDataSetRaw = talentDataRaw.talents;\n\n    let talentData: Data.TalentDataSet = {\n      attack: talentDataSetRaw.attack.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      skill: talentDataSetRaw.skill.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      burst: talentDataSetRaw.burst.reduce((curveAcc, curveData) => {\n        curveAcc[curveData.level] = curveData.params;\n        return curveAcc;\n      }, {} as Data.TalentData),\n\n      passives: talentDataSetRaw.passives,\n    };\n\n    acc[talentDataRaw.characterId] = talentData;\n    return acc;\n  }, {} as Record<string, Data.TalentDataSet>);\n}\n\nfunction processArtifactSetData(rawData: Data.ArtifactSetData[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.id] = setData;\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetData>);\n}\n\nfunction processArtifactSetBonusData(rawData: Data.ArtifactSetBonusDataRaw[]) {\n  return rawData.reduce((acc, setData) => {\n    acc[setData.setId] = setData.setBonusSet.reduce((bonusAcc, bonusData) => {\n      bonusAcc[bonusData.bonusThreshold] = bonusData;\n      return bonusAcc;\n    }, {} as Record<number, Data.ArtifactSetBonusSet>);\n    return acc;\n  }, {} as Record<string, Data.ArtifactSetBonusData>);\n}\n\n// Helper functions for accessing data properties\nfunction getData<T>(id: string, dataObj: Record<string, T>) {\n  return dataObj[id];\n}\n\nfunction getAscensionBonusData(\n  id: string,\n  dataObj: Record<string, Data.AscensionBonus[]>\n) {\n  return dataObj[id];\n}\n\nfunction getStatCurveAt(\n  level: number,\n  statCurves: Record<number, Data.StatCurves>\n) {\n  return statCurves[level];\n}\n\n// \"Public\" functions for accessing data properties\nexport function getCharacterData(id: string): Data.CharacterData {\n  return getData(id, characterData);\n}\n\nexport function getCharacterAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, characterAscensionBonusData);\n}\n\nexport function getCharacterStatCurveAt(level: number) {\n  return getStatCurveAt(level, characterStatCurveData);\n}\n\nexport function getWeaponData(id: string): Data.WeaponData {\n  return getData(id, weaponData);\n}\n\nexport function getWeaponAscensionBonusData(id: string) {\n  return getAscensionBonusData(id, weaponAscensionBonusData);\n}\n\nexport function getWeaponStatCurveAt(level: number) {\n  return getStatCurveAt(level, weaponStatCurveData);\n}\n\nexport function getAscensionBonusAt(\n  level: number,\n  ascensionBonuses: Data.AscensionBonus[]\n) {\n  return ascensionBonuses[level];\n}\n\nexport function getTalentData(id: string) {\n  return talentData[id];\n}\n\nconst emptyTalentParams: number[] = Array(19).fill(NaN);\n\nexport function getTalentStatsAt(\n  type: TalentType,\n  level: number,\n  talents: Data.TalentDataSet\n) {\n  const talentStats = talents[type][level];\n  if (talentStats !== undefined) {\n    return talentStats;\n  } else {\n    return emptyTalentParams;\n  }\n}\n\nexport function getArtifactSetData(id: string): Data.ArtifactSetData {\n  return getData(id, artifactSetData);\n}\n\nexport function getArtifactSetBonusData(id: string): Data.ArtifactSetBonusData {\n  return getData(id, artifactSetBonusData);\n}\n\nexport function getArtifactSetBonusParams(id: string, pieces: number) {\n  const params = getArtifactSetBonusData(id)?.[pieces]?.bonusExtra?.params;\n  return params ?? emptyTalentParams;\n}\n\nexport function getArtifactMainStatValue(\n  rarity: number,\n  level: number,\n  prop: string\n) {\n  return artifactMainStatData[rarity]?.[level]?.[prop] ?? NaN;\n}\n\n// \"Public\" functions for getting data collections\nexport function getSortedCharacterList() {\n  if (sortedCharacterList === undefined) {\n    sortedCharacterList = Object.entries(characterData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedCharacterList;\n}\n\nexport function getSortedWeaponList() {\n  if (sortedWeaponList === undefined) {\n    sortedWeaponList = Object.entries(weaponData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedWeaponList;\n}\n\nexport function getSortedArtifactSetList() {\n  if (sortedArtifactSetList === undefined) {\n    sortedArtifactSetList = Object.entries(artifactSetData)\n      .sort(([_1, { name: name1 }], [_2, { name: name2 }]) =>\n        name1.localeCompare(name2)\n      )\n      .map(([id, _]) => id);\n  }\n\n  return sortedArtifactSetList;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport DamageModifier from '../modifier/DamageModifer';\n\nexport interface TalentValue {\n  description: string;\n  damage: number[];\n}\n\nexport interface TalentValueSet {\n  attack: TalentValue[];\n  skill: TalentValue[];\n  burst: TalentValue[];\n}\n\nexport interface TalentProps {\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}\n\nexport enum TalentType {\n  Attack = 'attack',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum Element {\n  Anemo = 'anemo',\n  Cryo = 'cryo',\n  Electro = 'electro',\n  Geo = 'geo',\n  Hydro = 'hydro',\n  Pyro = 'pyro',\n  Physical = 'physical',\n}\n\nexport enum AttackType {\n  Normal = 'normal',\n  Charged = 'charged',\n  Plunge = 'plunge',\n  Skill = 'skill',\n  Burst = 'burst',\n}\n\nexport enum ScalingType {\n  Attack = 'attack',\n  Defense = 'defense',\n  Hp = 'hp',\n}\n","import { Element } from './talent/types';\n\nexport default class Resistance {\n  private _resistance: Map<Element, number>;\n\n  constructor({\n    anemo = 0,\n    cryo = 0,\n    electro = 0,\n    geo = 0,\n    hydro = 0,\n    pyro = 0,\n    physical = 0,\n  } = {}) {\n    this._resistance = new Map();\n    this._resistance.set(Element.Anemo, anemo);\n    this._resistance.set(Element.Cryo, cryo);\n    this._resistance.set(Element.Electro, electro);\n    this._resistance.set(Element.Geo, geo);\n    this._resistance.set(Element.Hydro, hydro);\n    this._resistance.set(Element.Pyro, pyro);\n    this._resistance.set(Element.Physical, physical);\n  }\n\n  get(element: Element) {\n    return this._resistance.get(element) ?? NaN;\n  }\n\n  set(element: Element, value: number) {\n    this._resistance.set(element, value);\n  }\n\n  add(element: Element, value: number) {\n    if (!isNaN(value)) {\n      const prevValue = this._resistance.get(element) ?? 0;\n      this._resistance.set(element, prevValue + value);\n    }\n  }\n}\n","import Talent from './Talent';\nimport { TalentValue } from './types';\n\nconst defaultTalent: Talent = {\n  attack: defaultTalentFn,\n  skill: defaultTalentFn,\n  burst: defaultTalentFn,\n};\n\nexport default defaultTalent;\n\n// Placeholder function\nexport function defaultTalentFn(): TalentValue[] {\n  return [];\n}\n","import { TalentProps, TalentValue } from './types';\n\nimport defaultTalent from './DefaultTalent';\nimport lisaTalent from './LisaTalent';\nimport barbaraTalent from './BarbaraTalent';\nimport kaeyaTalent from './KaeyaTalent';\nimport dilucTalent from './DilucTalent';\nimport razorTalent from './RazorTalent';\nimport amberTalent from './AmberTalent';\nimport ventiTalent from './VentiTalent';\nimport xianglingTalent from './XianglingTalent';\nimport beidouTalent from './BeidouTalent';\nimport xingqiuTalent from './XingqiuTalent';\nimport xiaoTalent from './XiaoTalent';\nimport ningguangTalent from './NingguangTalent';\nimport kleeTalent from './KleeTalent';\nimport zhongliTalent from './ZhongliTalent';\nimport fischlTalent from './FischlTalent';\nimport bennettTalent from './BennettTalent';\nimport tartagliaTalent from './TartagliaTalent';\nimport noelleTalent from './NoelleTalent';\nimport qiqiTalent from './QiqiTalent';\nimport chongyunTalent from './ChongyunTalent';\nimport ganyuTalent from './GanyuTalent';\nimport albedoTalent from './AlbedoTalent';\nimport dionaTalent from './DionaTalent';\nimport monaTalent from './MonaTalent';\nimport keqingTalent from './KeqingTalent';\nimport sucroseTalent from './SucroseTalent';\nimport xinyanTalent from './XinyanTalent';\nimport rosariaTalent from './RosariaTalent';\nimport hutaoTalent from './HutaoTalent';\nimport yanfeiTalent from './YanfeiTalent';\nimport eulaTalent from './EulaTalent';\nimport jeanTalent from './JeanTalent';\nimport ayakaTalent from './AyakaTalent';\nimport yoimiyaTalent from './YoimiyaTalent';\nimport sayuTalent from './SayuTalent';\nimport kazuhaTalent from './KazuhaTalent';\nimport raidenTalent from './RaidenTalent';\nimport kokomiTalent from './KokomiTalent';\n\nexport default interface Talent {\n  attack: (props: TalentProps) => TalentValue[];\n  skill: (props: TalentProps) => TalentValue[];\n  burst: (props: TalentProps) => TalentValue[];\n}\n\nexport const talents: Record<string, Talent> = {\n  defaultTalent,\n  ayaka: ayakaTalent,\n  jean: jeanTalent,\n  lisa: lisaTalent,\n  barbara: barbaraTalent,\n  kaeya: kaeyaTalent,\n  diluc: dilucTalent,\n  razor: razorTalent,\n  amber: amberTalent,\n  venti: ventiTalent,\n  xiangling: xianglingTalent,\n  beidou: beidouTalent,\n  xingqiu: xingqiuTalent,\n  xiao: xiaoTalent,\n  ningguang: ningguangTalent,\n  klee: kleeTalent,\n  zhongli: zhongliTalent,\n  fischl: fischlTalent,\n  bennett: bennettTalent,\n  tartaglia: tartagliaTalent,\n  noelle: noelleTalent,\n  qiqi: qiqiTalent,\n  chongyun: chongyunTalent,\n  ganyu: ganyuTalent,\n  albedo: albedoTalent,\n  diona: dionaTalent,\n  mona: monaTalent,\n  keqing: keqingTalent,\n  sucrose: sucroseTalent,\n  xinyan: xinyanTalent,\n  rosaria: rosariaTalent,\n  hutao: hutaoTalent,\n  kazuha: kazuhaTalent,\n  yanfei: yanfeiTalent,\n  yoimiya: yoimiyaTalent,\n  eula: eulaTalent,\n  raiden: raidenTalent,\n  sayu: sayuTalent,\n  kokomi: kokomiTalent,\n};\n","enum Reaction {\r\n  None = 'None',\r\n  Swirl = 'Swirl',\r\n  Crystallize = 'Crystallize',\r\n  Melt = 'Melt',\r\n  Vaporize = 'Vaporize',\r\n  Overload = 'Overload',\r\n  Superconduct = 'Superconduct',\r\n  Electrocharged = 'Electrocharged',\r\n  Frozen = 'Frozen',\r\n}\r\n\r\nexport default Reaction;\r\n","import Talent from './Talent';\nimport { attackLightMulti, burstBase, skillDefault } from './TalentUtil';\nimport { Element, TalentProps } from './types';\n\nconst ayakaTalent: Talent = {\n  attack: ayakaAttack,\n  skill: ayakaSkill,\n  burst: ayakaBurst,\n};\n\nexport default ayakaTalent;\n\nfunction ayakaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 3, 1],\n    chargedHits: 3,\n    element: modifier.infusion ?? Element.Physical,\n    params: params\n      .slice(0, 4)\n      .concat([params[6], params[7], params[7]])\n      .concat(params.slice(7, 12)),\n    stats,\n    modifier,\n  });\n}\n\nfunction ayakaSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction ayakaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'cuttingDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'bloomDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightDefault,\n  burstBase,\n  healingSkillBase,\n  skillDefault,\n} from './TalentUtil';\nimport { Element, ScalingType, TalentProps } from './types';\n\nconst jeanTalent: Talent = {\n  attack: jeanAttack,\n  skill: jeanSkill,\n  burst: jeanBurst,\n};\n\nexport default jeanTalent;\n\nfunction jeanAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({ normalHits: 5, params, stats, modifier });\n}\n\nfunction jeanSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({ element: Element.Anemo, params, stats, modifier });\n}\n\nfunction jeanBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'fieldEnterExitDmg',\n      element: Element.Anemo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'fieldActivationHealing',\n      scalingType: ScalingType.Attack,\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      scalingType: ScalingType.Attack,\n      params: params.slice(4, 6),\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst lisaTalent: Talent = {\n  attack: lisaAttack,\n  skill: lisaSkill,\n  burst: lisaBurst,\n};\n\nexport default lisaTalent;\n\nfunction lisaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction lisaSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  talentDmg.push(\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Electro,\n      multiplier: params[5],\n      stats,\n      modifier,\n    })\n  );\n\n  for (let i = 0; i <= 3; i++) {\n    talentDmg.push(\n      skillBase({\n        description: `holdDmgStack${i}`,\n        element: Element.Electro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDmg;\n}\n\nfunction lisaBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackLightDefault, healingSkillBase, skillBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst barbaraTalent: Talent = {\n  attack: barbaraAttack,\n  skill: barbaraSkill,\n  burst: barbaraBurst,\n};\n\nexport default barbaraTalent;\n\nfunction barbaraAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Hydro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction barbaraSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      params: params.slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenOnHit',\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'dropletDmg',\n      element: Element.Hydro,\n      multiplier: params[4],\n      stats,\n      modifier,\n    }),\n  ];\n\n  return talentDmg;\n}\n\nfunction barbaraBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    healingSkillBase({\n      description: 'hpRegen',\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillDefault, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst kaeyaTalent: Talent = {\n  attack: kaeyaAttack,\n  skill: kaeyaSkill,\n  burst: kaeyaBurst,\n};\n\nexport default kaeyaTalent;\n\nfunction kaeyaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kaeyaSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kaeyaBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Cryo,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackHeavyDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst dilucTalent: Talent = {\n  attack: dilucAttack,\n  skill: dilucSkill,\n  burst: dilucBurst,\n};\n\nexport default dilucTalent;\n\nfunction dilucAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction dilucSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      skillBase({\n        description: `${i + 1}HitDmg`,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDamage;\n}\n\nfunction dilucBurst({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['slashingDmg', 'dot', 'explosionDmg'];\n  let talentDamage = descriptions.map((description, i) => {\n    return burstBase({\n      description,\n      element: Element.Pyro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  return talentDamage;\n}\n","import { getTalentStatsAt, getTalentData } from '../Data';\nimport Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  skillBase,\n  burstDefault,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, TalentType, Element } from './types';\n\nconst razorTalent: Talent = {\n  attack: razorAttack,\n  skill: razorSkill,\n  burst: razorBurst,\n};\n\nexport default razorTalent;\n\nfunction razorAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 4,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction razorSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['pressDmg', 'holdDmg'];\n  return descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n}\n\nfunction razorBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = burstDefault({\n    element: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n\n  let attackParams = getTalentStatsAt(\n    TalentType.Attack,\n    modifier.talentAttackLevel,\n    getTalentData('razor')\n  );\n\n  for (let i = 0; i < 4; i++) {\n    talentDamage.push(\n      burstBase({\n        description: `${i + 1}HitDmgSoulCompanion`,\n        element: Element.Electro,\n        multiplier: params[1] * attackParams[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, hpBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst amberTalent: Talent = {\n  attack: amberAttack,\n  skill: amberSkill,\n  burst: amberBurst,\n};\n\nexport default amberTalent;\n\nfunction amberAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction amberSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Electro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    hpBase({\n      description: 'baronBunnyHp',\n      multiplier: params[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction amberBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'dmgPerWave',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push({\n    description: 'totalDmg',\n    damage: [talentDamage[0].damage[0] * 18],\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst ventiTalent: Talent = {\n  attack: ventiAttack,\n  skill: ventiSkill,\n  burst: ventiBurst,\n};\n\nexport default ventiTalent;\n\nfunction ventiAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 6,\n    chargedElement: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction ventiSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'holdDmg',\n      element: Element.Anemo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction ventiBurst({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n  talentValues.push(\n    burstBase({\n      description: 'dot',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[1],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentValues;\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xianglingTalent: Talent = {\n  attack: xianglingAttack,\n  skill: xianglingSkill,\n  burst: xianglingBurst,\n};\n\nexport default xianglingTalent;\n\nfunction xianglingAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 4, 1],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xianglingSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'guobaDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction xianglingBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      burstBase({\n        description: `swing${i + 1}HitDmg`,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentDamage.push(\n    burstBase({\n      description: 'pyronadoDmg',\n      element: Element.Pyro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  shieldBase,\n  skillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst beidouTalent: Talent = {\n  attack: beidouAttack,\n  skill: beidouSkill,\n  burst: beidouBurst,\n};\n\nexport default beidouTalent;\n\nfunction beidouAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 5,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction beidouSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[0],\n      flatBonus: params[1],\n      element: Element.Electro,\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'baseDmg',\n      element: Element.Electro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'dmgBonusOnHitTaken',\n      element: Element.Electro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction beidouBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'skillDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    burstBase({\n      description: 'lightningDmg',\n      element: Element.Electro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackLightMulti, skillMultiBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xingqiuTalent: Talent = {\n  attack: xingqiuAttack,\n  skill: xingqiuSkill,\n  burst: xingqiuBurst,\n};\n\nexport default xingqiuTalent;\n\nfunction xingqiuAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 1, 2],\n    chargedHits: 2,\n    params: params\n      .slice(0, 3)\n      .concat(params.slice(4, 6))\n      .concat(params.slice(7)),\n    stats,\n    modifier,\n  });\n}\n\nfunction xingqiuSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillMultiBase({\n      description: 'skillDmg',\n      hits: 2,\n      element: Element.Hydro,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction xingqiuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'swordRainDmg',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import { defaultTalentFn } from './DefaultTalent';\nimport Talent from './Talent';\nimport { attackLightMulti, skillDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst xiaoTalent: Talent = {\n  attack: xiaoAttack,\n  skill: xiaoSkill,\n  burst: xiaoBurst,\n};\n\nexport default xiaoTalent;\n\nfunction xiaoAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  return attackLightMulti({\n    normalHits: [2, 1, 1, 2, 1, 1],\n    element,\n    params: params.slice(1, 5).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction xiaoSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xiaoBurst({ params, stats, modifier }: TalentProps) {\n  return defaultTalentFn();\n}\n","import Talent from './Talent';\nimport {\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillBase,\n  hpBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst ningguangTalent: Talent = {\n  attack: ningguangAttack,\n  skill: ningguangSkill,\n  burst: ningguangBurst,\n};\n\nexport default ningguangTalent;\n\nfunction ningguangAttack({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  // Ningguang's normal attack has no combo\n  let normalAtkDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element: Element.Geo,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'normalAtkDmg',\n    damage: [normalAtkDmg],\n  });\n\n  talentDmg.push(\n    ...chargedAttackDefault({\n      element: Element.Geo,\n      params: params.slice(1, 2),\n      stats,\n      modifier,\n    })\n  );\n\n  // Ningguang's charged attack dmg per star jade\n  let starJadeDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[2],\n    element: Element.Geo,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'starJadeDmg',\n    damage: [starJadeDmg],\n  });\n\n  talentDmg.push(\n    ...plungeAttackDefault({\n      element: Element.Geo,\n      params: params.slice(4),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDmg;\n}\n\nfunction ningguangSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    hpBase({\n      description: 'jadeScreenHp',\n      multiplier: params[2],\n      flatBonus: 0,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction ningguangBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'dmgPerGem',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst kleeTalent: Talent = {\n  attack: kleeAttack,\n  skill: kleeSkill,\n  burst: kleeBurst,\n};\n\nexport default kleeTalent;\n\nfunction kleeAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 3,\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction kleeSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'jumpyDumptyDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'mineDmg',\n      element: Element.Pyro,\n      multiplier: params[3],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction kleeBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'sparksNSplashDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  shieldBase,\n  burstDefault,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst zhongliTalent: Talent = {\n  attack: zhongliAttack,\n  skill: zhongliSkill,\n  burst: zhongliBurst,\n};\n\nexport default zhongliTalent;\n\nfunction zhongliAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 4, 1],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction zhongliSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['stoneSteeleDmg', 'resonanceDmg'];\n\n  let talentDamage = descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Geo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDamage.push(\n    skillBase({\n      description: 'holdDmg',\n      element: Element.Geo,\n      multiplier: params[3],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[5],\n      flatBonus: params[4],\n      element: Element.Geo,\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction zhongliBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Geo,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport { attackBowDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst fischlTalent: Talent = {\n  attack: fischlAttack,\n  skill: fischlSkill,\n  burst: fischlBurst,\n};\n\nexport default fischlTalent;\n\nfunction fischlAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Electro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction fischlSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['ozDmg', 'summoningDmg'];\n  return descriptions.map((description, i) =>\n    skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n}\n\nfunction fischlBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'fallingThunderDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  skillMultiBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst bennettTalent: Talent = {\n  attack: bennettAttack,\n  skill: bennettSkill,\n  burst: bennettBurst,\n};\n\nexport default bennettTalent;\n\nfunction bennettAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction bennettSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'pressDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillMultiBase({\n      description: 'chargeLevel1Dmg',\n      hits: 2,\n      element: Element.Pyro,\n      params: params.slice(1, 3),\n      stats,\n      modifier,\n    }),\n\n    skillMultiBase({\n      description: 'chargeLevel2Dmg',\n      hits: 2,\n      element: Element.Pyro,\n      params: params.slice(3, 5),\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Pyro,\n      multiplier: params[5],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction bennettBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuousPerSecond',\n      params: params.slice(1, 3),\n      stats,\n      modifier,\n    }),\n  ];\n\n  // ATK Bonus\n  let atkBonus = stats.baseAtk * params[3];\n  talentDamage.push({\n    description: 'atkBonus',\n    damage: [atkBonus],\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  attackBowDefault,\n  calculateTotalDamage,\n  skillBase,\n  normalAttackMulti,\n  chargedAttackMulti,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst tartagliaTalent: Talent = {\n  attack: tartagliaAttack,\n  skill: tartagliaSkill,\n  burst: tartagliaBurst,\n};\n\nexport default tartagliaTalent;\n\nfunction tartagliaAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = attackBowDefault({\n    normalHits: 6,\n    chargedElement: Element.Hydro,\n    params: params.slice(0, 8).concat(params.slice(10)),\n    stats,\n    modifier,\n  });\n\n  let riptideFlashDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[8],\n    element: Element.Hydro,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'riptideFlashDmg',\n    damage: [riptideFlashDmg],\n  });\n\n  let riptideBurstDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[9],\n    element: Element.Hydro,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'riptideBurstDmg',\n    damage: [riptideBurstDmg],\n  });\n\n  return talentDamage;\n}\n\nfunction tartagliaSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'stanceChangeDmg',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    ...normalAttackMulti({\n      hits: [1, 1, 1, 1, 1, 2],\n      element: Element.Hydro,\n      params: params.slice(1, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Hydro,\n      params: params.slice(8, 10),\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    skillBase({\n      description: 'riptideSlashDmg',\n      element: Element.Hydro,\n      multiplier: params[10],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction tartagliaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmgMelee',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'burstDmgRanged',\n      element: Element.Hydro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'riptideBlastDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  calculateTotalDamage,\n  shieldBase,\n  healingSkillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, AttackType, Element } from './types';\n\nconst noelleTalent: Talent = {\n  attack: noelleAttack,\n  skill: noelleSkill,\n  burst: noelleBurst,\n};\n\nexport default noelleTalent;\n\nfunction noelleAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction noelleSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  let skillDamage = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Geo,\n    scalingType: ScalingType.Defense,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'skillDmg',\n    damage: [skillDamage],\n  });\n\n  talentDamage.push(\n    shieldBase({\n      description: 'shieldHp',\n      multiplier: params[0],\n      flatBonus: params[6],\n      element: Element.Geo,\n      scalingType: ScalingType.Defense,\n      stats,\n      modifier,\n    })\n  );\n\n  talentDamage.push(\n    healingSkillBase({\n      description: 'healing',\n      params: [params[1], params[7]],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction noelleBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstInitDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'firstSwingDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  healingSkillBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, Element } from './types';\n\nconst qiqiTalent: Talent = {\n  attack: qiqiAttack,\n  skill: qiqiSkill,\n  burst: qiqiBurst,\n};\n\nexport default qiqiTalent;\n\nfunction qiqiAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 2, 2, 1],\n    chargedHits: 2,\n    params: params.slice(0, 6).concat(params[5]).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction qiqiSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Cryo,\n      multiplier: params[7],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'heraldOfFrostDmg',\n      element: Element.Cryo,\n      multiplier: params[4],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenOnHit',\n      scalingType: ScalingType.Attack,\n      params: params.slice(0, 2),\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuous',\n      scalingType: ScalingType.Attack,\n      params: params.slice(2, 4),\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction qiqiBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Cryo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'healing',\n      scalingType: ScalingType.Attack,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackHeavyDefault, skillDefault, burstDefault } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst chongyunTalent: Talent = {\n  attack: chongyunAttack,\n  skill: chongyunSkill,\n  burst: chongyunBurst,\n};\n\nexport default chongyunTalent;\n\nfunction chongyunAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n  return attackHeavyDefault({\n    normalHits: 4,\n    element,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction chongyunSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Cryo,\n    params: params,\n    stats,\n    modifier,\n  });\n}\n\nfunction chongyunBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Cryo,\n    params: params,\n    stats,\n    modifier,\n  });\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  plungeAttackDefault,\n  skillBase,\n  hpBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst ganyuTalent: Talent = {\n  attack: ganyuAttack,\n  skill: ganyuSkill,\n  burst: ganyuBurst,\n};\n\nexport default ganyuTalent;\n\nfunction ganyuAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 6,\n      element: Element.Physical,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  let aimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[6],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'aimShotDmg',\n    damage: [aimedShotDmg],\n  });\n\n  let chargedDescriptions = [\n    'aimShotChargeLevel1',\n    'frostflakeArrowDmg',\n    'frostflakeArrowBloomDmg',\n  ];\n  let chargedDmg = chargedDescriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i + 7],\n      element: Element.Cryo,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n\n    return {\n      description,\n      damage: [damage],\n    };\n  });\n  talentDamage.push(...chargedDmg);\n\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(10),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction ganyuSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    hpBase({\n      description: 'iceLotusHp',\n      multiplier: params[0],\n      flatBonus: 0,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction ganyuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'iceShardDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackLightMulti,\n  skillBase,\n  calculateTotalDamage,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, AttackType, Element } from './types';\n\nconst albedoTalent: Talent = {\n  attack: albedoAttack,\n  skill: albedoSkill,\n  burst: albedoBurst,\n};\n\nexport default albedoTalent;\n\nfunction albedoAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightMulti({\n    normalHits: [1, 1, 1, 1, 1],\n    chargedHits: 2,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction albedoSkill({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n\n  talentDmg.push(\n    skillBase({\n      description: 'skillDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  let transientBlossomDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: Element.Geo,\n    scalingType: ScalingType.Defense,\n    attackType: AttackType.Skill,\n    modifier,\n  });\n  talentDmg.push({\n    description: 'transientBlossomDmg',\n    damage: [transientBlossomDmg],\n  });\n\n  return talentDmg;\n}\n\nfunction albedoBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Geo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'fatalBlossomDmg',\n      element: Element.Geo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  attackBowDefault,\n  skillBase,\n  shieldBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst dionaTalent: Talent = {\n  attack: dionaAttack,\n  skill: dionaSkill,\n  burst: dionaBurst,\n};\n\nexport default dionaTalent;\n\nfunction dionaAttack({ params, stats, modifier }: TalentProps) {\n  return attackBowDefault({\n    normalHits: 5,\n    chargedElement: Element.Cryo,\n    params: params.slice(0, 5).concat(params.slice(6)),\n    stats,\n    modifier,\n  });\n}\n\nfunction dionaSkill({ params, stats, modifier }: TalentProps) {\n  let holdModifier = {\n    ...modifier,\n    dionaHoldSkill: true,\n  };\n\n  return [\n    skillBase({\n      description: 'icyPawDmgPerPaw',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    shieldBase({\n      description: 'shieldHpPress',\n      multiplier: params[1],\n      flatBonus: params[2],\n      element: Element.Cryo,\n      stats,\n      modifier,\n    }),\n\n    shieldBase({\n      description: 'shieldHpHold',\n      multiplier: params[1],\n      flatBonus: params[2],\n      element: Element.Cryo,\n      stats,\n      modifier: holdModifier,\n    }),\n  ];\n}\n\nfunction dionaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Cryo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'continuousFieldDmg',\n      element: Element.Cryo,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'hpRegenContinuousTime',\n      params: params.slice(2),\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillBase, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst monaTalent: Talent = {\n  attack: monaAttack,\n  skill: monaSkill,\n  burst: monaBurst,\n};\n\nexport default monaTalent;\n\nfunction monaAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Hydro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction monaSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'dot',\n      element: Element.Hydro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    skillBase({\n      description: 'explosionDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction monaBurst({ params, stats, modifier }: TalentProps) {\n  let modifiedStats = { ...stats };\n  if (modifiedStats.dmgBonus !== undefined) {\n    modifiedStats.dmgBonus += params[9];\n  } else {\n    modifiedStats.dmgBonus = params[9];\n  }\n\n  return [\n    burstBase({\n      description: 'explosionDmg',\n      element: Element.Hydro,\n      multiplier: params[1],\n      stats: modifiedStats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  calculateTotalDamage,\n  chargedAttackMulti,\n  plungeAttackDefault,\n  skillBase,\n  skillMultiBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst keqingTalent: Talent = {\n  attack: keqingAttack,\n  skill: keqingSkill,\n  burst: keqingBurst,\n};\n\nexport default keqingTalent;\n\nfunction keqingAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  for (let i = 0; i < 3; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentDamage.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit4Dmg = [];\n  for (let i = 3; i < 5; i++) {\n    hit4Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '4HitDmg',\n    damage: hit4Dmg,\n  });\n\n  let hit5Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[5],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentDamage.push({\n    description: `5HitDmg`,\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Physical,\n      params: params.slice(6, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction keqingSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['lightningStilettoDmg', 'slashingDmg'];\n  let talentDamage = descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Electro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDamage.push(\n    skillMultiBase({\n      description: 'thunderclapSlashDmg',\n      hits: 2,\n      element: Element.Electro,\n      params: [params[2], params[2]],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction keqingBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    burstBase({\n      description: 'burstInitDmg',\n      element: Element.Electro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  let consecutiveSlashDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: Element.Electro,\n    attackType: AttackType.Burst,\n    modifier,\n  });\n  talentDamage.push({\n    description: 'consecutiveSlashDmg',\n    damage: Array(8).fill(consecutiveSlashDmg),\n  });\n\n  talentDamage.push(\n    burstBase({\n      description: 'lastAttackDmg',\n      element: Element.Electro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport { attackLightDefault, skillDefault, burstBase } from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst sucroseTalent: Talent = {\n  attack: sucroseAttack,\n  skill: sucroseSkill,\n  burst: sucroseBurst,\n};\n\nexport default sucroseTalent;\n\nfunction sucroseAttack({ params, stats, modifier }: TalentProps) {\n  return attackLightDefault({\n    normalHits: 4,\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction sucroseSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Anemo,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction sucroseBurst({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n  talentValues.push(\n    burstBase({\n      description: 'dot',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[1],\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return talentValues;\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyDefault,\n  skillBase,\n  shieldBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, ScalingType, Element } from './types';\n\nconst xinyanTalent: Talent = {\n  attack: xinyanAttack,\n  skill: xinyanSkill,\n  burst: xinyanBurst,\n};\n\nexport default xinyanTalent;\n\nfunction xinyanAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyDefault({\n    normalHits: 4,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction xinyanSkill({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  talentDamage.push(\n    skillBase({\n      description: 'swingDmg',\n      element: Element.Pyro,\n      multiplier: params[0],\n      stats,\n      modifier,\n    })\n  );\n\n  // Shields\n  for (let i = 0; i < 3; i++) {\n    talentDamage.push(\n      shieldBase({\n        description: `shieldHpLevel${i + 1}`,\n        multiplier: params[2 * i + 1],\n        flatBonus: params[2 * i + 2],\n        element: Element.Pyro,\n        scalingType: ScalingType.Defense,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentDamage.push(\n    skillBase({\n      description: 'dot',\n      element: Element.Pyro,\n      multiplier: params[7],\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction xinyanBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element: Element.Physical,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'pyroDot',\n      element: Element.Pyro,\n      multiplier: params[1],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  normalAttackMulti,\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillMultiBase,\n  burstMultiBase,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst rosariaTalent: Talent = {\n  attack: rosariaAttack,\n  skill: rosariaSkill,\n  burst: rosariaBurst,\n};\n\nexport default rosariaTalent;\n\nfunction rosariaAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackMulti({\n      hits: [1, 1, 2, 1],\n      element: Element.Physical,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let hit5Dmg = [];\n  for (let i = 4; i < 6; i++) {\n    hit5Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '5HitDmg',\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackDefault({\n      element: Element.Physical,\n      params: params.slice(6, 7),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(8, 11),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction rosariaSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillMultiBase({\n      description: 'skillDmg',\n      hits: 2,\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction rosariaBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstMultiBase({\n      description: 'burstDmg',\n      hits: 2,\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'iceLanceDot',\n      element: Element.Cryo,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  chargedAttackDefault,\n  plungeAttackDefault,\n  skillBase,\n  burstBase,\n  healingSkillBase,\n} from './TalentUtil';\nimport { TalentProps, AttackType, TalentValue, Element } from './types';\n\nconst hutaoTalent: Talent = {\n  attack: hutaoAttack,\n  skill: hutaoSkill,\n  burst: hutaoBurst,\n};\n\nexport default hutaoTalent;\n\nfunction hutaoAttack({ params, stats, modifier }: TalentProps) {\n  const element = modifier.infusion ?? Element.Physical;\n\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 4,\n      element,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let hit5Dmg = [];\n  for (let i = 4; i < 6; i++) {\n    hit5Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentDamage.push({\n    description: '5HitDmg',\n    damage: hit5Dmg,\n  });\n\n  let hit6Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[6],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentDamage.push({\n    description: '6HitDmg',\n    damage: hit6Dmg,\n  });\n\n  // Charged attack\n  talentDamage.push(\n    ...chargedAttackDefault({\n      element,\n      params: params.slice(7, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction hutaoSkill({ params, stats, modifier }: TalentProps) {\n  return [\n    skillBase({\n      description: 'bloodBlossomDmg',\n      element: Element.Pyro,\n      multiplier: params[2],\n      stats,\n      modifier,\n    }),\n  ];\n}\n\nfunction hutaoBurst({ params, stats, modifier }: TalentProps) {\n  let talentDamage: TalentValue[] = [];\n\n  let dmgDescriptions = ['burstDmg', 'burstDmgLowHp'];\n  dmgDescriptions.forEach((description, i) => {\n    talentDamage.push(\n      burstBase({\n        description,\n        element: Element.Pyro,\n        multiplier: params[i],\n        stats,\n        modifier,\n      })\n    );\n  });\n\n  let regenDescriptions = ['hpRegen', 'hpRegenLowHp'];\n  regenDescriptions.forEach((description, i) => {\n    talentDamage.push(\n      healingSkillBase({\n        description,\n        params: [params[i + 2], 0],\n        stats,\n        modifier,\n      })\n    );\n  });\n\n  return talentDamage;\n}\n","import Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  chargedAttackMulti,\n  plungeAttackDefault,\n  skillBase,\n} from './TalentUtil';\nimport { AttackType, Element, TalentProps, TalentValue } from './types';\n\nconst kazuhaTalent: Talent = {\n  attack: kazuhaAttack,\n  skill: kazuhaSkill,\n  burst: kazuhaBurst,\n};\n\nexport default kazuhaTalent;\n\nfunction kazuhaAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues: TalentValue[] = [];\n\n  // Normal attack\n  for (let i = 0; i < 2; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit3Dmg = [];\n  for (let i = 2; i < 4; i++) {\n    hit3Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentValues.push({\n    description: '3HitDmg',\n    damage: hit3Dmg,\n  });\n\n  let hit4Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[4],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentValues.push({\n    description: `4HitDmg`,\n    damage: hit4Dmg,\n  });\n\n  let hit5Dmg = [];\n  const hit5DmgSingle = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  for (let i = 0; i < 3; i++) {\n    hit5Dmg.push(hit5DmgSingle);\n  }\n  talentValues.push({\n    description: `5HitDmg`,\n    damage: hit5Dmg,\n  });\n\n  // Charged attack\n  talentValues.push(\n    ...chargedAttackMulti({\n      hits: 2,\n      element: Element.Physical,\n      params: params.slice(6, 8),\n      stats,\n      modifier,\n    })\n  );\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: modifier.infusionPlunge ?? Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction kazuhaSkill({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['pressDmg', 'holdDmg'];\n  return descriptions.map((description, i) =>\n    skillBase({\n      description,\n      element: Element.Anemo,\n      multiplier: params[i * 2],\n      stats,\n      modifier,\n    })\n  );\n}\n\nfunction kazuhaBurst({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['slashingDmg', 'dot'];\n  let talentValues = descriptions.map((description, i) =>\n    burstBase({\n      description,\n      element: Element.Anemo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    talentValues.push(\n      burstBase({\n        description: 'dotElementalAbsorption',\n        element: modifier.elementalAbsorption,\n        multiplier: params[2],\n        stats,\n        modifier,\n      })\n    );\n  }\n  return talentValues;\n}\n","import Talent from './Talent';\nimport {\n  normalAttackDefault,\n  calculateTotalDamage,\n  plungeAttackDefault,\n  skillDefault,\n  burstDefault,\n} from './TalentUtil';\nimport { TalentProps, AttackType, Element } from './types';\n\nconst yanfeiTalent: Talent = {\n  attack: yanfeiAttack,\n  skill: yanfeiSkill,\n  burst: yanfeiBurst,\n};\n\nexport default yanfeiTalent;\n\nfunction yanfeiAttack({ params, stats, modifier }: TalentProps) {\n  let talentDamage = [];\n\n  // Normal attack\n  talentDamage.push(\n    ...normalAttackDefault({\n      hits: 3,\n      element: Element.Pyro,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  for (let i = 0; i < 5; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i + 3],\n      element: Element.Pyro,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    talentDamage.push({\n      description: `chargedDmgSeal${i}`,\n      damage: [damage],\n    });\n  }\n\n  // Plunge attack\n  talentDamage.push(\n    ...plungeAttackDefault({\n      element: Element.Pyro,\n      params: params.slice(15, 18),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentDamage;\n}\n\nfunction yanfeiSkill({ params, stats, modifier }: TalentProps) {\n  return skillDefault({\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction yanfeiBurst({ params, stats, modifier }: TalentProps) {\n  return burstDefault({\n    element: Element.Pyro,\n    params,\n    stats,\n    modifier,\n  });\n}\n","import { getTalentData, getTalentStatsAt } from '../Data';\nimport { defaultTalentFn } from './DefaultTalent';\nimport Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  normalAttackMulti,\n  plungeAttackDefault,\n} from './TalentUtil';\nimport { AttackType, Element, TalentProps, TalentType } from './types';\n\nconst yoimiyaTalent: Talent = {\n  attack: yoimiyaAttack,\n  skill: yoimiyaSkill,\n  burst: yoimiyaBurst,\n};\n\nexport default yoimiyaTalent;\n\nfunction yoimiyaAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues = [];\n\n  // Normal attack\n  let normalAttackParams = params.slice(0, 5);\n  if (modifier.yoimiyaSkill) {\n    const skillParams = getTalentStatsAt(\n      TalentType.Skill,\n      modifier.talentSkillLevel,\n      getTalentData('yoimiya')\n    );\n    normalAttackParams = normalAttackParams.map(\n      (param) => param * skillParams[3]\n    );\n  }\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: [2, 1, 1, 2, 1],\n      element: modifier.infusion ?? Element.Physical,\n      params: normalAttackParams,\n      stats,\n      modifier,\n    })\n  );\n\n  // Charged attack\n  let aimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[5],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentValues.push({\n    description: 'aimShotDmg',\n    damage: [aimedShotDmg],\n  });\n\n  let chargedAimedShotDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[6],\n    element: Element.Pyro,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'chargedAimShotDmg',\n    damage: [chargedAimedShotDmg],\n  });\n\n  let kindlingArrowDmg = calculateTotalDamage({\n    stats,\n    multiplier: params[7],\n    element: Element.Pyro,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'kindlingArrowDmg',\n    damage: [kindlingArrowDmg],\n  });\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(8, 11),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction yoimiyaSkill({ params, stats, modifier }: TalentProps) {\n  return defaultTalentFn();\n}\n\nfunction yoimiyaBurst({ params, stats, modifier }: TalentProps) {\n  const descriptions = ['burstDmg', 'aurousBlazeExplosionDmg'];\n\n  return descriptions.map((description, i) =>\n    burstBase({\n      description,\n      element: Element.Pyro,\n      multiplier: params[i],\n      stats,\n      modifier,\n    })\n  );\n}\n","import Talent from './Talent';\nimport {\n  attackHeavyMulti,\n  skillBase,\n  burstDefault,\n  burstBase,\n} from './TalentUtil';\nimport { TalentProps, Element } from './types';\n\nconst eulaTalent: Talent = {\n  attack: eulaAttack,\n  skill: eulaSkill,\n  burst: eulaBurst,\n};\n\nexport default eulaTalent;\n\nfunction eulaAttack({ params, stats, modifier }: TalentProps) {\n  return attackHeavyMulti({\n    normalHits: [1, 1, 2, 1, 2],\n    params,\n    stats,\n    modifier,\n  });\n}\n\nfunction eulaSkill({ params, stats, modifier }: TalentProps) {\n  let descriptions = ['pressDmg', 'holdDmg', 'icewhirlBrandDmg'];\n  return descriptions.map((description, i) => {\n    return skillBase({\n      description,\n      element: Element.Cryo,\n      multiplier: params[i],\n      stats,\n      modifier,\n    });\n  });\n}\n\nfunction eulaBurst({ params, stats, modifier }: TalentProps) {\n  let talentDmg = [];\n  talentDmg.push(\n    ...burstDefault({\n      element: Element.Cryo,\n      params,\n      stats,\n      modifier,\n    })\n  );\n\n  let descriptions = ['lightfallSwordBaseDmg', 'lightfallSwordStackDmg'];\n  let lightfallSwordParams = params.slice(1, 3);\n  let lightfallSwordTalent = descriptions.map((description, i) => {\n    return burstBase({\n      description,\n      element: Element.Physical,\n      multiplier: lightfallSwordParams[i],\n      stats,\n      modifier,\n    });\n  });\n\n  talentDmg.push(...lightfallSwordTalent);\n\n  return talentDmg;\n}\n","import { Stats, TalentParams } from '../../data/types';\nimport {\n  AttackType,\n  Element,\n  ScalingType,\n  TalentType,\n  TalentValue,\n} from './types';\nimport Resistance from '../Resistance';\nimport DamageModifier from '../modifier/DamageModifer';\nimport { talents } from './Talent';\nimport Reaction from '../modifier/Reaction';\n\n// Function to get specified talent\nexport function getTalentFn(characterId: string, type: TalentType) {\n  return talents[characterId]?.[type] ?? talents.defaultTalent[type];\n}\n\n// Functions to calculate Talent Values\nfunction getDamageBonus({\n  stats,\n  element,\n  attackType,\n}: {\n  stats: Stats;\n  element: Element;\n  attackType: AttackType;\n}) {\n  let dmgBonus = 1;\n  dmgBonus += stats.dmgBonus ?? 0;\n  dmgBonus += stats[`${element}DmgBonus`] ?? 0;\n  dmgBonus += stats[`${attackType}DmgBonus`] ?? 0;\n\n  return dmgBonus;\n}\nfunction calculateBaseDamage({\n  stats,\n  multiplier,\n  scalingType,\n  flatDmg = 0,\n}: {\n  stats: Stats;\n  multiplier: number;\n  scalingType: ScalingType;\n  flatDmg?: number;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatDmg;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatDmg;\n  } else {\n    return NaN;\n  }\n}\nfunction calculateResMultiplier({\n  element,\n  res = new Resistance(),\n  resReduction = new Resistance(),\n}: {\n  element: Element;\n  res?: Resistance;\n  resReduction?: Resistance;\n}) {\n  let totalRes = res.get(element) - resReduction.get(element);\n\n  if (totalRes < 0) {\n    return 1 - totalRes / 2;\n  } else if (totalRes < 0.75) {\n    return 1 - totalRes;\n  } else {\n    return 1 / (4 * totalRes + 1);\n  }\n}\nfunction calculateAmplifyingMultiplier(\n  reaction: Reaction,\n  triggerElement: Element\n) {\n  if (reaction === Reaction.Melt) {\n    if (triggerElement === Element.Pyro) {\n      return 2;\n    } else if (triggerElement === Element.Cryo) {\n      return 1.5;\n    } else return 1;\n  } else if (reaction === Reaction.Vaporize) {\n    if (triggerElement === Element.Hydro) {\n      return 2;\n    } else if (triggerElement === Element.Pyro) {\n      return 1.5;\n    } else return 1;\n  } else return 1;\n}\nfunction calculateReactionMultiplier({\n  reaction,\n  stats,\n  reactionBonus,\n  element,\n}: {\n  reaction: Reaction;\n  stats: Stats;\n  reactionBonus: number;\n  element: Element;\n}) {\n  const amplifyingMultiplier = calculateAmplifyingMultiplier(reaction, element);\n  if (amplifyingMultiplier > 1) {\n    const elementalMastery = stats.elementalMastery ?? 0;\n    const baseMultiplier =\n      1 + (2.78 * elementalMastery) / (1400 + elementalMastery) + reactionBonus;\n    return amplifyingMultiplier * baseMultiplier;\n  } else {\n    return 1;\n  }\n}\nexport function calculateTotalDamage({\n  stats,\n  multiplier,\n  element,\n  scalingType = ScalingType.Attack,\n  attackType,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  element: Element;\n  scalingType?: ScalingType;\n  attackType: AttackType;\n  modifier: DamageModifier;\n}) {\n  let baseDmg = calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: modifier.flatDmg,\n  });\n  let dmgBonus = getDamageBonus({ stats, element, attackType });\n\n  let crit = 1;\n  if (modifier.critType === 'crit') {\n    crit += stats.critDmg;\n  } else if (modifier.critType === 'average') {\n    let critRate = stats.critRate;\n    if (attackType === 'charged') {\n      critRate += stats.chargedCritRate ?? 0;\n    }\n    crit += Math.min(1, critRate) * stats.critDmg;\n  }\n\n  let enemyDefMultiplier =\n    (modifier.characterLevel + 100) /\n    (modifier.characterLevel +\n      100 +\n      (modifier.enemyLevel + 100) * (1 - modifier.enemyDefReduction));\n  let enemyResMultiplier = calculateResMultiplier({\n    element,\n    res: modifier.enemyRes,\n    resReduction: modifier.enemyResReduction,\n  });\n\n  const reactionMultiplier = calculateReactionMultiplier({\n    reaction: modifier.reaction,\n    stats,\n    reactionBonus: 0,\n    element,\n  });\n\n  return (\n    baseDmg *\n    dmgBonus *\n    crit *\n    enemyDefMultiplier *\n    enemyResMultiplier *\n    reactionMultiplier\n  );\n}\nfunction calculateHealing({\n  stats,\n  multiplier,\n  flatHealing,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatHealing: number;\n  scalingType?: ScalingType;\n}) {\n  // TODO: Add healing bonus\n  return calculateBaseDamage({\n    stats,\n    multiplier,\n    scalingType,\n    flatDmg: flatHealing,\n  });\n}\n// Used for calculting hp of summons/shield\nfunction calculateHp({\n  stats,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n}) {\n  if (scalingType === ScalingType.Attack) {\n    return stats.flatAtk * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Defense) {\n    return stats.flatDef * multiplier + flatBonus;\n  } else if (scalingType === ScalingType.Hp) {\n    return stats.flatHp * multiplier + flatBonus;\n  } else {\n    return NaN;\n  }\n}\n// Used for calculating total shield strength\nfunction calculateDmgAbsorption({\n  stats,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  modifier,\n}: {\n  stats: Stats;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  // Geo Shields\n  if (element === Element.Geo) dmgAbsorption *= 1.5;\n\n  // Shield bonus from external sources\n  if (stats.shieldStrength !== undefined)\n    dmgAbsorption *= 1 + stats.shieldStrength;\n\n  // Character-specific bonuses\n  // Diona Hold Skill\n  if (modifier.dionaHoldSkill) dmgAbsorption *= 1.75;\n\n  return dmgAbsorption;\n}\n// Used for all default normal attacks\nexport function normalAttackDefault({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues: TalentValue[] = [];\n  for (let i = 0; i < hits; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  return talentValues;\n}\n// Used for all normal attacks with multiple damage instances in 1 hit e.g. polearms\nexport function normalAttackMulti({\n  hits = [],\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits?: number[];\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = hits.map((hitCount, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n\n    let damages = [];\n    for (let hit = 0; hit < hitCount; hit++) {\n      damages.push(damage);\n    }\n\n    return {\n      description: `${i + 1}HitDmg`,\n      damage: damages,\n    } as TalentValue;\n  });\n\n  return talentValues;\n}\n// Used for all 1-hit charged attacks\nexport function chargedAttackDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n\n  return [\n    {\n      description: 'chargedDmg',\n      damage: [damage],\n    },\n  ] as TalentValue[];\n}\n// Used for multi-hit charged attacks\nexport function chargedAttackMulti({\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n  for (let i = 0; i < hits; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n    damages.push(damage);\n  }\n\n  return [\n    {\n      description: `chargedDmg`,\n      damage: damages,\n    },\n  ] as TalentValue[];\n}\n// Used for all default claymore charged attacks\nexport function chargedAttackHeavy({\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let descriptions = ['chargedSpinDmg', 'chargedFinalDmg'];\n  return descriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Charged,\n      modifier,\n    });\n\n    return {\n      description: description,\n      damage: [damage],\n    } as TalentValue;\n  });\n}\n// Used for all default plunge attacks\nexport function plungeAttackDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let descriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\n  return descriptions.map((description, i) => {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element,\n      attackType: AttackType.Plunge,\n      modifier,\n    });\n\n    return {\n      description: description,\n      damage: [damage],\n    } as TalentValue;\n  });\n}\n// Used for all default sword/polearm/catalyst attacks\nexport function attackLightDefault({\n  normalHits,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackDefault({\n      element,\n      params: params.slice(normalHits, normalHits + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits + 1 + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all default sword/polearm attacks with multi damage instances\nexport function attackLightMulti({\n  normalHits = [],\n  chargedHits = 1,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits?: number[];\n  chargedHits?: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits.length),\n      stats,\n      modifier,\n    })\n  );\n\n  if (chargedHits === 1) {\n    talentValues.push(\n      ...chargedAttackDefault({\n        element,\n        params: params.slice(normalHits.length, normalHits.length + 1),\n        stats,\n        modifier,\n      })\n    );\n  } else {\n    talentValues.push(\n      ...chargedAttackMulti({\n        hits: chargedHits,\n        element,\n        params: params.slice(\n          normalHits.length,\n          normalHits.length + chargedHits\n        ),\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits.length + chargedHits + 1),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all default claymore attacks\nexport function attackHeavyDefault({\n  normalHits,\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackHeavy({\n      element,\n      params: params.slice(normalHits, normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits + 2 + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all claymore attacks with multi damage instances\nexport function attackHeavyMulti({\n  normalHits = [],\n  element = Element.Physical,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits?: number[];\n  element?: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackMulti({\n      hits: normalHits,\n      element,\n      params: params.slice(0, normalHits.length),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...chargedAttackHeavy({\n      params: params.slice(normalHits.length, normalHits.length + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element,\n      params: params.slice(normalHits.length + 2 + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Used for all debault bow aim shots (include charged shots)\nfunction aimShotDefault({\n  chargedElement,\n  params,\n  stats,\n  modifier,\n}: {\n  chargedElement: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues: TalentValue[] = [];\n\n  let damage = calculateTotalDamage({\n    stats,\n    multiplier: params[0],\n    element: Element.Physical,\n    attackType: AttackType.Normal,\n    modifier,\n  });\n  talentValues.push({\n    description: 'aimShotDmg',\n    damage: [damage],\n  });\n\n  damage = calculateTotalDamage({\n    stats,\n    multiplier: params[1],\n    element: chargedElement,\n    attackType: AttackType.Charged,\n    modifier,\n  });\n  talentValues.push({\n    description: 'chargedAimShotDmg',\n    damage: [damage],\n  });\n\n  return talentValues;\n}\n// Used for all default bow attacks\nexport function attackBowDefault({\n  normalHits,\n  chargedElement,\n  params,\n  stats,\n  modifier,\n}: {\n  normalHits: number;\n  chargedElement: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let talentValues = [];\n\n  talentValues.push(\n    ...normalAttackDefault({\n      hits: normalHits,\n      element: Element.Physical,\n      params: params.slice(0, normalHits),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...aimShotDefault({\n      chargedElement,\n      params: params.slice(normalHits, normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(normalHits + 2),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n// Base function for all damage skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function skillBase({\n  description,\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  description: string;\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    element,\n    multiplier,\n    attackType: AttackType.Skill,\n    stats,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Used for all default skill that only does 1-hit elemental dmg\nexport function skillDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  return [\n    skillBase({\n      description: 'skillDmg',\n      element,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n// Base function for damage skills with multiple damage instances\nexport function skillMultiBase({\n  description,\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Skill,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    description,\n    damage: damages,\n  } as TalentValue;\n}\n// Base function for all damage bursts. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function burstBase({\n  description,\n  element,\n  multiplier,\n  stats,\n  modifier,\n}: {\n  description: string;\n  element: Element;\n  multiplier: number;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateTotalDamage({\n    element,\n    multiplier,\n    attackType: AttackType.Burst,\n    stats,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Used for all default burst that only does 1-hit elemental dmg\nexport function burstDefault({\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  return [\n    burstBase({\n      description: 'burstDmg',\n      element,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n  ];\n}\n// Base function for bursts with multiple damage instances\nexport function burstMultiBase({\n  description,\n  hits,\n  element,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  hits: number;\n  element: Element;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damages = [];\n\n  for (let i = 0; i < hits; i++) {\n    damages.push(\n      calculateTotalDamage({\n        element,\n        multiplier: params[i],\n        attackType: AttackType.Burst,\n        stats,\n        modifier,\n      })\n    );\n  }\n\n  return {\n    description,\n    damage: damages,\n  } as TalentValue;\n}\n// Base function for all healing skills. Returns an object representing a single line to be displayed.\n// The returned object should always be added into an array to construct the list of talent damage.\nexport function healingSkillBase({\n  description,\n  scalingType = ScalingType.Hp,\n  params,\n  stats,\n  modifier,\n}: {\n  description: string;\n  scalingType?: ScalingType;\n  params: TalentParams;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let damage = calculateHealing({\n    stats,\n    multiplier: params[0],\n    flatHealing: params[1],\n    scalingType,\n  });\n\n  return {\n    description,\n    damage: [damage],\n  } as TalentValue;\n}\n// Base function for all shields/summon HP\nexport function hpBase({\n  description,\n  multiplier,\n  flatBonus,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  description: string;\n  multiplier: number;\n  flatBonus: number;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let hp = calculateHp({\n    stats,\n    multiplier,\n    flatBonus,\n    scalingType,\n  });\n\n  return {\n    description,\n    damage: [hp],\n  } as TalentValue;\n}\nexport function shieldBase({\n  description,\n  multiplier,\n  flatBonus,\n  element,\n  scalingType = ScalingType.Hp,\n  stats,\n  modifier,\n}: {\n  description: string;\n  multiplier: number;\n  flatBonus: number;\n  element: Element;\n  scalingType?: ScalingType;\n  stats: Stats;\n  modifier: DamageModifier;\n}) {\n  let dmgAbsorption = calculateDmgAbsorption({\n    stats,\n    multiplier,\n    flatBonus,\n    element,\n    scalingType,\n    modifier,\n  });\n\n  return {\n    description,\n    damage: [dmgAbsorption],\n  } as TalentValue;\n}\n","import { Stats } from '../../data/types';\r\nimport Talent from './Talent';\r\nimport {\r\n  attackLightMulti,\r\n  burstBase,\r\n  burstMultiBase,\r\n  skillBase,\r\n} from './TalentUtil';\r\nimport { Element, TalentProps, TalentValue } from './types';\r\n\r\nconst raidenTalent: Talent = {\r\n  attack: raidenAttack,\r\n  skill: raidenSkill,\r\n  burst: raidenBurst,\r\n};\r\n\r\nexport default raidenTalent;\r\n\r\nfunction raidenAttack({ params, stats, modifier }: TalentProps) {\r\n  return attackLightMulti({\r\n    normalHits: [1, 1, 1, 2, 1],\r\n    params: params.slice(0, 4).concat(params.slice(5)),\r\n    stats,\r\n    modifier,\r\n  });\r\n}\r\n\r\nfunction raidenSkill({ params, stats, modifier }: TalentProps) {\r\n  return [\r\n    skillBase({\r\n      description: 'skillDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[0],\r\n      stats,\r\n      modifier,\r\n    }),\r\n\r\n    skillBase({\r\n      description: 'coordinatedAtkDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[1],\r\n      stats,\r\n      modifier,\r\n    }),\r\n  ];\r\n}\r\n\r\nfunction raidenBurst({ params, stats, modifier }: TalentProps) {\r\n  let newStats: Stats = { ...stats };\r\n  const resolveBonus = params[1] + params[2] * (modifier.resolveStacks ?? 0);\r\n  newStats.dmgBonus = resolveBonus + (newStats.dmgBonus ?? 0);\r\n\r\n  let talentValues: TalentValue[] = [];\r\n\r\n  // Musou no Hitotachi\r\n  talentValues.push(\r\n    burstBase({\r\n      description: 'musouNoHitotachiDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[0],\r\n      stats: newStats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  /* Musou Isshin: assuming attacks are not considered normal, charged or plunge DMG */\r\n  // 1-3 hit\r\n  for (let i = 0; i < 3; i++) {\r\n    talentValues.push(\r\n      burstBase({\r\n        description: `${i + 1}HitDmg`,\r\n        element: Element.Electro,\r\n        multiplier: params[i + 4],\r\n        stats: newStats,\r\n        modifier,\r\n      })\r\n    );\r\n  }\r\n\r\n  // 4 hit\r\n  talentValues.push(\r\n    burstMultiBase({\r\n      description: '4HitDmg',\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: params.slice(7, 9),\r\n      stats: newStats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  // 5 hit\r\n  talentValues.push(\r\n    burstBase({\r\n      description: '5HitDmg',\r\n      element: Element.Electro,\r\n      multiplier: params[9],\r\n      stats: newStats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  // Charged attack\r\n  talentValues.push(\r\n    burstMultiBase({\r\n      description: 'chargedDmg',\r\n      hits: 2,\r\n      element: Element.Electro,\r\n      params: params.slice(10, 12),\r\n      stats: newStats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  // Plunge\r\n  let plungeDescriptions = ['plungeDmg', 'lowPlungeDmg', 'highPlungeDmg'];\r\n  plungeDescriptions.forEach((description, i) => {\r\n    talentValues.push(\r\n      burstBase({\r\n        description,\r\n        element: Element.Electro,\r\n        multiplier: params[13 + i],\r\n        stats: newStats,\r\n        modifier,\r\n      })\r\n    );\r\n  });\r\n\r\n  return talentValues;\r\n}\r\n","import Talent from './Talent';\nimport {\n  burstBase,\n  calculateTotalDamage,\n  chargedAttackHeavy,\n  healingSkillBase,\n  plungeAttackDefault,\n  skillBase,\n} from './TalentUtil';\nimport {\n  AttackType,\n  Element,\n  ScalingType,\n  TalentProps,\n  TalentValue,\n} from './types';\n\nconst sayuTalent: Talent = {\n  attack: sayuAttack,\n  skill: sayuSkill,\n  burst: sayuBurst,\n};\n\nexport default sayuTalent;\n\nfunction sayuAttack({ params, stats, modifier }: TalentProps) {\n  let talentValues: TalentValue[] = [];\n\n  // Normal attack\n  for (let i = 0; i < 2; i++) {\n    let damage = calculateTotalDamage({\n      stats,\n      multiplier: params[i],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    });\n    talentValues.push({\n      description: `${i + 1}HitDmg`,\n      damage: [damage],\n    });\n  }\n\n  let hit3Dmg = [];\n  for (let i = 2; i < 4; i++) {\n    hit3Dmg.push(\n      calculateTotalDamage({\n        stats,\n        multiplier: params[i],\n        element: Element.Physical,\n        attackType: AttackType.Normal,\n        modifier,\n      })\n    );\n  }\n  talentValues.push({\n    description: '3HitDmg',\n    damage: hit3Dmg,\n  });\n\n  let hit4Dmg = [\n    calculateTotalDamage({\n      stats,\n      multiplier: params[4],\n      element: Element.Physical,\n      attackType: AttackType.Normal,\n      modifier,\n    }),\n  ];\n  talentValues.push({\n    description: `4HitDmg`,\n    damage: hit4Dmg,\n  });\n\n  // Charged attack\n  talentValues.push(\n    ...chargedAttackHeavy({ params: params.slice(5, 7), stats, modifier })\n  );\n\n  // Plunge attack\n  talentValues.push(\n    ...plungeAttackDefault({\n      element: Element.Physical,\n      params: params.slice(9, 12),\n      stats,\n      modifier,\n    })\n  );\n\n  return talentValues;\n}\n\nfunction sayuSkill({ params, stats, modifier }: TalentProps) {\n  const talentValues: TalentValue[] = [];\n\n  const skillDescriptions = [\n    'fuufuuWindwheelDmg',\n    'fuufuuWhirlwindKickPressDmg',\n    'fuufuuWhirlwindKickHoldDmg',\n  ];\n  const skillParams = [params[0], params[2], params[3]];\n\n  skillDescriptions.forEach((description, i) =>\n    talentValues.push(\n      skillBase({\n        description,\n        element: Element.Anemo,\n        multiplier: skillParams[i],\n        stats,\n        modifier,\n      })\n    )\n  );\n\n  if (modifier.elementalAbsorption !== undefined) {\n    const elementalAbsorption = modifier.elementalAbsorption;\n    const elementalDescriptions = [\n      'fuufuuWindwheelElementalDmg',\n      'fuufuuWhirlwindKickElementalDmg',\n    ];\n    const elementalParams = [params[1], params[4]];\n\n    elementalDescriptions.forEach((description, i) =>\n      talentValues.push(\n        skillBase({\n          description,\n          element: elementalAbsorption,\n          multiplier: elementalParams[i],\n          stats,\n          modifier,\n        })\n      )\n    );\n  }\n\n  return talentValues;\n}\n\nfunction sayuBurst({ params, stats, modifier }: TalentProps) {\n  return [\n    burstBase({\n      description: 'activationDmg',\n      element: Element.Anemo,\n      multiplier: params[0],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'activationHealing',\n      scalingType: ScalingType.Attack,\n      params: [params[2], params[1]],\n      stats,\n      modifier,\n    }),\n\n    burstBase({\n      description: 'mujimujiDarumaDmg',\n      element: Element.Anemo,\n      multiplier: params[3],\n      stats,\n      modifier,\n    }),\n\n    healingSkillBase({\n      description: 'mujimujiDarumaHealing',\n      scalingType: ScalingType.Attack,\n      params: [params[5], params[4]],\n      stats,\n      modifier,\n    }),\n  ];\n}\n","import { getTalentData, getTalentStatsAt } from '../Data';\r\nimport Talent from './Talent';\r\nimport {\r\n  attackLightDefault,\r\n  calculateTotalDamage,\r\n  chargedAttackDefault,\r\n  healingSkillBase,\r\n  normalAttackDefault,\r\n  plungeAttackDefault,\r\n  skillBase,\r\n} from './TalentUtil';\r\nimport {\r\n  AttackType,\r\n  Element,\r\n  ScalingType,\r\n  TalentProps,\r\n  TalentType,\r\n  TalentValue,\r\n} from './types';\r\n\r\nconst kokomiTalent: Talent = {\r\n  attack: kokomiAttack,\r\n  skill: kokomiSkill,\r\n  burst: kokomiBurst,\r\n};\r\n\r\nexport default kokomiTalent;\r\n\r\nfunction kokomiAttack({ params, stats, modifier }: TalentProps) {\r\n  if (modifier.kokomiBurst) {\r\n    let talentValues = [];\r\n\r\n    const burstParams = getTalentStatsAt(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      getTalentData('kokomi')\r\n    );\r\n\r\n    // Normal attacks\r\n    let normalAttackDmg = normalAttackDefault({\r\n      hits: 3,\r\n      element: Element.Hydro,\r\n      params,\r\n      stats,\r\n      modifier,\r\n    });\r\n    const normalBonusDmg = calculateTotalDamage({\r\n      stats,\r\n      multiplier: burstParams[3],\r\n      element: Element.Hydro,\r\n      scalingType: ScalingType.Hp,\r\n      attackType: AttackType.Normal,\r\n      modifier,\r\n    });\r\n    normalAttackDmg.forEach(\r\n      (talentValue) => (talentValue.damage[0] += normalBonusDmg)\r\n    );\r\n\r\n    talentValues.push(...normalAttackDmg);\r\n\r\n    // Charged attacks\r\n    let chargedAttackDmg = chargedAttackDefault({\r\n      element: Element.Hydro,\r\n      params: params.slice(3, 4),\r\n      stats,\r\n      modifier,\r\n    });\r\n    const chargedBonusDmg = calculateTotalDamage({\r\n      stats,\r\n      multiplier: burstParams[4],\r\n      element: Element.Hydro,\r\n      scalingType: ScalingType.Hp,\r\n      attackType: AttackType.Charged,\r\n      modifier,\r\n    });\r\n    chargedAttackDmg.forEach(\r\n      (talentValue) => (talentValue.damage[0] += chargedBonusDmg)\r\n    );\r\n\r\n    talentValues.push(...chargedAttackDmg);\r\n\r\n    // Plunge attacks\r\n    talentValues.push(\r\n      ...plungeAttackDefault({\r\n        element: Element.Hydro,\r\n        params: params.slice(5, 8),\r\n        stats,\r\n        modifier,\r\n      })\r\n    );\r\n\r\n    return talentValues;\r\n  } else {\r\n    return attackLightDefault({\r\n      normalHits: 3,\r\n      element: Element.Hydro,\r\n      params,\r\n      stats,\r\n      modifier,\r\n    });\r\n  }\r\n}\r\n\r\nfunction kokomiSkill({ params, stats, modifier }: TalentProps) {\r\n  let talentValues = [];\r\n\r\n  talentValues.push(\r\n    healingSkillBase({\r\n      description: 'hpRegen',\r\n      params,\r\n      stats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  if (modifier.kokomiBurst) {\r\n    const burstParams = getTalentStatsAt(\r\n      TalentType.Burst,\r\n      modifier.talentBurstLevel,\r\n      getTalentData('kokomi')\r\n    );\r\n\r\n    let rippleDmg = skillBase({\r\n      description: 'rippleDmg',\r\n      element: Element.Hydro,\r\n      multiplier: params[2],\r\n      stats,\r\n      modifier,\r\n    });\r\n    const bonusDmg = calculateTotalDamage({\r\n      stats,\r\n      multiplier: burstParams[8],\r\n      element: Element.Hydro,\r\n      scalingType: ScalingType.Hp,\r\n      attackType: AttackType.Skill,\r\n      modifier,\r\n    });\r\n    rippleDmg.damage[0] += bonusDmg;\r\n\r\n    talentValues.push(rippleDmg);\r\n  } else {\r\n    talentValues.push(\r\n      skillBase({\r\n        description: 'rippleDmg',\r\n        element: Element.Hydro,\r\n        multiplier: params[2],\r\n        stats,\r\n        modifier,\r\n      })\r\n    );\r\n  }\r\n\r\n  return talentValues;\r\n}\r\n\r\nfunction kokomiBurst({ params, stats, modifier }: TalentProps) {\r\n  let talentValues: TalentValue[] = [];\r\n\r\n  let burstDmg = calculateTotalDamage({\r\n    element: Element.Hydro,\r\n    multiplier: params[0],\r\n    attackType: AttackType.Burst,\r\n    scalingType: ScalingType.Hp,\r\n    stats,\r\n    modifier,\r\n  });\r\n  talentValues.push({\r\n    description: 'burstDmg',\r\n    damage: [burstDmg],\r\n  });\r\n\r\n  talentValues.push(\r\n    healingSkillBase({\r\n      description: 'hpRegenOnHit',\r\n      params: params.slice(1, 3),\r\n      stats,\r\n      modifier,\r\n    })\r\n  );\r\n\r\n  return talentValues;\r\n}\r\n","import { ModifierMixin, StatMixin } from './Mixin';\n\nexport default class Option {\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport interface IOptionBoolean {\n  value: boolean;\n}\n\nexport interface IOptionPicker {\n  value: string;\n  choices: string[];\n}\n\nexport interface IOptionNumber {\n  value: number;\n}\n\nexport interface IStatsApplicable {\n  applyOnStats: StatMixin;\n}\n\nexport interface IModifierApplicable {\n  applyOnModifier: ModifierMixin;\n}\n","import Option from '../Option';\n\nexport default class ArtifactSetOption extends Option {\n  threshold: number;\n\n  constructor(id: string = '', threshold: number = 0) {\n    super(id);\n    this.threshold = threshold;\n  }\n}\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionPicker, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass ArchaicPetra4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IStatsApplicable\n{\n  value = '';\n  choices = ['cryo', 'electro', 'hydro', 'pyro'];\n\n  constructor() {\n    super('archaicPetra4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value !== '') {\n      const params = getArtifactSetBonusParams('archaicpetra', 4);\n      stats[`${this.value}DmgBonus`] =\n        params[0] + (stats[`${this.value}DmgBonus`] ?? 0);\n    }\n  };\n}\n\nconst archaicPetraOptions = [ArchaicPetra4PcOption];\nexport default archaicPetraOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Berserker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('berserker4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('berserker', 4);\n      stats.critRate = params[0] + (stats.critRate ?? 0);\n    }\n  };\n}\n\nconst berserkerOptions = [Berserker4PcOption];\nexport default berserkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BlizzardStrayer4PcCryoOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcCryo', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n      stats.critRate = params[0] + (stats.critRate ?? 0);\n    }\n  };\n}\n\nclass BlizzardStrayer4PcFrozenOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('blizzardStrayer4PcFrozen', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('blizzardstrayer', 4);\n      stats.critRate = params[1] + (stats.critRate ?? 0);\n    }\n  };\n}\n\nconst blizzardStrayerOptions = [\n  BlizzardStrayer4PcCryoOption,\n  BlizzardStrayer4PcFrozenOption,\n];\nexport default blizzardStrayerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BloodStainedChivalry4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('bloodstainedChivalry4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('bloodstainedchivalry', 4);\n      stats.chargedDmgBonus = params[1] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst bloodstainedChivalryOptions = [BloodStainedChivalry4PcOption];\nexport default bloodstainedChivalryOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass BraveHeart4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('braveHeart4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('braveheart', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  };\n}\n\nconst braveHeartOptions = [BraveHeart4PcOption];\nexport default braveHeartOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusData } from '../../Data';\nimport { IOptionNumber, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass CrimsonWitch4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('crimsonWitch4PcStacks', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value > 0) {\n      const setBonusData = getArtifactSetBonusData('crimsonwitchofflames');\n      const param = setBonusData[2].bonuses.find(\n        ({ stat }) => stat === 'pyroDmgBonus'\n      )?.value!!;\n\n      let stacks = this.value;\n      if (stacks > 3) stacks = 3;\n      stats.pyroDmgBonus = stacks * (param / 2) + (stats.pyroDmgBonus ?? 0);\n    }\n  };\n}\n\nconst crimsonWitchOptions = [CrimsonWitch4PcOption];\nexport default crimsonWitchOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass HeartOfDepth4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('heartOfDepth4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('heartofdepth', 4);\n      stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst heartOfDepthOptions = [HeartOfDepth4PcOption];\nexport default heartOfDepthOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Instructor4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('instructor4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('instructor', 4);\n      stats.elementalMastery = params[1] + (stats.elementalMastery ?? 0);\n    }\n  };\n}\n\nconst instructorOptions = [Instructor4PcOption];\nexport default instructorOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Lavawalker4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('lavawalker4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('lavawalker', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  };\n}\n\nconst lavawalkerOptions = [Lavawalker4PcOption];\nexport default lavawalkerOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass MaidenBeloved4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('maidenBeloved4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('maidenbeloved', 4);\n      stats.healedBonus = params[0] + (stats.healedBonus ?? 0);\n    }\n  };\n}\n\nconst maidenBelovedOptions = [MaidenBeloved4PcOption];\nexport default maidenBelovedOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass MartialArtist4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('martialArtist4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('martialartist', 4);\n      stats.normalDmgBonus = params[2] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[2] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst martialArtistOptions = [MartialArtist4PcOption];\nexport default martialArtistOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass NoblesseOblige4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('noblesseOblige4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('noblesseoblige', 4);\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n    }\n  };\n}\n\nconst noblesseObligeOptions = [NoblesseOblige4PcOption];\nexport default noblesseObligeOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionNumber, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass PaleFlame4PcOption\n  extends ArtifactSetOption\n  implements IOptionNumber, IStatsApplicable\n{\n  value = 0;\n\n  constructor() {\n    super('paleFlame4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    const params = getArtifactSetBonusParams('paleflame', 4);\n\n    if (this.value >= 1) {\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n    }\n\n    if (this.value >= 2) {\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      stats.physicalDmgBonus = params[3] + (stats.physicalDmgBonus ?? 0);\n    }\n  };\n}\n\nconst paleFlameOptions = [PaleFlame4PcOption];\nexport default paleFlameOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass RetracingBolide4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('retracingBolide4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('retracingbolide', 4);\n      stats.normalDmgBonus = params[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = params[0] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst retracingBolideOptions = [RetracingBolide4PcOption];\nexport default retracingBolideOptions;\n","import { Stats } from '../../../data/types';\nimport { getArtifactSetBonusData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport ArtifactSetOption from './ArtifactSetOption';\n\nclass Shimenawa4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('shimenawa4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const setBonusData = getArtifactSetBonusData('shimenawasreminiscence');\n      const param = setBonusData[4].bonusExtra.params[1];\n      stats.normalDmgBonus = param + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = param + (stats.chargedDmgBonus ?? 0);\n      stats.plungeDmgBonus = param + (stats.plungeDmgBonus ?? 0);\n    }\n  };\n}\n\nconst shimenawaOptions = [Shimenawa4PcOption];\nexport default shimenawaOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Tenacity4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('tenacity4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('tenacityofthemillelith', 4);\n      stats.atkBonus = params[0] + (stats.atkBonus ?? 0);\n      stats.shieldStrength = params[1] + (stats.shieldStrength ?? 0);\n    }\n  };\n}\n\nconst tenacityOptions = [Tenacity4PcOption];\nexport default tenacityOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass Thundersoother4PcOption\n  extends ArtifactSetOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = true;\n\n  constructor() {\n    super('thundersoother4Pc', 4);\n  }\n\n  applyOnStats = (stats: Stats) => {\n    if (this.value) {\n      const params = getArtifactSetBonusParams('thundersoother', 4);\n      stats.dmgBonus = params[0] + (stats.dmgBonus ?? 0);\n    }\n  };\n}\n\nconst thundersootherOptions = [Thundersoother4PcOption];\nexport default thundersootherOptions;\n","import ArtifactSetOption from './ArtifactSetOption';\nimport { getArtifactSetBonusParams } from '../../Data';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\n\nclass ViridescentVenerer4PcOption\n  extends ArtifactSetOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('viridescentVenerer4Pc', 4);\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value !== '') {\n      const params = getArtifactSetBonusParams('viridescentvenerer', 4);\n      modifier.enemyResReduction.add(this.value as Element, params[1]);\n    }\n  };\n}\n\nconst viridescentVenererOptions = [ViridescentVenerer4PcOption];\nexport default viridescentVenererOptions;\n","import Option from '../Option';\n\nexport default class CharacterOption extends Option {\n  constructor(id: string = '') {\n    super(id);\n  }\n}\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass AyakaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionCryo');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Cryo;\n    }\n  };\n}\n\nconst ayakaOptions = [AyakaOptionInfusion];\nexport default ayakaOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ChongyunOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false; // set default value\n\n  constructor() {\n    super('infusionCryo'); // set ID\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Cryo;\n    }\n  };\n}\n\nconst chongyunOptions: typeof CharacterOption[] = [ChongyunOptionInfusion];\nexport default chongyunOptions;\n","import { Stats } from '../../../data/types';\nimport { getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass DilucOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('dilucBurst');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n    }\n  };\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    _talentBurstLevel: number,\n    ascensionLevel: number\n  ) => {\n    if (this.value && ascensionLevel >= 4) {\n      const params = getTalentData('diluc').passives.find(\n        (passiveData) => passiveData.id === 'Diluc_PermanentSkill_2'\n      )?.params;\n      const pyroDmgBonus = params?.[1] ?? NaN;\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    }\n  };\n}\n\nconst dilucOptions: typeof CharacterOption[] = [DilucOptionInfusion];\nexport default dilucOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass HuTaoOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('paramitaPapilioState');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    talentSkillLevel: number,\n    _talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      let skillParams = getTalentStatsAt(\n        TalentType.Skill,\n        talentSkillLevel,\n        getTalentData('hutao')\n      );\n\n      const totalHp =\n        (stats.baseHp ?? 0) * (1 + (stats.hpBonus ?? 0)) + (stats.flatHp ?? 0);\n      stats.flatAtk = (stats.flatAtk ?? 0) + totalHp * skillParams[1];\n    }\n  };\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n    }\n  };\n}\n\nconst hutaoOptions = [HuTaoOptionSkill];\nexport default hutaoOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionPicker } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass ElementalAbsoprtionOption\n  extends CharacterOption\n  implements IOptionPicker, IModifierApplicable\n{\n  value = '';\n  choices = [Element.Cryo, Element.Electro, Element.Hydro, Element.Pyro];\n\n  constructor() {\n    super('elementalAbsorption');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value !== '') {\n      modifier.elementalAbsorption = this.value as Element;\n    }\n  };\n}\n\nexport default ElementalAbsoprtionOption;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\nimport ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nclass KazuhaOptionInfusion\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('infusionAnemoPlunge');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusionPlunge = Element.Anemo;\n    }\n  };\n}\n\nconst kazuhaOptions = [KazuhaOptionInfusion, ElementalAbsoprtionOption];\nexport default kazuhaOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\r\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\r\nimport CharacterOption from './CharacterOption';\r\n\r\nclass KokomiOptionBurst\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IModifierApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('kokomiBurst');\r\n  }\r\n\r\n  applyOnModifier = (modifier: DamageModifier) => {\r\n    if (this.value) {\r\n      modifier.kokomiBurst = true;\r\n    }\r\n  };\r\n}\r\n\r\nconst kokomiOptions = [KokomiOptionBurst];\r\nexport default kokomiOptions;\r\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport DamageModifier from '../../modifier/DamageModifer';\nimport { Element, TalentType } from '../../talent/types';\nimport {\n  IOptionBoolean,\n  IStatsApplicable,\n  IModifierApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\n\nclass NoelleOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('noelleBurst');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      let burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('noelle')\n      );\n\n      const totalDef =\n        (stats.baseDef ?? 0) * (1 + (stats.defBonus ?? 0)) +\n        (stats.flatDef ?? 0);\n\n      stats.flatAtk = (stats.flatAtk ?? 0) + totalDef * burstParams[2];\n    }\n  };\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Geo;\n    }\n  };\n}\n\nconst noelleOptions = [NoelleOptionBurst];\nexport default noelleOptions;\n","import { Stats } from '../../../data/types';\r\nimport { getTalentStatsAt, getTalentData } from '../../Data';\r\nimport DamageModifier from '../../modifier/DamageModifer';\r\nimport { TalentType } from '../../talent/types';\r\nimport {\r\n  IModifierApplicable,\r\n  IOptionBoolean,\r\n  IOptionNumber,\r\n  IStatsApplicable,\r\n} from '../Option';\r\nimport CharacterOption from './CharacterOption';\r\n\r\nclass RaidenOptionSkill\r\n  extends CharacterOption\r\n  implements IOptionBoolean, IStatsApplicable\r\n{\r\n  value = false;\r\n\r\n  constructor() {\r\n    super('raidenSkill');\r\n  }\r\n\r\n  applyOnStats = (\r\n    stats: Stats,\r\n    _talentAttackLevel: number,\r\n    talentSkillLevel: number,\r\n    _talentBurstLevel: number\r\n  ) => {\r\n    if (this.value) {\r\n      const params = getTalentStatsAt(\r\n        TalentType.Skill,\r\n        talentSkillLevel,\r\n        getTalentData('raiden')\r\n      );\r\n\r\n      const burstDmgBonus = params[3] * 90;\r\n      stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\r\n    }\r\n  };\r\n}\r\n\r\nclass RaidenOptionResolve\r\n  extends CharacterOption\r\n  implements IOptionNumber, IModifierApplicable\r\n{\r\n  value = 0;\r\n\r\n  constructor() {\r\n    super('resolve');\r\n  }\r\n\r\n  applyOnModifier = (modifier: DamageModifier) => {\r\n    if (this.value < 0) modifier.resolveStacks = 0;\r\n    else if (this.value > 60) modifier.resolveStacks = 60;\r\n    else modifier.resolveStacks = this.value;\r\n  };\r\n}\r\n\r\nconst raidenOptions = [RaidenOptionSkill, RaidenOptionResolve];\r\nexport default raidenOptions;\r\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst sayuOptions = [ElementalAbsoprtionOption];\nexport default sayuOptions;\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst sucroseOptions = [ElementalAbsoprtionOption];\nexport default sucroseOptions;\n","import ayakaOptions from './AyakaOption';\nimport CharacterOption from './CharacterOption';\nimport chongyunOptions from './ChongyunOption';\nimport dilucOptions from './DilucOption';\nimport hutaoOptions from './HuTaoOption';\nimport kazuhaOptions from './KazuhaOption';\nimport kokomiOptions from './KokomiOption';\nimport noelleOptions from './NoelleOption';\nimport raidenOptions from './RaidenOption';\nimport sayuOptions from './SayuOption';\nimport sucroseOptions from './SucroseOption';\nimport ventiOptions from './VentiOption';\nimport xiaoOptions from './XiaoOption';\nimport yanfeiOptions from './YanfeiOption';\nimport yoimiyaOptions from './YoimiyaOption';\n\nexport { default as CharacterOption } from './CharacterOption';\n\nexport const characterOptions: Record<string, typeof CharacterOption[]> = {\n  ayaka: ayakaOptions,\n  diluc: dilucOptions,\n  venti: ventiOptions,\n  xiao: xiaoOptions,\n  noelle: noelleOptions,\n  chongyun: chongyunOptions,\n  sucrose: sucroseOptions,\n  hutao: hutaoOptions,\n  kazuha: kazuhaOptions,\n  yanfei: yanfeiOptions,\n  yoimiya: yoimiyaOptions,\n  raiden: raidenOptions,\n  sayu: sayuOptions,\n  kokomi: kokomiOptions,\n};\n","import ElementalAbsoprtionOption from './ElementalAbsorptionOption';\n\nconst ventiOptions = [ElementalAbsoprtionOption];\nexport default ventiOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport {\n  IModifierApplicable,\n  IOptionBoolean,\n  IStatsApplicable,\n} from '../Option';\nimport { Stats } from '../../../data/types';\nimport { Element, TalentType } from '../../talent/types';\nimport DamageModifier from '../../modifier/DamageModifer';\n\nclass XiaoOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('xiaoBurst');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      let burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('xiao')\n      );\n\n      stats.normalDmgBonus = burstParams[0] + (stats.normalDmgBonus ?? 0);\n      stats.chargedDmgBonus = burstParams[0] + (stats.chargedDmgBonus ?? 0);\n      stats.plungeDmgBonus = burstParams[0] + (stats.plungeDmgBonus ?? 0);\n    }\n  };\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Anemo;\n    }\n  };\n}\n\nconst xiaoOptions = [XiaoOptionBurst];\nexport default xiaoOptions;\n","import CharacterOption from './CharacterOption';\nimport { getTalentStatsAt, getTalentData } from '../../Data';\nimport { IOptionBoolean, IStatsApplicable } from '../Option';\nimport { Stats } from '../../../data/types';\nimport { TalentType } from '../../talent/types';\n\nclass YanfeiOptionBurst\n  extends CharacterOption\n  implements IOptionBoolean, IStatsApplicable\n{\n  value = false;\n\n  constructor() {\n    super('brilliance');\n  }\n\n  applyOnStats = (\n    stats: Stats,\n    _talentAttackLevel: number,\n    _talentSkillLevel: number,\n    talentBurstLevel: number\n  ) => {\n    if (this.value) {\n      const burstParams = getTalentStatsAt(\n        TalentType.Burst,\n        talentBurstLevel,\n        getTalentData('yanfei')\n      );\n      stats.chargedDmgBonus = burstParams[1] + (stats.chargedDmgBonus ?? 0);\n    }\n  };\n}\n\nconst yanfeiOptions = [YanfeiOptionBurst];\nexport default yanfeiOptions;\n","import DamageModifier from '../../modifier/DamageModifer';\nimport { Element } from '../../talent/types';\nimport { IModifierApplicable, IOptionBoolean } from '../Option';\nimport CharacterOption from './CharacterOption';\n\nclass YoimiyaOptionSkill\n  extends CharacterOption\n  implements IOptionBoolean, IModifierApplicable\n{\n  value = false;\n\n  constructor() {\n    super('yoimiyaSkill');\n  }\n\n  applyOnModifier = (modifier: DamageModifier) => {\n    if (this.value) {\n      modifier.infusion = Element.Pyro;\n      modifier.yoimiyaSkill = true;\n    }\n  };\n}\n\nconst yoimiyaOptions = [YoimiyaOptionSkill];\nexport default yoimiyaOptions;\n","import { artifactSetOptions } from './artifactSetOptions';\nimport { characterOptions } from './characterOptions';\nimport Option, {\n  IModifierApplicable,\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n  IStatsApplicable,\n} from './Option';\n\nconst defaultOptions: typeof Option[] = [];\n\nexport function getCharacterOptions(id: string) {\n  return characterOptions[id] ?? defaultOptions;\n}\n\nexport function getArtifactSetOptions(id: string) {\n  return artifactSetOptions[id] ?? defaultOptions;\n}\n\nexport function isBooleanOption(\n  option: Option\n): option is Option & IOptionBoolean {\n  return typeof (option as unknown as IOptionBoolean).value === 'boolean';\n}\n\nexport function isPickerOption(\n  option: Option\n): option is Option & IOptionPicker {\n  return (option as unknown as IOptionPicker).choices !== undefined;\n}\n\nexport function isNumberOption(\n  option: Option\n): option is Option & IOptionNumber {\n  return typeof (option as unknown as IOptionNumber).value === 'number';\n}\n\nexport function isStatsApplicable(\n  option: Option\n): option is Option & IStatsApplicable {\n  return (option as unknown as IStatsApplicable).applyOnStats !== undefined;\n}\n\nexport function isModifierApplicable(\n  option: Option\n): option is Option & IModifierApplicable {\n  return (\n    (option as unknown as IModifierApplicable).applyOnModifier !== undefined\n  );\n}\n\nexport function getOptionValue(option: Option) {\n  if (\n    isBooleanOption(option) ||\n    isPickerOption(option) ||\n    isNumberOption(option)\n  ) {\n    return option.value;\n  }\n}\n\nexport function setOptionValue(option: Option, value: unknown) {\n  if (\n    (isBooleanOption(option) && typeof value === 'boolean') ||\n    (isPickerOption(option) &&\n      typeof value === 'string' &&\n      (value === '' || option.choices.includes(value))) ||\n    (isNumberOption(option) && typeof value === 'number')\n  ) {\n    option.value = value;\n  }\n}\n","import { CharacterPassive, CharacterPassiveFn } from '../types';\nimport { raidenAscension4 } from './RaidenPassive';\nimport { yoimiyaAscension1 } from './YoimiyaPassive';\n\nconst characterPassives: Record<string, CharacterPassiveFn> = {\n  Yoimiya_PermanentSkill_1: yoimiyaAscension1,\n  Shougun_PermanentSkill_2: raidenAscension4,\n};\n\nfunction defaultPassiveFn(): CharacterPassive[] {\n  return [];\n}\n\nexport function getCharacterPassiveFn(passiveId: string) {\n  return characterPassives[passiveId] ?? defaultPassiveFn;\n}\n","import { Stats, TalentParams } from '../../../data/types';\nimport { CharacterOption } from '../../option/characterOptions';\nimport { IOptionNumber, IStatsApplicable } from '../../option/Option';\nimport { CharacterPassive } from '../types';\n\nexport function yoimiyaAscension1(params: TalentParams): CharacterPassive {\n  class YoimiyaOptionAscension1\n    extends CharacterOption\n    implements IOptionNumber, IStatsApplicable\n  {\n    value = 0;\n\n    constructor() {\n      super('yoimiyaAscension1');\n    }\n\n    applyOnStats = (stats: Stats) => {\n      let pyroDmgBonus = this.value * params[0];\n      if (this.value < 0 || this.value > 10) {\n        pyroDmgBonus = NaN;\n      }\n\n      stats.pyroDmgBonus = pyroDmgBonus + (stats.pyroDmgBonus ?? 0);\n    };\n  }\n\n  return {\n    id: 'yoimiyaAscension1',\n    options: [YoimiyaOptionAscension1],\n  };\n}\n","import { Stats, TalentParams } from '../../../data/types';\r\nimport { CharacterPassive } from '../types';\r\n\r\nexport function raidenAscension4(params: TalentParams): CharacterPassive {\r\n  return {\r\n    id: 'raidenAscension4',\r\n    options: [],\r\n    statMixin: (stats: Stats) => {\r\n      const energyRecharge = stats.energyRecharge ?? 1;\r\n      const electroDmgBonus = params[2] * (energyRecharge - 1) * 100;\r\n      stats.electroDmgBonus = electroDmgBonus + (stats.electroDmgBonus ?? 0);\r\n    },\r\n  };\r\n}\r\n","import {\n  getCharacterData as getData,\n  getCharacterAscensionBonusData as getAscensionBonusData,\n  getCharacterStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n  getTalentData,\n  getTalentStatsAt,\n} from '../Data';\n\nimport { getTalentFn } from '../talent';\nimport { getCharacterOptions } from '../option';\n\nimport type {\n  AscensionBonus,\n  StatCurveMapping,\n  Stats,\n  TalentDataSet,\n} from '../../data/types';\nimport type DamageModifier from '../modifier/DamageModifer';\nimport type { TalentType } from '../talent/types';\nimport { getCharacterPassiveFn } from '../passive/characterPassives/CharacterPassive';\nimport { CharacterOption } from '../option/characterOptions';\nimport { CharacterPassive } from '../passive/types';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\n\nexport default class Character {\n  constructor(id: string, level: number, hasAscended: boolean) {\n    this._level = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n\n    this.name = data?.name;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.talents = getTalentData(value);\n\n    this.innateStats = this.getInnateStatsAt(this.level, this.hasAscended);\n    this.characterOptions = this.getCharacterOptions();\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(ascensionLevel);\n  }\n\n  name?: string;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n  talents?: TalentDataSet;\n\n  private _level: number = 1;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._level = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(value, this.hasAscended);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended() {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    const prevAscensionLevel = getAscensionLevel(this.level, this.hasAscended);\n    this._hasAscended = value;\n    const ascensionLevel = getAscensionLevel(this.level, this.hasAscended);\n\n    this.innateStats = this.getInnateStatsAt(this.level, value);\n    this.passives = this.getPassives(ascensionLevel);\n    this.passiveOptions = this.getPassiveOptions(\n      ascensionLevel,\n      prevAscensionLevel\n    );\n  }\n\n  innateStats: Stats = {};\n  passives: CharacterPassive[] = [];\n  characterOptions: CharacterOption[] = [];\n  passiveOptions: CharacterOption[] = [];\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n  getInnateStatsAt(level: number, hasAscended: boolean) {\n    if (\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Character is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (isNaN(level) || level < 1 || level > 90) {\n      // Return NaNs if level is invalid\n      let innateStats;\n      if (this.innateStats !== undefined) {\n        // Copy all of innateStats' properties to a new object and initialize them to null\n        innateStats = Object.keys(this.innateStats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        innateStats = {};\n      }\n\n      return innateStats;\n    }\n\n    // ELSE\n    // Initialize stats with character level 1 base stats\n    let innateStats = { ...this.baseStats };\n\n    let charStatCurves = getStatCurveAt(level);\n\n    // Calculate stats from character level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = charStatCurves[curve];\n      innateStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from character ascension\n    let ascensionLevel = getAscensionLevel(level, hasAscended);\n\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in innateStats) {\n          innateStats[stat] += bonus;\n        } else {\n          innateStats[stat] = bonus;\n        }\n      });\n    }\n\n    return innateStats;\n  }\n\n  // Return an Object with description and damage properties\n  getTalentDamageAt({\n    type,\n    talentLevel,\n    totalStats,\n    modifier,\n  }: {\n    type: TalentType;\n    talentLevel: number;\n    totalStats: Stats;\n    modifier: DamageModifier;\n  }) {\n    if (this.talents === undefined) {\n      return [];\n    }\n\n    const params = getTalentStatsAt(type, talentLevel, this.talents);\n\n    let damageFn = getTalentFn(this.id, type);\n\n    let damage = damageFn({\n      params,\n      stats: totalStats,\n      modifier,\n    });\n\n    return damage;\n  }\n\n  getCharacterOptions() {\n    return getCharacterOptions(this.id).map((Option) => new Option());\n  }\n\n  getPassives(ascensionLevel: number): CharacterPassive[] {\n    if (this.talents === undefined) {\n      return [];\n    }\n\n    const passiveDatas = this.talents.passives;\n\n    return passiveDatas\n      .filter((passiveData) => ascensionLevel >= passiveData.ascensionLevel)\n      .flatMap((passiveData) =>\n        getCharacterPassiveFn(passiveData.id)(passiveData.params)\n      );\n  }\n\n  // getPassives should be called before this if passives are updated\n  getPassiveOptions(ascensionLevel: number, prevAscensionLevel?: number) {\n    if (prevAscensionLevel === undefined || isNaN(prevAscensionLevel)) {\n      return this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option());\n    }\n\n    if (ascensionLevel > prevAscensionLevel) {\n      const oldOptionIds = this.passiveOptions.map(({ id }) => id);\n      const newOptions = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n\n      return this.passiveOptions.concat(newOptions);\n    }\n\n    if (ascensionLevel < prevAscensionLevel) {\n      const keptOptionIds = this.passives\n        .flatMap(({ options }) => options)\n        .map((Option) => new Option())\n        .map((option) => option.id);\n\n      return this.passiveOptions.filter((option) =>\n        keptOptionIds.includes(option.id)\n      );\n    }\n\n    // if (ascensionLevel === prevAscensionLevel)\n    return this.passiveOptions;\n  }\n\n  getOptions() {\n    const characterOptions = this.characterOptions;\n    const passiveOptions = this.passiveOptions;\n\n    return characterOptions.concat(passiveOptions);\n  }\n\n  getPassiveStatMixins(): StatMixin[] {\n    return this.passives\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getPassiveModifierMixins(): ModifierMixin[] {\n    return this.passives\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n\n// Utility functions\nexport function getAscensionLevel(level: number, hasAscended: boolean) {\n  let ascensionLevel;\n  if (level > 80 || (level === 80 && hasAscended)) {\n    ascensionLevel = 6;\n  } else if (level > 70 || (level === 70 && hasAscended)) {\n    ascensionLevel = 5;\n  } else if (level > 60 || (level === 60 && hasAscended)) {\n    ascensionLevel = 4;\n  } else if (level > 50 || (level === 50 && hasAscended)) {\n    ascensionLevel = 3;\n  } else if (level > 40 || (level === 40 && hasAscended)) {\n    ascensionLevel = 2;\n  } else if (level > 20 || (level === 20 && hasAscended)) {\n    ascensionLevel = 1;\n  } else {\n    ascensionLevel = 0;\n  }\n\n  return ascensionLevel;\n}\n","import { Stats } from '../data/types';\nimport Artifact from './artifact/Artifact';\nimport Character, { getAscensionLevel } from './character/Character';\nimport { talentDescMapping, optionMapping, propMapping } from './Data';\nimport { StatMixin } from './option/Mixin';\nimport Weapon from './weapon/Weapon';\n\n// Returns the string to display as the value of a stat\nexport function getStatDisplayValue(prop: string, value: number) {\n  const isPercentage = propMapping[prop]?.isPercentage;\n  if (value != null && !isNaN(value)) {\n    if (isPercentage) {\n      return (value * 100).toFixed(1) + '%';\n    } else {\n      return Math.round(value).toString();\n    }\n  } else {\n    return '-';\n  }\n}\n\n// Returns the string to display as the talent damage\nexport function getDamageDisplayValue(values: number[]) {\n  let str = '';\n\n  if (values.length === 0) {\n    return str;\n  }\n\n  if (isNaN(values[0])) {\n    return '-';\n  } else {\n    str += Math.round(values[0]);\n  }\n\n  if (values.length >= 3 && values.every((value) => value === values[0])) {\n    // All elements are the same, simplify to ${damage} x${count}\n    str += ' x ' + values.length;\n  } else {\n    // Less than 3 elements, or elements are different\n    values.slice(1).forEach((value) => {\n      if (isNaN(value)) {\n        return '-';\n      } else {\n        str += ' + ' + Math.round(value);\n      }\n    });\n  }\n\n  return str;\n}\n\n// Returns the display name of a talent option\nexport function getOptionName(id: string) {\n  return optionMapping[id];\n}\n\n// Returns a Number representing the inputed value of a stat\nexport function convertStatValue(value: number, isPercentage: boolean) {\n  if (isPercentage) {\n    return value / 100;\n  } else {\n    return value;\n  }\n}\n\nexport function getTalentDescription(desc: string) {\n  return talentDescMapping[desc];\n}\n\n// Returns object containing base stats of character with the passed weapon\n// Base stats = character innate stats + weapon stats\nfunction getBaseStatsAt(character: Character, weapon: Weapon) {\n  let characterStats;\n  if (character !== undefined) {\n    characterStats = character.innateStats;\n  } else {\n    characterStats = {};\n  }\n\n  let weaponStats;\n  if (weapon !== undefined) {\n    weaponStats = weapon.stats;\n  } else {\n    weaponStats = {};\n  }\n\n  // Merges weaponStats and innateStats into a new baseStats object\n  let baseStats = { ...weaponStats };\n  Object.entries(characterStats).forEach(([stat, value]) => {\n    if (baseStats[stat] === undefined) {\n      baseStats[stat] = value;\n    } else {\n      baseStats[stat] += value;\n    }\n  });\n\n  return baseStats;\n}\n\n// Returns object containing the total stats of the character, weapon and artifacts\n// Ignores any of [character, weapon] that are undefined\nexport function getTotalStatsAt(\n  character: Character,\n  weapon: Weapon,\n  artifactSetBonuses: Stats,\n  artifacts: Artifact[],\n  talentAttackLevel: number,\n  talentSkillLevel: number,\n  talentBurstLevel: number,\n  statMixins: StatMixin[]\n) {\n  let baseStats = getBaseStatsAt(character, weapon);\n  let combinedStats = { ...baseStats };\n\n  // Merge artifact bonuses into separate object\n  let artifactStats: Stats = {};\n  artifacts.forEach((artifact) => {\n    Object.entries(artifact.getStats()).forEach(([stat, value]) => {\n      if (artifactStats[stat] === undefined) {\n        artifactStats[stat] = value;\n      } else {\n        artifactStats[stat] += value;\n      }\n    });\n  });\n\n  // Merge base stats and artifact bonuses\n  Object.entries(artifactStats).forEach(([stat, value]) => {\n    if (combinedStats[stat] === undefined) {\n      combinedStats[stat] = value;\n    } else {\n      combinedStats[stat] += value;\n    }\n  });\n\n  // Merge base stats and artifact set bonuses\n  if (artifactSetBonuses !== undefined) {\n    Object.entries(artifactSetBonuses).forEach(([stat, value]) => {\n      if (combinedStats[stat] === undefined) {\n        combinedStats[stat] = value;\n      } else {\n        combinedStats[stat] += value;\n      }\n    });\n  }\n\n  // Add base 100% energy recharge\n  combinedStats.energyRecharge = 1 + (combinedStats.energyRecharge ?? 0);\n\n  // Apply stat mixins\n  statMixins.forEach((mixin) =>\n    mixin(\n      combinedStats,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      getAscensionLevel(character.level, character.hasAscended)\n    )\n  );\n\n  // Calculate total stats\n  let totalStats: Stats = {};\n\n  totalStats.baseAtk = combinedStats.baseAtk ?? 0;\n\n  totalStats.flatAtk =\n    (combinedStats.baseAtk ?? 0) * (1 + (combinedStats.atkBonus ?? 0)) +\n    (combinedStats.flatAtk ?? 0);\n  totalStats.flatDef =\n    (combinedStats.baseDef ?? 0) * (1 + (combinedStats.defBonus ?? 0)) +\n    (combinedStats.flatDef ?? 0);\n  totalStats.flatHp =\n    (combinedStats.baseHp ?? 0) * (1 + (combinedStats.hpBonus ?? 0)) +\n    (combinedStats.flatHp ?? 0);\n  totalStats.critRate = combinedStats.critRate ?? 0;\n  totalStats.critDmg = combinedStats.critDmg ?? 0;\n  totalStats.elementalMastery = combinedStats.elementalMastery ?? 0;\n  totalStats.energyRecharge = combinedStats.energyRecharge ?? 0;\n\n  if (combinedStats.anemoDmgBonus !== undefined) {\n    totalStats.anemoDmgBonus = combinedStats.anemoDmgBonus;\n  }\n  if (combinedStats.cryoDmgBonus !== undefined) {\n    totalStats.cryoDmgBonus = combinedStats.cryoDmgBonus;\n  }\n  if (combinedStats.electroDmgBonus !== undefined) {\n    totalStats.electroDmgBonus = combinedStats.electroDmgBonus;\n  }\n  if (combinedStats.geoDmgBonus !== undefined) {\n    totalStats.geoDmgBonus = combinedStats.geoDmgBonus;\n  }\n  if (combinedStats.hydroDmgBonus !== undefined) {\n    totalStats.hydroDmgBonus = combinedStats.hydroDmgBonus;\n  }\n  if (combinedStats.pyroDmgBonus !== undefined) {\n    totalStats.pyroDmgBonus = combinedStats.pyroDmgBonus;\n  }\n  if (combinedStats.physicalDmgBonus !== undefined) {\n    totalStats.physicalDmgBonus = combinedStats.physicalDmgBonus;\n  }\n\n  if (combinedStats.anemoRes !== undefined) {\n    totalStats.anemoRes = combinedStats.anemoRes;\n  }\n  if (combinedStats.cryoRes !== undefined) {\n    totalStats.cryoRes = combinedStats.cryoRes;\n  }\n  if (combinedStats.electroRes !== undefined) {\n    totalStats.electroRes = combinedStats.electroRes;\n  }\n  if (combinedStats.geoRes !== undefined) {\n    totalStats.geoRes = combinedStats.geoRes;\n  }\n  if (combinedStats.hydroRes !== undefined) {\n    totalStats.hydroRes = combinedStats.hydroRes;\n  }\n  if (combinedStats.pyroRes !== undefined) {\n    totalStats.pyroRes = combinedStats.pyroRes;\n  }\n  if (combinedStats.physicalRes !== undefined) {\n    totalStats.physicalRes = combinedStats.physicalRes;\n  }\n\n  if (combinedStats.healingBonus !== undefined) {\n    totalStats.healingBonus = combinedStats.healingBonus;\n  }\n\n  if (combinedStats.shieldStrength !== undefined) {\n    totalStats.shieldStrength = combinedStats.shieldStrength;\n  }\n  if (combinedStats.dmgBonus !== undefined) {\n    totalStats.dmgBonus = combinedStats.dmgBonus;\n  }\n  if (combinedStats.normalDmgBonus !== undefined) {\n    totalStats.normalDmgBonus = combinedStats.normalDmgBonus;\n  }\n  if (combinedStats.chargedDmgBonus !== undefined) {\n    totalStats.chargedDmgBonus = combinedStats.chargedDmgBonus;\n  }\n  if (combinedStats.plungeDmgBonus !== undefined) {\n    totalStats.plungeDmgBonus = combinedStats.plungeDmgBonus;\n  }\n  if (combinedStats.skillDmgBonus !== undefined) {\n    totalStats.skillDmgBonus = combinedStats.skillDmgBonus;\n  }\n  if (combinedStats.burstDmgBonus !== undefined) {\n    totalStats.burstDmgBonus = combinedStats.burstDmgBonus;\n  }\n  if (combinedStats.chargedCritRate !== undefined) {\n    totalStats.chargedCritRate = combinedStats.chargedCritRate;\n  }\n\n  return totalStats;\n}\n\nexport function capitalize(str: string) {\n  if (str.length > 0) {\n    return str[0].toUpperCase().concat(str.slice(1));\n  } else {\n    return str;\n  }\n}\n","import type { Stat } from '../../data/types';\nimport { propMapping } from '../Data';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { convertStatValue } from '../Stat';\n\nexport class InputStat implements Stat {\n  stat: string;\n  value: number;\n  rawValue: number;\n\n  constructor(stat: string = '', value: number = NaN, rawValue: number = NaN) {\n    this.stat = stat;\n    this.value = value;\n    this.rawValue = rawValue;\n  }\n\n  setProp(stat: string) {\n    this.stat = stat;\n    if (stat !== '') {\n      this.value = convertStatValue(\n        this.rawValue,\n        propMapping[stat].isPercentage\n      );\n    }\n  }\n\n  setValue(value: number) {\n    this.rawValue = value;\n    if (this.stat !== '') {\n      this.value = convertStatValue(value, propMapping[this.stat].isPercentage);\n    }\n  }\n}\n\nexport enum ArtifactType {\n  Flower = 'flower',\n  Feather = 'feather',\n  Sands = 'sands',\n  Goblet = 'goblet',\n  Circlet = 'circlet',\n}\n\nexport type ArtifactSetBonusFunction = (params: number[]) => Stat[];\n\nexport interface ArtifactSetBonus {\n  options: typeof ArtifactSetOption[];\n  extraStatsFn?: ArtifactSetBonusFunction;\n  statMixin?: StatMixin;\n  modifierMixin?: ModifierMixin;\n}\n","import { Stat, Stats } from '../../data/types';\nimport { getArtifactMainStatValue } from '../Data';\nimport { ArtifactType, InputStat } from './types';\n\nexport default class Artifact {\n  type: ArtifactType;\n\n  private _rarity: number;\n  get rarity(): number {\n    return this._rarity;\n  }\n  set rarity(value: number) {\n    this._rarity = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  private _level: number;\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._level = value;\n    this.updateMainStat(this.rarity, this.level, this.mainStat.stat);\n  }\n\n  mainStat: Stat = { stat: '', value: NaN };\n\n  subStats: InputStat[] = [\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n    new InputStat(),\n  ];\n\n  constructor(\n    type: ArtifactType,\n    rarity: number,\n    level: number,\n    mainStatProp: string\n  ) {\n    this.type = type;\n    this._rarity = rarity;\n    this._level = level;\n    this.mainStat.stat = mainStatProp;\n\n    this.updateMainStat(rarity, level, mainStatProp);\n  }\n\n  updateMainStat(rarity: number, level: number, prop: string) {\n    this.setMainStatValue(getArtifactMainStatValue(rarity, level, prop));\n  }\n\n  setMainStatProp(prop: string) {\n    this.mainStat.stat = prop;\n    this.updateMainStat(this.rarity, this.level, prop);\n  }\n\n  setMainStatValue(value: number) {\n    this.mainStat.value = value;\n  }\n\n  setSubStatProp(i: number, prop: string) {\n    this.subStats[i].setProp(prop);\n  }\n\n  setSubStatValue(i: number, value: number) {\n    this.subStats[i].setValue(value);\n  }\n\n  /*\n  // Can be called with one of the two of stat and value (the other will be undefined)\n  setStat(\n    statObj: InputStat,\n    stat?: string,\n    value?: number,\n    isPercentage = false\n  ) {\n    if (stat === undefined && value !== undefined) {\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    } else if (stat !== undefined && value === undefined) {\n      statObj.stat = stat;\n      statObj.value = statUtils.convertStatValue(\n        statObj.rawValue,\n        isPercentage\n      );\n    } else if (stat !== undefined && value !== undefined) {\n      statObj.stat = stat;\n      statObj.rawValue = value;\n      statObj.value = statUtils.convertStatValue(value, isPercentage);\n    }\n  }\n\n  setMainStat(stat, value, isPercentage = false) {\n      this.setStat(this.mainStat, stat, value, isPercentage);\n  }\n\n  // Set substat in a spefiic position\n  setSubStat(pos, stat, value, isPercentage = false) {\n      this.setStat(this.subStats[pos], stat, value, isPercentage);\n  }\n  */\n\n  // Returns object containing stat: value mapping, including both main stat and substats\n  getStats() {\n    let stats: Stats = {};\n\n    if (this.mainStat.stat !== '') {\n      if (!isNaN(this.mainStat.value)) {\n        stats[this.mainStat.stat] = this.mainStat.value;\n      } else {\n        stats[this.mainStat.stat] = NaN;\n      }\n    }\n\n    this.subStats.forEach((subStat) => {\n      if (subStat.stat !== '') {\n        if (!isNaN(subStat.value)) {\n          stats[subStat.stat] = subStat.value;\n        } else {\n          stats[subStat.stat] = NaN;\n        }\n      }\n    });\n\n    return stats;\n  }\n}\n\nexport const mainStatProps = {\n  flower: ['flatHp'],\n\n  feather: ['flatAtk'],\n\n  sands: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'energyRecharge',\n  ],\n\n  goblet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'anemoDmgBonus',\n    'cryoDmgBonus',\n    'electroDmgBonus',\n    'geoDmgBonus',\n    'hydroDmgBonus',\n    'pyroDmgBonus',\n    'physicalDmgBonus',\n  ],\n\n  circlet: [\n    'hpBonus',\n    'atkBonus',\n    'defBonus',\n    'elementalMastery',\n    'critRate',\n    'critDmg',\n    'healingBonus',\n  ],\n};\n\nexport const subStatProps = [\n  'flatHp',\n  'flatAtk',\n  'flatDef',\n  'hpBonus',\n  'atkBonus',\n  'defBonus',\n  'elementalMastery',\n  'energyRecharge',\n  'critRate',\n  'critDmg',\n];\n","import React from 'react';\n\ntype NumberInputProps = {\n  id: string;\n  label: string;\n  defaultValue: number;\n  value?: number;\n  onInput?: (value: number) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype NumberInputState = {\n  value: number;\n};\n\nclass NumberInput extends React.Component<NumberInputProps, NumberInputState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: NumberInputState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value);\n    this.setState({ value });\n  };\n\n  parseInput = (value: string) => {\n    return Number(value);\n  };\n\n  handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = this.parseInput(e.currentTarget.value);\n\n    if (this.isControlled()) {\n      if (this.props.onInput !== undefined) {\n        this.props.onInput(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onInput) this.props.onInput(value);\n      });\n    }\n  };\n\n  render() {\n    // this.props.value is always defined when the component is controlled\n    const value = this.isControlled() ? this.props.value! : this.state.value;\n    const displayString = isNaN(value) ? '' : value.toString();\n\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <input\n          type='number'\n          value={displayString}\n          onInput={this.handleInput}\n          className={this.props.className}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import NumberInput from './NumberInput';\n\nclass FloatInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseFloat(value);\n  };\n}\n\nexport default FloatInput;\n","import React from 'react';\n\nclass InputRow extends React.Component {\n  render() {\n    return <div className='input-row'>{this.props.children}</div>;\n  }\n}\n\nexport default InputRow;\n","import NumberInput from './NumberInput';\n\nclass IntInput extends NumberInput {\n  override parseInput = (value: string) => {\n    return parseInt(value);\n  };\n}\n\nexport default IntInput;\n","import React from 'react';\n\ntype PickerProps = {\n  id: string;\n  label: string;\n  defaultValue: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype PickerState = {\n  value: string;\n};\n\ntype PickerItemProps = {\n  label: string;\n  value: string;\n};\n\nclass Picker extends React.Component<PickerProps, PickerState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: PickerState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n    this.setState({ value: selectedValue });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(selectedValue);\n      }\n    } else {\n      this.setState({ value: selectedValue }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(selectedValue);\n      });\n    }\n  };\n\n  render() {\n    const selectedValue = this.isControlled()\n      ? this.props.value\n      : this.state.value;\n\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <select\n          value={selectedValue}\n          onChange={this.handleChange}\n          className={this.props.className}\n          id={this.props.id}\n        >\n          {this.props.children}\n        </select>\n      </>\n    );\n  }\n\n  static Item = class Item extends React.Component<PickerItemProps> {\n    render() {\n      return <option value={this.props.value}>{this.props.label}</option>;\n    }\n  };\n}\n\nexport default Picker;\n","enum CritType {\n  None = 'none',\n  Crit = 'crit',\n  Average = 'average',\n}\n\nexport default CritType;\n","import React from 'react';\nimport Artifact, { mainStatProps, subStatProps } from '../js/artifact/Artifact';\nimport { propMapping } from '../js/Data';\nimport { capitalize, getStatDisplayValue } from '../js/Stat';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ArtifactBlockProps = {\n  artifact: Artifact;\n  updateArtifactState: () => void;\n};\n\nclass ArtifactBlock extends React.Component<ArtifactBlockProps> {\n  setArtifactMainStatProp = (prop: string) => {\n    this.props.artifact.setMainStatProp(prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactRarity = (rarity: number) => {\n    this.props.artifact.rarity = rarity;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactLevel = (level: number) => {\n    this.props.artifact.level = level;\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatProp = (i: number) => (prop: string) => {\n    this.props.artifact.setSubStatProp(i, prop);\n    this.props.updateArtifactState();\n  };\n\n  setArtifactSubStatValue = (i: number) => (value: number) => {\n    this.props.artifact.setSubStatValue(i, value);\n    this.props.updateArtifactState();\n  };\n\n  render() {\n    const { artifact } = this.props;\n\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(artifact.type)}</h3>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-rarity`}\n            label='Rarity:'\n            defaultValue={1}\n            value={artifact.rarity}\n            onInput={this.setArtifactRarity}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            className='level-input'\n            id={`artifact-${artifact.type}-level`}\n            label='Level:'\n            defaultValue={0}\n            value={artifact.level}\n            onInput={this.setArtifactLevel}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Picker\n            id={`artifact-${artifact.type}-main-stat`}\n            label='Main Stat:'\n            defaultValue=''\n            value={artifact.mainStat.stat}\n            onChange={this.setArtifactMainStatProp}\n          >\n            <Picker.Item label='' value='' />\n            {mainStatProps[artifact.type].map((prop) => (\n              <Picker.Item\n                label={propMapping[prop].name}\n                value={prop}\n                key={prop}\n              />\n            ))}\n          </Picker>\n\n          <p>:</p>\n\n          <p>\n            {getStatDisplayValue(\n              artifact.mainStat.stat,\n              artifact.mainStat.value\n            )}\n          </p>\n        </InputRow>\n\n        <p>Substats</p>\n        {artifact.subStats.map((statObj, i) => (\n          <InputRow key={i}>\n            <Picker\n              id={`artifact-${artifact.type}-sub-stat-${i}`}\n              label=''\n              defaultValue=''\n              value={statObj.stat}\n              onChange={this.setArtifactSubStatProp(i)}\n              isLabelShown={false}\n            >\n              <Picker.Item label='' value='' />\n              {subStatProps.map((prop) => (\n                <Picker.Item\n                  label={propMapping[prop].name}\n                  value={prop}\n                  key={prop}\n                />\n              ))}\n            </Picker>\n\n            <p>:</p>\n\n            <FloatInput\n              id={`artifact-${artifact.type}-sub-stat-${i}-value`}\n              label=''\n              defaultValue={NaN}\n              value={statObj.rawValue}\n              onInput={this.setArtifactSubStatValue(i)}\n              isLabelShown={false}\n              className='stat-input'\n            />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBlock;\n","import React from 'react';\n\ntype ColumnProps = {\n  className?: string;\n};\n\nclass Column extends React.Component<ColumnProps> {\n  render() {\n    return (\n      <div className={`column ${this.props.className ?? ''}`}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Column;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactBlock from './ArtifactBlock';\nimport Column from './Column';\n\ntype ArtifactColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ artifacts }: { artifacts?: Artifact[] }) => void;\n};\n\nclass ArtifactColumn extends React.Component<ArtifactColumnProps> {\n  updateArtifactState = () => {\n    const artifacts = [...this.props.appState.artifacts];\n    this.props.updateTotalStats({ artifacts });\n    this.props.setAppState({ artifacts });\n  };\n\n  render() {\n    const appState = this.props.appState;\n\n    return (\n      <Column className='input-column'>\n        <h2>Artifacts</h2>\n        {appState.artifacts.map((artifact) => (\n          <ArtifactBlock\n            artifact={artifact}\n            updateArtifactState={this.updateArtifactState}\n            key={artifact.type}\n          />\n        ))}\n      </Column>\n    );\n  }\n}\n\nexport default ArtifactColumn;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype ArtifactSetPickerProps = {\n  index: number;\n  artifactSetId: string;\n  setArtifactSetId: (id: string) => void;\n};\n\nclass ArtifactSetPicker extends React.Component<ArtifactSetPickerProps> {\n  onChange = (value: string) => {\n    this.props.setArtifactSetId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id={`artifact-set-${this.props.index}`}\n        label=''\n        defaultValue=''\n        value={this.props.artifactSetId}\n        onChange={this.onChange}\n        isLabelShown={false}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedArtifactSetList().map((artifactSetId) => (\n          <Picker.Item\n            label={data.getArtifactSetData(artifactSetId).name}\n            value={artifactSetId}\n            key={artifactSetId}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default ArtifactSetPicker;\n","import React from 'react';\n\ntype CheckboxProps = {\n  id: string;\n  label: string;\n  defaultValue: boolean;\n  value?: boolean;\n  onChange?: (value: boolean) => void;\n  isLabelShown?: boolean;\n  className?: string;\n};\n\ntype CheckboxState = {\n  value: boolean;\n};\n\nclass Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  // Boilerplate for making this an optionally controllable component\n  // https://medium.com/quick-code/writing-ui-components-with-optionally-controllable-state-86e396a6f1ec\n  state: CheckboxState = {\n    value: this.props.defaultValue,\n  };\n\n  isControlled = () => this.props.value !== undefined;\n\n  isLabelShown = () => this.props.isLabelShown ?? true;\n\n  onChangeDefault = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    this.setState({ value });\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n\n    if (this.isControlled()) {\n      if (this.props.onChange !== undefined) {\n        this.props.onChange(value);\n      }\n    } else {\n      this.setState({ value }, () => {\n        // Callback fn\n        if (this.props.onChange) this.props.onChange(value);\n      });\n    }\n  };\n\n  render() {\n    const value = this.isControlled() ? this.props.value : this.state.value;\n    return (\n      <>\n        <label\n          htmlFor={this.props.id}\n          className={this.isLabelShown() ? '' : 'hidden'}\n        >\n          {this.props.label}\n        </label>\n        <input\n          type='checkbox'\n          checked={value}\n          onChange={this.handleChange}\n          className={this.props.className}\n          id={this.props.id}\n        />\n      </>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport Option, {\n  isBooleanOption,\n  isPickerOption,\n  isNumberOption,\n} from '../js/option';\nimport {\n  IOptionBoolean,\n  IOptionNumber,\n  IOptionPicker,\n} from '../js/option/Option';\nimport { capitalize, getOptionName } from '../js/Stat';\nimport Checkbox from './Checkbox';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype OptionInputProps = {\n  option: Option;\n  updateOptions: () => void;\n};\n\nclass OptionInput extends React.Component<OptionInputProps> {\n  handleBooleanChange = (option: IOptionBoolean) => (value: boolean) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handlePickerChange = (option: IOptionPicker) => (value: string) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  handleNumberChange = (option: IOptionNumber) => (value: number) => {\n    option.value = value;\n    this.props.updateOptions();\n  };\n\n  render() {\n    const { option } = this.props;\n\n    if (isBooleanOption(option)) {\n      return (\n        <Checkbox\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handleBooleanChange(option)}\n        />\n      );\n    } else if (isPickerOption(option)) {\n      return (\n        <Picker\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onChange={this.handlePickerChange(option)}\n        >\n          <Picker.Item label='' value='' />\n          {option.choices.map((choice) => (\n            <Picker.Item\n              label={capitalize(choice)}\n              value={choice}\n              key={choice}\n            />\n          ))}\n        </Picker>\n      );\n    } else if (isNumberOption(option)) {\n      return (\n        <IntInput\n          id={`${option.id}-input`}\n          label={getOptionName(option.id)}\n          defaultValue={option.value}\n          value={option.value}\n          onInput={this.handleNumberChange(option)}\n          className='level-input'\n        />\n      );\n    }\n  }\n}\n\nexport default OptionInput;\n","import React from 'react';\nimport { AppState } from '../App';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport { ArtifactSetOption } from '../js/option/artifactSetOptions';\nimport ArtifactSetPicker from './ArtifactSetPicker';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype ArtifactSetInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n};\n\nclass ArtifactSetInputBlock extends React.Component<ArtifactSetInputBlockProps> {\n  setArtifactSetId = (i: number) => (id: string) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].id = id;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  setArtifactSetPieces = (i: number) => (pieces: number) => {\n    const { artifactSets } = this.props.appState;\n    artifactSets[i].pieces = pieces;\n    const artifactSetOptions = artifactSets.flatMap(\n      (artifactSet) => artifactSet.options\n    );\n    this.props.updateArtifactSetBonuses({\n      artifactSets,\n      artifactSetOptions,\n    });\n    this.props.setAppState({\n      artifactSets: [...artifactSets],\n      artifactSetOptions,\n    });\n  };\n\n  updateOptions = () => {\n    const { artifactSetOptions } = this.props.appState;\n    this.props.updateArtifactSetBonuses({ artifactSetOptions });\n    this.props.setAppState({ artifactSetOptions: [...artifactSetOptions] });\n  };\n\n  render() {\n    const { artifactSets, artifactSetOptions } = this.props.appState;\n\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <p>Artifact Sets</p>\n        </InputRow>\n        {[0, 1, 2].map((i) => (\n          <InputRow key={i}>\n            <ArtifactSetPicker\n              index={i}\n              artifactSetId={artifactSets[i].id}\n              setArtifactSetId={this.setArtifactSetId(i)}\n            />\n\n            <p>:</p>\n\n            <IntInput\n              id={`artifact-set-${i}-pcs`}\n              label=''\n              defaultValue={NaN}\n              value={artifactSets[i].pieces}\n              onInput={this.setArtifactSetPieces(i)}\n              isLabelShown={false}\n              className='level-input'\n            />\n\n            <p>pc</p>\n          </InputRow>\n        ))}\n\n        {artifactSetOptions.map((option) => (\n          <InputRow key={option.id}>\n            <OptionInput option={option} updateOptions={this.updateOptions} />\n          </InputRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype CharacterPickerProps = {\n  characterId: string;\n  setCharacterId: (id: string) => void;\n};\n\nclass CharacterPicker extends React.Component<CharacterPickerProps> {\n  onChange = (value: string) => {\n    this.props.setCharacterId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='character-picker'\n        label='Character:'\n        defaultValue=''\n        value={this.props.characterId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedCharacterList().map((id) => (\n          <Picker.Item\n            label={data.getCharacterData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default CharacterPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Character from '../js/character/Character';\nimport { CharacterOption } from '../js/option/characterOptions';\nimport CharacterPicker from './CharacterPicker';\nimport Checkbox from './Checkbox';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport OptionInput from './OptionInput';\n\ntype CharacterInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    character,\n    characterOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n  }) => void;\n};\n\nclass CharacterInputBlock extends React.Component<CharacterInputBlockProps> {\n  setCharacterId = (id: string) => {\n    const character = this.props.appState.character;\n    character.id = id;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setCharacterLevel = (level: number) => {\n    const character = this.props.appState.character;\n    character.level = level;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  setIsCharacterAscended = (isAscended: boolean) => {\n    const character = this.props.appState.character;\n    character.hasAscended = isAscended;\n    const characterOptions = character.getOptions();\n    this.props.updateTotalStats({ character, characterOptions });\n    this.props.setAppState({ character, characterOptions });\n  };\n\n  updateOptions = () => {\n    const { characterOptions } = this.props.appState;\n    this.props.updateTotalStats({ characterOptions });\n    this.props.setAppState({ characterOptions: [...characterOptions] });\n  };\n\n  render() {\n    const { appState } = this.props;\n\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <CharacterPicker\n            characterId={appState.character.id}\n            setCharacterId={this.setCharacterId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='character-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.character.level}\n            onInput={this.setCharacterLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='character-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.character.hasAscended}\n            onChange={this.setIsCharacterAscended}\n          />\n        </InputRow>\n\n        {appState.characterOptions.map((option) => {\n          return (\n            <InputRow key={option.id}>\n              <OptionInput option={option} updateOptions={this.updateOptions} />\n            </InputRow>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default CharacterInputBlock;\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { AppState } from '../App';\nimport CritType from '../js/modifier/CritType';\nimport Reaction from '../js/modifier/Reaction';\nimport Resistance from '../js/Resistance';\nimport { capitalize } from '../js/Stat';\nimport { Element } from '../js/talent/types';\nimport FloatInput from './FloatInput';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport Picker from './Picker';\n\ntype ModifierInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTalentValues: ({\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n  }: {\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n  }) => void;\n};\n\nclass ModifierInputBlock extends React.Component<ModifierInputBlockProps> {\n  setEnemyLevel = (level: number) => {\n    this.props.updateTalentValues({ enemyLevel: level });\n    this.props.setAppState({ enemyLevel: level });\n  };\n\n  setEnemyRes = (type: Element) => (value: number) => {\n    const enemyRes = this.props.appState.enemyRes;\n    enemyRes.set(type, value / 100);\n    this.props.updateTalentValues({ enemyRes });\n    this.props.setAppState({ enemyRes });\n  };\n\n  setCritType = (critType: CritType) => {\n    this.props.updateTalentValues({ critType });\n    this.props.setAppState({ critType });\n  };\n\n  setReaction = (reaction: string) => {\n    this.props.updateTalentValues({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n    this.props.setAppState({\n      reaction: Reaction[reaction as keyof typeof Reaction],\n    });\n  };\n\n  render() {\n    const { enemyLevel, enemyRes, critType, reaction } = this.props.appState;\n    return (\n      <div className='input-block'>\n        <InputRow>\n          Crit:\n          <ToggleButtonGroup\n            name='crit-type-input'\n            type='radio'\n            size='sm'\n            value={critType}\n            onChange={this.setCritType}\n          >\n            <ToggleButton value='none' variant='outline-secondary'>\n              None\n            </ToggleButton>\n            <ToggleButton value='crit' variant='outline-secondary'>\n              Crit\n            </ToggleButton>\n            <ToggleButton value='average' variant='outline-secondary'>\n              Average\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='enemy-level-input'\n            label='Enemy Level:'\n            defaultValue={1}\n            value={enemyLevel}\n            onInput={this.setEnemyLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        {Object.values(Element).map((element) => (\n          <InputRow key={element}>\n            <FloatInput\n              id={`enemy-res-${element}-input`}\n              label={`Enemy ${capitalize(element)} RES:`}\n              defaultValue={0}\n              value={enemyRes.get(element) * 100}\n              onInput={this.setEnemyRes(element)}\n              className='level-input'\n            />\n            <p>%</p>\n          </InputRow>\n        ))}\n\n        <InputRow>\n          <Picker\n            id='reaction-picker'\n            label='Reaction:'\n            defaultValue={Reaction.None}\n            value={reaction}\n            onChange={this.setReaction}\n          >\n            {Object.values(Reaction).map((reaction) => (\n              <Picker.Item\n                key={reaction}\n                label={capitalize(reaction)}\n                value={reaction}\n              />\n            ))}\n          </Picker>\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default ModifierInputBlock;\n","import { Stats } from '../../data/types';\nimport { getArtifactSetBonusParams } from '../Data';\nimport archaicPetraOptions from '../option/artifactSetOptions/ArchaicPetraOption';\nimport berserkerOptions from '../option/artifactSetOptions/BerserkerOption';\nimport blizzardStrayerOptions from '../option/artifactSetOptions/BlizzardStrayerOption';\nimport bloodstainedChivalryOptions from '../option/artifactSetOptions/BloodstainedChivalryOption';\nimport braveHeartOptions from '../option/artifactSetOptions/BraveHeartOption';\nimport crimsonWitchOptions from '../option/artifactSetOptions/CrimsonWitchOption';\nimport heartOfDepthOptions from '../option/artifactSetOptions/HeartOfDepthOption';\nimport instructorOptions from '../option/artifactSetOptions/InstructorOption';\nimport lavawalkerOptions from '../option/artifactSetOptions/LavawalkerOption';\nimport maidenBelovedOptions from '../option/artifactSetOptions/MaidenBelovedOption';\nimport martialArtistOptions from '../option/artifactSetOptions/MartialArtistOption';\nimport noblesseObligeOptions from '../option/artifactSetOptions/NoblesseObligeOption';\nimport paleFlameOptions from '../option/artifactSetOptions/PaleFlameOption';\nimport retracingBolideOptions from '../option/artifactSetOptions/RetracingBolideOption';\nimport shimenawaOptions from '../option/artifactSetOptions/ShimenawaOption';\nimport tenacityOptions from '../option/artifactSetOptions/TenacityOption';\nimport thundersootherOptions from '../option/artifactSetOptions/ThundersootherOption';\nimport viridescentVenererOptions from '../option/artifactSetOptions/ViridescentVenererOption';\nimport { ArtifactSetBonus } from './types';\n\n// Placeholder function\nconst defaultSetBonus: ArtifactSetBonus = { options: [] };\n\nconst Relic_ExtraAtkCritUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'chargedCritRate',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_AllElemResistUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    const elements = ['anemo', 'cryo', 'electro', 'geo', 'hydro', 'pyro'];\n    return elements.map((element) => {\n      return {\n        stat: `${element}Res`,\n        value: params[0],\n      };\n    });\n  },\n};\n\nconst Relic_AtkAndExtraAtkUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'normalDmgBonus',\n        value: params[0],\n      },\n      {\n        stat: 'chargedDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_SkillDamageUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'skillDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_MeleeAttackUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    // Only for sword, polearm, claymore characters\n    // Did not make this an Option because this would likely not want to be disabled\n    // Calculation will be wrong if used on a catalyst, bow character\n    // Checking for that would require character weapon type to be implemented first\n    return [\n      {\n        stat: 'normalDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\n// Swirl Dmg up not yet implemented. Medium priority.\n// Requires reaction dmg to be implemented first.\n// Elemental Res shred implemented through Options\nconst Relic_ReactionWindEnhance: ArtifactSetBonus = {\n  options: viridescentVenererOptions,\n};\n\nconst Relci_RangerAttackUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    // Typo is present in the game data\n    // Only for catalyst, bow characters\n    // See Relic_MeleeAttackUp for more details\n    return [\n      {\n        stat: 'chargedDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\n// Reaction Dmg Up not yet implemented. Medium priority\n// Requires reaction dmg to be implemented first\n// Pyro Dmg Bonus implemented through Options\nconst Relic_ReactionFireEnhance: ArtifactSetBonus = {\n  options: crimsonWitchOptions,\n};\n\nconst Relic_ElementalBurstUp: ArtifactSetBonus = {\n  options: [],\n\n  extraStatsFn: (params: number[]) => {\n    return [\n      {\n        stat: 'burstDmgBonus',\n        value: params[0],\n      },\n    ];\n  },\n};\n\nconst Relic_ElementalBurstUpByChargeEfficiency: ArtifactSetBonus = {\n  options: [],\n\n  statMixin: (stats: Stats) => {\n    const params = getArtifactSetBonusParams('emblemofseveredfate', 4);\n    let burstDmgBonus = params[0] * stats.energyRecharge;\n    if (burstDmgBonus > params[1]) {\n      burstDmgBonus = params[1];\n    }\n\n    stats.burstDmgBonus = burstDmgBonus + (stats.burstDmgBonus ?? 0);\n  },\n};\n\nconst Relic_GiantKiller: ArtifactSetBonus = {\n  options: braveHeartOptions,\n};\n\nconst Relic_LowHPGainExtraCritRate: ArtifactSetBonus = {\n  options: berserkerOptions,\n};\n\nconst Relic_SkillEnhanceNormalAtkAndExtraAtk: ArtifactSetBonus = {\n  options: martialArtistOptions,\n};\n\nconst Relic_ReactionGainExtraElemMasteryForTeam: ArtifactSetBonus = {\n  options: instructorOptions,\n};\n\nconst Relic_CriticUpAgainstIceAndFrozen: ArtifactSetBonus = {\n  options: blizzardStrayerOptions,\n};\n\nconst Relic_DamageUpAgainstElectric: ArtifactSetBonus = {\n  options: thundersootherOptions,\n};\n\nconst Relic_DamageUpAgainstFireAndBurning: ArtifactSetBonus = {\n  options: lavawalkerOptions,\n};\n\nconst Relic_SkillEnhanceCured: ArtifactSetBonus = {\n  options: maidenBelovedOptions,\n};\n\nconst Relic_TeamAtkupAfterElementalBurst: ArtifactSetBonus = {\n  options: noblesseObligeOptions,\n};\n\nconst Relic_KillEnhanceExtraAtk: ArtifactSetBonus = {\n  options: bloodstainedChivalryOptions,\n};\n\nconst Relic_ElementDmgUpAfterCrystalShield: ArtifactSetBonus = {\n  options: archaicPetraOptions,\n};\n\nconst Relic_ShieldEnhanceAtk: ArtifactSetBonus = {\n  options: retracingBolideOptions,\n};\n\nconst Relic_WaterSkillEnhanceNormalAtkAndExtraAtk: ArtifactSetBonus = {\n  options: heartOfDepthOptions,\n};\n\nconst Relic_ShieldCostUpWhenElementalArtHit: ArtifactSetBonus = {\n  options: tenacityOptions,\n};\n\nconst Relic_AttackUpWhenNormalAtkAndExtraAtkHit: ArtifactSetBonus = {\n  options: paleFlameOptions,\n};\n\nconst Relic_NormalDamageUpIfCostEnergy: ArtifactSetBonus = {\n  options: shimenawaOptions,\n};\n\nexport const artifactSetBonuses: Record<string, ArtifactSetBonus> = {\n  defaultSetBonus,\n  Relic_ExtraAtkCritUp,\n  Relic_AllElemResistUp,\n  Relic_AtkAndExtraAtkUp,\n  Relic_SkillDamageUp,\n  Relic_MeleeAttackUp,\n  Relci_RangerAttackUp,\n  Relic_ElementalBurstUp,\n  Relic_ElementalBurstUpByChargeEfficiency,\n\n  // Options only\n  Relic_GiantKiller,\n  Relic_LowHPGainExtraCritRate,\n  Relic_SkillEnhanceNormalAtkAndExtraAtk,\n  Relic_ReactionGainExtraElemMasteryForTeam,\n  Relic_CriticUpAgainstIceAndFrozen,\n  Relic_DamageUpAgainstElectric,\n  Relic_DamageUpAgainstFireAndBurning,\n  Relic_SkillEnhanceCured,\n  Relic_TeamAtkupAfterElementalBurst,\n  Relic_KillEnhanceExtraAtk,\n  Relic_ElementDmgUpAfterCrystalShield,\n  Relic_ShieldEnhanceAtk,\n  Relic_WaterSkillEnhanceNormalAtkAndExtraAtk,\n  Relic_ShieldCostUpWhenElementalArtHit,\n  Relic_AttackUpWhenNormalAtkAndExtraAtkHit,\n  Relic_NormalDamageUpIfCostEnergy,\n\n  // Swirl Dmg up not yet implemented. Medium priority.\n  // Requires reaction dmg to be implemented first.\n  Relic_ReactionWindEnhance,\n\n  // Reaction Dmg Up not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionFireEnhance,\n\n  // Not yet implemented. Medium priority\n  // Requires reaction dmg to be implemented first\n  Relic_ReactionElectricEnhance: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Requires info about team composition\n  Relic_AbsorbTeamElemResist: defaultSetBonus,\n\n  // Not yet implemented. Low priority.\n  // Probably can be implemented with a dropdown option for prev received elem dmg\n  Relic_ElemDmgEnhanceElemResist: defaultSetBonus,\n\n  // Not implemented. CD reduction effect.\n  Relic_KillingRefreshSkill: defaultSetBonus,\n\n  // Not implemented. Energy effect.\n  Relic_UltGainEnergyForTeam: defaultSetBonus,\n  Relic_RestoreEnergyGainExtraEnergyForTeam: defaultSetBonus,\n\n  // Not implemented. Healing effect when opening chests.\n  Relic_ChestHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when getting Mora.\n  Relic_CoinHealSelf: defaultSetBonus,\n\n  // Not implemented. Healing effect when burst.\n  Relic_UltHealSelf: defaultSetBonus,\n\n  // Not implemented. Element duration reduction.\n  Relic_FireResistance: defaultSetBonus,\n  Relic_WaterResistance: defaultSetBonus,\n  Relic_ElectricResistance: defaultSetBonus,\n  Relic_IceResistance: defaultSetBonus,\n};\n","import { getArtifactSetData, getArtifactSetBonusData } from '../Data';\nimport { artifactSetBonuses as extraBonuses } from './ArtifactSetBonus';\nimport {\n  ArtifactSetBonusData,\n  ArtifactSetBonusSet,\n  Stats,\n} from '../../data/types';\nimport { ArtifactSetOption } from '../option/artifactSetOptions';\nimport { ModifierMixin, StatMixin } from '../option/Mixin';\nimport { ArtifactSetBonus } from './types';\n\nexport default class ArtifactSet {\n  constructor(id: string, pieces?: number) {\n    if (pieces !== undefined) this._pieces = pieces;\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getArtifactSetData(value);\n    this.name = data?.name;\n    this.bonusThresholds = data?.bonusThresholds;\n\n    this.setBonusData = getArtifactSetBonusData(value);\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.stats = this.getStats();\n    this.setBonuses = this.getSetBonuses();\n    this.options = this.getOptions(this.pieces);\n  }\n\n  name?: string;\n  bonusThresholds?: number[];\n  setBonusData?: ArtifactSetBonusData;\n\n  private _pieces: number = 0;\n  get pieces(): number {\n    return this._pieces;\n  }\n  set pieces(value: number) {\n    const prevPieces = this.pieces;\n    this._pieces = value;\n\n    this.setBonusSets = this.getSetBonusSetsAt(this.pieces);\n    this.stats = this.getStats();\n    this.setBonuses = this.getSetBonuses();\n    this.options = this.getOptions(this.pieces, prevPieces);\n  }\n\n  options: ArtifactSetOption[] = [];\n  stats: Stats = {};\n  setBonusSets: ArtifactSetBonusSet[] = [];\n  setBonuses: ArtifactSetBonus[] = [];\n\n  getSetBonusSetsAt(pieces: number): ArtifactSetBonusSet[] {\n    if (this.bonusThresholds === undefined) return [];\n\n    return this.bonusThresholds\n      .filter((threshold) => pieces >= threshold)\n      .map((threshold) => this.setBonusData?.[threshold])\n      .filter((bonus): bonus is ArtifactSetBonusSet => bonus !== undefined);\n  }\n\n  getStats() {\n    let stats: Stats = {};\n\n    let setBonuses = this.setBonusSets;\n    setBonuses?.forEach((setBonus) => {\n      // Normal stat bonuses\n      setBonus?.bonuses.forEach((statBonus) => {\n        if (stats[statBonus.stat] !== undefined) {\n          stats[statBonus.stat] += statBonus.value;\n        } else {\n          stats[statBonus.stat] = statBonus.value;\n        }\n      });\n\n      // Special bonuses, has to be handled individually\n      let extraBonus = setBonus?.bonusExtra;\n      if (extraBonus !== undefined && extraBonus.type !== '') {\n        let extraBonusSet =\n          extraBonuses[extraBonus.type] ?? extraBonuses['defaultSetBonus'];\n\n        let params = extraBonus.params;\n\n        let extraStats = extraBonusSet.extraStatsFn?.(params) ?? [];\n\n        extraStats.forEach((statBonus) => {\n          if (stats[statBonus.stat] !== undefined) {\n            stats[statBonus.stat] += statBonus.value;\n          } else {\n            stats[statBonus.stat] = statBonus.value;\n          }\n        });\n      }\n    });\n\n    return stats;\n  }\n\n  getOptions(pieces: number, prevPieces?: number) {\n    if (prevPieces === undefined || isNaN(prevPieces)) {\n      const options = this.setBonuses.flatMap((setBonus) => setBonus.options);\n      return options.map((Option) => new Option());\n    } else if (pieces === prevPieces) {\n      return this.options;\n    } else if (pieces > prevPieces) {\n      const oldOptionIds = this.options.map(({ id }) => id);\n      const newOptions = this.setBonuses\n        .flatMap((setBonus) => setBonus.options)\n        .map((Option) => new Option())\n        .filter(({ id }) => !oldOptionIds.includes(id));\n      return this.options.concat(newOptions);\n    } else {\n      const keptOptionIds = this.setBonuses\n        .flatMap((setBonus) => setBonus.options)\n        .map((Option) => new Option().id);\n      return this.options.filter(({ id }) => keptOptionIds.includes(id));\n    }\n  }\n\n  getSetBonuses(): ArtifactSetBonus[] {\n    const setBonusSets = this.setBonusSets;\n    return setBonusSets.map((setBonusSet) => {\n      const setBonusType = setBonusSet?.bonusExtra.type;\n      return extraBonuses[setBonusType] ?? extraBonuses['defaultSetBonus'];\n    });\n  }\n\n  getStatMixins(): StatMixin[] {\n    return this.setBonuses\n      .map(({ statMixin }) => statMixin)\n      .filter((mixin): mixin is StatMixin => mixin !== undefined);\n  }\n\n  getModifierMixins(): ModifierMixin[] {\n    return this.setBonuses\n      .map(({ modifierMixin }) => modifierMixin)\n      .filter((mixin): mixin is ModifierMixin => mixin !== undefined);\n  }\n}\n","import { AscensionBonus, StatCurveMapping, Stats } from '../../data/types';\nimport {\n  getWeaponData as getData,\n  getWeaponAscensionBonusData as getAscensionBonusData,\n  getWeaponStatCurveAt as getStatCurveAt,\n  getAscensionBonusAt,\n} from '../Data';\nimport type { WeaponType } from './types';\n\nexport default class Weapon {\n  constructor(id: string, level: number, hasAscended: boolean) {\n    this._weaponLevel = level;\n    this._hasAscended = hasAscended;\n\n    this.id = id;\n  }\n\n  private _id: string = '';\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    // Essentially replaces the constructor\n    this._id = value;\n\n    const data = getData(value);\n    this.name = data?.name;\n    this.type = data?.type as WeaponType | undefined;\n    this.rank = data?.rank;\n    this.baseStats = data?.baseStats;\n    this.statCurveMapping = data?.statCurves;\n    this.ascensionBonuses = getAscensionBonusData(value);\n\n    this.stats = this.getStatsAt(this.weaponLevel, this.hasAscended);\n  }\n\n  name?: string;\n  type?: WeaponType;\n  rank?: number;\n  baseStats?: Stats;\n  statCurveMapping?: StatCurveMapping;\n  ascensionBonuses?: AscensionBonus[];\n\n  private _weaponLevel: number = 1;\n  get weaponLevel(): number {\n    return this._weaponLevel;\n  }\n  set weaponLevel(value: number) {\n    this._weaponLevel = value;\n    this.stats = this.getStatsAt(value, this.hasAscended);\n  }\n\n  private _hasAscended: boolean = false;\n  get hasAscended(): boolean {\n    return this._hasAscended;\n  }\n  set hasAscended(value: boolean) {\n    this._hasAscended = value;\n    this.stats = this.getStatsAt(this.weaponLevel, value);\n  }\n\n  stats: Stats = {};\n\n  isDefined() {\n    return this.id !== '';\n  }\n\n  // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n  getStatsAt(weaponLevel: number, hasAscended: boolean) {\n    if (\n      this.rank === undefined ||\n      this.baseStats === undefined ||\n      this.statCurveMapping === undefined ||\n      this.ascensionBonuses === undefined\n    ) {\n      // Weapon is (likely) not defined/stats not found\n      return {};\n    }\n\n    if (\n      isNaN(weaponLevel) ||\n      weaponLevel < 1 ||\n      (this.rank <= 2 && weaponLevel > 70) ||\n      weaponLevel > 90\n    ) {\n      // Return NaNs if weapon level is invalid\n      let weaponStats;\n      if (this.stats !== undefined) {\n        // Copy all of stats' properties to a new object and initialize them to null\n        weaponStats = Object.keys(this.stats).reduce((obj, stat) => {\n          obj[stat] = NaN;\n          return obj;\n        }, {} as Stats);\n      } else {\n        weaponStats = {};\n      }\n\n      return weaponStats;\n    }\n\n    // ELSE\n    // Level 1 weapon stats\n    let weaponStats = { ...this.baseStats };\n\n    let weaponStatCurves = getStatCurveAt(weaponLevel);\n\n    // Calculate stats from weapon level\n    Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n      let multiplier = weaponStatCurves[curve];\n      weaponStats[stat] *= multiplier;\n    });\n\n    // Calculate stats from weapon ascension\n    let ascensionLevel;\n    // Only 3-star and above weapons can be ascended beyond level 70\n    if (\n      this.rank > 2 &&\n      (weaponLevel > 80 || (weaponLevel === 80 && hasAscended))\n    ) {\n      ascensionLevel = 6;\n    } else if (\n      this.rank > 2 &&\n      (weaponLevel > 70 || (weaponLevel === 70 && hasAscended))\n    ) {\n      ascensionLevel = 5;\n    } else if (weaponLevel > 60 || (weaponLevel === 60 && hasAscended)) {\n      ascensionLevel = 4;\n    } else if (weaponLevel > 50 || (weaponLevel === 50 && hasAscended)) {\n      ascensionLevel = 3;\n    } else if (weaponLevel > 40 || (weaponLevel === 40 && hasAscended)) {\n      ascensionLevel = 2;\n    } else if (weaponLevel > 20 || (weaponLevel === 20 && hasAscended)) {\n      ascensionLevel = 1;\n    } else {\n      ascensionLevel = 0;\n    }\n    let ascensionBonuses = getAscensionBonusAt(\n      ascensionLevel,\n      this.ascensionBonuses\n    );\n\n    if (ascensionBonuses !== undefined) {\n      Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n        if (stat in weaponStats) {\n          weaponStats[stat] += bonus;\n        } else {\n          weaponStats[stat] = bonus;\n        }\n      });\n    }\n\n    return weaponStats;\n  }\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Form from 'react-bootstrap/esm/Form';\nimport Modal from 'react-bootstrap/esm/Modal';\nimport { AppState } from '../App';\nimport {\n  createSave,\n  addSave,\n  getSave,\n  loadSave,\n  Saves,\n  deleteSave,\n} from '../save/Save';\nimport InputRow from './InputRow';\nimport Picker from './Picker';\n\ntype SaveBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  refreshApp: () => void;\n};\n\ntype SaveBlockState = {\n  saves: Saves;\n  saveInputName: string;\n  selectedSave: string;\n  showDeleteWarning: boolean;\n};\n\nclass SaveBlock extends React.Component<SaveBlockProps, SaveBlockState> {\n  state: SaveBlockState;\n\n  constructor(props: SaveBlockProps) {\n    super(props);\n\n    // Populate local storage if empty\n    if (window.localStorage.getItem('saves') === null) {\n      window.localStorage.setItem('saves', '{}');\n    }\n\n    // Initialize saves in memory\n    const saves = JSON.parse(window.localStorage.getItem('saves') ?? '{}');\n    // Initialize state\n    this.state = {\n      saves,\n      saveInputName: '',\n      selectedSave: '',\n      showDeleteWarning: false,\n    };\n  }\n\n  onSaveClick = () => {\n    if (this.state.saveInputName !== '') {\n      const save = createSave(this.state.saveInputName, this.props.appState);\n      const saves = this.state.saves;\n      addSave(save, saves);\n      this.setState({ saves });\n    }\n  };\n\n  onSaveInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveInputName: e.target.value });\n  };\n\n  onLoadClick = () => {\n    if (this.state.selectedSave !== '') {\n      const save = getSave(this.state.selectedSave, this.state.saves);\n      if (save !== undefined) {\n        loadSave(save, this.props.setAppState, this.props.refreshApp);\n      }\n    }\n  };\n\n  onLoadInputChange = (value: string) => {\n    this.setState({ selectedSave: value });\n  };\n\n  onDeleteClick = () => {\n    if (this.state.selectedSave !== '') {\n      this.setState({ showDeleteWarning: true });\n    }\n  };\n\n  onModalConfirm = () => {\n    const saves = this.state.saves;\n    deleteSave(this.state.selectedSave, saves);\n    this.setState({ saves });\n\n    this.setState({ showDeleteWarning: false });\n  };\n\n  onModalHide = () => {\n    this.setState({ showDeleteWarning: false });\n  };\n\n  render() {\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onSaveClick}>\n            Save\n          </Button>\n\n          <Form.Control\n            type='text'\n            size='sm'\n            placeholder='Save label (cannot be empty)'\n            onChange={this.onSaveInputChange}\n          />\n        </InputRow>\n\n        <InputRow>\n          <Button variant='secondary' size='sm' onClick={this.onLoadClick}>\n            Load\n          </Button>\n\n          <Picker\n            id='save-picker'\n            label=''\n            defaultValue=''\n            value={this.state.selectedSave}\n            onChange={this.onLoadInputChange}\n            isLabelShown={false}\n          >\n            <Picker.Item label='' value='' />\n            {Object.values(this.state.saves).map((save) => (\n              <Picker.Item\n                label={save.label}\n                value={save.label}\n                key={save.label}\n              />\n            ))}\n          </Picker>\n\n          <>\n            <Button variant='danger' size='sm' onClick={this.onDeleteClick}>\n              Delete\n            </Button>\n\n            <Modal\n              show={this.state.showDeleteWarning}\n              onHide={this.onModalHide}\n            >\n              <Modal.Body>\n                Are you sure you want to delete the save configuration? This\n                action is irreversible!\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={this.onModalHide}>\n                  Cancel\n                </Button>\n                <Button variant='danger' onClick={this.onModalConfirm}>\n                  Delete\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default SaveBlock;\n","import { AppState } from '../App';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport { ArtifactType, InputStat } from '../js/artifact/types';\nimport Character from '../js/character/Character';\nimport CritType from '../js/modifier/CritType';\nimport Reaction from '../js/modifier/Reaction';\nimport { getOptionValue, setOptionValue } from '../js/option';\nimport Resistance from '../js/Resistance';\nimport { Element } from '../js/talent/types';\nimport Weapon from '../js/weapon/Weapon';\n\nexport default interface Save {\n  label: string;\n\n  characterId?: string;\n  characterLevel?: number;\n  characterHasAscended?: boolean;\n\n  weaponId?: string;\n  weaponLevel?: number;\n  weaponHasAscended?: boolean;\n\n  artifacts?: ArtifactSave[];\n\n  artifactSets?: { artifactSetId?: string; artifactSetPieces?: number }[];\n\n  talentAttackLevel?: number;\n  talentSkillLevel?: number;\n  talentBurstLevel?: number;\n\n  critType?: CritType;\n  enemyLevel?: number;\n  enemyRes?: {\n    anemo?: number;\n    cryo?: number;\n    electro?: number;\n    geo?: number;\n    hydro?: number;\n    pyro?: number;\n    physical?: number;\n  };\n  reaction?: Reaction;\n\n  characterOptions?: { id?: string; value?: unknown }[];\n  artifactSetOptions?: { id?: string; value?: unknown }[];\n}\n\nexport type Saves = Record<string, Save>;\n\ninterface ArtifactSave {\n  type?: ArtifactType;\n  rarity?: number;\n  level?: number;\n  mainStat?: string;\n  subStats?: InputStatSave[];\n}\n\ninterface InputStatSave {\n  stat?: string;\n  value?: number;\n  rawValue?: number;\n}\n\nfunction createInputStatSave({\n  stat,\n  value,\n  rawValue,\n}: InputStat): InputStatSave {\n  return { stat, value, rawValue };\n}\n\nexport function createSave(label: string, appState: AppState): Save {\n  const save: Save = {\n    label,\n\n    characterId: appState.character.id,\n    characterLevel: appState.character.level,\n    characterHasAscended: appState.character.hasAscended,\n\n    weaponId: appState.weapon.id,\n    weaponLevel: appState.weapon.weaponLevel,\n    weaponHasAscended: appState.weapon.hasAscended,\n\n    artifacts: appState.artifacts.map((artifact) => {\n      return {\n        type: artifact.type,\n        rarity: artifact.rarity,\n        level: artifact.level,\n        mainStat: artifact.mainStat.stat,\n        subStats: artifact.subStats.map((subStat) =>\n          createInputStatSave(subStat)\n        ),\n      };\n    }),\n\n    artifactSets: appState.artifactSets.map((artifactSet) => {\n      return {\n        artifactSetId: artifactSet.id,\n        artifactSetPieces: artifactSet.pieces,\n      };\n    }),\n\n    talentAttackLevel: appState.talentAttackLevel,\n    talentSkillLevel: appState.talentSkillLevel,\n    talentBurstLevel: appState.talentBurstLevel,\n\n    critType: appState.critType,\n    enemyLevel: appState.enemyLevel,\n    enemyRes: {\n      anemo: appState.enemyRes.get(Element.Anemo),\n      cryo: appState.enemyRes.get(Element.Cryo),\n      electro: appState.enemyRes.get(Element.Electro),\n      geo: appState.enemyRes.get(Element.Geo),\n      hydro: appState.enemyRes.get(Element.Hydro),\n      pyro: appState.enemyRes.get(Element.Pyro),\n      physical: appState.enemyRes.get(Element.Physical),\n    },\n    reaction: appState.reaction,\n\n    characterOptions: appState.characterOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n    artifactSetOptions: appState.artifactSetOptions.map((option) => {\n      return { id: option.id, value: getOptionValue(option) };\n    }),\n  };\n\n  return save;\n}\n\nexport function loadSave(\n  save: Save,\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void,\n  refreshApp: () => void\n) {\n  const character = new Character(\n    save.characterId ?? '',\n    save.characterLevel ?? 1,\n    save.characterHasAscended ?? false\n  );\n  const weapon = new Weapon(\n    save.weaponId ?? '',\n    save.weaponLevel ?? 1,\n    save.weaponHasAscended ?? false\n  );\n\n  const artifacts =\n    save.artifacts?.map((savedArtifact, i) => {\n      const artifactType = savedArtifact.type ?? Object.values(ArtifactType)[i];\n      let artifact = new Artifact(\n        artifactType,\n        savedArtifact.rarity ?? 1,\n        savedArtifact.level ?? 0,\n        savedArtifact.mainStat ?? ''\n      );\n      artifact.subStats =\n        savedArtifact.subStats?.map(\n          (subStat) =>\n            new InputStat(\n              subStat.stat ?? '',\n              subStat.value ?? NaN,\n              subStat.rawValue ?? NaN\n            )\n        ) ?? artifact.subStats;\n\n      return artifact;\n    }) ??\n    Object.values(ArtifactType).map((type) => new Artifact(type, 1, 0, ''));\n\n  const artifactSets = save.artifactSets?.map(\n    (artifactSet) =>\n      new ArtifactSet(\n        artifactSet.artifactSetId ?? '',\n        artifactSet.artifactSetPieces ?? 0\n      )\n  ) ?? [new ArtifactSet(''), new ArtifactSet(''), new ArtifactSet('')];\n\n  const talentAttackLevel = save.talentAttackLevel ?? 1;\n  const talentSkillLevel = save.talentSkillLevel ?? 1;\n  const talentBurstLevel = save.talentBurstLevel ?? 1;\n\n  const critType = save.critType ?? CritType.None;\n  const enemyLevel = save.enemyLevel ?? 1;\n  const enemyRes = save.enemyRes\n    ? new Resistance(save.enemyRes)\n    : new Resistance();\n  const reaction = save.reaction ?? Reaction.None;\n\n  const characterOptions = character.getOptions();\n  save.characterOptions?.forEach((option) => {\n    let characterOption = characterOptions.find(\n      (characterOption) => characterOption.id === option.id\n    );\n    if (characterOption !== undefined) {\n      setOptionValue(characterOption, option.value);\n    }\n  });\n\n  const artifactSetOptions = artifactSets.flatMap(\n    (artifactSet) => artifactSet.options\n  );\n  save.artifactSetOptions?.forEach((option) => {\n    let artifactSetOption = artifactSetOptions.find(\n      (artifactSetOption) => artifactSetOption.id === option.id\n    );\n    if (artifactSetOption !== undefined) {\n      setOptionValue(artifactSetOption, option.value);\n    }\n  });\n\n  setAppState(\n    {\n      character,\n      weapon,\n      artifacts,\n      artifactSets,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      critType,\n      enemyLevel,\n      enemyRes,\n      reaction,\n      characterOptions,\n      artifactSetOptions,\n    },\n\n    // Update stats and talents\n    refreshApp\n  );\n}\n\nexport function addSave(save: Save, saves: Saves) {\n  saves[save.label] = save;\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n\nexport function getSave(label: string, saves: Saves): Save | undefined {\n  return saves[label];\n}\n\nexport function deleteSave(label: string, saves: Saves) {\n  delete saves[label];\n  window.localStorage.setItem('saves', JSON.stringify(saves));\n}\n","import React from 'react';\nimport { AppState } from '../App';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\n\ntype TalentInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n  }: {\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n  }) => void;\n};\n\nclass TalentInputBlock extends React.Component<TalentInputBlockProps> {\n  setTalentAttackLevel = (level: number) => {\n    this.props.updateTotalStats({ talentAttackLevel: level });\n    this.props.setAppState({ talentAttackLevel: level });\n  };\n\n  setTalentSkillLevel = (level: number) => {\n    this.props.updateTotalStats({ talentSkillLevel: level });\n    this.props.setAppState({ talentSkillLevel: level });\n  };\n\n  setTalentBurstLevel = (level: number) => {\n    this.props.updateTotalStats({ talentBurstLevel: level });\n    this.props.setAppState({ talentBurstLevel: level });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <div className='input-block'>\n        {' '}\n        <InputRow>\n          <IntInput\n            id='talent-attack-level-input'\n            label='Attack Talent Level:'\n            defaultValue={1}\n            value={appState.talentAttackLevel}\n            onInput={this.setTalentAttackLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-skill-level-input'\n            label='Skill Talent Level:'\n            defaultValue={1}\n            value={appState.talentSkillLevel}\n            onInput={this.setTalentSkillLevel}\n            className='level-input'\n          />\n        </InputRow>\n        <InputRow>\n          <IntInput\n            id='talent-burst-level-input'\n            label='Burst Talent Level:'\n            defaultValue={1}\n            value={appState.talentBurstLevel}\n            onInput={this.setTalentBurstLevel}\n            className='level-input'\n          />\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default TalentInputBlock;\n","import React from 'react';\nimport Picker from './Picker';\n\nimport * as data from '../js/Data';\n\ntype WeaponPickerProps = {\n  weaponId: string;\n  setWeaponId: (id: string) => void;\n};\n\nclass WeaponPicker extends React.Component<WeaponPickerProps> {\n  onChange = (value: string) => {\n    this.props.setWeaponId(value);\n  };\n\n  render() {\n    return (\n      <Picker\n        id='weapon-picker'\n        label='Weapon:'\n        defaultValue=''\n        value={this.props.weaponId}\n        onChange={this.onChange}\n      >\n        <Picker.Item label='' value='' />\n        {data.getSortedWeaponList().map((id) => (\n          <Picker.Item\n            label={data.getWeaponData(id).name}\n            value={id}\n            key={id}\n          />\n        ))}\n      </Picker>\n    );\n  }\n}\n\nexport default WeaponPicker;\n","import React from 'react';\nimport { AppState } from '../App';\nimport Weapon from '../js/weapon/Weapon';\nimport Checkbox from './Checkbox';\nimport InputRow from './InputRow';\nimport IntInput from './IntInput';\nimport WeaponPicker from './WeaponPicker';\n\ntype WeaponInputBlockProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateTotalStats: ({ weapon }: { weapon?: Weapon }) => void;\n};\n\nclass WeaponInputBlock extends React.Component<WeaponInputBlockProps> {\n  setWeaponId = (id: string) => {\n    const weapon = this.props.appState.weapon;\n    weapon.id = id;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setWeaponLevel = (level: number) => {\n    const weapon = this.props.appState.weapon;\n    weapon.weaponLevel = level;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  setIsWeaponAscended = (isAscended: boolean) => {\n    const weapon = this.props.appState.weapon;\n    weapon.hasAscended = isAscended;\n    this.props.updateTotalStats({ weapon });\n    this.props.setAppState({ weapon });\n  };\n\n  render() {\n    const { appState } = this.props;\n    return (\n      <div className='input-block'>\n        <InputRow>\n          <WeaponPicker\n            weaponId={appState.weapon.id}\n            setWeaponId={this.setWeaponId}\n          />\n        </InputRow>\n\n        <InputRow>\n          <IntInput\n            id='weapon-level-input'\n            label='Level:'\n            defaultValue={1}\n            value={appState.weapon.weaponLevel}\n            onInput={this.setWeaponLevel}\n            className='level-input'\n          />\n        </InputRow>\n\n        <InputRow>\n          <Checkbox\n            id='weapon-ascension-checkbox'\n            label='Ascended?'\n            defaultValue={false}\n            value={appState.weapon.hasAscended}\n            onChange={this.setIsWeaponAscended}\n          />\n        </InputRow>\n      </div>\n    );\n  }\n}\n\nexport default WeaponInputBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport Artifact from '../js/artifact/Artifact';\nimport ArtifactSet from '../js/artifact/ArtifactSet';\nimport Character from '../js/character/Character';\nimport CritType from '../js/modifier/CritType';\nimport { ArtifactSetOption } from '../js/option/artifactSetOptions';\nimport { CharacterOption } from '../js/option/characterOptions';\nimport Resistance from '../js/Resistance';\nimport Weapon from '../js/weapon/Weapon';\nimport ArtifactSetInputBlock from './ArtifactSetInputBlock';\nimport CharacterInputBlock from './CharacterInputBlock';\nimport Column from './Column';\nimport ModifierInputBlock from './ModifierInputBlock';\nimport SaveBlock from './SaveBlock';\nimport TalentInputBlock from './TalentInputBlock';\nimport WeaponInputBlock from './WeaponInputBlock';\n\ntype InputColumnProps = {\n  appState: AppState;\n  setAppState: <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => void;\n  updateArtifactSetBonuses: ({\n    artifactSets,\n  }: {\n    artifactSets?: ArtifactSet[];\n  }) => void;\n  updateTotalStats: ({\n    character,\n    weapon,\n    artifacts,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  updateTalentValues: ({\n    character,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => void;\n  refreshApp: () => void;\n};\n\nclass InputColumn extends React.Component<InputColumnProps> {\n  render() {\n    const {\n      appState,\n      setAppState,\n      updateArtifactSetBonuses,\n      updateTotalStats,\n      updateTalentValues,\n      refreshApp,\n    } = this.props;\n\n    return (\n      <Column className='input-column'>\n        <SaveBlock\n          appState={appState}\n          setAppState={setAppState}\n          refreshApp={refreshApp}\n        />\n\n        <CharacterInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <WeaponInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ArtifactSetInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateArtifactSetBonuses={updateArtifactSetBonuses}\n        />\n\n        <TalentInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTotalStats={updateTotalStats}\n        />\n\n        <ModifierInputBlock\n          appState={appState}\n          setAppState={setAppState}\n          updateTalentValues={updateTalentValues}\n        />\n      </Column>\n    );\n  }\n}\n\nexport default InputColumn;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype ArtifactSetStatBlockProps = {\n  artifactSetBonuses: Stats;\n};\n\nclass ArtifactSetStatBlock extends React.Component<ArtifactSetStatBlockProps> {\n  render() {\n    const { artifactSetBonuses } = this.props;\n\n    if (Object.keys(artifactSetBonuses).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Artifact Sets</h2>\n        {Object.entries(artifactSetBonuses)\n          .filter(\n            ([prop, _]) =>\n              // Temporary(?) way to not display these fake stats\n              prop !== 'burstDmgBonusByEnergyRechargeRatio' &&\n              prop !== 'burstDmgBonusByEnergyRechargeMax' &&\n              prop !== 'severedFateBonus'\n          )\n          .map(([prop, value]) => (\n            <p key={prop}>\n              {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n            </p>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default ArtifactSetStatBlock;\n","import React from 'react';\nimport Character from '../js/character/Character';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype CharacterStatBlockProps = {\n  character: Character;\n};\n\nclass CharacterStatBlock extends React.Component<CharacterStatBlockProps> {\n  render() {\n    const character = this.props.character;\n\n    if (!character.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Character</h2>\n        <img\n          src={`https://rerollcdn.com/GENSHIN/Characters/${character.name}.png`}\n          width={70}\n          height={70}\n          alt='Character thumbnail'\n        />\n        <p>{character.name ?? ''}</p>\n        {Object.entries(character.innateStats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterStatBlock;\n","import React from 'react';\nimport { Stats } from '../data/types';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\n\ntype TotalStatBlockProps = {\n  totalStats: Stats;\n};\n\nclass TotalStatBlock extends React.Component<TotalStatBlockProps> {\n  render() {\n    return (\n      <div className='result-block'>\n        <h2>Total Stats</h2>\n        {Object.entries(this.props.totalStats).map(\n          ([prop, value]) =>\n            // Temporary way to exclude Base Atk from being displayed\n            // Potential method is to hardcode the stats that should be displayed\n            // (similar to how it is done in getTotalStatsAt)\n            prop !== 'baseAtk' && (\n              <p key={prop}>\n                {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n              </p>\n            )\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TotalStatBlock;\n","import React from 'react';\nimport { propMapping } from '../js/Data';\nimport { getStatDisplayValue } from '../js/Stat';\nimport Weapon from '../js/weapon/Weapon';\n\ntype WeaponStatBlockProps = {\n  weapon: Weapon;\n};\n\nclass WeaponStatBlock extends React.Component<WeaponStatBlockProps> {\n  render() {\n    const weapon = this.props.weapon;\n\n    if (!weapon.isDefined()) {\n      return null;\n    }\n\n    return (\n      <div className='result-block'>\n        <h2>Weapon</h2>\n        <p>{weapon.name ?? ''}</p>\n        {Object.entries(weapon.stats).map(([prop, value]) => (\n          <p key={prop}>\n            {propMapping[prop].name}: {getStatDisplayValue(prop, value)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default WeaponStatBlock;\n","import React from 'react';\nimport { AppState } from '../App';\nimport { Stats } from '../data/types';\nimport ArtifactSetStatBlock from './ArtifactSetStatBlock';\nimport CharacterStatBlock from './CharacterStatBlock';\nimport Column from './Column';\nimport TotalStatBlock from './TotalStatBlock';\nimport WeaponStatBlock from './WeaponStatBlock';\n\ntype StatColumnProps = {\n  appState: AppState;\n  totalStats: Stats;\n  artifactSetBonuses: Stats;\n};\n\nclass StatColumn extends React.Component<StatColumnProps> {\n  render() {\n    const { character, weapon } = this.props.appState;\n\n    return (\n      <Column className='stat-column'>\n        <TotalStatBlock totalStats={this.props.totalStats} />\n        <CharacterStatBlock character={character} />\n        <WeaponStatBlock weapon={weapon} />\n        <ArtifactSetStatBlock\n          artifactSetBonuses={this.props.artifactSetBonuses}\n        />\n      </Column>\n    );\n  }\n}\n\nexport default StatColumn;\n","import React from 'react';\nimport { talentDescMapping } from '../js/Data';\nimport { capitalize, getDamageDisplayValue } from '../js/Stat';\nimport { TalentType, TalentValue } from '../js/talent/types';\n\ntype TalentBlockProps = {\n  type: TalentType;\n  talentValues: TalentValue[];\n};\n\nclass TalentBlock extends React.Component<TalentBlockProps> {\n  render() {\n    return (\n      <div className='sub-block'>\n        <h3>{capitalize(this.props.type)}</h3>\n        {this.props.talentValues.map(({ description, damage }) => (\n          <p key={description}>\n            {talentDescMapping[description]}: {getDamageDisplayValue(damage)}\n          </p>\n        ))}\n      </div>\n    );\n  }\n}\nexport default TalentBlock;\n","import React from 'react';\nimport Column from './Column';\nimport { TalentType, TalentValueSet } from '../js/talent/types';\nimport TalentBlock from './TalentBlock';\n\ntype TalentColumnProps = {\n  talentValues: TalentValueSet;\n};\n\nclass TalentColumn extends React.Component<TalentColumnProps> {\n  render() {\n    const { attack, skill, burst } = this.props.talentValues;\n\n    return (\n      <Column className='talent-column'>\n        <div className='result-block'>\n          <h2>Talents</h2>\n          <TalentBlock type={TalentType.Attack} talentValues={attack} />\n          <TalentBlock type={TalentType.Skill} talentValues={skill} />\n          <TalentBlock type={TalentType.Burst} talentValues={burst} />\n        </div>\n      </Column>\n    );\n  }\n}\n\nexport default TalentColumn;\n","import React from 'react';\nimport './App.css';\nimport ArtifactColumn from './component/ArtifactColumn';\nimport Column from './component/Column';\nimport InputColumn from './component/InputColumn';\nimport StatColumn from './component/StatColumn';\nimport TalentColumn from './component/TalentColumn';\nimport { Stats } from './data/types';\nimport Artifact from './js/artifact/Artifact';\nimport ArtifactSet from './js/artifact/ArtifactSet';\nimport { ArtifactType } from './js/artifact/types';\nimport Character from './js/character/Character';\nimport CritType from './js/modifier/CritType';\nimport DamageModifier from './js/modifier/DamageModifer';\nimport Reaction from './js/modifier/Reaction';\nimport { isModifierApplicable, isStatsApplicable } from './js/option';\nimport { ArtifactSetOption } from './js/option/artifactSetOptions';\nimport { CharacterOption } from './js/option/characterOptions';\nimport { ModifierMixin, StatMixin } from './js/option/Mixin';\nimport { IModifierApplicable, IStatsApplicable } from './js/option/Option';\nimport Resistance from './js/Resistance';\nimport { getTotalStatsAt } from './js/Stat';\nimport { TalentType, TalentValueSet } from './js/talent/types';\nimport Weapon from './js/weapon/Weapon';\n\nexport type AppState = {\n  character: Character;\n  weapon: Weapon;\n  artifacts: Artifact[];\n\n  artifactSets: ArtifactSet[];\n\n  enemyLevel: number;\n  enemyDefReduction: number;\n  enemyRes: Resistance;\n  critType: CritType;\n  flatDmg: number;\n  reaction: Reaction;\n  talentAttackLevel: number;\n  talentSkillLevel: number;\n  talentBurstLevel: number;\n\n  characterOptions: CharacterOption[];\n  artifactSetOptions: ArtifactSetOption[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    character: new Character('', 1, false),\n    weapon: new Weapon('', 1, false),\n    artifacts: Object.values(ArtifactType).map(\n      (type) => new Artifact(type, 1, 0, '')\n    ),\n\n    artifactSets: [\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n      new ArtifactSet(''),\n    ],\n\n    enemyLevel: 1,\n    enemyDefReduction: 0,\n    enemyRes: new Resistance(),\n    critType: CritType.None,\n    flatDmg: 0,\n    reaction: Reaction.None,\n    talentAttackLevel: 1,\n    talentSkillLevel: 1,\n    talentBurstLevel: 1,\n\n    characterOptions: [],\n    artifactSetOptions: [],\n  };\n\n  artifactSetBonuses: Stats = {};\n  totalStats: Stats = {};\n  talentValues: TalentValueSet = { attack: [], skill: [], burst: [] };\n\n  modifierMixins: ModifierMixin[] = [];\n  statMixins: StatMixin[] = [];\n\n  // Gets all modifier mixins and updates cache (modifierMixins)\n  getModifierMixins({\n    character,\n    characterOptions,\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      artifactSets === undefined &&\n      artifactSetOptions === undefined\n    ) {\n      return this.modifierMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveModifierMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getModifierMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.applyOnModifier);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IModifierApplicable =>\n        isModifierApplicable(option)\n      )\n      .map((option) => option.applyOnModifier);\n\n    this.modifierMixins = characterPassiveMixins\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(artifactSetOptionMixins);\n\n    return this.modifierMixins;\n  }\n\n  // Gets all stat mixins and updates cache (statMixins)\n  getStatMixins({\n    character,\n    characterOptions,\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    characterOptions?: CharacterOption[];\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) {\n    if (\n      character === undefined &&\n      characterOptions === undefined &&\n      artifactSetOptions === undefined\n    ) {\n      return this.statMixins;\n    }\n\n    const characterPassiveMixins = (\n      character ?? this.state.character\n    ).getPassiveStatMixins();\n\n    const artifactSetMixins = (artifactSets ?? this.state.artifactSets).flatMap(\n      (artifactSet) => artifactSet.getStatMixins()\n    );\n\n    const characterOptionMixins = (\n      characterOptions ?? this.state.characterOptions\n    )\n      .filter((option): option is CharacterOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.applyOnStats);\n\n    const artifactSetOptionMixins = (\n      artifactSetOptions ?? this.state.artifactSetOptions\n    )\n      .filter((option): option is ArtifactSetOption & IStatsApplicable =>\n        isStatsApplicable(option)\n      )\n      .map((option) => option.applyOnStats);\n\n    this.statMixins = characterPassiveMixins\n      .concat(artifactSetMixins)\n      .concat(characterOptionMixins)\n      .concat(artifactSetOptionMixins);\n\n    return this.statMixins;\n  }\n\n  getDamageModifier({\n    characterLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    modifierMixins,\n  }: {\n    characterLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    modifierMixins?: ModifierMixin[];\n  } = {}): DamageModifier {\n    const modifier: DamageModifier = {\n      characterLevel: characterLevel ?? this.state.character.level,\n      enemyLevel: enemyLevel ?? this.state.enemyLevel,\n      enemyDefReduction: this.state.enemyDefReduction,\n      enemyRes: enemyRes ?? this.state.enemyRes,\n      enemyResReduction: new Resistance(),\n      critType: critType ?? this.state.critType,\n      flatDmg: this.state.flatDmg,\n      reaction: reaction ?? this.state.reaction,\n      talentAttackLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n    };\n\n    // Apply modifier mixins\n    modifierMixins?.forEach((mixin) => mixin(modifier));\n\n    return modifier;\n  }\n\n  setAppState = <K extends keyof AppState>(\n    state: Pick<AppState, K>,\n    callback?: () => void\n  ) => {\n    this.setState(state, callback);\n  };\n\n  updateArtifactSetBonuses = ({\n    artifactSets,\n    artifactSetOptions,\n  }: {\n    artifactSets?: ArtifactSet[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const newArtifactSets = artifactSets ?? this.state.artifactSets;\n    this.artifactSetBonuses = newArtifactSets\n      .map((artifactSet) => artifactSet.stats)\n      .reduce((acc, stats) => {\n        Object.entries(stats).forEach(([stat, value]) => {\n          acc[stat] = value + (acc[stat] ?? 0);\n        });\n        return acc;\n      }, {} as Stats);\n\n    this.updateTotalStats({\n      artifactSets,\n      artifactSetBonuses: this.artifactSetBonuses,\n      artifactSetOptions,\n    });\n  };\n\n  updateTotalStats = ({\n    character,\n    weapon,\n    artifacts,\n    artifactSets,\n    artifactSetBonuses,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    weapon?: Weapon;\n    artifacts?: Artifact[];\n    artifactSets?: ArtifactSet[];\n    artifactSetBonuses?: Stats;\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const statMixins = this.getStatMixins({\n      character,\n      characterOptions,\n      artifactSets,\n      artifactSetOptions,\n    });\n\n    this.totalStats = getTotalStatsAt(\n      character ?? this.state.character,\n      weapon ?? this.state.weapon,\n      artifactSetBonuses ?? this.artifactSetBonuses,\n      artifacts ?? this.state.artifacts,\n      talentAttackLevel ?? this.state.talentAttackLevel,\n      talentSkillLevel ?? this.state.talentSkillLevel,\n      talentBurstLevel ?? this.state.talentBurstLevel,\n      statMixins\n    );\n\n    this.updateTalentValues({\n      character,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      characterOptions,\n      artifactSetOptions,\n    });\n  };\n\n  updateTalentValues = ({\n    character: newChar,\n    artifactSets,\n    talentAttackLevel,\n    talentSkillLevel,\n    talentBurstLevel,\n    enemyLevel,\n    enemyRes,\n    critType,\n    reaction,\n    characterOptions,\n    artifactSetOptions,\n  }: {\n    character?: Character;\n    artifactSets?: ArtifactSet[];\n    talentAttackLevel?: number;\n    talentSkillLevel?: number;\n    talentBurstLevel?: number;\n    enemyLevel?: number;\n    enemyRes?: Resistance;\n    critType?: CritType;\n    reaction?: Reaction;\n    characterOptions?: CharacterOption[];\n    artifactSetOptions?: ArtifactSetOption[];\n  }) => {\n    const character = newChar ?? this.state.character;\n\n    const modifierMixins = this.getModifierMixins({\n      character,\n      characterOptions,\n      artifactSets,\n      artifactSetOptions,\n    });\n\n    const damageModifer = this.getDamageModifier({\n      characterLevel: newChar?.level,\n      enemyLevel,\n      enemyRes,\n      critType,\n      reaction,\n      talentAttackLevel,\n      talentSkillLevel,\n      talentBurstLevel,\n      modifierMixins,\n    });\n\n    this.talentValues.attack = character.getTalentDamageAt({\n      type: TalentType.Attack,\n      talentLevel: talentAttackLevel ?? this.state.talentAttackLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n    this.talentValues.skill = character.getTalentDamageAt({\n      type: TalentType.Skill,\n      talentLevel: talentSkillLevel ?? this.state.talentSkillLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n    this.talentValues.burst = character.getTalentDamageAt({\n      type: TalentType.Burst,\n      talentLevel: talentBurstLevel ?? this.state.talentBurstLevel,\n      totalStats: this.totalStats,\n      modifier: damageModifer,\n    });\n  };\n\n  refreshApp = () => {\n    this.getStatMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      artifactSetOptions: this.state.artifactSetOptions,\n    });\n    this.getModifierMixins({\n      character: this.state.character,\n      characterOptions: this.state.characterOptions,\n      artifactSetOptions: this.state.artifactSetOptions,\n    });\n\n    this.updateArtifactSetBonuses({});\n    this.setState({});\n  };\n\n  render() {\n    return (\n      <div className='app'>\n        <InputColumn\n          appState={this.state}\n          setAppState={this.setAppState}\n          updateArtifactSetBonuses={this.updateArtifactSetBonuses}\n          updateTotalStats={this.updateTotalStats}\n          updateTalentValues={this.updateTalentValues}\n          refreshApp={this.refreshApp}\n        />\n        <ArtifactColumn\n          appState={this.state}\n          setAppState={this.setAppState}\n          updateTotalStats={this.updateTotalStats}\n        />\n        <StatColumn\n          appState={this.state}\n          totalStats={this.totalStats}\n          artifactSetBonuses={this.artifactSetBonuses}\n        />\n        <TalentColumn talentValues={this.talentValues} />\n        <Column></Column>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}