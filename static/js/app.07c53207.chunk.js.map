{"version":3,"sources":["js/Character.js","js/Weapon.js","js/Styles.js","App.js"],"names":["Character","name","this","dbBaseStatRef","a","async","get","doc","exists","baseStats","data","console","log","dbStatCurveRef","statCurveMapping","dbAscensionBonusRef","ascensionBonuses","forEach","id","weapon","weaponLevel","weaponHasAscended","dbWeaponStatCurveColRef","characterLevel","characterHasAscended","dbCharStatCurveColRef","undefined","getStatsAt","weaponStats","baseHp","baseAtk","baseDef","innateStats","InnateHp","InnateAtk","InnateDef","WeaponHp","WeaponAtk","WeaponDef","level","hasAscended","dbStatCurveColRef","isNaN","getStatCurvesAtLevel","charStatCurves","Object","entries","stat","curve","multiplier","ascensionLevel","bonus","toString","characterConverter","fromFirestore","snapshot","options","createCharacter","ref","collection","chararcter","character","setBaseStats","setStatCurveMapping","setAscensionBonuses","Weapon","type","rank","stats","weaponStatCurves","weaponConverter","createWeapon","styles","StyleSheet","create","container","display","flexDirection","alignItems","height","backgroundColor","inputColumn","padding","borderRightWidth","characterSelectRow","marginVertical","characterSelect","levelInputRow","levelInput","width","ascensionCheckRow","resultColumn","flexGrow","characterImage","resultText","App","renderCharacterList","sortedChars","characters","sort","name1","name2","localeCompare","View","style","Text","selectedValue","state","characterId","onValueChange","value","_","db","withConverter","characterHasInit","setState","Item","label","map","key","renderWeaponList","weaponId","weaponType","weapons","weaponDoc","keys","renderCharacterImage","imageUrl","Image","source","uri","setCharacterStats","getStatsWithWeaponAt","isWeaponAscended","isCharacterAscended","characterStats","hasCharacterParamsChanged","hasChanged","renderCharacterStats","Math","round","firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","hasLoaded","dbInitRef","initSnapshot","TextInput","defaultValue","onChangeText","text","parseInt","Checkbox","Component"],"mappings":"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","file":"static/js/app.07c53207.chunk.js","sourcesContent":["class Character {\n    constructor(name) {\n        this.name = name;\n    }\n\n    async setBaseStats(dbBaseStatRef) {\n        let doc = await dbBaseStatRef.get()\n        \n        if (doc.exists) {\n            this.baseStats = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Base stats for ${this.name} not found!`);\n        }\n    }\n\n    async setStatCurveMapping(dbStatCurveRef) {\n        let doc = await dbStatCurveRef.get()\n\n        if (doc.exists) {\n            this.statCurveMapping = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Stat curve mapping for ${this.name} not found!`);\n        }\n    }\n\n    async setAscensionBonuses(dbAscensionBonusRef) {\n        this.ascensionBonuses = {};\n        \n        let querySnapshot = await dbAscensionBonusRef.get()\n        querySnapshot.forEach(doc => {\n            // doc.data() is never undefined for query doc snapshots\n            this.ascensionBonuses[doc.id] = doc.data();\n        })\n    }\n\n    async getStatsWithWeaponAt(weapon, weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef, characterLevel, characterHasAscended, dbCharStatCurveColRef) {\n\n        let weaponStats;\n        if (weapon !== undefined) {\n            weaponStats = await weapon.getStatsAt(weaponLevel, weaponHasAscended, dbWeaponStatCurveColRef);\n        } else {\n            weaponStats = {\n                baseHp: null,\n                baseAtk: null,\n                baseDef: null,\n            };\n        }\n\n        let innateStats = await this.getStatsAt(characterLevel, characterHasAscended, dbCharStatCurveColRef);\n        \n        return {\n            InnateHp: innateStats.baseHp,\n            InnateAtk: innateStats.baseAtk,\n            InnateDef: innateStats.baseDef,\n            WeaponHp: weaponStats.baseHp,\n            WeaponAtk: weaponStats.baseAtk,\n            WeaponDef: weaponStats.baseDef,\n        };\n    }\n\n    // Returns an Object containing the character's innate total HP, Atk and Def, taking into account only their level and ascension\n    async getStatsAt(level, hasAscended, dbStatCurveColRef) {\n        if (isNaN(level) || level < 1 || level > 90) {\n            // Return nulls if level is invalid\n            let innateStats = {\n                baseHp: null,\n                baseAtk: null,\n                baseDef: null,\n            }\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n            \n            return innateStats;\n        } \n        // If getStatsAt has not been called before, this.level, this.hasAscended, and this.stats will be undefined\n        else if (level === this.level && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.innateStats;\n        } else {\n\n            // Initialize stats with character level 1 base stats\n            let innateStats = {\n                baseHp: this.baseStats.baseHp,\n                baseAtk: this.baseStats.baseAtk,\n                baseDef: this.baseStats.baseDef,\n            }\n\n            let charStatCurves = await this.getStatCurvesAtLevel(level, dbStatCurveColRef);\n\n            // Calculate stats from character level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = charStatCurves[curve];\n                innateStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from character ascension\n            let ascensionLevel;\n            if (level > 80 || (level == 80 && hasAscended)) {\n                ascensionLevel = 6;\n            } else if (level > 70 || (level == 70 && hasAscended)) {\n                ascensionLevel = 5;\n            } else if (level > 60 || (level == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (level > 50 || (level == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (level > 40 || (level == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (level > 20 || (level == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = this.ascensionBonuses[ascensionLevel];\n\n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    innateStats[stat] += bonus;\n                })\n            }\n\n            this.innateStats = innateStats;\n            this.level = level;\n            this.hasAscended = hasAscended;\n\n            return innateStats;\n        }\n    }\n\n    async getStatCurvesAtLevel(level, dbStatCurveColRef) {\n        let doc = await dbStatCurveColRef.doc(level.toString()).get();\n        if (doc.exists) {\n            return doc.data();\n        } else {\n            console.log(`WARN: Stat curves for level ${level} not found`);\n            return {};\n        }\n    }\n}\n\nexport const characterConverter = {\n    fromFirestore: async (snapshot, options) => {\n        const data = snapshot.data(options);\n        let chararcter = await createCharacter(\n            data.name,\n            snapshot.ref.collection('stats').doc('baseStats'),\n            snapshot.ref.collection('stats').doc('statCurves'), \n            snapshot.ref.collection('ascensionBonuses'),\n        );\n\n        return chararcter;\n    }\n}\n\nasync function createCharacter(name, dbBaseStatRef, dbStatCurveRef, dbAscensionBonusRef) {\n    let character = new Character(name);\n    await character.setBaseStats(dbBaseStatRef);\n    await character.setStatCurveMapping(dbStatCurveRef);\n    await character.setAscensionBonuses(dbAscensionBonusRef);\n\n    return character;\n}\n\n","class Weapon {\n    constructor(name, type, rank) {\n        this.name = name;\n        this.type = type;\n        this.rank = rank;\n    }\n\n    async setBaseStats(dbBaseStatRef) {\n        let doc = await dbBaseStatRef.get()\n        \n        if (doc.exists) {\n            this.baseStats = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Base stats for ${this.name} not found!`);\n        }\n    }\n\n    async setStatCurveMapping(dbStatCurveRef) {\n        let doc = await dbStatCurveRef.get()\n\n        if (doc.exists) {\n            this.statCurveMapping = doc.data();\n        } else {\n            // doc.data() is undefined\n            console.log(`WARN: Stat curve mapping for ${this.name} not found!`);\n        }\n    }\n\n    async setAscensionBonuses(dbAscensionBonusRef) {\n        this.ascensionBonuses = {};\n        \n        let querySnapshot = await dbAscensionBonusRef.get()\n        querySnapshot.forEach(doc => {\n            // doc.data() is never undefined for query doc snapshots\n            this.ascensionBonuses[doc.id] = doc.data();\n        })\n    }\n\n    // Returns an Object containing the weapons's HP, Atk and Def, taking into account only its level and ascension\n    async getStatsAt(weaponLevel, hasAscended, dbStatCurveColRef) {\n        if (isNaN(weaponLevel) || weaponLevel < 1 || (this.rank <= 2 && weaponLevel > 70) || weaponLevel > 90) {\n            // Return nulls if weapon level is invalid\n            let weaponStats = {\n                baseHp: null,\n                baseAtk: null,\n                baseDef: null,\n            }\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n        // If getStatsAt has not been called before, this.weaponLevel, this.hasAscended, and this.stats will be undefined\n        else if (weaponLevel === this.weaponLevel && hasAscended === this.hasAscended) {\n            // Don't recalculate stats if it has been calculated with the same parameters before\n            return this.stats;\n        } else {\n\n            // Level 1 weapon stats\n            let weaponStats = {\n                baseHp: 0,\n                baseAtk: this.baseStats.baseAtk,\n                baseDef: 0,\n            };\n\n            let weaponStatCurves = await this.getStatCurvesAtLevel(weaponLevel, dbStatCurveColRef);\n\n            // Calculate stats from weapon level\n            Object.entries(this.statCurveMapping).forEach(([stat, curve]) => {\n                let multiplier = weaponStatCurves[curve];\n                weaponStats[stat] *= multiplier;\n            });\n\n            // Calculate stats from weapon ascension\n            let ascensionLevel;\n            // Only 3-star and above weapons can be ascended beyond level 70\n            if (this.rank > 2 && (weaponLevel > 80 || (weaponLevel == 80 && hasAscended))) {\n                ascensionLevel = 6;\n            } else if (this.rank > 2 && (weaponLevel > 70 || (weaponLevel == 70 && hasAscended))) {\n                ascensionLevel = 5;\n            } else if (weaponLevel > 60 || (weaponLevel == 60 && hasAscended)) {\n                ascensionLevel = 4;\n            } else if (weaponLevel > 50 || (weaponLevel == 50 && hasAscended)) {\n                ascensionLevel = 3;\n            } else if (weaponLevel > 40 || (weaponLevel == 40 && hasAscended)) {\n                ascensionLevel = 2;\n            } else if (weaponLevel > 20 || (weaponLevel == 20 && hasAscended)) {\n                ascensionLevel = 1;\n            } else {\n                ascensionLevel = 0;\n            }\n            let ascensionBonuses = this.ascensionBonuses[ascensionLevel];\n            \n            if (ascensionBonuses !== undefined) {\n                Object.entries(ascensionBonuses).forEach(([stat, bonus]) => {\n                    weaponStats[stat] += bonus;\n                })\n            }\n\n            this.stats = weaponStats;\n            this.weaponLevel = weaponLevel;\n            this.hasAscended = hasAscended;\n\n            return weaponStats;\n        }\n    }\n\n    async getStatCurvesAtLevel(level, dbStatCurveColRef) {\n        let doc = await dbStatCurveColRef.doc(level.toString()).get();\n        if (doc.exists) {\n            return doc.data();\n        } else {\n            console.log(`WARN: Stat curves for level ${level} not found`);\n            return {};\n        }\n    }\n}\n\nexport const weaponConverter = {\n    fromFirestore: async (snapshot, options) => {\n        const data = snapshot.data(options);\n        let weapon = await createWeapon(\n            data.name,\n            data.type,\n            data.rank,\n            snapshot.ref.collection('stats').doc('baseStats'),\n            snapshot.ref.collection('stats').doc('statCurves'), \n            snapshot.ref.collection('ascensionBonuses'),\n        );\n\n        return weapon;\n    }\n}\n\nasync function createWeapon(name, type, rank, dbBaseStatRef, dbStatCurveRef, dbAscensionBonusRef) {\n    let weapon = new Weapon(name, type, rank);\n    await weapon.setBaseStats(dbBaseStatRef);\n    await weapon.setStatCurveMapping(dbStatCurveRef);\n    await weapon.setAscensionBonuses(dbAscensionBonusRef);\n\n    return weapon;\n}","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n\n        height: '100%',\n\n        backgroundColor: '#fff',\n    },\n\n    inputColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n\n        padding: '1%',\n\n        borderRightWidth: 1,\n\n        backgroundColor: '#ccc',\n    },\n\n    characterSelectRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    characterSelect: {\n\n    },\n\n    levelInputRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    levelInput: {\n        width: '2em',\n\n    },\n\n    ascensionCheckRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n\n        marginVertical: '0.25em',\n    },\n\n    resultColumn: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n\n        padding: '1%',\n\n        backgroundColor: '#eee',\n    },\n\n    characterImage: {\n        marginVertical: '0.25em',\n    },\n\n    resultText: {\n        marginVertical: '0.25em',\n    }\n});\n\nexport default styles;","import { Picker } from '@react-native-picker/picker';\nimport Checkbox from 'expo-checkbox';\nimport React, { Component } from 'react';\nimport { Image, Text, TextInput, View } from 'react-native';\n\nimport { characterConverter } from './js/Character.js';\nimport { weaponConverter } from './js/Weapon.js';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { FIREBASE_APIKEY, FIREBASE_AUTHDOMAIN, FIREBASE_PROJECTID, FIREBASE_STORAGEBUCKET, FIREBASE_MESSAGINGSENDERID, FIREBASE_APPID } from '@env';\n\nimport styles from './js/Styles.js';\n\n\nexport default class App extends Component {\n\n  constructor() {\n    super();\n\n    // Initialize Firebase\n    const firebaseConfig = {\n      apiKey: FIREBASE_APIKEY,\n      authDomain: FIREBASE_AUTHDOMAIN,\n      projectId: FIREBASE_PROJECTID,\n      storageBucket: FIREBASE_STORAGEBUCKET,\n      messagingSenderId: FIREBASE_MESSAGINGSENDERID,\n      appId: FIREBASE_APPID,\n    }\n    if (!firebase.apps.length) {\n      firebase.initializeApp(firebaseConfig);\n    }\n\n    // Initialize Firestore\n    this.db = firebase.firestore();\n\n    this.state = {\n      hasLoaded: false,\n\n      characterId: undefined,\n      character: undefined,\n      characterHasInit: false,\n      characterLevel: 1,\n      isCharacterAscended: false,\n\n      weaponId: undefined,\n      weapon: undefined,\n      weaponLevel: 1,\n      isWeaponAscended: false,\n\n      characterStats: undefined,\n    }\n  }\n\n  // Called when component is mounted for the first time\n  async componentDidMount() {\n    // Get ref to stat curves\n    this.dbCharStatCurveColRef = this.db.collection('characterStatCurves');\n    this.dbWeaponStatCurveColRef = this.db.collection('weaponStatCurves');\n\n    // Get inititialization data (e.g. character and weapon list)\n    let dbInitRef = this.db.collection('init').doc('lists');\n    let initSnapshot = await dbInitRef.get();\n    if (initSnapshot.exists) {\n      let doc = initSnapshot.data();\n      this.characters = doc.characters; // Array of character names\n      this.weapons = doc.weapons;   // Object where key: weapon name and value: weapon type\n      this.setState({ hasLoaded: true })\n    } else {\n      console.log('WARN: Initialization data not found. The page will not be able to load.');\n      return;\n    }\n  }\n\n  renderCharacterList = () => {\n    let sortedChars = this.characters.sort((name1, name2) => name1.localeCompare(name2));\n    \n    return (\n      <View style={styles.characterSelectRow}>\n        <Text>Character: </Text>\n        <Picker \n          style={styles.characterSelect}\n          selectedValue={this.state.characterId}\n          onValueChange={async (value, _) => {\n            if (value != 0) {\n              let doc = await this.db.collection('characters').doc(value)\n                .withConverter(characterConverter)\n                .get()\n\n              if (doc.exists) {\n                this.setState({\n                  characterId: value,\n                  character: await doc.data(),\n                  characterHasInit: true,\n                });\n              } else {\n                console.log(`WARN: Could not find data for character ${value}`);\n              }\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {sortedChars.map(name => <Picker.Item label={name} value={name} key={name} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderWeaponList = () => {\n    return (\n      <View style={styles.characterSelectRow}>\n        <Text>Weapon: </Text>\n        <Picker\n          style={styles.characterSelect}\n          selectedValue={this.state.weaponId}\n          onValueChange={async (value, _) => {\n            if (value != 0) {\n              let weaponType = this.weapons[value];\n              let weaponDoc = await this.db.collection('weapons').doc(weaponType).collection(weaponType + 's').doc(value)\n                .withConverter(weaponConverter)\n                .get();\n\n              if (weaponDoc.exists) {\n                this.setState({\n                  weaponId: value,\n                  weapon: await weaponDoc.data(),\n                });\n              } else {\n                console.log(`WARN: Could not find data for weapon ${value}`);\n              }\n            }\n          }}\n        >\n          <Picker.Item label='' value={0} />\n          {Object.keys(this.weapons).map(name => <Picker.Item label={name} value={name} key={name} />)}\n        </Picker>\n      </View>\n    )\n  }\n\n  renderCharacterImage = () => {\n    let imageUrl = `https://rerollcdn.com/GENSHIN/Characters/${this.state.character.name}.png`\n    return (\n      <Image style={styles.characterImage} source={{uri: imageUrl, width: 70, height: 70}} />\n    )\n  }\n\n  setCharacterStats = async () => {\n    let stats = await this.state.character.getStatsWithWeaponAt(this.state.weapon, this.state.weaponLevel, this.state.isWeaponAscended, this.dbWeaponStatCurveColRef, this.state.characterLevel, this.state.isCharacterAscended, this.dbCharStatCurveColRef);\n    this.setState({ characterStats: stats });\n  }\n\n\n  hasCharacterParamsChanged = () => {\n    let hasChanged = false;\n\n    if (this.state.character !== undefined) {\n      hasChanged = hasChanged || ((!isNaN(this.state.characterLevel) || !isNaN(this.state.character.level)) && this.state.characterLevel != this.state.character.level) || (this.state.isCharacterAscended != this.state.character.hasAscended);\n    }\n\n    if (this.state.weapon !== undefined) {\n      hasChanged = hasChanged || ((!isNaN(this.state.weaponLevel) || !isNaN(this.state.weapon.weaponLevel)) && this.state.weaponLevel != this.state.weapon.weaponLevel) || (this.state.isWeaponAscended != this.state.weapon.hasAscended);\n    }\n    \n    return hasChanged;\n  }\n\n  renderCharacterStats = () => {\n    if (this.hasCharacterParamsChanged()) {\n      this.setCharacterStats();\n    }\n\n    return (\n      <View>\n        {/* Render character stats */ }\n        {\n          this.state.character ? (\n            <View>\n              {this.renderCharacterImage()}\n              <Text style={styles.resultText}>Selected character: {this.state.character ? this.state.character.name : ''}</Text>\n              <Text style={styles.resultText}>Character HP: {(this.state.characterStats && this.state.characterStats.InnateHp != null) ? Math.round(this.state.characterStats.InnateHp) : '-'}</Text>\n              <Text style={styles.resultText}>Character ATK: {(this.state.characterStats && this.state.characterStats.InnateAtk != null) ? Math.round(this.state.characterStats.InnateAtk) : '-'}</Text>\n              <Text style={styles.resultText}>Character DEF: {(this.state.characterStats && this.state.characterStats.InnateDef != null) ? Math.round(this.state.characterStats.InnateDef) : '-'}</Text>\n            </View>\n          ) : null\n        }\n        \n        <br/>\n\n        {/* Render weapon stats */}\n        {\n          this.state.weapon ? (\n            <View>\n              <Text style={styles.resultText}>Selected weapon: {this.state.weapon ? this.state.weapon.name : ''}</Text>\n              <Text style={styles.resultText}>Weapon HP: {(this.state.characterStats && this.state.characterStats.WeaponHp != null) ? Math.round(this.state.characterStats.WeaponHp) : '-'}</Text>\n              <Text style={styles.resultText}>Weapon ATK: {(this.state.characterStats && this.state.characterStats.WeaponAtk != null) ? Math.round(this.state.characterStats.WeaponAtk) : '-'}</Text>\n              <Text style={styles.resultText}>Weapon DEF: {(this.state.characterStats && this.state.characterStats.WeaponDef != null) ? Math.round(this.state.characterStats.WeaponDef) : '-'}</Text>\n            </View>\n          ) : null\n        }\n      </View>\n    )\n  }\n\n  render() {\n    if (this.state.hasLoaded) {\n      return (\n        <View style={styles.container}>\n          <View style={styles.inputColumn}>\n            {this.renderCharacterList()}\n\n            <View style={styles.levelInputRow}>\n              <Text>Level: </Text>\n              <TextInput \n                style={styles.levelInput}\n                defaultValue={this.state.characterLevel} \n                onChangeText={text => {\n                  this.setState({characterLevel: parseInt(text)});\n                }}\n              />\n            </View>\n\n            <View style={styles.ascensionCheckRow}>\n              <Text>Ascended? </Text>\n              <Checkbox\n                onValueChange={value => this.setState({isCharacterAscended: value})}\n                value={this.state.isCharacterAscended}\n              />\n            </View>\n\n            <br/>\n\n            {this.renderWeaponList()}\n\n            <View style={styles.levelInputRow}>\n              <Text>Level: </Text>\n              <TextInput \n                style={styles.levelInput}\n                defaultValue={this.state.weaponLevel} \n                onChangeText={text => {\n                  this.setState({weaponLevel: parseInt(text)});\n                }}\n              />\n            </View>\n\n            <View style={styles.ascensionCheckRow}>\n              <Text>Ascended? </Text>\n              <Checkbox\n                onValueChange={value => this.setState({isWeaponAscended: value})}\n                value={this.state.isWeaponAscended}\n              />\n            </View>\n\n          </View>\n\n          <View style={styles.resultColumn}>\n            {this.renderCharacterStats()}\n          </View>\n\n        </View>\n      )\n    } else {\n      return (\n        <View style={styles.container}>\n          <Text>Loading...</Text>\n        </View>\n      )\n    }\n  }\n}\n\n\n"],"sourceRoot":""}